# coding: utf-8

"""
    Healthbot APIs

    API interface for Healthbot application  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: healthbot-hackers@juniper.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from jnpr.healthbot.swagger.models.devicegroup_schema_authentication_password import DevicegroupSchemaAuthenticationPassword  # noqa: F401,E501
from jnpr.healthbot.swagger.models.devicegroup_schema_authentication_ssl import DevicegroupSchemaAuthenticationSsl  # noqa: F401,E501


class DeviceSchemaAuthentication(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'password': 'DevicegroupSchemaAuthenticationPassword',
        'ssl': 'DevicegroupSchemaAuthenticationSsl'
    }

    attribute_map = {
        'password': 'password',
        'ssl': 'ssl'
    }

    def __init__(self, password=None, ssl=None):  # noqa: E501
        """DeviceSchemaAuthentication - a model defined in Swagger"""  # noqa: E501

        self._password = None
        self._ssl = None
        self.discriminator = None

        if password is not None:
            self.password = password
        if ssl is not None:
            self.ssl = ssl

    @property
    def password(self):
        """Gets the password of this DeviceSchemaAuthentication.  # noqa: E501


        :return: The password of this DeviceSchemaAuthentication.  # noqa: E501
        :rtype: DevicegroupSchemaAuthenticationPassword
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this DeviceSchemaAuthentication.


        :param password: The password of this DeviceSchemaAuthentication.  # noqa: E501
        :type: DevicegroupSchemaAuthenticationPassword
        """

        self._password = password

    @property
    def ssl(self):
        """Gets the ssl of this DeviceSchemaAuthentication.  # noqa: E501


        :return: The ssl of this DeviceSchemaAuthentication.  # noqa: E501
        :rtype: DevicegroupSchemaAuthenticationSsl
        """
        return self._ssl

    @ssl.setter
    def ssl(self, ssl):
        """Sets the ssl of this DeviceSchemaAuthentication.


        :param ssl: The ssl of this DeviceSchemaAuthentication.  # noqa: E501
        :type: DevicegroupSchemaAuthenticationSsl
        """

        self._ssl = ssl

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceSchemaAuthentication):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
