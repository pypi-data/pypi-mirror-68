# coding: utf-8

"""
    NeoLoad API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class SLAElementDefinition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'element_id': 'str',
        'name': 'str',
        'category': 'str',
        'userpath': 'str',
        'parent': 'str'
    }

    attribute_map = {
        'element_id': 'elementID',
        'name': 'name',
        'category': 'category',
        'userpath': 'userpath',
        'parent': 'parent'
    }

    def __init__(self, element_id=None, name=None, category=None, userpath=None, parent=None, local_vars_configuration=None):  # noqa: E501
        """SLAElementDefinition - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._element_id = None
        self._name = None
        self._category = None
        self._userpath = None
        self._parent = None
        self.discriminator = None

        if element_id is not None:
            self.element_id = element_id
        if name is not None:
            self.name = name
        if category is not None:
            self.category = category
        if userpath is not None:
            self.userpath = userpath
        if parent is not None:
            self.parent = parent

    @property
    def element_id(self):
        """Gets the element_id of this SLAElementDefinition.  # noqa: E501

        Unique identifier of the element.  # noqa: E501

        :return: The element_id of this SLAElementDefinition.  # noqa: E501
        :rtype: str
        """
        return self._element_id

    @element_id.setter
    def element_id(self, element_id):
        """Sets the element_id of this SLAElementDefinition.

        Unique identifier of the element.  # noqa: E501

        :param element_id: The element_id of this SLAElementDefinition.  # noqa: E501
        :type: str
        """

        self._element_id = element_id

    @property
    def name(self):
        """Gets the name of this SLAElementDefinition.  # noqa: E501

        Name of the element.  # noqa: E501

        :return: The name of this SLAElementDefinition.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SLAElementDefinition.

        Name of the element.  # noqa: E501

        :param name: The name of this SLAElementDefinition.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def category(self):
        """Gets the category of this SLAElementDefinition.  # noqa: E501


        :return: The category of this SLAElementDefinition.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this SLAElementDefinition.


        :param category: The category of this SLAElementDefinition.  # noqa: E501
        :type: str
        """
        allowed_values = ["TRANSACTION", "PAGE", "REQUEST"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and category not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"  # noqa: E501
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def userpath(self):
        """Gets the userpath of this SLAElementDefinition.  # noqa: E501

        The name of the user path in which the element is.  # noqa: E501

        :return: The userpath of this SLAElementDefinition.  # noqa: E501
        :rtype: str
        """
        return self._userpath

    @userpath.setter
    def userpath(self, userpath):
        """Sets the userpath of this SLAElementDefinition.

        The name of the user path in which the element is.  # noqa: E501

        :param userpath: The userpath of this SLAElementDefinition.  # noqa: E501
        :type: str
        """

        self._userpath = userpath

    @property
    def parent(self):
        """Gets the parent of this SLAElementDefinition.  # noqa: E501

        The parent name of the element.  # noqa: E501

        :return: The parent of this SLAElementDefinition.  # noqa: E501
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this SLAElementDefinition.

        The parent name of the element.  # noqa: E501

        :param parent: The parent of this SLAElementDefinition.  # noqa: E501
        :type: str
        """

        self._parent = parent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SLAElementDefinition):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SLAElementDefinition):
            return True

        return self.to_dict() != other.to_dict()
