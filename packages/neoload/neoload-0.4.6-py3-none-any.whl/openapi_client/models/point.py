# coding: utf-8

"""
    NeoLoad API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Point(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        '_from': 'int',
        'to': 'int',
        'avg_duration': 'float',
        'min_duration': 'float',
        'max_duration': 'float',
        'count': 'float',
        'throughput': 'float',
        'elements_per_second': 'float',
        'errors': 'float',
        'errors_per_second': 'float',
        'error_rate': 'float',
        'avg_ttfb': 'float',
        'min_ttfb': 'float',
        'max_ttfb': 'float',
        'avg': 'float'
    }

    attribute_map = {
        '_from': 'from',
        'to': 'to',
        'avg_duration': 'AVG_DURATION',
        'min_duration': 'MIN_DURATION',
        'max_duration': 'MAX_DURATION',
        'count': 'COUNT',
        'throughput': 'THROUGHPUT',
        'elements_per_second': 'ELEMENTS_PER_SECOND',
        'errors': 'ERRORS',
        'errors_per_second': 'ERRORS_PER_SECOND',
        'error_rate': 'ERROR_RATE',
        'avg_ttfb': 'AVG_TTFB',
        'min_ttfb': 'MIN_TTFB',
        'max_ttfb': 'MAX_TTFB',
        'avg': 'AVG'
    }

    def __init__(self, _from=None, to=None, avg_duration=None, min_duration=None, max_duration=None, count=None, throughput=None, elements_per_second=None, errors=None, errors_per_second=None, error_rate=None, avg_ttfb=None, min_ttfb=None, max_ttfb=None, avg=None, local_vars_configuration=None):  # noqa: E501
        """Point - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self.__from = None
        self._to = None
        self._avg_duration = None
        self._min_duration = None
        self._max_duration = None
        self._count = None
        self._throughput = None
        self._elements_per_second = None
        self._errors = None
        self._errors_per_second = None
        self._error_rate = None
        self._avg_ttfb = None
        self._min_ttfb = None
        self._max_ttfb = None
        self._avg = None
        self.discriminator = None

        if _from is not None:
            self._from = _from
        if to is not None:
            self.to = to
        if avg_duration is not None:
            self.avg_duration = avg_duration
        if min_duration is not None:
            self.min_duration = min_duration
        if max_duration is not None:
            self.max_duration = max_duration
        if count is not None:
            self.count = count
        if throughput is not None:
            self.throughput = throughput
        if elements_per_second is not None:
            self.elements_per_second = elements_per_second
        if errors is not None:
            self.errors = errors
        if errors_per_second is not None:
            self.errors_per_second = errors_per_second
        if error_rate is not None:
            self.error_rate = error_rate
        if avg_ttfb is not None:
            self.avg_ttfb = avg_ttfb
        if min_ttfb is not None:
            self.min_ttfb = min_ttfb
        if max_ttfb is not None:
            self.max_ttfb = max_ttfb
        if avg is not None:
            self.avg = avg

    @property
    def _from(self):
        """Gets the _from of this Point.  # noqa: E501


        :return: The _from of this Point.  # noqa: E501
        :rtype: int
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this Point.


        :param _from: The _from of this Point.  # noqa: E501
        :type: int
        """

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this Point.  # noqa: E501


        :return: The to of this Point.  # noqa: E501
        :rtype: int
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this Point.


        :param to: The to of this Point.  # noqa: E501
        :type: int
        """

        self._to = to

    @property
    def avg_duration(self):
        """Gets the avg_duration of this Point.  # noqa: E501


        :return: The avg_duration of this Point.  # noqa: E501
        :rtype: float
        """
        return self._avg_duration

    @avg_duration.setter
    def avg_duration(self, avg_duration):
        """Sets the avg_duration of this Point.


        :param avg_duration: The avg_duration of this Point.  # noqa: E501
        :type: float
        """

        self._avg_duration = avg_duration

    @property
    def min_duration(self):
        """Gets the min_duration of this Point.  # noqa: E501


        :return: The min_duration of this Point.  # noqa: E501
        :rtype: float
        """
        return self._min_duration

    @min_duration.setter
    def min_duration(self, min_duration):
        """Sets the min_duration of this Point.


        :param min_duration: The min_duration of this Point.  # noqa: E501
        :type: float
        """

        self._min_duration = min_duration

    @property
    def max_duration(self):
        """Gets the max_duration of this Point.  # noqa: E501


        :return: The max_duration of this Point.  # noqa: E501
        :rtype: float
        """
        return self._max_duration

    @max_duration.setter
    def max_duration(self, max_duration):
        """Sets the max_duration of this Point.


        :param max_duration: The max_duration of this Point.  # noqa: E501
        :type: float
        """

        self._max_duration = max_duration

    @property
    def count(self):
        """Gets the count of this Point.  # noqa: E501


        :return: The count of this Point.  # noqa: E501
        :rtype: float
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this Point.


        :param count: The count of this Point.  # noqa: E501
        :type: float
        """

        self._count = count

    @property
    def throughput(self):
        """Gets the throughput of this Point.  # noqa: E501


        :return: The throughput of this Point.  # noqa: E501
        :rtype: float
        """
        return self._throughput

    @throughput.setter
    def throughput(self, throughput):
        """Sets the throughput of this Point.


        :param throughput: The throughput of this Point.  # noqa: E501
        :type: float
        """

        self._throughput = throughput

    @property
    def elements_per_second(self):
        """Gets the elements_per_second of this Point.  # noqa: E501


        :return: The elements_per_second of this Point.  # noqa: E501
        :rtype: float
        """
        return self._elements_per_second

    @elements_per_second.setter
    def elements_per_second(self, elements_per_second):
        """Sets the elements_per_second of this Point.


        :param elements_per_second: The elements_per_second of this Point.  # noqa: E501
        :type: float
        """

        self._elements_per_second = elements_per_second

    @property
    def errors(self):
        """Gets the errors of this Point.  # noqa: E501


        :return: The errors of this Point.  # noqa: E501
        :rtype: float
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this Point.


        :param errors: The errors of this Point.  # noqa: E501
        :type: float
        """

        self._errors = errors

    @property
    def errors_per_second(self):
        """Gets the errors_per_second of this Point.  # noqa: E501


        :return: The errors_per_second of this Point.  # noqa: E501
        :rtype: float
        """
        return self._errors_per_second

    @errors_per_second.setter
    def errors_per_second(self, errors_per_second):
        """Sets the errors_per_second of this Point.


        :param errors_per_second: The errors_per_second of this Point.  # noqa: E501
        :type: float
        """

        self._errors_per_second = errors_per_second

    @property
    def error_rate(self):
        """Gets the error_rate of this Point.  # noqa: E501


        :return: The error_rate of this Point.  # noqa: E501
        :rtype: float
        """
        return self._error_rate

    @error_rate.setter
    def error_rate(self, error_rate):
        """Sets the error_rate of this Point.


        :param error_rate: The error_rate of this Point.  # noqa: E501
        :type: float
        """

        self._error_rate = error_rate

    @property
    def avg_ttfb(self):
        """Gets the avg_ttfb of this Point.  # noqa: E501


        :return: The avg_ttfb of this Point.  # noqa: E501
        :rtype: float
        """
        return self._avg_ttfb

    @avg_ttfb.setter
    def avg_ttfb(self, avg_ttfb):
        """Sets the avg_ttfb of this Point.


        :param avg_ttfb: The avg_ttfb of this Point.  # noqa: E501
        :type: float
        """

        self._avg_ttfb = avg_ttfb

    @property
    def min_ttfb(self):
        """Gets the min_ttfb of this Point.  # noqa: E501


        :return: The min_ttfb of this Point.  # noqa: E501
        :rtype: float
        """
        return self._min_ttfb

    @min_ttfb.setter
    def min_ttfb(self, min_ttfb):
        """Sets the min_ttfb of this Point.


        :param min_ttfb: The min_ttfb of this Point.  # noqa: E501
        :type: float
        """

        self._min_ttfb = min_ttfb

    @property
    def max_ttfb(self):
        """Gets the max_ttfb of this Point.  # noqa: E501


        :return: The max_ttfb of this Point.  # noqa: E501
        :rtype: float
        """
        return self._max_ttfb

    @max_ttfb.setter
    def max_ttfb(self, max_ttfb):
        """Sets the max_ttfb of this Point.


        :param max_ttfb: The max_ttfb of this Point.  # noqa: E501
        :type: float
        """

        self._max_ttfb = max_ttfb

    @property
    def avg(self):
        """Gets the avg of this Point.  # noqa: E501


        :return: The avg of this Point.  # noqa: E501
        :rtype: float
        """
        return self._avg

    @avg.setter
    def avg(self, avg):
        """Sets the avg of this Point.


        :param avg: The avg of this Point.  # noqa: E501
        :type: float
        """

        self._avg = avg

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Point):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Point):
            return True

        return self.to_dict() != other.to_dict()
