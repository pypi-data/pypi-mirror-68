# coding: utf-8

"""
    NeoLoad API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class TestRasterMultiConfiguration(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'width': 'int',
        'height': 'int',
        'title': 'str',
        'raster_type': 'str',
        'x_axis_label': 'str',
        'y_axis_label': 'str',
        'legend': 'bool',
        'multi_y_axis': 'bool',
        'theme': 'str',
        'test_ids': 'dict(str, TestIdDefinition)'
    }

    attribute_map = {
        'width': 'width',
        'height': 'height',
        'title': 'title',
        'raster_type': 'rasterType',
        'x_axis_label': 'xAxisLabel',
        'y_axis_label': 'yAxisLabel',
        'legend': 'legend',
        'multi_y_axis': 'multiYAxis',
        'theme': 'theme',
        'test_ids': 'testIds'
    }

    def __init__(self, width=None, height=None, title=None, raster_type=None, x_axis_label=None, y_axis_label=None, legend=None, multi_y_axis=None, theme=None, test_ids=None, local_vars_configuration=None):  # noqa: E501
        """TestRasterMultiConfiguration - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._width = None
        self._height = None
        self._title = None
        self._raster_type = None
        self._x_axis_label = None
        self._y_axis_label = None
        self._legend = None
        self._multi_y_axis = None
        self._theme = None
        self._test_ids = None
        self.discriminator = None

        if width is not None:
            self.width = width
        if height is not None:
            self.height = height
        if title is not None:
            self.title = title
        if raster_type is not None:
            self.raster_type = raster_type
        if x_axis_label is not None:
            self.x_axis_label = x_axis_label
        if y_axis_label is not None:
            self.y_axis_label = y_axis_label
        if legend is not None:
            self.legend = legend
        if multi_y_axis is not None:
            self.multi_y_axis = multi_y_axis
        if theme is not None:
            self.theme = theme
        if test_ids is not None:
            self.test_ids = test_ids

    @property
    def width(self):
        """Gets the width of this TestRasterMultiConfiguration.  # noqa: E501

        The width of the generated graph.  # noqa: E501

        :return: The width of this TestRasterMultiConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this TestRasterMultiConfiguration.

        The width of the generated graph.  # noqa: E501

        :param width: The width of this TestRasterMultiConfiguration.  # noqa: E501
        :type: int
        """

        self._width = width

    @property
    def height(self):
        """Gets the height of this TestRasterMultiConfiguration.  # noqa: E501

        The height of the generated graph.  # noqa: E501

        :return: The height of this TestRasterMultiConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this TestRasterMultiConfiguration.

        The height of the generated graph.  # noqa: E501

        :param height: The height of this TestRasterMultiConfiguration.  # noqa: E501
        :type: int
        """

        self._height = height

    @property
    def title(self):
        """Gets the title of this TestRasterMultiConfiguration.  # noqa: E501

        The main title of the generated graph.  # noqa: E501

        :return: The title of this TestRasterMultiConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this TestRasterMultiConfiguration.

        The main title of the generated graph.  # noqa: E501

        :param title: The title of this TestRasterMultiConfiguration.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def raster_type(self):
        """Gets the raster_type of this TestRasterMultiConfiguration.  # noqa: E501

        The type of the generated graph. Can be PNG, TIFF or JPEG. Default is PNG.  # noqa: E501

        :return: The raster_type of this TestRasterMultiConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._raster_type

    @raster_type.setter
    def raster_type(self, raster_type):
        """Sets the raster_type of this TestRasterMultiConfiguration.

        The type of the generated graph. Can be PNG, TIFF or JPEG. Default is PNG.  # noqa: E501

        :param raster_type: The raster_type of this TestRasterMultiConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["PNG", "TIFF", "JPEG"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and raster_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `raster_type` ({0}), must be one of {1}"  # noqa: E501
                .format(raster_type, allowed_values)
            )

        self._raster_type = raster_type

    @property
    def x_axis_label(self):
        """Gets the x_axis_label of this TestRasterMultiConfiguration.  # noqa: E501

        The xAxis label of the generated graph.  # noqa: E501

        :return: The x_axis_label of this TestRasterMultiConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._x_axis_label

    @x_axis_label.setter
    def x_axis_label(self, x_axis_label):
        """Sets the x_axis_label of this TestRasterMultiConfiguration.

        The xAxis label of the generated graph.  # noqa: E501

        :param x_axis_label: The x_axis_label of this TestRasterMultiConfiguration.  # noqa: E501
        :type: str
        """

        self._x_axis_label = x_axis_label

    @property
    def y_axis_label(self):
        """Gets the y_axis_label of this TestRasterMultiConfiguration.  # noqa: E501

        The yAxis label of the generated graph.  # noqa: E501

        :return: The y_axis_label of this TestRasterMultiConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._y_axis_label

    @y_axis_label.setter
    def y_axis_label(self, y_axis_label):
        """Sets the y_axis_label of this TestRasterMultiConfiguration.

        The yAxis label of the generated graph.  # noqa: E501

        :param y_axis_label: The y_axis_label of this TestRasterMultiConfiguration.  # noqa: E501
        :type: str
        """

        self._y_axis_label = y_axis_label

    @property
    def legend(self):
        """Gets the legend of this TestRasterMultiConfiguration.  # noqa: E501

        If true the legend is displayed. Default is true.  # noqa: E501

        :return: The legend of this TestRasterMultiConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._legend

    @legend.setter
    def legend(self, legend):
        """Sets the legend of this TestRasterMultiConfiguration.

        If true the legend is displayed. Default is true.  # noqa: E501

        :param legend: The legend of this TestRasterMultiConfiguration.  # noqa: E501
        :type: bool
        """

        self._legend = legend

    @property
    def multi_y_axis(self):
        """Gets the multi_y_axis of this TestRasterMultiConfiguration.  # noqa: E501

        If true, display one axis per serie. Default is false.  # noqa: E501

        :return: The multi_y_axis of this TestRasterMultiConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._multi_y_axis

    @multi_y_axis.setter
    def multi_y_axis(self, multi_y_axis):
        """Sets the multi_y_axis of this TestRasterMultiConfiguration.

        If true, display one axis per serie. Default is false.  # noqa: E501

        :param multi_y_axis: The multi_y_axis of this TestRasterMultiConfiguration.  # noqa: E501
        :type: bool
        """

        self._multi_y_axis = multi_y_axis

    @property
    def theme(self):
        """Gets the theme of this TestRasterMultiConfiguration.  # noqa: E501

        The theme of the graph. Default is TRANSPARENT.  # noqa: E501

        :return: The theme of this TestRasterMultiConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._theme

    @theme.setter
    def theme(self, theme):
        """Sets the theme of this TestRasterMultiConfiguration.

        The theme of the graph. Default is TRANSPARENT.  # noqa: E501

        :param theme: The theme of this TestRasterMultiConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["DARK", "LIGHT", "TRANSPARENT"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and theme not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `theme` ({0}), must be one of {1}"  # noqa: E501
                .format(theme, allowed_values)
            )

        self._theme = theme

    @property
    def test_ids(self):
        """Gets the test_ids of this TestRasterMultiConfiguration.  # noqa: E501


        :return: The test_ids of this TestRasterMultiConfiguration.  # noqa: E501
        :rtype: dict(str, TestIdDefinition)
        """
        return self._test_ids

    @test_ids.setter
    def test_ids(self, test_ids):
        """Sets the test_ids of this TestRasterMultiConfiguration.


        :param test_ids: The test_ids of this TestRasterMultiConfiguration.  # noqa: E501
        :type: dict(str, TestIdDefinition)
        """

        self._test_ids = test_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TestRasterMultiConfiguration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TestRasterMultiConfiguration):
            return True

        return self.to_dict() != other.to_dict()
