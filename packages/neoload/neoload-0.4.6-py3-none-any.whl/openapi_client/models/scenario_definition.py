# coding: utf-8

"""
    NeoLoad API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ScenarioDefinition(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'scenario_name': 'str',
        'scenario_duration': 'int',
        'scenario_v_us': 'int',
        'scenario_source': 'str'
    }

    attribute_map = {
        'scenario_name': 'scenarioName',
        'scenario_duration': 'scenarioDuration',
        'scenario_v_us': 'scenarioVUs',
        'scenario_source': 'scenarioSource'
    }

    def __init__(self, scenario_name=None, scenario_duration=None, scenario_v_us=None, scenario_source=None, local_vars_configuration=None):  # noqa: E501
        """ScenarioDefinition - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._scenario_name = None
        self._scenario_duration = None
        self._scenario_v_us = None
        self._scenario_source = None
        self.discriminator = None

        if scenario_name is not None:
            self.scenario_name = scenario_name
        if scenario_duration is not None:
            self.scenario_duration = scenario_duration
        if scenario_v_us is not None:
            self.scenario_v_us = scenario_v_us
        if scenario_source is not None:
            self.scenario_source = scenario_source

    @property
    def scenario_name(self):
        """Gets the scenario_name of this ScenarioDefinition.  # noqa: E501

        Scenario name.  # noqa: E501

        :return: The scenario_name of this ScenarioDefinition.  # noqa: E501
        :rtype: str
        """
        return self._scenario_name

    @scenario_name.setter
    def scenario_name(self, scenario_name):
        """Sets the scenario_name of this ScenarioDefinition.

        Scenario name.  # noqa: E501

        :param scenario_name: The scenario_name of this ScenarioDefinition.  # noqa: E501
        :type: str
        """

        self._scenario_name = scenario_name

    @property
    def scenario_duration(self):
        """Gets the scenario_duration of this ScenarioDefinition.  # noqa: E501

        Duration (in seconds) of the scenario.  # noqa: E501

        :return: The scenario_duration of this ScenarioDefinition.  # noqa: E501
        :rtype: int
        """
        return self._scenario_duration

    @scenario_duration.setter
    def scenario_duration(self, scenario_duration):
        """Sets the scenario_duration of this ScenarioDefinition.

        Duration (in seconds) of the scenario.  # noqa: E501

        :param scenario_duration: The scenario_duration of this ScenarioDefinition.  # noqa: E501
        :type: int
        """

        self._scenario_duration = scenario_duration

    @property
    def scenario_v_us(self):
        """Gets the scenario_v_us of this ScenarioDefinition.  # noqa: E501

        Total Virtual User number of the scenario. Return 0 if the Virtual User number is not determined.  # noqa: E501

        :return: The scenario_v_us of this ScenarioDefinition.  # noqa: E501
        :rtype: int
        """
        return self._scenario_v_us

    @scenario_v_us.setter
    def scenario_v_us(self, scenario_v_us):
        """Sets the scenario_v_us of this ScenarioDefinition.

        Total Virtual User number of the scenario. Return 0 if the Virtual User number is not determined.  # noqa: E501

        :param scenario_v_us: The scenario_v_us of this ScenarioDefinition.  # noqa: E501
        :type: int
        """

        self._scenario_v_us = scenario_v_us

    @property
    def scenario_source(self):
        """Gets the scenario_source of this ScenarioDefinition.  # noqa: E501

        The scenarion location. Can be a yaml file or NLP path.  # noqa: E501

        :return: The scenario_source of this ScenarioDefinition.  # noqa: E501
        :rtype: str
        """
        return self._scenario_source

    @scenario_source.setter
    def scenario_source(self, scenario_source):
        """Sets the scenario_source of this ScenarioDefinition.

        The scenarion location. Can be a yaml file or NLP path.  # noqa: E501

        :param scenario_source: The scenario_source of this ScenarioDefinition.  # noqa: E501
        :type: str
        """

        self._scenario_source = scenario_source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScenarioDefinition):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ScenarioDefinition):
            return True

        return self.to_dict() != other.to_dict()
