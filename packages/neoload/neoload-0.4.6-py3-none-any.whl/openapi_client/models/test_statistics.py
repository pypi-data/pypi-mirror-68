# coding: utf-8

"""
    NeoLoad API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class TestStatistics(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'total_request_count_success': 'int',
        'total_request_count_failure': 'int',
        'total_request_duration_average': 'float',
        'total_request_count_per_second': 'float',
        'total_transaction_count_success': 'int',
        'total_transaction_count_failure': 'int',
        'total_transaction_duration_average': 'float',
        'total_transaction_count_per_second': 'float',
        'total_iteration_count_success': 'int',
        'total_iteration_count_failure': 'int',
        'total_global_downloaded_bytes': 'int',
        'total_global_downloaded_bytes_per_second': 'float',
        'total_global_count_failure': 'int',
        'last_request_count_per_second': 'float',
        'last_transaction_duration_average': 'float',
        'last_virtual_user_count': 'int'
    }

    attribute_map = {
        'total_request_count_success': 'totalRequestCountSuccess',
        'total_request_count_failure': 'totalRequestCountFailure',
        'total_request_duration_average': 'totalRequestDurationAverage',
        'total_request_count_per_second': 'totalRequestCountPerSecond',
        'total_transaction_count_success': 'totalTransactionCountSuccess',
        'total_transaction_count_failure': 'totalTransactionCountFailure',
        'total_transaction_duration_average': 'totalTransactionDurationAverage',
        'total_transaction_count_per_second': 'totalTransactionCountPerSecond',
        'total_iteration_count_success': 'totalIterationCountSuccess',
        'total_iteration_count_failure': 'totalIterationCountFailure',
        'total_global_downloaded_bytes': 'totalGlobalDownloadedBytes',
        'total_global_downloaded_bytes_per_second': 'totalGlobalDownloadedBytesPerSecond',
        'total_global_count_failure': 'totalGlobalCountFailure',
        'last_request_count_per_second': 'lastRequestCountPerSecond',
        'last_transaction_duration_average': 'lastTransactionDurationAverage',
        'last_virtual_user_count': 'lastVirtualUserCount'
    }

    def __init__(self, total_request_count_success=None, total_request_count_failure=None, total_request_duration_average=None, total_request_count_per_second=None, total_transaction_count_success=None, total_transaction_count_failure=None, total_transaction_duration_average=None, total_transaction_count_per_second=None, total_iteration_count_success=None, total_iteration_count_failure=None, total_global_downloaded_bytes=None, total_global_downloaded_bytes_per_second=None, total_global_count_failure=None, last_request_count_per_second=None, last_transaction_duration_average=None, last_virtual_user_count=None, local_vars_configuration=None):  # noqa: E501
        """TestStatistics - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._total_request_count_success = None
        self._total_request_count_failure = None
        self._total_request_duration_average = None
        self._total_request_count_per_second = None
        self._total_transaction_count_success = None
        self._total_transaction_count_failure = None
        self._total_transaction_duration_average = None
        self._total_transaction_count_per_second = None
        self._total_iteration_count_success = None
        self._total_iteration_count_failure = None
        self._total_global_downloaded_bytes = None
        self._total_global_downloaded_bytes_per_second = None
        self._total_global_count_failure = None
        self._last_request_count_per_second = None
        self._last_transaction_duration_average = None
        self._last_virtual_user_count = None
        self.discriminator = None

        if total_request_count_success is not None:
            self.total_request_count_success = total_request_count_success
        if total_request_count_failure is not None:
            self.total_request_count_failure = total_request_count_failure
        if total_request_duration_average is not None:
            self.total_request_duration_average = total_request_duration_average
        if total_request_count_per_second is not None:
            self.total_request_count_per_second = total_request_count_per_second
        if total_transaction_count_success is not None:
            self.total_transaction_count_success = total_transaction_count_success
        if total_transaction_count_failure is not None:
            self.total_transaction_count_failure = total_transaction_count_failure
        if total_transaction_duration_average is not None:
            self.total_transaction_duration_average = total_transaction_duration_average
        if total_transaction_count_per_second is not None:
            self.total_transaction_count_per_second = total_transaction_count_per_second
        if total_iteration_count_success is not None:
            self.total_iteration_count_success = total_iteration_count_success
        if total_iteration_count_failure is not None:
            self.total_iteration_count_failure = total_iteration_count_failure
        if total_global_downloaded_bytes is not None:
            self.total_global_downloaded_bytes = total_global_downloaded_bytes
        if total_global_downloaded_bytes_per_second is not None:
            self.total_global_downloaded_bytes_per_second = total_global_downloaded_bytes_per_second
        if total_global_count_failure is not None:
            self.total_global_count_failure = total_global_count_failure
        if last_request_count_per_second is not None:
            self.last_request_count_per_second = last_request_count_per_second
        if last_transaction_duration_average is not None:
            self.last_transaction_duration_average = last_transaction_duration_average
        if last_virtual_user_count is not None:
            self.last_virtual_user_count = last_virtual_user_count

    @property
    def total_request_count_success(self):
        """Gets the total_request_count_success of this TestStatistics.  # noqa: E501

        Total number of requests in the scenario that did not encounter any error.  # noqa: E501

        :return: The total_request_count_success of this TestStatistics.  # noqa: E501
        :rtype: int
        """
        return self._total_request_count_success

    @total_request_count_success.setter
    def total_request_count_success(self, total_request_count_success):
        """Sets the total_request_count_success of this TestStatistics.

        Total number of requests in the scenario that did not encounter any error.  # noqa: E501

        :param total_request_count_success: The total_request_count_success of this TestStatistics.  # noqa: E501
        :type: int
        """

        self._total_request_count_success = total_request_count_success

    @property
    def total_request_count_failure(self):
        """Gets the total_request_count_failure of this TestStatistics.  # noqa: E501

        Total number of requests in the scenario that encountered errors.  # noqa: E501

        :return: The total_request_count_failure of this TestStatistics.  # noqa: E501
        :rtype: int
        """
        return self._total_request_count_failure

    @total_request_count_failure.setter
    def total_request_count_failure(self, total_request_count_failure):
        """Sets the total_request_count_failure of this TestStatistics.

        Total number of requests in the scenario that encountered errors.  # noqa: E501

        :param total_request_count_failure: The total_request_count_failure of this TestStatistics.  # noqa: E501
        :type: int
        """

        self._total_request_count_failure = total_request_count_failure

    @property
    def total_request_duration_average(self):
        """Gets the total_request_duration_average of this TestStatistics.  # noqa: E501

        Average time in seconds for all requests of the scenario to be performed (from first byte sent to last byte received).  # noqa: E501

        :return: The total_request_duration_average of this TestStatistics.  # noqa: E501
        :rtype: float
        """
        return self._total_request_duration_average

    @total_request_duration_average.setter
    def total_request_duration_average(self, total_request_duration_average):
        """Sets the total_request_duration_average of this TestStatistics.

        Average time in seconds for all requests of the scenario to be performed (from first byte sent to last byte received).  # noqa: E501

        :param total_request_duration_average: The total_request_duration_average of this TestStatistics.  # noqa: E501
        :type: float
        """

        self._total_request_duration_average = total_request_duration_average

    @property
    def total_request_count_per_second(self):
        """Gets the total_request_count_per_second of this TestStatistics.  # noqa: E501

        Total number of requests in the scenario that are performed per second.  # noqa: E501

        :return: The total_request_count_per_second of this TestStatistics.  # noqa: E501
        :rtype: float
        """
        return self._total_request_count_per_second

    @total_request_count_per_second.setter
    def total_request_count_per_second(self, total_request_count_per_second):
        """Sets the total_request_count_per_second of this TestStatistics.

        Total number of requests in the scenario that are performed per second.  # noqa: E501

        :param total_request_count_per_second: The total_request_count_per_second of this TestStatistics.  # noqa: E501
        :type: float
        """

        self._total_request_count_per_second = total_request_count_per_second

    @property
    def total_transaction_count_success(self):
        """Gets the total_transaction_count_success of this TestStatistics.  # noqa: E501

        Total number of the scenario Transactions executed without encountering any error.  # noqa: E501

        :return: The total_transaction_count_success of this TestStatistics.  # noqa: E501
        :rtype: int
        """
        return self._total_transaction_count_success

    @total_transaction_count_success.setter
    def total_transaction_count_success(self, total_transaction_count_success):
        """Sets the total_transaction_count_success of this TestStatistics.

        Total number of the scenario Transactions executed without encountering any error.  # noqa: E501

        :param total_transaction_count_success: The total_transaction_count_success of this TestStatistics.  # noqa: E501
        :type: int
        """

        self._total_transaction_count_success = total_transaction_count_success

    @property
    def total_transaction_count_failure(self):
        """Gets the total_transaction_count_failure of this TestStatistics.  # noqa: E501

        Total number of the scenario Transactions executed with errors.  # noqa: E501

        :return: The total_transaction_count_failure of this TestStatistics.  # noqa: E501
        :rtype: int
        """
        return self._total_transaction_count_failure

    @total_transaction_count_failure.setter
    def total_transaction_count_failure(self, total_transaction_count_failure):
        """Sets the total_transaction_count_failure of this TestStatistics.

        Total number of the scenario Transactions executed with errors.  # noqa: E501

        :param total_transaction_count_failure: The total_transaction_count_failure of this TestStatistics.  # noqa: E501
        :type: int
        """

        self._total_transaction_count_failure = total_transaction_count_failure

    @property
    def total_transaction_duration_average(self):
        """Gets the total_transaction_duration_average of this TestStatistics.  # noqa: E501

        Average time in seconds for all Transactions of the scenario to be executed.  # noqa: E501

        :return: The total_transaction_duration_average of this TestStatistics.  # noqa: E501
        :rtype: float
        """
        return self._total_transaction_duration_average

    @total_transaction_duration_average.setter
    def total_transaction_duration_average(self, total_transaction_duration_average):
        """Sets the total_transaction_duration_average of this TestStatistics.

        Average time in seconds for all Transactions of the scenario to be executed.  # noqa: E501

        :param total_transaction_duration_average: The total_transaction_duration_average of this TestStatistics.  # noqa: E501
        :type: float
        """

        self._total_transaction_duration_average = total_transaction_duration_average

    @property
    def total_transaction_count_per_second(self):
        """Gets the total_transaction_count_per_second of this TestStatistics.  # noqa: E501

        Total number of the scenario Transactions executed per second.  # noqa: E501

        :return: The total_transaction_count_per_second of this TestStatistics.  # noqa: E501
        :rtype: float
        """
        return self._total_transaction_count_per_second

    @total_transaction_count_per_second.setter
    def total_transaction_count_per_second(self, total_transaction_count_per_second):
        """Sets the total_transaction_count_per_second of this TestStatistics.

        Total number of the scenario Transactions executed per second.  # noqa: E501

        :param total_transaction_count_per_second: The total_transaction_count_per_second of this TestStatistics.  # noqa: E501
        :type: float
        """

        self._total_transaction_count_per_second = total_transaction_count_per_second

    @property
    def total_iteration_count_success(self):
        """Gets the total_iteration_count_success of this TestStatistics.  # noqa: E501

        Total number of times when the 'Actions' Container was run for each Virtual User without encountering any error.  # noqa: E501

        :return: The total_iteration_count_success of this TestStatistics.  # noqa: E501
        :rtype: int
        """
        return self._total_iteration_count_success

    @total_iteration_count_success.setter
    def total_iteration_count_success(self, total_iteration_count_success):
        """Sets the total_iteration_count_success of this TestStatistics.

        Total number of times when the 'Actions' Container was run for each Virtual User without encountering any error.  # noqa: E501

        :param total_iteration_count_success: The total_iteration_count_success of this TestStatistics.  # noqa: E501
        :type: int
        """

        self._total_iteration_count_success = total_iteration_count_success

    @property
    def total_iteration_count_failure(self):
        """Gets the total_iteration_count_failure of this TestStatistics.  # noqa: E501

        Total number of times when the 'Actions' Container was run for each Virtual User and encountered an error.  # noqa: E501

        :return: The total_iteration_count_failure of this TestStatistics.  # noqa: E501
        :rtype: int
        """
        return self._total_iteration_count_failure

    @total_iteration_count_failure.setter
    def total_iteration_count_failure(self, total_iteration_count_failure):
        """Sets the total_iteration_count_failure of this TestStatistics.

        Total number of times when the 'Actions' Container was run for each Virtual User and encountered an error.  # noqa: E501

        :param total_iteration_count_failure: The total_iteration_count_failure of this TestStatistics.  # noqa: E501
        :type: int
        """

        self._total_iteration_count_failure = total_iteration_count_failure

    @property
    def total_global_downloaded_bytes(self):
        """Gets the total_global_downloaded_bytes of this TestStatistics.  # noqa: E501

        Total size of http traffic received in bytes.  # noqa: E501

        :return: The total_global_downloaded_bytes of this TestStatistics.  # noqa: E501
        :rtype: int
        """
        return self._total_global_downloaded_bytes

    @total_global_downloaded_bytes.setter
    def total_global_downloaded_bytes(self, total_global_downloaded_bytes):
        """Sets the total_global_downloaded_bytes of this TestStatistics.

        Total size of http traffic received in bytes.  # noqa: E501

        :param total_global_downloaded_bytes: The total_global_downloaded_bytes of this TestStatistics.  # noqa: E501
        :type: int
        """

        self._total_global_downloaded_bytes = total_global_downloaded_bytes

    @property
    def total_global_downloaded_bytes_per_second(self):
        """Gets the total_global_downloaded_bytes_per_second of this TestStatistics.  # noqa: E501

        Average size of http traffic received in bytes per second.  # noqa: E501

        :return: The total_global_downloaded_bytes_per_second of this TestStatistics.  # noqa: E501
        :rtype: float
        """
        return self._total_global_downloaded_bytes_per_second

    @total_global_downloaded_bytes_per_second.setter
    def total_global_downloaded_bytes_per_second(self, total_global_downloaded_bytes_per_second):
        """Sets the total_global_downloaded_bytes_per_second of this TestStatistics.

        Average size of http traffic received in bytes per second.  # noqa: E501

        :param total_global_downloaded_bytes_per_second: The total_global_downloaded_bytes_per_second of this TestStatistics.  # noqa: E501
        :type: float
        """

        self._total_global_downloaded_bytes_per_second = total_global_downloaded_bytes_per_second

    @property
    def total_global_count_failure(self):
        """Gets the total_global_count_failure of this TestStatistics.  # noqa: E501


        :return: The total_global_count_failure of this TestStatistics.  # noqa: E501
        :rtype: int
        """
        return self._total_global_count_failure

    @total_global_count_failure.setter
    def total_global_count_failure(self, total_global_count_failure):
        """Sets the total_global_count_failure of this TestStatistics.


        :param total_global_count_failure: The total_global_count_failure of this TestStatistics.  # noqa: E501
        :type: int
        """

        self._total_global_count_failure = total_global_count_failure

    @property
    def last_request_count_per_second(self):
        """Gets the last_request_count_per_second of this TestStatistics.  # noqa: E501

        Last value received for the number of requests in the scenario that are performed per second.  # noqa: E501

        :return: The last_request_count_per_second of this TestStatistics.  # noqa: E501
        :rtype: float
        """
        return self._last_request_count_per_second

    @last_request_count_per_second.setter
    def last_request_count_per_second(self, last_request_count_per_second):
        """Sets the last_request_count_per_second of this TestStatistics.

        Last value received for the number of requests in the scenario that are performed per second.  # noqa: E501

        :param last_request_count_per_second: The last_request_count_per_second of this TestStatistics.  # noqa: E501
        :type: float
        """

        self._last_request_count_per_second = last_request_count_per_second

    @property
    def last_transaction_duration_average(self):
        """Gets the last_transaction_duration_average of this TestStatistics.  # noqa: E501

        Last value received for the average time in milliseconds for all Transactions of the scenario.  # noqa: E501

        :return: The last_transaction_duration_average of this TestStatistics.  # noqa: E501
        :rtype: float
        """
        return self._last_transaction_duration_average

    @last_transaction_duration_average.setter
    def last_transaction_duration_average(self, last_transaction_duration_average):
        """Sets the last_transaction_duration_average of this TestStatistics.

        Last value received for the average time in milliseconds for all Transactions of the scenario.  # noqa: E501

        :param last_transaction_duration_average: The last_transaction_duration_average of this TestStatistics.  # noqa: E501
        :type: float
        """

        self._last_transaction_duration_average = last_transaction_duration_average

    @property
    def last_virtual_user_count(self):
        """Gets the last_virtual_user_count of this TestStatistics.  # noqa: E501

        Last value received for the total number of Virtual Users executed in the test.  # noqa: E501

        :return: The last_virtual_user_count of this TestStatistics.  # noqa: E501
        :rtype: int
        """
        return self._last_virtual_user_count

    @last_virtual_user_count.setter
    def last_virtual_user_count(self, last_virtual_user_count):
        """Sets the last_virtual_user_count of this TestStatistics.

        Last value received for the total number of Virtual Users executed in the test.  # noqa: E501

        :param last_virtual_user_count: The last_virtual_user_count of this TestStatistics.  # noqa: E501
        :type: int
        """

        self._last_virtual_user_count = last_virtual_user_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TestStatistics):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TestStatistics):
            return True

        return self.to_dict() != other.to_dict()
