# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""LibCCV bindings for python"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_libccv')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_libccv')
    _libccv = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libccv', [dirname(__file__)])
        except ImportError:
            import _libccv
            return _libccv
        try:
            _mod = imp.load_module('_libccv', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _libccv = swig_import_helper()
    del swig_import_helper
else:
    import _libccv
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _libccv.new_doubleArray(nelements)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_doubleArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _libccv.doubleArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _libccv.doubleArray___setitem__(self, index, value)

    def cast(self):
        return _libccv.doubleArray_cast(self)
    if _newclass:
        frompointer = staticmethod(_libccv.doubleArray_frompointer)
    else:
        frompointer = _libccv.doubleArray_frompointer
doubleArray_swigregister = _libccv.doubleArray_swigregister
doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(t):
    return _libccv.doubleArray_frompointer(t)
doubleArray_frompointer = _libccv.doubleArray_frompointer

CCV_PI = _libccv.CCV_PI
CCV_8U = _libccv.CCV_8U
CCV_32S = _libccv.CCV_32S
CCV_32F = _libccv.CCV_32F
CCV_64S = _libccv.CCV_64S
CCV_64F = _libccv.CCV_64F
CCV_C1 = _libccv.CCV_C1
CCV_C2 = _libccv.CCV_C2
CCV_C3 = _libccv.CCV_C3
CCV_C4 = _libccv.CCV_C4
CCV_MAX_CHANNEL = _libccv.CCV_MAX_CHANNEL
CCV_MATRIX_DENSE = _libccv.CCV_MATRIX_DENSE
CCV_MATRIX_SPARSE = _libccv.CCV_MATRIX_SPARSE
CCV_MATRIX_CSR = _libccv.CCV_MATRIX_CSR
CCV_MATRIX_CSC = _libccv.CCV_MATRIX_CSC
CCV_GARBAGE = _libccv.CCV_GARBAGE
CCV_REUSABLE = _libccv.CCV_REUSABLE
CCV_UNMANAGED = _libccv.CCV_UNMANAGED
CCV_NO_DATA_ALLOC = _libccv.CCV_NO_DATA_ALLOC
class ccv_matrix_cell_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_matrix_cell_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_matrix_cell_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["u8"] = _libccv.ccv_matrix_cell_t_u8_set
    __swig_getmethods__["u8"] = _libccv.ccv_matrix_cell_t_u8_get
    if _newclass:
        u8 = _swig_property(_libccv.ccv_matrix_cell_t_u8_get, _libccv.ccv_matrix_cell_t_u8_set)
    __swig_setmethods__["i32"] = _libccv.ccv_matrix_cell_t_i32_set
    __swig_getmethods__["i32"] = _libccv.ccv_matrix_cell_t_i32_get
    if _newclass:
        i32 = _swig_property(_libccv.ccv_matrix_cell_t_i32_get, _libccv.ccv_matrix_cell_t_i32_set)
    __swig_setmethods__["f32"] = _libccv.ccv_matrix_cell_t_f32_set
    __swig_getmethods__["f32"] = _libccv.ccv_matrix_cell_t_f32_get
    if _newclass:
        f32 = _swig_property(_libccv.ccv_matrix_cell_t_f32_get, _libccv.ccv_matrix_cell_t_f32_set)
    __swig_setmethods__["i64"] = _libccv.ccv_matrix_cell_t_i64_set
    __swig_getmethods__["i64"] = _libccv.ccv_matrix_cell_t_i64_get
    if _newclass:
        i64 = _swig_property(_libccv.ccv_matrix_cell_t_i64_get, _libccv.ccv_matrix_cell_t_i64_set)
    __swig_setmethods__["f64"] = _libccv.ccv_matrix_cell_t_f64_set
    __swig_getmethods__["f64"] = _libccv.ccv_matrix_cell_t_f64_get
    if _newclass:
        f64 = _swig_property(_libccv.ccv_matrix_cell_t_f64_get, _libccv.ccv_matrix_cell_t_f64_set)

    def __init__(self):
        this = _libccv.new_ccv_matrix_cell_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_matrix_cell_t
    __del__ = lambda self: None
ccv_matrix_cell_t_swigregister = _libccv.ccv_matrix_cell_t_swigregister
ccv_matrix_cell_t_swigregister(ccv_matrix_cell_t)
cvar = _libccv.cvar
_ccv_get_data_type_size = cvar._ccv_get_data_type_size

class ccv_dense_matrix_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_dense_matrix_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_dense_matrix_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _libccv.ccv_dense_matrix_t_type_set
    __swig_getmethods__["type"] = _libccv.ccv_dense_matrix_t_type_get
    if _newclass:
        type = _swig_property(_libccv.ccv_dense_matrix_t_type_get, _libccv.ccv_dense_matrix_t_type_set)
    __swig_setmethods__["sig"] = _libccv.ccv_dense_matrix_t_sig_set
    __swig_getmethods__["sig"] = _libccv.ccv_dense_matrix_t_sig_get
    if _newclass:
        sig = _swig_property(_libccv.ccv_dense_matrix_t_sig_get, _libccv.ccv_dense_matrix_t_sig_set)
    __swig_setmethods__["refcount"] = _libccv.ccv_dense_matrix_t_refcount_set
    __swig_getmethods__["refcount"] = _libccv.ccv_dense_matrix_t_refcount_get
    if _newclass:
        refcount = _swig_property(_libccv.ccv_dense_matrix_t_refcount_get, _libccv.ccv_dense_matrix_t_refcount_set)
    __swig_setmethods__["rows"] = _libccv.ccv_dense_matrix_t_rows_set
    __swig_getmethods__["rows"] = _libccv.ccv_dense_matrix_t_rows_get
    if _newclass:
        rows = _swig_property(_libccv.ccv_dense_matrix_t_rows_get, _libccv.ccv_dense_matrix_t_rows_set)
    __swig_setmethods__["cols"] = _libccv.ccv_dense_matrix_t_cols_set
    __swig_getmethods__["cols"] = _libccv.ccv_dense_matrix_t_cols_get
    if _newclass:
        cols = _swig_property(_libccv.ccv_dense_matrix_t_cols_get, _libccv.ccv_dense_matrix_t_cols_set)
    __swig_setmethods__["step"] = _libccv.ccv_dense_matrix_t_step_set
    __swig_getmethods__["step"] = _libccv.ccv_dense_matrix_t_step_get
    if _newclass:
        step = _swig_property(_libccv.ccv_dense_matrix_t_step_get, _libccv.ccv_dense_matrix_t_step_set)
    __swig_getmethods__["tag"] = _libccv.ccv_dense_matrix_t_tag_get
    if _newclass:
        tag = _swig_property(_libccv.ccv_dense_matrix_t_tag_get)
    __swig_setmethods__["data"] = _libccv.ccv_dense_matrix_t_data_set
    __swig_getmethods__["data"] = _libccv.ccv_dense_matrix_t_data_get
    if _newclass:
        data = _swig_property(_libccv.ccv_dense_matrix_t_data_get, _libccv.ccv_dense_matrix_t_data_set)

    def __init__(self):
        this = _libccv.new_ccv_dense_matrix_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_dense_matrix_t
    __del__ = lambda self: None
ccv_dense_matrix_t_swigregister = _libccv.ccv_dense_matrix_t_swigregister
ccv_dense_matrix_t_swigregister(ccv_dense_matrix_t)

class ccv_dense_matrix_t_tag(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_dense_matrix_t_tag, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_dense_matrix_t_tag, name)
    __repr__ = _swig_repr
    __swig_setmethods__["u8"] = _libccv.ccv_dense_matrix_t_tag_u8_set
    __swig_getmethods__["u8"] = _libccv.ccv_dense_matrix_t_tag_u8_get
    if _newclass:
        u8 = _swig_property(_libccv.ccv_dense_matrix_t_tag_u8_get, _libccv.ccv_dense_matrix_t_tag_u8_set)
    __swig_setmethods__["i32"] = _libccv.ccv_dense_matrix_t_tag_i32_set
    __swig_getmethods__["i32"] = _libccv.ccv_dense_matrix_t_tag_i32_get
    if _newclass:
        i32 = _swig_property(_libccv.ccv_dense_matrix_t_tag_i32_get, _libccv.ccv_dense_matrix_t_tag_i32_set)
    __swig_setmethods__["f32"] = _libccv.ccv_dense_matrix_t_tag_f32_set
    __swig_getmethods__["f32"] = _libccv.ccv_dense_matrix_t_tag_f32_get
    if _newclass:
        f32 = _swig_property(_libccv.ccv_dense_matrix_t_tag_f32_get, _libccv.ccv_dense_matrix_t_tag_f32_set)
    __swig_setmethods__["i64"] = _libccv.ccv_dense_matrix_t_tag_i64_set
    __swig_getmethods__["i64"] = _libccv.ccv_dense_matrix_t_tag_i64_get
    if _newclass:
        i64 = _swig_property(_libccv.ccv_dense_matrix_t_tag_i64_get, _libccv.ccv_dense_matrix_t_tag_i64_set)
    __swig_setmethods__["f64"] = _libccv.ccv_dense_matrix_t_tag_f64_set
    __swig_getmethods__["f64"] = _libccv.ccv_dense_matrix_t_tag_f64_get
    if _newclass:
        f64 = _swig_property(_libccv.ccv_dense_matrix_t_tag_f64_get, _libccv.ccv_dense_matrix_t_tag_f64_set)
    __swig_setmethods__["p"] = _libccv.ccv_dense_matrix_t_tag_p_set
    __swig_getmethods__["p"] = _libccv.ccv_dense_matrix_t_tag_p_get
    if _newclass:
        p = _swig_property(_libccv.ccv_dense_matrix_t_tag_p_get, _libccv.ccv_dense_matrix_t_tag_p_set)

    def __init__(self):
        this = _libccv.new_ccv_dense_matrix_t_tag()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_dense_matrix_t_tag
    __del__ = lambda self: None
ccv_dense_matrix_t_tag_swigregister = _libccv.ccv_dense_matrix_t_tag_swigregister
ccv_dense_matrix_t_tag_swigregister(ccv_dense_matrix_t_tag)

CCV_SPARSE_VECTOR = _libccv.CCV_SPARSE_VECTOR
CCV_DENSE_VECTOR = _libccv.CCV_DENSE_VECTOR
class ccv_dense_vector_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_dense_vector_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_dense_vector_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["step"] = _libccv.ccv_dense_vector_t_step_set
    __swig_getmethods__["step"] = _libccv.ccv_dense_vector_t_step_get
    if _newclass:
        step = _swig_property(_libccv.ccv_dense_vector_t_step_get, _libccv.ccv_dense_vector_t_step_set)
    __swig_setmethods__["length"] = _libccv.ccv_dense_vector_t_length_set
    __swig_getmethods__["length"] = _libccv.ccv_dense_vector_t_length_get
    if _newclass:
        length = _swig_property(_libccv.ccv_dense_vector_t_length_get, _libccv.ccv_dense_vector_t_length_set)
    __swig_setmethods__["index"] = _libccv.ccv_dense_vector_t_index_set
    __swig_getmethods__["index"] = _libccv.ccv_dense_vector_t_index_get
    if _newclass:
        index = _swig_property(_libccv.ccv_dense_vector_t_index_get, _libccv.ccv_dense_vector_t_index_set)
    __swig_setmethods__["prime"] = _libccv.ccv_dense_vector_t_prime_set
    __swig_getmethods__["prime"] = _libccv.ccv_dense_vector_t_prime_get
    if _newclass:
        prime = _swig_property(_libccv.ccv_dense_vector_t_prime_get, _libccv.ccv_dense_vector_t_prime_set)
    __swig_setmethods__["load_factor"] = _libccv.ccv_dense_vector_t_load_factor_set
    __swig_getmethods__["load_factor"] = _libccv.ccv_dense_vector_t_load_factor_get
    if _newclass:
        load_factor = _swig_property(_libccv.ccv_dense_vector_t_load_factor_get, _libccv.ccv_dense_vector_t_load_factor_set)
    __swig_setmethods__["data"] = _libccv.ccv_dense_vector_t_data_set
    __swig_getmethods__["data"] = _libccv.ccv_dense_vector_t_data_get
    if _newclass:
        data = _swig_property(_libccv.ccv_dense_vector_t_data_get, _libccv.ccv_dense_vector_t_data_set)
    __swig_setmethods__["indice"] = _libccv.ccv_dense_vector_t_indice_set
    __swig_getmethods__["indice"] = _libccv.ccv_dense_vector_t_indice_get
    if _newclass:
        indice = _swig_property(_libccv.ccv_dense_vector_t_indice_get, _libccv.ccv_dense_vector_t_indice_set)
    __swig_setmethods__["next"] = _libccv.ccv_dense_vector_t_next_set
    __swig_getmethods__["next"] = _libccv.ccv_dense_vector_t_next_get
    if _newclass:
        next = _swig_property(_libccv.ccv_dense_vector_t_next_get, _libccv.ccv_dense_vector_t_next_set)

    def __init__(self):
        this = _libccv.new_ccv_dense_vector_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_dense_vector_t
    __del__ = lambda self: None
ccv_dense_vector_t_swigregister = _libccv.ccv_dense_vector_t_swigregister
ccv_dense_vector_t_swigregister(ccv_dense_vector_t)

CCV_SPARSE_ROW_MAJOR = _libccv.CCV_SPARSE_ROW_MAJOR
CCV_SPARSE_COL_MAJOR = _libccv.CCV_SPARSE_COL_MAJOR
class ccv_sparse_matrix_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_sparse_matrix_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_sparse_matrix_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _libccv.ccv_sparse_matrix_t_type_set
    __swig_getmethods__["type"] = _libccv.ccv_sparse_matrix_t_type_get
    if _newclass:
        type = _swig_property(_libccv.ccv_sparse_matrix_t_type_get, _libccv.ccv_sparse_matrix_t_type_set)
    __swig_setmethods__["sig"] = _libccv.ccv_sparse_matrix_t_sig_set
    __swig_getmethods__["sig"] = _libccv.ccv_sparse_matrix_t_sig_get
    if _newclass:
        sig = _swig_property(_libccv.ccv_sparse_matrix_t_sig_get, _libccv.ccv_sparse_matrix_t_sig_set)
    __swig_setmethods__["refcount"] = _libccv.ccv_sparse_matrix_t_refcount_set
    __swig_getmethods__["refcount"] = _libccv.ccv_sparse_matrix_t_refcount_get
    if _newclass:
        refcount = _swig_property(_libccv.ccv_sparse_matrix_t_refcount_get, _libccv.ccv_sparse_matrix_t_refcount_set)
    __swig_setmethods__["rows"] = _libccv.ccv_sparse_matrix_t_rows_set
    __swig_getmethods__["rows"] = _libccv.ccv_sparse_matrix_t_rows_get
    if _newclass:
        rows = _swig_property(_libccv.ccv_sparse_matrix_t_rows_get, _libccv.ccv_sparse_matrix_t_rows_set)
    __swig_setmethods__["cols"] = _libccv.ccv_sparse_matrix_t_cols_set
    __swig_getmethods__["cols"] = _libccv.ccv_sparse_matrix_t_cols_get
    if _newclass:
        cols = _swig_property(_libccv.ccv_sparse_matrix_t_cols_get, _libccv.ccv_sparse_matrix_t_cols_set)
    __swig_setmethods__["major"] = _libccv.ccv_sparse_matrix_t_major_set
    __swig_getmethods__["major"] = _libccv.ccv_sparse_matrix_t_major_get
    if _newclass:
        major = _swig_property(_libccv.ccv_sparse_matrix_t_major_get, _libccv.ccv_sparse_matrix_t_major_set)
    __swig_setmethods__["prime"] = _libccv.ccv_sparse_matrix_t_prime_set
    __swig_getmethods__["prime"] = _libccv.ccv_sparse_matrix_t_prime_get
    if _newclass:
        prime = _swig_property(_libccv.ccv_sparse_matrix_t_prime_get, _libccv.ccv_sparse_matrix_t_prime_set)
    __swig_setmethods__["load_factor"] = _libccv.ccv_sparse_matrix_t_load_factor_set
    __swig_getmethods__["load_factor"] = _libccv.ccv_sparse_matrix_t_load_factor_get
    if _newclass:
        load_factor = _swig_property(_libccv.ccv_sparse_matrix_t_load_factor_get, _libccv.ccv_sparse_matrix_t_load_factor_set)
    __swig_getmethods__["tag"] = _libccv.ccv_sparse_matrix_t_tag_get
    if _newclass:
        tag = _swig_property(_libccv.ccv_sparse_matrix_t_tag_get)
    __swig_setmethods__["vector"] = _libccv.ccv_sparse_matrix_t_vector_set
    __swig_getmethods__["vector"] = _libccv.ccv_sparse_matrix_t_vector_get
    if _newclass:
        vector = _swig_property(_libccv.ccv_sparse_matrix_t_vector_get, _libccv.ccv_sparse_matrix_t_vector_set)

    def __init__(self):
        this = _libccv.new_ccv_sparse_matrix_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_sparse_matrix_t
    __del__ = lambda self: None
ccv_sparse_matrix_t_swigregister = _libccv.ccv_sparse_matrix_t_swigregister
ccv_sparse_matrix_t_swigregister(ccv_sparse_matrix_t)

class ccv_sparse_matrix_t_tag(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_sparse_matrix_t_tag, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_sparse_matrix_t_tag, name)
    __repr__ = _swig_repr
    __swig_setmethods__["chr"] = _libccv.ccv_sparse_matrix_t_tag_chr_set
    __swig_getmethods__["chr"] = _libccv.ccv_sparse_matrix_t_tag_chr_get
    if _newclass:
        chr = _swig_property(_libccv.ccv_sparse_matrix_t_tag_chr_get, _libccv.ccv_sparse_matrix_t_tag_chr_set)
    __swig_setmethods__["i"] = _libccv.ccv_sparse_matrix_t_tag_i_set
    __swig_getmethods__["i"] = _libccv.ccv_sparse_matrix_t_tag_i_get
    if _newclass:
        i = _swig_property(_libccv.ccv_sparse_matrix_t_tag_i_get, _libccv.ccv_sparse_matrix_t_tag_i_set)
    __swig_setmethods__["fl"] = _libccv.ccv_sparse_matrix_t_tag_fl_set
    __swig_getmethods__["fl"] = _libccv.ccv_sparse_matrix_t_tag_fl_get
    if _newclass:
        fl = _swig_property(_libccv.ccv_sparse_matrix_t_tag_fl_get, _libccv.ccv_sparse_matrix_t_tag_fl_set)
    __swig_setmethods__["l"] = _libccv.ccv_sparse_matrix_t_tag_l_set
    __swig_getmethods__["l"] = _libccv.ccv_sparse_matrix_t_tag_l_get
    if _newclass:
        l = _swig_property(_libccv.ccv_sparse_matrix_t_tag_l_get, _libccv.ccv_sparse_matrix_t_tag_l_set)
    __swig_setmethods__["db"] = _libccv.ccv_sparse_matrix_t_tag_db_set
    __swig_getmethods__["db"] = _libccv.ccv_sparse_matrix_t_tag_db_get
    if _newclass:
        db = _swig_property(_libccv.ccv_sparse_matrix_t_tag_db_get, _libccv.ccv_sparse_matrix_t_tag_db_set)

    def __init__(self):
        this = _libccv.new_ccv_sparse_matrix_t_tag()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_sparse_matrix_t_tag
    __del__ = lambda self: None
ccv_sparse_matrix_t_tag_swigregister = _libccv.ccv_sparse_matrix_t_tag_swigregister
ccv_sparse_matrix_t_tag_swigregister(ccv_sparse_matrix_t_tag)

class ccv_cache_index_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_cache_index_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_cache_index_t, name)
    __repr__ = _swig_repr
    __swig_getmethods__["branch"] = _libccv.ccv_cache_index_t_branch_get
    if _newclass:
        branch = _swig_property(_libccv.ccv_cache_index_t_branch_get)
    __swig_getmethods__["terminal"] = _libccv.ccv_cache_index_t_terminal_get
    if _newclass:
        terminal = _swig_property(_libccv.ccv_cache_index_t_terminal_get)

    def __init__(self):
        this = _libccv.new_ccv_cache_index_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_cache_index_t
    __del__ = lambda self: None
ccv_cache_index_t_swigregister = _libccv.ccv_cache_index_t_swigregister
ccv_cache_index_t_swigregister(ccv_cache_index_t)

class ccv_cache_index_t_terminal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_cache_index_t_terminal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_cache_index_t_terminal, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sign"] = _libccv.ccv_cache_index_t_terminal_sign_set
    __swig_getmethods__["sign"] = _libccv.ccv_cache_index_t_terminal_sign_get
    if _newclass:
        sign = _swig_property(_libccv.ccv_cache_index_t_terminal_sign_get, _libccv.ccv_cache_index_t_terminal_sign_set)
    __swig_setmethods__["off"] = _libccv.ccv_cache_index_t_terminal_off_set
    __swig_getmethods__["off"] = _libccv.ccv_cache_index_t_terminal_off_get
    if _newclass:
        off = _swig_property(_libccv.ccv_cache_index_t_terminal_off_get, _libccv.ccv_cache_index_t_terminal_off_set)
    __swig_setmethods__["type"] = _libccv.ccv_cache_index_t_terminal_type_set
    __swig_getmethods__["type"] = _libccv.ccv_cache_index_t_terminal_type_get
    if _newclass:
        type = _swig_property(_libccv.ccv_cache_index_t_terminal_type_get, _libccv.ccv_cache_index_t_terminal_type_set)

    def __init__(self):
        this = _libccv.new_ccv_cache_index_t_terminal()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_cache_index_t_terminal
    __del__ = lambda self: None
ccv_cache_index_t_terminal_swigregister = _libccv.ccv_cache_index_t_terminal_swigregister
ccv_cache_index_t_terminal_swigregister(ccv_cache_index_t_terminal)

class ccv_cache_index_t_branch(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_cache_index_t_branch, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_cache_index_t_branch, name)
    __repr__ = _swig_repr
    __swig_setmethods__["bitmap"] = _libccv.ccv_cache_index_t_branch_bitmap_set
    __swig_getmethods__["bitmap"] = _libccv.ccv_cache_index_t_branch_bitmap_get
    if _newclass:
        bitmap = _swig_property(_libccv.ccv_cache_index_t_branch_bitmap_get, _libccv.ccv_cache_index_t_branch_bitmap_set)
    __swig_setmethods__["set"] = _libccv.ccv_cache_index_t_branch_set_set
    __swig_getmethods__["set"] = _libccv.ccv_cache_index_t_branch_set_get
    if _newclass:
        set = _swig_property(_libccv.ccv_cache_index_t_branch_set_get, _libccv.ccv_cache_index_t_branch_set_set)
    __swig_setmethods__["age"] = _libccv.ccv_cache_index_t_branch_age_set
    __swig_getmethods__["age"] = _libccv.ccv_cache_index_t_branch_age_get
    if _newclass:
        age = _swig_property(_libccv.ccv_cache_index_t_branch_age_get, _libccv.ccv_cache_index_t_branch_age_set)

    def __init__(self):
        this = _libccv.new_ccv_cache_index_t_branch()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_cache_index_t_branch
    __del__ = lambda self: None
ccv_cache_index_t_branch_swigregister = _libccv.ccv_cache_index_t_branch_swigregister
ccv_cache_index_t_branch_swigregister(ccv_cache_index_t_branch)

class ccv_cache_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_cache_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_cache_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["origin"] = _libccv.ccv_cache_t_origin_set
    __swig_getmethods__["origin"] = _libccv.ccv_cache_t_origin_get
    if _newclass:
        origin = _swig_property(_libccv.ccv_cache_t_origin_get, _libccv.ccv_cache_t_origin_set)
    __swig_setmethods__["rnum"] = _libccv.ccv_cache_t_rnum_set
    __swig_getmethods__["rnum"] = _libccv.ccv_cache_t_rnum_get
    if _newclass:
        rnum = _swig_property(_libccv.ccv_cache_t_rnum_get, _libccv.ccv_cache_t_rnum_set)
    __swig_setmethods__["age"] = _libccv.ccv_cache_t_age_set
    __swig_getmethods__["age"] = _libccv.ccv_cache_t_age_get
    if _newclass:
        age = _swig_property(_libccv.ccv_cache_t_age_get, _libccv.ccv_cache_t_age_set)
    __swig_setmethods__["up"] = _libccv.ccv_cache_t_up_set
    __swig_getmethods__["up"] = _libccv.ccv_cache_t_up_get
    if _newclass:
        up = _swig_property(_libccv.ccv_cache_t_up_get, _libccv.ccv_cache_t_up_set)
    __swig_setmethods__["size"] = _libccv.ccv_cache_t_size_set
    __swig_getmethods__["size"] = _libccv.ccv_cache_t_size_get
    if _newclass:
        size = _swig_property(_libccv.ccv_cache_t_size_get, _libccv.ccv_cache_t_size_set)
    __swig_setmethods__["ffree"] = _libccv.ccv_cache_t_ffree_set
    __swig_getmethods__["ffree"] = _libccv.ccv_cache_t_ffree_get
    if _newclass:
        ffree = _swig_property(_libccv.ccv_cache_t_ffree_get, _libccv.ccv_cache_t_ffree_set)

    def __init__(self):
        this = _libccv.new_ccv_cache_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_cache_t
    __del__ = lambda self: None
ccv_cache_t_swigregister = _libccv.ccv_cache_t_swigregister
ccv_cache_t_swigregister(ccv_cache_t)


def ccv_cache_init(cache, up, cache_types, ffree):
    return _libccv.ccv_cache_init(cache, up, cache_types, ffree)
ccv_cache_init = _libccv.ccv_cache_init

def ccv_cache_get(cache, sign, type):
    return _libccv.ccv_cache_get(cache, sign, type)
ccv_cache_get = _libccv.ccv_cache_get

def ccv_cache_put(cache, sign, x, size, type):
    return _libccv.ccv_cache_put(cache, sign, x, size, type)
ccv_cache_put = _libccv.ccv_cache_put

def ccv_cache_out(cache, sign, type):
    return _libccv.ccv_cache_out(cache, sign, type)
ccv_cache_out = _libccv.ccv_cache_out

def ccv_cache_delete(cache, sign):
    return _libccv.ccv_cache_delete(cache, sign)
ccv_cache_delete = _libccv.ccv_cache_delete

def ccv_cache_cleanup(cache):
    return _libccv.ccv_cache_cleanup(cache)
ccv_cache_cleanup = _libccv.ccv_cache_cleanup

def ccv_cache_close(cache):
    return _libccv.ccv_cache_close(cache)
ccv_cache_close = _libccv.ccv_cache_close
class ccv_compressed_sparse_matrix_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_compressed_sparse_matrix_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_compressed_sparse_matrix_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _libccv.ccv_compressed_sparse_matrix_t_type_set
    __swig_getmethods__["type"] = _libccv.ccv_compressed_sparse_matrix_t_type_get
    if _newclass:
        type = _swig_property(_libccv.ccv_compressed_sparse_matrix_t_type_get, _libccv.ccv_compressed_sparse_matrix_t_type_set)
    __swig_setmethods__["sig"] = _libccv.ccv_compressed_sparse_matrix_t_sig_set
    __swig_getmethods__["sig"] = _libccv.ccv_compressed_sparse_matrix_t_sig_get
    if _newclass:
        sig = _swig_property(_libccv.ccv_compressed_sparse_matrix_t_sig_get, _libccv.ccv_compressed_sparse_matrix_t_sig_set)
    __swig_setmethods__["refcount"] = _libccv.ccv_compressed_sparse_matrix_t_refcount_set
    __swig_getmethods__["refcount"] = _libccv.ccv_compressed_sparse_matrix_t_refcount_get
    if _newclass:
        refcount = _swig_property(_libccv.ccv_compressed_sparse_matrix_t_refcount_get, _libccv.ccv_compressed_sparse_matrix_t_refcount_set)
    __swig_setmethods__["rows"] = _libccv.ccv_compressed_sparse_matrix_t_rows_set
    __swig_getmethods__["rows"] = _libccv.ccv_compressed_sparse_matrix_t_rows_get
    if _newclass:
        rows = _swig_property(_libccv.ccv_compressed_sparse_matrix_t_rows_get, _libccv.ccv_compressed_sparse_matrix_t_rows_set)
    __swig_setmethods__["cols"] = _libccv.ccv_compressed_sparse_matrix_t_cols_set
    __swig_getmethods__["cols"] = _libccv.ccv_compressed_sparse_matrix_t_cols_get
    if _newclass:
        cols = _swig_property(_libccv.ccv_compressed_sparse_matrix_t_cols_get, _libccv.ccv_compressed_sparse_matrix_t_cols_set)
    __swig_setmethods__["nnz"] = _libccv.ccv_compressed_sparse_matrix_t_nnz_set
    __swig_getmethods__["nnz"] = _libccv.ccv_compressed_sparse_matrix_t_nnz_get
    if _newclass:
        nnz = _swig_property(_libccv.ccv_compressed_sparse_matrix_t_nnz_get, _libccv.ccv_compressed_sparse_matrix_t_nnz_set)
    __swig_getmethods__["tag"] = _libccv.ccv_compressed_sparse_matrix_t_tag_get
    if _newclass:
        tag = _swig_property(_libccv.ccv_compressed_sparse_matrix_t_tag_get)
    __swig_setmethods__["index"] = _libccv.ccv_compressed_sparse_matrix_t_index_set
    __swig_getmethods__["index"] = _libccv.ccv_compressed_sparse_matrix_t_index_get
    if _newclass:
        index = _swig_property(_libccv.ccv_compressed_sparse_matrix_t_index_get, _libccv.ccv_compressed_sparse_matrix_t_index_set)
    __swig_setmethods__["offset"] = _libccv.ccv_compressed_sparse_matrix_t_offset_set
    __swig_getmethods__["offset"] = _libccv.ccv_compressed_sparse_matrix_t_offset_get
    if _newclass:
        offset = _swig_property(_libccv.ccv_compressed_sparse_matrix_t_offset_get, _libccv.ccv_compressed_sparse_matrix_t_offset_set)
    __swig_setmethods__["data"] = _libccv.ccv_compressed_sparse_matrix_t_data_set
    __swig_getmethods__["data"] = _libccv.ccv_compressed_sparse_matrix_t_data_get
    if _newclass:
        data = _swig_property(_libccv.ccv_compressed_sparse_matrix_t_data_get, _libccv.ccv_compressed_sparse_matrix_t_data_set)

    def __init__(self):
        this = _libccv.new_ccv_compressed_sparse_matrix_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_compressed_sparse_matrix_t
    __del__ = lambda self: None
ccv_compressed_sparse_matrix_t_swigregister = _libccv.ccv_compressed_sparse_matrix_t_swigregister
ccv_compressed_sparse_matrix_t_swigregister(ccv_compressed_sparse_matrix_t)

class ccv_compressed_sparse_matrix_t_tag(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_compressed_sparse_matrix_t_tag, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_compressed_sparse_matrix_t_tag, name)
    __repr__ = _swig_repr
    __swig_setmethods__["chr"] = _libccv.ccv_compressed_sparse_matrix_t_tag_chr_set
    __swig_getmethods__["chr"] = _libccv.ccv_compressed_sparse_matrix_t_tag_chr_get
    if _newclass:
        chr = _swig_property(_libccv.ccv_compressed_sparse_matrix_t_tag_chr_get, _libccv.ccv_compressed_sparse_matrix_t_tag_chr_set)
    __swig_setmethods__["i"] = _libccv.ccv_compressed_sparse_matrix_t_tag_i_set
    __swig_getmethods__["i"] = _libccv.ccv_compressed_sparse_matrix_t_tag_i_get
    if _newclass:
        i = _swig_property(_libccv.ccv_compressed_sparse_matrix_t_tag_i_get, _libccv.ccv_compressed_sparse_matrix_t_tag_i_set)
    __swig_setmethods__["fl"] = _libccv.ccv_compressed_sparse_matrix_t_tag_fl_set
    __swig_getmethods__["fl"] = _libccv.ccv_compressed_sparse_matrix_t_tag_fl_get
    if _newclass:
        fl = _swig_property(_libccv.ccv_compressed_sparse_matrix_t_tag_fl_get, _libccv.ccv_compressed_sparse_matrix_t_tag_fl_set)
    __swig_setmethods__["l"] = _libccv.ccv_compressed_sparse_matrix_t_tag_l_set
    __swig_getmethods__["l"] = _libccv.ccv_compressed_sparse_matrix_t_tag_l_get
    if _newclass:
        l = _swig_property(_libccv.ccv_compressed_sparse_matrix_t_tag_l_get, _libccv.ccv_compressed_sparse_matrix_t_tag_l_set)
    __swig_setmethods__["db"] = _libccv.ccv_compressed_sparse_matrix_t_tag_db_set
    __swig_getmethods__["db"] = _libccv.ccv_compressed_sparse_matrix_t_tag_db_get
    if _newclass:
        db = _swig_property(_libccv.ccv_compressed_sparse_matrix_t_tag_db_get, _libccv.ccv_compressed_sparse_matrix_t_tag_db_set)

    def __init__(self):
        this = _libccv.new_ccv_compressed_sparse_matrix_t_tag()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_compressed_sparse_matrix_t_tag
    __del__ = lambda self: None
ccv_compressed_sparse_matrix_t_tag_swigregister = _libccv.ccv_compressed_sparse_matrix_t_tag_swigregister
ccv_compressed_sparse_matrix_t_tag_swigregister(ccv_compressed_sparse_matrix_t_tag)


def ccv_dense_matrix_renew(x, rows, cols, types, prefer_type, sig):
    return _libccv.ccv_dense_matrix_renew(x, rows, cols, types, prefer_type, sig)
ccv_dense_matrix_renew = _libccv.ccv_dense_matrix_renew

def ccv_dense_matrix_new(rows, cols, type, data, sig):
    return _libccv.ccv_dense_matrix_new(rows, cols, type, data, sig)
ccv_dense_matrix_new = _libccv.ccv_dense_matrix_new

def ccv_dense_matrix(rows, cols, type, data, sig):
    return _libccv.ccv_dense_matrix(rows, cols, type, data, sig)
ccv_dense_matrix = _libccv.ccv_dense_matrix

def ccv_make_matrix_mutable(mat):
    return _libccv.ccv_make_matrix_mutable(mat)
ccv_make_matrix_mutable = _libccv.ccv_make_matrix_mutable

def ccv_make_matrix_immutable(mat):
    return _libccv.ccv_make_matrix_immutable(mat)
ccv_make_matrix_immutable = _libccv.ccv_make_matrix_immutable

def ccv_sparse_matrix_new(rows, cols, type, major, sig):
    return _libccv.ccv_sparse_matrix_new(rows, cols, type, major, sig)
ccv_sparse_matrix_new = _libccv.ccv_sparse_matrix_new

def ccv_matrix_free_immediately(mat):
    return _libccv.ccv_matrix_free_immediately(mat)
ccv_matrix_free_immediately = _libccv.ccv_matrix_free_immediately

def ccv_matrix_free(mat):
    return _libccv.ccv_matrix_free(mat)
ccv_matrix_free = _libccv.ccv_matrix_free

def ccv_cache_generate_signature(msg, len, sig_start):
    return _libccv.ccv_cache_generate_signature(msg, len, sig_start)
ccv_cache_generate_signature = _libccv.ccv_cache_generate_signature
CCV_DEFAULT_CACHE_SIZE = _libccv.CCV_DEFAULT_CACHE_SIZE

def ccv_drain_cache():
    return _libccv.ccv_drain_cache()
ccv_drain_cache = _libccv.ccv_drain_cache

def ccv_disable_cache():
    return _libccv.ccv_disable_cache()
ccv_disable_cache = _libccv.ccv_disable_cache

def ccv_enable_default_cache():
    return _libccv.ccv_enable_default_cache()
ccv_enable_default_cache = _libccv.ccv_enable_default_cache

def ccv_enable_cache(size):
    return _libccv.ccv_enable_cache(size)
ccv_enable_cache = _libccv.ccv_enable_cache
CCV_IO_GRAY = _libccv.CCV_IO_GRAY
CCV_IO_RGB_COLOR = _libccv.CCV_IO_RGB_COLOR
CCV_IO_NO_COPY = _libccv.CCV_IO_NO_COPY
CCV_IO_ANY_STREAM = _libccv.CCV_IO_ANY_STREAM
CCV_IO_BMP_STREAM = _libccv.CCV_IO_BMP_STREAM
CCV_IO_JPEG_STREAM = _libccv.CCV_IO_JPEG_STREAM
CCV_IO_PNG_STREAM = _libccv.CCV_IO_PNG_STREAM
CCV_IO_PLAIN_STREAM = _libccv.CCV_IO_PLAIN_STREAM
CCV_IO_DEFLATE_STREAM = _libccv.CCV_IO_DEFLATE_STREAM
CCV_IO_ANY_FILE = _libccv.CCV_IO_ANY_FILE
CCV_IO_BMP_FILE = _libccv.CCV_IO_BMP_FILE
CCV_IO_JPEG_FILE = _libccv.CCV_IO_JPEG_FILE
CCV_IO_PNG_FILE = _libccv.CCV_IO_PNG_FILE
CCV_IO_BINARY_FILE = _libccv.CCV_IO_BINARY_FILE
CCV_IO_ANY_RAW = _libccv.CCV_IO_ANY_RAW
CCV_IO_RGB_RAW = _libccv.CCV_IO_RGB_RAW
CCV_IO_RGBA_RAW = _libccv.CCV_IO_RGBA_RAW
CCV_IO_ARGB_RAW = _libccv.CCV_IO_ARGB_RAW
CCV_IO_BGR_RAW = _libccv.CCV_IO_BGR_RAW
CCV_IO_BGRA_RAW = _libccv.CCV_IO_BGRA_RAW
CCV_IO_ABGR_RAW = _libccv.CCV_IO_ABGR_RAW
CCV_IO_GRAY_RAW = _libccv.CCV_IO_GRAY_RAW
CCV_IO_FINAL = _libccv.CCV_IO_FINAL
CCV_IO_CONTINUE = _libccv.CCV_IO_CONTINUE
CCV_IO_ERROR = _libccv.CCV_IO_ERROR
CCV_IO_ATTEMPTED = _libccv.CCV_IO_ATTEMPTED
CCV_IO_UNKNOWN = _libccv.CCV_IO_UNKNOWN

def ccv_read_impl(arg1, type, rows, cols, scanline):
    return _libccv.ccv_read_impl(arg1, type, rows, cols, scanline)
ccv_read_impl = _libccv.ccv_read_impl

def ccv_write(mat, out, len, type, conf):
    return _libccv.ccv_write(mat, out, len, type, conf)
ccv_write = _libccv.ccv_write

def ccv_trace(mat):
    return _libccv.ccv_trace(mat)
ccv_trace = _libccv.ccv_trace
CCV_L1_NORM = _libccv.CCV_L1_NORM
CCV_L2_NORM = _libccv.CCV_L2_NORM
CCV_GSEDT = _libccv.CCV_GSEDT
CCV_NEGATIVE = _libccv.CCV_NEGATIVE
CCV_POSITIVE = _libccv.CCV_POSITIVE
CCV_NO_PADDING = _libccv.CCV_NO_PADDING
CCV_PADDING_ZERO = _libccv.CCV_PADDING_ZERO
CCV_PADDING_EXTEND = _libccv.CCV_PADDING_EXTEND
CCV_PADDING_MIRROR = _libccv.CCV_PADDING_MIRROR
CCV_SIGNED = _libccv.CCV_SIGNED
CCV_UNSIGNED = _libccv.CCV_UNSIGNED

def ccv_norm(mat, type):
    return _libccv.ccv_norm(mat, type)
ccv_norm = _libccv.ccv_norm

def ccv_normalize(a, b, btype, flag):
    return _libccv.ccv_normalize(a, b, btype, flag)
ccv_normalize = _libccv.ccv_normalize

def ccv_sat(a, type, padding_pattern):
    return _libccv.ccv_sat(a, type, padding_pattern)
ccv_sat = _libccv.ccv_sat

def ccv_sum(mat, flag):
    return _libccv.ccv_sum(mat, flag)
ccv_sum = _libccv.ccv_sum

def ccv_variance(mat):
    return _libccv.ccv_variance(mat)
ccv_variance = _libccv.ccv_variance

def ccv_multiply(a, b, c, type):
    return _libccv.ccv_multiply(a, b, c, type)
ccv_multiply = _libccv.ccv_multiply

def ccv_add(a, b, c, type):
    return _libccv.ccv_add(a, b, c, type)
ccv_add = _libccv.ccv_add

def ccv_subtract(a, b, c, type):
    return _libccv.ccv_subtract(a, b, c, type)
ccv_subtract = _libccv.ccv_subtract
CCV_A_TRANSPOSE = _libccv.CCV_A_TRANSPOSE
CCV_B_TRANSPOSE = _libccv.CCV_B_TRANSPOSE
CCV_C_TRANSPOSE = _libccv.CCV_C_TRANSPOSE

def ccv_gemm(a, b, alpha, c, beta, transpose, d, type):
    return _libccv.ccv_gemm(a, b, alpha, c, beta, transpose, d, type)
ccv_gemm = _libccv.ccv_gemm
class ccv_margin_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_margin_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_margin_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["left"] = _libccv.ccv_margin_t_left_set
    __swig_getmethods__["left"] = _libccv.ccv_margin_t_left_get
    if _newclass:
        left = _swig_property(_libccv.ccv_margin_t_left_get, _libccv.ccv_margin_t_left_set)
    __swig_setmethods__["top"] = _libccv.ccv_margin_t_top_set
    __swig_getmethods__["top"] = _libccv.ccv_margin_t_top_get
    if _newclass:
        top = _swig_property(_libccv.ccv_margin_t_top_get, _libccv.ccv_margin_t_top_set)
    __swig_setmethods__["right"] = _libccv.ccv_margin_t_right_set
    __swig_getmethods__["right"] = _libccv.ccv_margin_t_right_get
    if _newclass:
        right = _swig_property(_libccv.ccv_margin_t_right_get, _libccv.ccv_margin_t_right_set)
    __swig_setmethods__["bottom"] = _libccv.ccv_margin_t_bottom_set
    __swig_getmethods__["bottom"] = _libccv.ccv_margin_t_bottom_get
    if _newclass:
        bottom = _swig_property(_libccv.ccv_margin_t_bottom_get, _libccv.ccv_margin_t_bottom_set)

    def __init__(self):
        this = _libccv.new_ccv_margin_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_margin_t
    __del__ = lambda self: None
ccv_margin_t_swigregister = _libccv.ccv_margin_t_swigregister
ccv_margin_t_swigregister(ccv_margin_t)


def ccv_margin(left, top, right, bottom):
    return _libccv.ccv_margin(left, top, right, bottom)
ccv_margin = _libccv.ccv_margin

def ccv_get_dense_matrix(mat):
    return _libccv.ccv_get_dense_matrix(mat)
ccv_get_dense_matrix = _libccv.ccv_get_dense_matrix

def ccv_get_sparse_matrix(mat):
    return _libccv.ccv_get_sparse_matrix(mat)
ccv_get_sparse_matrix = _libccv.ccv_get_sparse_matrix

def ccv_get_sparse_matrix_vector(mat, index):
    return _libccv.ccv_get_sparse_matrix_vector(mat, index)
ccv_get_sparse_matrix_vector = _libccv.ccv_get_sparse_matrix_vector

def ccv_get_sparse_matrix_cell(mat, row, col):
    return _libccv.ccv_get_sparse_matrix_cell(mat, row, col)
ccv_get_sparse_matrix_cell = _libccv.ccv_get_sparse_matrix_cell

def ccv_set_sparse_matrix_cell(mat, row, col, data):
    return _libccv.ccv_set_sparse_matrix_cell(mat, row, col, data)
ccv_set_sparse_matrix_cell = _libccv.ccv_set_sparse_matrix_cell

def ccv_compress_sparse_matrix(mat, csm):
    return _libccv.ccv_compress_sparse_matrix(mat, csm)
ccv_compress_sparse_matrix = _libccv.ccv_compress_sparse_matrix

def ccv_decompress_sparse_matrix(csm, smt):
    return _libccv.ccv_decompress_sparse_matrix(csm, smt)
ccv_decompress_sparse_matrix = _libccv.ccv_decompress_sparse_matrix

def ccv_move(a, b, btype, y, x):
    return _libccv.ccv_move(a, b, btype, y, x)
ccv_move = _libccv.ccv_move

def ccv_matrix_eq(a, b):
    return _libccv.ccv_matrix_eq(a, b)
ccv_matrix_eq = _libccv.ccv_matrix_eq

def ccv_slice(a, b, btype, y, x, rows, cols):
    return _libccv.ccv_slice(a, b, btype, y, x, rows, cols)
ccv_slice = _libccv.ccv_slice

def ccv_border(a, b, type, margin):
    return _libccv.ccv_border(a, b, type, margin)
ccv_border = _libccv.ccv_border

def ccv_visualize(a, b, type):
    return _libccv.ccv_visualize(a, b, type)
ccv_visualize = _libccv.ccv_visualize

def ccv_flatten(a, b, type, flag):
    return _libccv.ccv_flatten(a, b, type, flag)
ccv_flatten = _libccv.ccv_flatten

def ccv_zero(mat):
    return _libccv.ccv_zero(mat)
ccv_zero = _libccv.ccv_zero

def ccv_shift(a, b, type, lr, rr):
    return _libccv.ccv_shift(a, b, type, lr, rr)
ccv_shift = _libccv.ccv_shift

def ccv_any_nan(a):
    return _libccv.ccv_any_nan(a)
ccv_any_nan = _libccv.ccv_any_nan

def ccv_float_to_half_precision(f, h, len):
    return _libccv.ccv_float_to_half_precision(f, h, len)
ccv_float_to_half_precision = _libccv.ccv_float_to_half_precision

def ccv_half_precision_to_float(h, f, len):
    return _libccv.ccv_half_precision_to_float(h, f, len)
ccv_half_precision_to_float = _libccv.ccv_half_precision_to_float
class ccv_size_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_size_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_size_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["width"] = _libccv.ccv_size_t_width_set
    __swig_getmethods__["width"] = _libccv.ccv_size_t_width_get
    if _newclass:
        width = _swig_property(_libccv.ccv_size_t_width_get, _libccv.ccv_size_t_width_set)
    __swig_setmethods__["height"] = _libccv.ccv_size_t_height_set
    __swig_getmethods__["height"] = _libccv.ccv_size_t_height_get
    if _newclass:
        height = _swig_property(_libccv.ccv_size_t_height_get, _libccv.ccv_size_t_height_set)

    def __init__(self):
        this = _libccv.new_ccv_size_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_size_t
    __del__ = lambda self: None
ccv_size_t_swigregister = _libccv.ccv_size_t_swigregister
ccv_size_t_swigregister(ccv_size_t)


def ccv_size(width, height):
    return _libccv.ccv_size(width, height)
ccv_size = _libccv.ccv_size

def ccv_size_is_zero(size):
    return _libccv.ccv_size_is_zero(size)
ccv_size_is_zero = _libccv.ccv_size_is_zero
class ccv_rect_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_rect_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_rect_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _libccv.ccv_rect_t_x_set
    __swig_getmethods__["x"] = _libccv.ccv_rect_t_x_get
    if _newclass:
        x = _swig_property(_libccv.ccv_rect_t_x_get, _libccv.ccv_rect_t_x_set)
    __swig_setmethods__["y"] = _libccv.ccv_rect_t_y_set
    __swig_getmethods__["y"] = _libccv.ccv_rect_t_y_get
    if _newclass:
        y = _swig_property(_libccv.ccv_rect_t_y_get, _libccv.ccv_rect_t_y_set)
    __swig_setmethods__["width"] = _libccv.ccv_rect_t_width_set
    __swig_getmethods__["width"] = _libccv.ccv_rect_t_width_get
    if _newclass:
        width = _swig_property(_libccv.ccv_rect_t_width_get, _libccv.ccv_rect_t_width_set)
    __swig_setmethods__["height"] = _libccv.ccv_rect_t_height_set
    __swig_getmethods__["height"] = _libccv.ccv_rect_t_height_get
    if _newclass:
        height = _swig_property(_libccv.ccv_rect_t_height_get, _libccv.ccv_rect_t_height_set)

    def __init__(self):
        this = _libccv.new_ccv_rect_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_rect_t
    __del__ = lambda self: None
ccv_rect_t_swigregister = _libccv.ccv_rect_t_swigregister
ccv_rect_t_swigregister(ccv_rect_t)


def ccv_rect(x, y, width, height):
    return _libccv.ccv_rect(x, y, width, height)
ccv_rect = _libccv.ccv_rect

def ccv_rect_is_zero(rect):
    return _libccv.ccv_rect_is_zero(rect)
ccv_rect_is_zero = _libccv.ccv_rect_is_zero
class ccv_array_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_array_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_array_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _libccv.ccv_array_t_type_set
    __swig_getmethods__["type"] = _libccv.ccv_array_t_type_get
    if _newclass:
        type = _swig_property(_libccv.ccv_array_t_type_get, _libccv.ccv_array_t_type_set)
    __swig_setmethods__["sig"] = _libccv.ccv_array_t_sig_set
    __swig_getmethods__["sig"] = _libccv.ccv_array_t_sig_get
    if _newclass:
        sig = _swig_property(_libccv.ccv_array_t_sig_get, _libccv.ccv_array_t_sig_set)
    __swig_setmethods__["refcount"] = _libccv.ccv_array_t_refcount_set
    __swig_getmethods__["refcount"] = _libccv.ccv_array_t_refcount_get
    if _newclass:
        refcount = _swig_property(_libccv.ccv_array_t_refcount_get, _libccv.ccv_array_t_refcount_set)
    __swig_setmethods__["rnum"] = _libccv.ccv_array_t_rnum_set
    __swig_getmethods__["rnum"] = _libccv.ccv_array_t_rnum_get
    if _newclass:
        rnum = _swig_property(_libccv.ccv_array_t_rnum_get, _libccv.ccv_array_t_rnum_set)
    __swig_setmethods__["size"] = _libccv.ccv_array_t_size_set
    __swig_getmethods__["size"] = _libccv.ccv_array_t_size_get
    if _newclass:
        size = _swig_property(_libccv.ccv_array_t_size_get, _libccv.ccv_array_t_size_set)
    __swig_setmethods__["rsize"] = _libccv.ccv_array_t_rsize_set
    __swig_getmethods__["rsize"] = _libccv.ccv_array_t_rsize_get
    if _newclass:
        rsize = _swig_property(_libccv.ccv_array_t_rsize_get, _libccv.ccv_array_t_rsize_set)
    __swig_setmethods__["data"] = _libccv.ccv_array_t_data_set
    __swig_getmethods__["data"] = _libccv.ccv_array_t_data_get
    if _newclass:
        data = _swig_property(_libccv.ccv_array_t_data_get, _libccv.ccv_array_t_data_set)

    def __init__(self):
        this = _libccv.new_ccv_array_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_array_t
    __del__ = lambda self: None
ccv_array_t_swigregister = _libccv.ccv_array_t_swigregister
ccv_array_t_swigregister(ccv_array_t)


def ccv_array_new(rsize, rnum, sig):
    return _libccv.ccv_array_new(rsize, rnum, sig)
ccv_array_new = _libccv.ccv_array_new

def ccv_array_push(array, r):
    return _libccv.ccv_array_push(array, r)
ccv_array_push = _libccv.ccv_array_push

def ccv_array_group(array, index, gfunc, data):
    return _libccv.ccv_array_group(array, index, gfunc, data)
ccv_array_group = _libccv.ccv_array_group

def ccv_make_array_immutable(array):
    return _libccv.ccv_make_array_immutable(array)
ccv_make_array_immutable = _libccv.ccv_make_array_immutable

def ccv_make_array_mutable(array):
    return _libccv.ccv_make_array_mutable(array)
ccv_make_array_mutable = _libccv.ccv_make_array_mutable

def ccv_array_zero(array):
    return _libccv.ccv_array_zero(array)
ccv_array_zero = _libccv.ccv_array_zero

def ccv_array_clear(array):
    return _libccv.ccv_array_clear(array)
ccv_array_clear = _libccv.ccv_array_clear

def ccv_array_free_immediately(array):
    return _libccv.ccv_array_free_immediately(array)
ccv_array_free_immediately = _libccv.ccv_array_free_immediately

def ccv_array_free(array):
    return _libccv.ccv_array_free(array)
ccv_array_free = _libccv.ccv_array_free
class ccv_point_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_point_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_point_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _libccv.ccv_point_t_x_set
    __swig_getmethods__["x"] = _libccv.ccv_point_t_x_get
    if _newclass:
        x = _swig_property(_libccv.ccv_point_t_x_get, _libccv.ccv_point_t_x_set)
    __swig_setmethods__["y"] = _libccv.ccv_point_t_y_set
    __swig_getmethods__["y"] = _libccv.ccv_point_t_y_get
    if _newclass:
        y = _swig_property(_libccv.ccv_point_t_y_get, _libccv.ccv_point_t_y_set)

    def __init__(self):
        this = _libccv.new_ccv_point_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_point_t
    __del__ = lambda self: None
ccv_point_t_swigregister = _libccv.ccv_point_t_swigregister
ccv_point_t_swigregister(ccv_point_t)


def ccv_point(x, y):
    return _libccv.ccv_point(x, y)
ccv_point = _libccv.ccv_point
class ccv_decimal_point_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_decimal_point_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_decimal_point_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _libccv.ccv_decimal_point_t_x_set
    __swig_getmethods__["x"] = _libccv.ccv_decimal_point_t_x_get
    if _newclass:
        x = _swig_property(_libccv.ccv_decimal_point_t_x_get, _libccv.ccv_decimal_point_t_x_set)
    __swig_setmethods__["y"] = _libccv.ccv_decimal_point_t_y_set
    __swig_getmethods__["y"] = _libccv.ccv_decimal_point_t_y_get
    if _newclass:
        y = _swig_property(_libccv.ccv_decimal_point_t_y_get, _libccv.ccv_decimal_point_t_y_set)

    def __init__(self):
        this = _libccv.new_ccv_decimal_point_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_decimal_point_t
    __del__ = lambda self: None
ccv_decimal_point_t_swigregister = _libccv.ccv_decimal_point_t_swigregister
ccv_decimal_point_t_swigregister(ccv_decimal_point_t)


def ccv_decimal_point(x, y):
    return _libccv.ccv_decimal_point(x, y)
ccv_decimal_point = _libccv.ccv_decimal_point
class ccv_decimal_pose_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_decimal_pose_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_decimal_pose_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _libccv.ccv_decimal_pose_t_x_set
    __swig_getmethods__["x"] = _libccv.ccv_decimal_pose_t_x_get
    if _newclass:
        x = _swig_property(_libccv.ccv_decimal_pose_t_x_get, _libccv.ccv_decimal_pose_t_x_set)
    __swig_setmethods__["y"] = _libccv.ccv_decimal_pose_t_y_set
    __swig_getmethods__["y"] = _libccv.ccv_decimal_pose_t_y_get
    if _newclass:
        y = _swig_property(_libccv.ccv_decimal_pose_t_y_get, _libccv.ccv_decimal_pose_t_y_set)
    __swig_setmethods__["a"] = _libccv.ccv_decimal_pose_t_a_set
    __swig_getmethods__["a"] = _libccv.ccv_decimal_pose_t_a_get
    if _newclass:
        a = _swig_property(_libccv.ccv_decimal_pose_t_a_get, _libccv.ccv_decimal_pose_t_a_set)
    __swig_setmethods__["b"] = _libccv.ccv_decimal_pose_t_b_set
    __swig_getmethods__["b"] = _libccv.ccv_decimal_pose_t_b_get
    if _newclass:
        b = _swig_property(_libccv.ccv_decimal_pose_t_b_get, _libccv.ccv_decimal_pose_t_b_set)
    __swig_setmethods__["roll"] = _libccv.ccv_decimal_pose_t_roll_set
    __swig_getmethods__["roll"] = _libccv.ccv_decimal_pose_t_roll_get
    if _newclass:
        roll = _swig_property(_libccv.ccv_decimal_pose_t_roll_get, _libccv.ccv_decimal_pose_t_roll_set)
    __swig_setmethods__["pitch"] = _libccv.ccv_decimal_pose_t_pitch_set
    __swig_getmethods__["pitch"] = _libccv.ccv_decimal_pose_t_pitch_get
    if _newclass:
        pitch = _swig_property(_libccv.ccv_decimal_pose_t_pitch_get, _libccv.ccv_decimal_pose_t_pitch_set)
    __swig_setmethods__["yaw"] = _libccv.ccv_decimal_pose_t_yaw_set
    __swig_getmethods__["yaw"] = _libccv.ccv_decimal_pose_t_yaw_get
    if _newclass:
        yaw = _swig_property(_libccv.ccv_decimal_pose_t_yaw_get, _libccv.ccv_decimal_pose_t_yaw_set)

    def __init__(self):
        this = _libccv.new_ccv_decimal_pose_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_decimal_pose_t
    __del__ = lambda self: None
ccv_decimal_pose_t_swigregister = _libccv.ccv_decimal_pose_t_swigregister
ccv_decimal_pose_t_swigregister(ccv_decimal_pose_t)


def ccv_decimal_pose(x, y, a, b, roll, pitch, yaw):
    return _libccv.ccv_decimal_pose(x, y, a, b, roll, pitch, yaw)
ccv_decimal_pose = _libccv.ccv_decimal_pose
class ccv_contour_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_contour_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_contour_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rect"] = _libccv.ccv_contour_t_rect_set
    __swig_getmethods__["rect"] = _libccv.ccv_contour_t_rect_get
    if _newclass:
        rect = _swig_property(_libccv.ccv_contour_t_rect_get, _libccv.ccv_contour_t_rect_set)
    __swig_setmethods__["size"] = _libccv.ccv_contour_t_size_set
    __swig_getmethods__["size"] = _libccv.ccv_contour_t_size_get
    if _newclass:
        size = _swig_property(_libccv.ccv_contour_t_size_get, _libccv.ccv_contour_t_size_set)
    __swig_setmethods__["set"] = _libccv.ccv_contour_t_set_set
    __swig_getmethods__["set"] = _libccv.ccv_contour_t_set_get
    if _newclass:
        set = _swig_property(_libccv.ccv_contour_t_set_get, _libccv.ccv_contour_t_set_set)
    __swig_setmethods__["m10"] = _libccv.ccv_contour_t_m10_set
    __swig_getmethods__["m10"] = _libccv.ccv_contour_t_m10_get
    if _newclass:
        m10 = _swig_property(_libccv.ccv_contour_t_m10_get, _libccv.ccv_contour_t_m10_set)
    __swig_setmethods__["m01"] = _libccv.ccv_contour_t_m01_set
    __swig_getmethods__["m01"] = _libccv.ccv_contour_t_m01_get
    if _newclass:
        m01 = _swig_property(_libccv.ccv_contour_t_m01_get, _libccv.ccv_contour_t_m01_set)
    __swig_setmethods__["m11"] = _libccv.ccv_contour_t_m11_set
    __swig_getmethods__["m11"] = _libccv.ccv_contour_t_m11_get
    if _newclass:
        m11 = _swig_property(_libccv.ccv_contour_t_m11_get, _libccv.ccv_contour_t_m11_set)
    __swig_setmethods__["m20"] = _libccv.ccv_contour_t_m20_set
    __swig_getmethods__["m20"] = _libccv.ccv_contour_t_m20_get
    if _newclass:
        m20 = _swig_property(_libccv.ccv_contour_t_m20_get, _libccv.ccv_contour_t_m20_set)
    __swig_setmethods__["m02"] = _libccv.ccv_contour_t_m02_set
    __swig_getmethods__["m02"] = _libccv.ccv_contour_t_m02_get
    if _newclass:
        m02 = _swig_property(_libccv.ccv_contour_t_m02_get, _libccv.ccv_contour_t_m02_set)

    def __init__(self):
        this = _libccv.new_ccv_contour_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_contour_t
    __del__ = lambda self: None
ccv_contour_t_swigregister = _libccv.ccv_contour_t_swigregister
ccv_contour_t_swigregister(ccv_contour_t)


def ccv_contour_new(set):
    return _libccv.ccv_contour_new(set)
ccv_contour_new = _libccv.ccv_contour_new

def ccv_contour_push(contour, point):
    return _libccv.ccv_contour_push(contour, point)
ccv_contour_push = _libccv.ccv_contour_push

def ccv_contour_free(contour):
    return _libccv.ccv_contour_free(contour)
ccv_contour_free = _libccv.ccv_contour_free

def ccv_invert(a, b, type):
    return _libccv.ccv_invert(a, b, type)
ccv_invert = _libccv.ccv_invert

def ccv_solve(a, b, d, type):
    return _libccv.ccv_solve(a, b, d, type)
ccv_solve = _libccv.ccv_solve

def ccv_eigen(a, type, epsilon):
    return _libccv.ccv_eigen(a, type, epsilon)
ccv_eigen = _libccv.ccv_eigen
class ccv_minimize_param_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_minimize_param_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_minimize_param_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["interp"] = _libccv.ccv_minimize_param_t_interp_set
    __swig_getmethods__["interp"] = _libccv.ccv_minimize_param_t_interp_get
    if _newclass:
        interp = _swig_property(_libccv.ccv_minimize_param_t_interp_get, _libccv.ccv_minimize_param_t_interp_set)
    __swig_setmethods__["extrap"] = _libccv.ccv_minimize_param_t_extrap_set
    __swig_getmethods__["extrap"] = _libccv.ccv_minimize_param_t_extrap_get
    if _newclass:
        extrap = _swig_property(_libccv.ccv_minimize_param_t_extrap_get, _libccv.ccv_minimize_param_t_extrap_set)
    __swig_setmethods__["max_iter"] = _libccv.ccv_minimize_param_t_max_iter_set
    __swig_getmethods__["max_iter"] = _libccv.ccv_minimize_param_t_max_iter_get
    if _newclass:
        max_iter = _swig_property(_libccv.ccv_minimize_param_t_max_iter_get, _libccv.ccv_minimize_param_t_max_iter_set)
    __swig_setmethods__["ratio"] = _libccv.ccv_minimize_param_t_ratio_set
    __swig_getmethods__["ratio"] = _libccv.ccv_minimize_param_t_ratio_get
    if _newclass:
        ratio = _swig_property(_libccv.ccv_minimize_param_t_ratio_get, _libccv.ccv_minimize_param_t_ratio_set)
    __swig_setmethods__["rho"] = _libccv.ccv_minimize_param_t_rho_set
    __swig_getmethods__["rho"] = _libccv.ccv_minimize_param_t_rho_get
    if _newclass:
        rho = _swig_property(_libccv.ccv_minimize_param_t_rho_get, _libccv.ccv_minimize_param_t_rho_set)
    __swig_setmethods__["sig"] = _libccv.ccv_minimize_param_t_sig_set
    __swig_getmethods__["sig"] = _libccv.ccv_minimize_param_t_sig_get
    if _newclass:
        sig = _swig_property(_libccv.ccv_minimize_param_t_sig_get, _libccv.ccv_minimize_param_t_sig_set)

    def __init__(self):
        this = _libccv.new_ccv_minimize_param_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_minimize_param_t
    __del__ = lambda self: None
ccv_minimize_param_t_swigregister = _libccv.ccv_minimize_param_t_swigregister
ccv_minimize_param_t_swigregister(ccv_minimize_param_t)


def ccv_minimize(x, length, red, func, params, data):
    return _libccv.ccv_minimize(x, length, red, func, params, data)
ccv_minimize = _libccv.ccv_minimize

def ccv_filter(a, b, type, padding_pattern):
    return _libccv.ccv_filter(a, b, type, padding_pattern)
ccv_filter = _libccv.ccv_filter

def ccv_filter_kernel(x, func, data):
    return _libccv.ccv_filter_kernel(x, func, data)
ccv_filter_kernel = _libccv.ccv_filter_kernel

def ccv_distance_transform(a, type, x_type, y_type, dx, dy, dxx, dyy, flag):
    return _libccv.ccv_distance_transform(a, type, x_type, y_type, dx, dy, dxx, dyy, flag)
ccv_distance_transform = _libccv.ccv_distance_transform

def ccv_sparse_coding(x, k, A, typeA, y, typey):
    return _libccv.ccv_sparse_coding(x, k, A, typeA, y, typey)
ccv_sparse_coding = _libccv.ccv_sparse_coding

def ccv_sobel(a, type, dx, dy):
    return _libccv.ccv_sobel(a, type, dx, dy)
ccv_sobel = _libccv.ccv_sobel

def ccv_gradient(a, ttype, mtype, dx, dy):
    return _libccv.ccv_gradient(a, ttype, mtype, dx, dy)
ccv_gradient = _libccv.ccv_gradient
CCV_FLIP_X = _libccv.CCV_FLIP_X
CCV_FLIP_Y = _libccv.CCV_FLIP_Y

def ccv_flip(a, btype, type):
    return _libccv.ccv_flip(a, btype, type)
ccv_flip = _libccv.ccv_flip

def ccv_blur(a, type, sigma):
    return _libccv.ccv_blur(a, type, sigma)
ccv_blur = _libccv.ccv_blur
CCV_RGB_TO_YUV = _libccv.CCV_RGB_TO_YUV

def ccv_color_transform(a, type, flag):
    return _libccv.ccv_color_transform(a, type, flag)
ccv_color_transform = _libccv.ccv_color_transform
CCV_INTER_AREA = _libccv.CCV_INTER_AREA
CCV_INTER_LINEAR = _libccv.CCV_INTER_LINEAR
CCV_INTER_CUBIC = _libccv.CCV_INTER_CUBIC
CCV_INTER_LANCZOS = _libccv.CCV_INTER_LANCZOS

def ccv_resample(a, btype, rows, cols, type):
    return _libccv.ccv_resample(a, btype, rows, cols, type)
ccv_resample = _libccv.ccv_resample

def ccv_sample_down(a, type, src_x, src_y):
    return _libccv.ccv_sample_down(a, type, src_x, src_y)
ccv_sample_down = _libccv.ccv_sample_down

def ccv_sample_up(a, type, src_x, src_y):
    return _libccv.ccv_sample_up(a, type, src_x, src_y)
ccv_sample_up = _libccv.ccv_sample_up

def ccv_decimal_slice(a, type, y, x, rows, cols):
    return _libccv.ccv_decimal_slice(a, type, y, x, rows, cols)
ccv_decimal_slice = _libccv.ccv_decimal_slice

def ccv_perspective_transform_apply(point, size, m00, m01, m02, m10, m11, m12, m20, m21, m22):
    return _libccv.ccv_perspective_transform_apply(point, size, m00, m01, m02, m10, m11, m12, m20, m21, m22)
ccv_perspective_transform_apply = _libccv.ccv_perspective_transform_apply

def ccv_perspective_transform(a, type, m00, m01, m02, m10, m11, m12, m20, m21, m22):
    return _libccv.ccv_perspective_transform(a, type, m00, m01, m02, m10, m11, m12, m20, m21, m22)
ccv_perspective_transform = _libccv.ccv_perspective_transform

def ccv_hog(a, b_type, sbin, size):
    return _libccv.ccv_hog(a, b_type, sbin, size)
ccv_hog = _libccv.ccv_hog

def ccv_canny(a, type, size, low_thresh, high_thresh):
    return _libccv.ccv_canny(a, type, size, low_thresh, high_thresh)
ccv_canny = _libccv.ccv_canny

def ccv_close_outline(a, type):
    return _libccv.ccv_close_outline(a, type)
ccv_close_outline = _libccv.ccv_close_outline

def ccv_otsu(a, outvar, range):
    return _libccv.ccv_otsu(a, outvar, range)
ccv_otsu = _libccv.ccv_otsu
class ccv_decimal_point_with_status_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_decimal_point_with_status_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_decimal_point_with_status_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["point"] = _libccv.ccv_decimal_point_with_status_t_point_set
    __swig_getmethods__["point"] = _libccv.ccv_decimal_point_with_status_t_point_get
    if _newclass:
        point = _swig_property(_libccv.ccv_decimal_point_with_status_t_point_get, _libccv.ccv_decimal_point_with_status_t_point_set)
    __swig_setmethods__["status"] = _libccv.ccv_decimal_point_with_status_t_status_set
    __swig_getmethods__["status"] = _libccv.ccv_decimal_point_with_status_t_status_get
    if _newclass:
        status = _swig_property(_libccv.ccv_decimal_point_with_status_t_status_get, _libccv.ccv_decimal_point_with_status_t_status_set)

    def __init__(self):
        this = _libccv.new_ccv_decimal_point_with_status_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_decimal_point_with_status_t
    __del__ = lambda self: None
ccv_decimal_point_with_status_t_swigregister = _libccv.ccv_decimal_point_with_status_t_swigregister
ccv_decimal_point_with_status_t_swigregister(ccv_decimal_point_with_status_t)


def ccv_optical_flow_lucas_kanade(a, b, point_a, point_b, win_size, level, min_eigen):
    return _libccv.ccv_optical_flow_lucas_kanade(a, b, point_a, point_b, win_size, level, min_eigen)
ccv_optical_flow_lucas_kanade = _libccv.ccv_optical_flow_lucas_kanade
class ccv_daisy_param_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_daisy_param_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_daisy_param_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["radius"] = _libccv.ccv_daisy_param_t_radius_set
    __swig_getmethods__["radius"] = _libccv.ccv_daisy_param_t_radius_get
    if _newclass:
        radius = _swig_property(_libccv.ccv_daisy_param_t_radius_get, _libccv.ccv_daisy_param_t_radius_set)
    __swig_setmethods__["rad_q_no"] = _libccv.ccv_daisy_param_t_rad_q_no_set
    __swig_getmethods__["rad_q_no"] = _libccv.ccv_daisy_param_t_rad_q_no_get
    if _newclass:
        rad_q_no = _swig_property(_libccv.ccv_daisy_param_t_rad_q_no_get, _libccv.ccv_daisy_param_t_rad_q_no_set)
    __swig_setmethods__["th_q_no"] = _libccv.ccv_daisy_param_t_th_q_no_set
    __swig_getmethods__["th_q_no"] = _libccv.ccv_daisy_param_t_th_q_no_get
    if _newclass:
        th_q_no = _swig_property(_libccv.ccv_daisy_param_t_th_q_no_get, _libccv.ccv_daisy_param_t_th_q_no_set)
    __swig_setmethods__["hist_th_q_no"] = _libccv.ccv_daisy_param_t_hist_th_q_no_set
    __swig_getmethods__["hist_th_q_no"] = _libccv.ccv_daisy_param_t_hist_th_q_no_get
    if _newclass:
        hist_th_q_no = _swig_property(_libccv.ccv_daisy_param_t_hist_th_q_no_get, _libccv.ccv_daisy_param_t_hist_th_q_no_set)
    __swig_setmethods__["normalize_threshold"] = _libccv.ccv_daisy_param_t_normalize_threshold_set
    __swig_getmethods__["normalize_threshold"] = _libccv.ccv_daisy_param_t_normalize_threshold_get
    if _newclass:
        normalize_threshold = _swig_property(_libccv.ccv_daisy_param_t_normalize_threshold_get, _libccv.ccv_daisy_param_t_normalize_threshold_set)
    __swig_setmethods__["normalize_method"] = _libccv.ccv_daisy_param_t_normalize_method_set
    __swig_getmethods__["normalize_method"] = _libccv.ccv_daisy_param_t_normalize_method_get
    if _newclass:
        normalize_method = _swig_property(_libccv.ccv_daisy_param_t_normalize_method_get, _libccv.ccv_daisy_param_t_normalize_method_set)

    def __init__(self):
        this = _libccv.new_ccv_daisy_param_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_daisy_param_t
    __del__ = lambda self: None
ccv_daisy_param_t_swigregister = _libccv.ccv_daisy_param_t_swigregister
ccv_daisy_param_t_swigregister(ccv_daisy_param_t)

CCV_DAISY_NORMAL_PARTIAL = _libccv.CCV_DAISY_NORMAL_PARTIAL
CCV_DAISY_NORMAL_FULL = _libccv.CCV_DAISY_NORMAL_FULL
CCV_DAISY_NORMAL_SIFT = _libccv.CCV_DAISY_NORMAL_SIFT

def ccv_daisy(a, type, params):
    return _libccv.ccv_daisy(a, type, params)
ccv_daisy = _libccv.ccv_daisy
class ccv_keypoint_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_keypoint_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_keypoint_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _libccv.ccv_keypoint_t_x_set
    __swig_getmethods__["x"] = _libccv.ccv_keypoint_t_x_get
    if _newclass:
        x = _swig_property(_libccv.ccv_keypoint_t_x_get, _libccv.ccv_keypoint_t_x_set)
    __swig_setmethods__["y"] = _libccv.ccv_keypoint_t_y_set
    __swig_getmethods__["y"] = _libccv.ccv_keypoint_t_y_get
    if _newclass:
        y = _swig_property(_libccv.ccv_keypoint_t_y_get, _libccv.ccv_keypoint_t_y_set)
    __swig_setmethods__["octave"] = _libccv.ccv_keypoint_t_octave_set
    __swig_getmethods__["octave"] = _libccv.ccv_keypoint_t_octave_get
    if _newclass:
        octave = _swig_property(_libccv.ccv_keypoint_t_octave_get, _libccv.ccv_keypoint_t_octave_set)
    __swig_setmethods__["level"] = _libccv.ccv_keypoint_t_level_set
    __swig_getmethods__["level"] = _libccv.ccv_keypoint_t_level_get
    if _newclass:
        level = _swig_property(_libccv.ccv_keypoint_t_level_get, _libccv.ccv_keypoint_t_level_set)
    __swig_getmethods__["affine"] = _libccv.ccv_keypoint_t_affine_get
    if _newclass:
        affine = _swig_property(_libccv.ccv_keypoint_t_affine_get)
    __swig_getmethods__["regular"] = _libccv.ccv_keypoint_t_regular_get
    if _newclass:
        regular = _swig_property(_libccv.ccv_keypoint_t_regular_get)

    def __init__(self):
        this = _libccv.new_ccv_keypoint_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_keypoint_t
    __del__ = lambda self: None
ccv_keypoint_t_swigregister = _libccv.ccv_keypoint_t_swigregister
ccv_keypoint_t_swigregister(ccv_keypoint_t)

class ccv_sift_param_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_sift_param_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_sift_param_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["up2x"] = _libccv.ccv_sift_param_t_up2x_set
    __swig_getmethods__["up2x"] = _libccv.ccv_sift_param_t_up2x_get
    if _newclass:
        up2x = _swig_property(_libccv.ccv_sift_param_t_up2x_get, _libccv.ccv_sift_param_t_up2x_set)
    __swig_setmethods__["noctaves"] = _libccv.ccv_sift_param_t_noctaves_set
    __swig_getmethods__["noctaves"] = _libccv.ccv_sift_param_t_noctaves_get
    if _newclass:
        noctaves = _swig_property(_libccv.ccv_sift_param_t_noctaves_get, _libccv.ccv_sift_param_t_noctaves_set)
    __swig_setmethods__["nlevels"] = _libccv.ccv_sift_param_t_nlevels_set
    __swig_getmethods__["nlevels"] = _libccv.ccv_sift_param_t_nlevels_get
    if _newclass:
        nlevels = _swig_property(_libccv.ccv_sift_param_t_nlevels_get, _libccv.ccv_sift_param_t_nlevels_set)
    __swig_setmethods__["edge_threshold"] = _libccv.ccv_sift_param_t_edge_threshold_set
    __swig_getmethods__["edge_threshold"] = _libccv.ccv_sift_param_t_edge_threshold_get
    if _newclass:
        edge_threshold = _swig_property(_libccv.ccv_sift_param_t_edge_threshold_get, _libccv.ccv_sift_param_t_edge_threshold_set)
    __swig_setmethods__["peak_threshold"] = _libccv.ccv_sift_param_t_peak_threshold_set
    __swig_getmethods__["peak_threshold"] = _libccv.ccv_sift_param_t_peak_threshold_get
    if _newclass:
        peak_threshold = _swig_property(_libccv.ccv_sift_param_t_peak_threshold_get, _libccv.ccv_sift_param_t_peak_threshold_set)
    __swig_setmethods__["norm_threshold"] = _libccv.ccv_sift_param_t_norm_threshold_set
    __swig_getmethods__["norm_threshold"] = _libccv.ccv_sift_param_t_norm_threshold_get
    if _newclass:
        norm_threshold = _swig_property(_libccv.ccv_sift_param_t_norm_threshold_get, _libccv.ccv_sift_param_t_norm_threshold_set)

    def __init__(self):
        this = _libccv.new_ccv_sift_param_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_sift_param_t
    __del__ = lambda self: None
ccv_sift_param_t_swigregister = _libccv.ccv_sift_param_t_swigregister
ccv_sift_param_t_swigregister(ccv_sift_param_t)


def ccv_sift(a, keypoints, type, params):
    return _libccv.ccv_sift(a, keypoints, type, params)
ccv_sift = _libccv.ccv_sift
class ccv_mser_param_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_mser_param_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_mser_param_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["delta"] = _libccv.ccv_mser_param_t_delta_set
    __swig_getmethods__["delta"] = _libccv.ccv_mser_param_t_delta_get
    if _newclass:
        delta = _swig_property(_libccv.ccv_mser_param_t_delta_get, _libccv.ccv_mser_param_t_delta_set)
    __swig_setmethods__["min_area"] = _libccv.ccv_mser_param_t_min_area_set
    __swig_getmethods__["min_area"] = _libccv.ccv_mser_param_t_min_area_get
    if _newclass:
        min_area = _swig_property(_libccv.ccv_mser_param_t_min_area_get, _libccv.ccv_mser_param_t_min_area_set)
    __swig_setmethods__["direction"] = _libccv.ccv_mser_param_t_direction_set
    __swig_getmethods__["direction"] = _libccv.ccv_mser_param_t_direction_get
    if _newclass:
        direction = _swig_property(_libccv.ccv_mser_param_t_direction_get, _libccv.ccv_mser_param_t_direction_set)
    __swig_setmethods__["max_area"] = _libccv.ccv_mser_param_t_max_area_set
    __swig_getmethods__["max_area"] = _libccv.ccv_mser_param_t_max_area_get
    if _newclass:
        max_area = _swig_property(_libccv.ccv_mser_param_t_max_area_get, _libccv.ccv_mser_param_t_max_area_set)
    __swig_setmethods__["max_variance"] = _libccv.ccv_mser_param_t_max_variance_set
    __swig_getmethods__["max_variance"] = _libccv.ccv_mser_param_t_max_variance_get
    if _newclass:
        max_variance = _swig_property(_libccv.ccv_mser_param_t_max_variance_get, _libccv.ccv_mser_param_t_max_variance_set)
    __swig_setmethods__["min_diversity"] = _libccv.ccv_mser_param_t_min_diversity_set
    __swig_getmethods__["min_diversity"] = _libccv.ccv_mser_param_t_min_diversity_get
    if _newclass:
        min_diversity = _swig_property(_libccv.ccv_mser_param_t_min_diversity_get, _libccv.ccv_mser_param_t_min_diversity_set)
    __swig_setmethods__["range"] = _libccv.ccv_mser_param_t_range_set
    __swig_getmethods__["range"] = _libccv.ccv_mser_param_t_range_get
    if _newclass:
        range = _swig_property(_libccv.ccv_mser_param_t_range_get, _libccv.ccv_mser_param_t_range_set)
    __swig_setmethods__["area_threshold"] = _libccv.ccv_mser_param_t_area_threshold_set
    __swig_getmethods__["area_threshold"] = _libccv.ccv_mser_param_t_area_threshold_get
    if _newclass:
        area_threshold = _swig_property(_libccv.ccv_mser_param_t_area_threshold_get, _libccv.ccv_mser_param_t_area_threshold_set)
    __swig_setmethods__["min_margin"] = _libccv.ccv_mser_param_t_min_margin_set
    __swig_getmethods__["min_margin"] = _libccv.ccv_mser_param_t_min_margin_get
    if _newclass:
        min_margin = _swig_property(_libccv.ccv_mser_param_t_min_margin_get, _libccv.ccv_mser_param_t_min_margin_set)
    __swig_setmethods__["max_evolution"] = _libccv.ccv_mser_param_t_max_evolution_set
    __swig_getmethods__["max_evolution"] = _libccv.ccv_mser_param_t_max_evolution_get
    if _newclass:
        max_evolution = _swig_property(_libccv.ccv_mser_param_t_max_evolution_get, _libccv.ccv_mser_param_t_max_evolution_set)
    __swig_setmethods__["edge_blur_sigma"] = _libccv.ccv_mser_param_t_edge_blur_sigma_set
    __swig_getmethods__["edge_blur_sigma"] = _libccv.ccv_mser_param_t_edge_blur_sigma_get
    if _newclass:
        edge_blur_sigma = _swig_property(_libccv.ccv_mser_param_t_edge_blur_sigma_get, _libccv.ccv_mser_param_t_edge_blur_sigma_set)

    def __init__(self):
        this = _libccv.new_ccv_mser_param_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_mser_param_t
    __del__ = lambda self: None
ccv_mser_param_t_swigregister = _libccv.ccv_mser_param_t_swigregister
ccv_mser_param_t_swigregister(ccv_mser_param_t)
ccv_sift_default_params = cvar.ccv_sift_default_params

class ccv_mser_keypoint_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_mser_keypoint_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_mser_keypoint_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rect"] = _libccv.ccv_mser_keypoint_t_rect_set
    __swig_getmethods__["rect"] = _libccv.ccv_mser_keypoint_t_rect_get
    if _newclass:
        rect = _swig_property(_libccv.ccv_mser_keypoint_t_rect_get, _libccv.ccv_mser_keypoint_t_rect_set)
    __swig_setmethods__["size"] = _libccv.ccv_mser_keypoint_t_size_set
    __swig_getmethods__["size"] = _libccv.ccv_mser_keypoint_t_size_get
    if _newclass:
        size = _swig_property(_libccv.ccv_mser_keypoint_t_size_get, _libccv.ccv_mser_keypoint_t_size_set)
    __swig_setmethods__["m10"] = _libccv.ccv_mser_keypoint_t_m10_set
    __swig_getmethods__["m10"] = _libccv.ccv_mser_keypoint_t_m10_get
    if _newclass:
        m10 = _swig_property(_libccv.ccv_mser_keypoint_t_m10_get, _libccv.ccv_mser_keypoint_t_m10_set)
    __swig_setmethods__["m01"] = _libccv.ccv_mser_keypoint_t_m01_set
    __swig_getmethods__["m01"] = _libccv.ccv_mser_keypoint_t_m01_get
    if _newclass:
        m01 = _swig_property(_libccv.ccv_mser_keypoint_t_m01_get, _libccv.ccv_mser_keypoint_t_m01_set)
    __swig_setmethods__["m11"] = _libccv.ccv_mser_keypoint_t_m11_set
    __swig_getmethods__["m11"] = _libccv.ccv_mser_keypoint_t_m11_get
    if _newclass:
        m11 = _swig_property(_libccv.ccv_mser_keypoint_t_m11_get, _libccv.ccv_mser_keypoint_t_m11_set)
    __swig_setmethods__["m20"] = _libccv.ccv_mser_keypoint_t_m20_set
    __swig_getmethods__["m20"] = _libccv.ccv_mser_keypoint_t_m20_get
    if _newclass:
        m20 = _swig_property(_libccv.ccv_mser_keypoint_t_m20_get, _libccv.ccv_mser_keypoint_t_m20_set)
    __swig_setmethods__["m02"] = _libccv.ccv_mser_keypoint_t_m02_set
    __swig_getmethods__["m02"] = _libccv.ccv_mser_keypoint_t_m02_get
    if _newclass:
        m02 = _swig_property(_libccv.ccv_mser_keypoint_t_m02_get, _libccv.ccv_mser_keypoint_t_m02_set)
    __swig_setmethods__["keypoint"] = _libccv.ccv_mser_keypoint_t_keypoint_set
    __swig_getmethods__["keypoint"] = _libccv.ccv_mser_keypoint_t_keypoint_get
    if _newclass:
        keypoint = _swig_property(_libccv.ccv_mser_keypoint_t_keypoint_get, _libccv.ccv_mser_keypoint_t_keypoint_set)

    def __init__(self):
        this = _libccv.new_ccv_mser_keypoint_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_mser_keypoint_t
    __del__ = lambda self: None
ccv_mser_keypoint_t_swigregister = _libccv.ccv_mser_keypoint_t_swigregister
ccv_mser_keypoint_t_swigregister(ccv_mser_keypoint_t)

CCV_BRIGHT_TO_DARK = _libccv.CCV_BRIGHT_TO_DARK
CCV_DARK_TO_BRIGHT = _libccv.CCV_DARK_TO_BRIGHT

def ccv_mser(a, h, type, params):
    return _libccv.ccv_mser(a, h, type, params)
ccv_mser = _libccv.ccv_mser
class ccv_swt_param_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_swt_param_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_swt_param_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["interval"] = _libccv.ccv_swt_param_t_interval_set
    __swig_getmethods__["interval"] = _libccv.ccv_swt_param_t_interval_get
    if _newclass:
        interval = _swig_property(_libccv.ccv_swt_param_t_interval_get, _libccv.ccv_swt_param_t_interval_set)
    __swig_setmethods__["min_neighbors"] = _libccv.ccv_swt_param_t_min_neighbors_set
    __swig_getmethods__["min_neighbors"] = _libccv.ccv_swt_param_t_min_neighbors_get
    if _newclass:
        min_neighbors = _swig_property(_libccv.ccv_swt_param_t_min_neighbors_get, _libccv.ccv_swt_param_t_min_neighbors_set)
    __swig_setmethods__["scale_invariant"] = _libccv.ccv_swt_param_t_scale_invariant_set
    __swig_getmethods__["scale_invariant"] = _libccv.ccv_swt_param_t_scale_invariant_get
    if _newclass:
        scale_invariant = _swig_property(_libccv.ccv_swt_param_t_scale_invariant_get, _libccv.ccv_swt_param_t_scale_invariant_set)
    __swig_setmethods__["direction"] = _libccv.ccv_swt_param_t_direction_set
    __swig_getmethods__["direction"] = _libccv.ccv_swt_param_t_direction_get
    if _newclass:
        direction = _swig_property(_libccv.ccv_swt_param_t_direction_get, _libccv.ccv_swt_param_t_direction_set)
    __swig_setmethods__["same_word_thresh"] = _libccv.ccv_swt_param_t_same_word_thresh_set
    __swig_getmethods__["same_word_thresh"] = _libccv.ccv_swt_param_t_same_word_thresh_get
    if _newclass:
        same_word_thresh = _swig_property(_libccv.ccv_swt_param_t_same_word_thresh_get, _libccv.ccv_swt_param_t_same_word_thresh_set)
    __swig_setmethods__["size"] = _libccv.ccv_swt_param_t_size_set
    __swig_getmethods__["size"] = _libccv.ccv_swt_param_t_size_get
    if _newclass:
        size = _swig_property(_libccv.ccv_swt_param_t_size_get, _libccv.ccv_swt_param_t_size_set)
    __swig_setmethods__["low_thresh"] = _libccv.ccv_swt_param_t_low_thresh_set
    __swig_getmethods__["low_thresh"] = _libccv.ccv_swt_param_t_low_thresh_get
    if _newclass:
        low_thresh = _swig_property(_libccv.ccv_swt_param_t_low_thresh_get, _libccv.ccv_swt_param_t_low_thresh_set)
    __swig_setmethods__["high_thresh"] = _libccv.ccv_swt_param_t_high_thresh_set
    __swig_getmethods__["high_thresh"] = _libccv.ccv_swt_param_t_high_thresh_get
    if _newclass:
        high_thresh = _swig_property(_libccv.ccv_swt_param_t_high_thresh_get, _libccv.ccv_swt_param_t_high_thresh_set)
    __swig_setmethods__["max_height"] = _libccv.ccv_swt_param_t_max_height_set
    __swig_getmethods__["max_height"] = _libccv.ccv_swt_param_t_max_height_get
    if _newclass:
        max_height = _swig_property(_libccv.ccv_swt_param_t_max_height_get, _libccv.ccv_swt_param_t_max_height_set)
    __swig_setmethods__["min_height"] = _libccv.ccv_swt_param_t_min_height_set
    __swig_getmethods__["min_height"] = _libccv.ccv_swt_param_t_min_height_get
    if _newclass:
        min_height = _swig_property(_libccv.ccv_swt_param_t_min_height_get, _libccv.ccv_swt_param_t_min_height_set)
    __swig_setmethods__["min_area"] = _libccv.ccv_swt_param_t_min_area_set
    __swig_getmethods__["min_area"] = _libccv.ccv_swt_param_t_min_area_get
    if _newclass:
        min_area = _swig_property(_libccv.ccv_swt_param_t_min_area_get, _libccv.ccv_swt_param_t_min_area_set)
    __swig_setmethods__["letter_occlude_thresh"] = _libccv.ccv_swt_param_t_letter_occlude_thresh_set
    __swig_getmethods__["letter_occlude_thresh"] = _libccv.ccv_swt_param_t_letter_occlude_thresh_get
    if _newclass:
        letter_occlude_thresh = _swig_property(_libccv.ccv_swt_param_t_letter_occlude_thresh_get, _libccv.ccv_swt_param_t_letter_occlude_thresh_set)
    __swig_setmethods__["aspect_ratio"] = _libccv.ccv_swt_param_t_aspect_ratio_set
    __swig_getmethods__["aspect_ratio"] = _libccv.ccv_swt_param_t_aspect_ratio_get
    if _newclass:
        aspect_ratio = _swig_property(_libccv.ccv_swt_param_t_aspect_ratio_get, _libccv.ccv_swt_param_t_aspect_ratio_set)
    __swig_setmethods__["std_ratio"] = _libccv.ccv_swt_param_t_std_ratio_set
    __swig_getmethods__["std_ratio"] = _libccv.ccv_swt_param_t_std_ratio_get
    if _newclass:
        std_ratio = _swig_property(_libccv.ccv_swt_param_t_std_ratio_get, _libccv.ccv_swt_param_t_std_ratio_set)
    __swig_setmethods__["thickness_ratio"] = _libccv.ccv_swt_param_t_thickness_ratio_set
    __swig_getmethods__["thickness_ratio"] = _libccv.ccv_swt_param_t_thickness_ratio_get
    if _newclass:
        thickness_ratio = _swig_property(_libccv.ccv_swt_param_t_thickness_ratio_get, _libccv.ccv_swt_param_t_thickness_ratio_set)
    __swig_setmethods__["height_ratio"] = _libccv.ccv_swt_param_t_height_ratio_set
    __swig_getmethods__["height_ratio"] = _libccv.ccv_swt_param_t_height_ratio_get
    if _newclass:
        height_ratio = _swig_property(_libccv.ccv_swt_param_t_height_ratio_get, _libccv.ccv_swt_param_t_height_ratio_set)
    __swig_setmethods__["intensity_thresh"] = _libccv.ccv_swt_param_t_intensity_thresh_set
    __swig_getmethods__["intensity_thresh"] = _libccv.ccv_swt_param_t_intensity_thresh_get
    if _newclass:
        intensity_thresh = _swig_property(_libccv.ccv_swt_param_t_intensity_thresh_get, _libccv.ccv_swt_param_t_intensity_thresh_set)
    __swig_setmethods__["distance_ratio"] = _libccv.ccv_swt_param_t_distance_ratio_set
    __swig_getmethods__["distance_ratio"] = _libccv.ccv_swt_param_t_distance_ratio_get
    if _newclass:
        distance_ratio = _swig_property(_libccv.ccv_swt_param_t_distance_ratio_get, _libccv.ccv_swt_param_t_distance_ratio_set)
    __swig_setmethods__["intersect_ratio"] = _libccv.ccv_swt_param_t_intersect_ratio_set
    __swig_getmethods__["intersect_ratio"] = _libccv.ccv_swt_param_t_intersect_ratio_get
    if _newclass:
        intersect_ratio = _swig_property(_libccv.ccv_swt_param_t_intersect_ratio_get, _libccv.ccv_swt_param_t_intersect_ratio_set)
    __swig_setmethods__["elongate_ratio"] = _libccv.ccv_swt_param_t_elongate_ratio_set
    __swig_getmethods__["elongate_ratio"] = _libccv.ccv_swt_param_t_elongate_ratio_get
    if _newclass:
        elongate_ratio = _swig_property(_libccv.ccv_swt_param_t_elongate_ratio_get, _libccv.ccv_swt_param_t_elongate_ratio_set)
    __swig_setmethods__["letter_thresh"] = _libccv.ccv_swt_param_t_letter_thresh_set
    __swig_getmethods__["letter_thresh"] = _libccv.ccv_swt_param_t_letter_thresh_get
    if _newclass:
        letter_thresh = _swig_property(_libccv.ccv_swt_param_t_letter_thresh_get, _libccv.ccv_swt_param_t_letter_thresh_set)
    __swig_setmethods__["word_and_letters"] = _libccv.ccv_swt_param_t_word_and_letters_set
    __swig_getmethods__["word_and_letters"] = _libccv.ccv_swt_param_t_word_and_letters_get
    if _newclass:
        word_and_letters = _swig_property(_libccv.ccv_swt_param_t_word_and_letters_get, _libccv.ccv_swt_param_t_word_and_letters_set)
    __swig_setmethods__["kill_rectangle_shapes_ratio"] = _libccv.ccv_swt_param_t_kill_rectangle_shapes_ratio_set
    __swig_getmethods__["kill_rectangle_shapes_ratio"] = _libccv.ccv_swt_param_t_kill_rectangle_shapes_ratio_get
    if _newclass:
        kill_rectangle_shapes_ratio = _swig_property(_libccv.ccv_swt_param_t_kill_rectangle_shapes_ratio_get, _libccv.ccv_swt_param_t_kill_rectangle_shapes_ratio_set)
    __swig_setmethods__["breakdown"] = _libccv.ccv_swt_param_t_breakdown_set
    __swig_getmethods__["breakdown"] = _libccv.ccv_swt_param_t_breakdown_get
    if _newclass:
        breakdown = _swig_property(_libccv.ccv_swt_param_t_breakdown_get, _libccv.ccv_swt_param_t_breakdown_set)
    __swig_setmethods__["breakdown_ratio"] = _libccv.ccv_swt_param_t_breakdown_ratio_set
    __swig_getmethods__["breakdown_ratio"] = _libccv.ccv_swt_param_t_breakdown_ratio_get
    if _newclass:
        breakdown_ratio = _swig_property(_libccv.ccv_swt_param_t_breakdown_ratio_get, _libccv.ccv_swt_param_t_breakdown_ratio_set)

    def __init__(self):
        this = _libccv.new_ccv_swt_param_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_swt_param_t
    __del__ = lambda self: None
ccv_swt_param_t_swigregister = _libccv.ccv_swt_param_t_swigregister
ccv_swt_param_t_swigregister(ccv_swt_param_t)


def ccv_swt(a, type, params):
    return _libccv.ccv_swt(a, type, params)
ccv_swt = _libccv.ccv_swt

def ccv_swt_detect_words(a, params):
    return _libccv.ccv_swt_detect_words(a, params)
ccv_swt_detect_words = _libccv.ccv_swt_detect_words
class ccv_file_info_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_file_info_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_file_info_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["filename"] = _libccv.ccv_file_info_t_filename_set
    __swig_getmethods__["filename"] = _libccv.ccv_file_info_t_filename_get
    if _newclass:
        filename = _swig_property(_libccv.ccv_file_info_t_filename_get, _libccv.ccv_file_info_t_filename_set)
    __swig_setmethods__["box"] = _libccv.ccv_file_info_t_box_set
    __swig_getmethods__["box"] = _libccv.ccv_file_info_t_box_get
    if _newclass:
        box = _swig_property(_libccv.ccv_file_info_t_box_get, _libccv.ccv_file_info_t_box_set)
    __swig_setmethods__["pose"] = _libccv.ccv_file_info_t_pose_set
    __swig_getmethods__["pose"] = _libccv.ccv_file_info_t_pose_get
    if _newclass:
        pose = _swig_property(_libccv.ccv_file_info_t_pose_get, _libccv.ccv_file_info_t_pose_set)

    def __init__(self):
        this = _libccv.new_ccv_file_info_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_file_info_t
    __del__ = lambda self: None
ccv_file_info_t_swigregister = _libccv.ccv_file_info_t_swigregister
ccv_file_info_t_swigregister(ccv_file_info_t)
ccv_swt_default_params = cvar.ccv_swt_default_params

CCV_DPM_PART_MAX = _libccv.CCV_DPM_PART_MAX
class ccv_classification_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_classification_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_classification_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _libccv.ccv_classification_t_id_set
    __swig_getmethods__["id"] = _libccv.ccv_classification_t_id_get
    if _newclass:
        id = _swig_property(_libccv.ccv_classification_t_id_get, _libccv.ccv_classification_t_id_set)
    __swig_setmethods__["confidence"] = _libccv.ccv_classification_t_confidence_set
    __swig_getmethods__["confidence"] = _libccv.ccv_classification_t_confidence_get
    if _newclass:
        confidence = _swig_property(_libccv.ccv_classification_t_confidence_get, _libccv.ccv_classification_t_confidence_set)

    def __init__(self):
        this = _libccv.new_ccv_classification_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_classification_t
    __del__ = lambda self: None
ccv_classification_t_swigregister = _libccv.ccv_classification_t_swigregister
ccv_classification_t_swigregister(ccv_classification_t)

class ccv_comp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_comp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_comp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rect"] = _libccv.ccv_comp_t_rect_set
    __swig_getmethods__["rect"] = _libccv.ccv_comp_t_rect_get
    if _newclass:
        rect = _swig_property(_libccv.ccv_comp_t_rect_get, _libccv.ccv_comp_t_rect_set)
    __swig_setmethods__["neighbors"] = _libccv.ccv_comp_t_neighbors_set
    __swig_getmethods__["neighbors"] = _libccv.ccv_comp_t_neighbors_get
    if _newclass:
        neighbors = _swig_property(_libccv.ccv_comp_t_neighbors_get, _libccv.ccv_comp_t_neighbors_set)
    __swig_setmethods__["classification"] = _libccv.ccv_comp_t_classification_set
    __swig_getmethods__["classification"] = _libccv.ccv_comp_t_classification_get
    if _newclass:
        classification = _swig_property(_libccv.ccv_comp_t_classification_get, _libccv.ccv_comp_t_classification_set)

    def __init__(self):
        this = _libccv.new_ccv_comp_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_comp_t
    __del__ = lambda self: None
ccv_comp_t_swigregister = _libccv.ccv_comp_t_swigregister
ccv_comp_t_swigregister(ccv_comp_t)

class ccv_root_comp_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_root_comp_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_root_comp_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rect"] = _libccv.ccv_root_comp_t_rect_set
    __swig_getmethods__["rect"] = _libccv.ccv_root_comp_t_rect_get
    if _newclass:
        rect = _swig_property(_libccv.ccv_root_comp_t_rect_get, _libccv.ccv_root_comp_t_rect_set)
    __swig_setmethods__["neighbors"] = _libccv.ccv_root_comp_t_neighbors_set
    __swig_getmethods__["neighbors"] = _libccv.ccv_root_comp_t_neighbors_get
    if _newclass:
        neighbors = _swig_property(_libccv.ccv_root_comp_t_neighbors_get, _libccv.ccv_root_comp_t_neighbors_set)
    __swig_setmethods__["classification"] = _libccv.ccv_root_comp_t_classification_set
    __swig_getmethods__["classification"] = _libccv.ccv_root_comp_t_classification_get
    if _newclass:
        classification = _swig_property(_libccv.ccv_root_comp_t_classification_get, _libccv.ccv_root_comp_t_classification_set)
    __swig_setmethods__["pnum"] = _libccv.ccv_root_comp_t_pnum_set
    __swig_getmethods__["pnum"] = _libccv.ccv_root_comp_t_pnum_get
    if _newclass:
        pnum = _swig_property(_libccv.ccv_root_comp_t_pnum_get, _libccv.ccv_root_comp_t_pnum_set)
    __swig_setmethods__["part"] = _libccv.ccv_root_comp_t_part_set
    __swig_getmethods__["part"] = _libccv.ccv_root_comp_t_part_get
    if _newclass:
        part = _swig_property(_libccv.ccv_root_comp_t_part_get, _libccv.ccv_root_comp_t_part_set)

    def __init__(self):
        this = _libccv.new_ccv_root_comp_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_root_comp_t
    __del__ = lambda self: None
ccv_root_comp_t_swigregister = _libccv.ccv_root_comp_t_swigregister
ccv_root_comp_t_swigregister(ccv_root_comp_t)

class ccv_dpm_part_classifier_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_dpm_part_classifier_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_dpm_part_classifier_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["w"] = _libccv.ccv_dpm_part_classifier_t_w_set
    __swig_getmethods__["w"] = _libccv.ccv_dpm_part_classifier_t_w_get
    if _newclass:
        w = _swig_property(_libccv.ccv_dpm_part_classifier_t_w_get, _libccv.ccv_dpm_part_classifier_t_w_set)
    __swig_setmethods__["dx"] = _libccv.ccv_dpm_part_classifier_t_dx_set
    __swig_getmethods__["dx"] = _libccv.ccv_dpm_part_classifier_t_dx_get
    if _newclass:
        dx = _swig_property(_libccv.ccv_dpm_part_classifier_t_dx_get, _libccv.ccv_dpm_part_classifier_t_dx_set)
    __swig_setmethods__["dy"] = _libccv.ccv_dpm_part_classifier_t_dy_set
    __swig_getmethods__["dy"] = _libccv.ccv_dpm_part_classifier_t_dy_get
    if _newclass:
        dy = _swig_property(_libccv.ccv_dpm_part_classifier_t_dy_get, _libccv.ccv_dpm_part_classifier_t_dy_set)
    __swig_setmethods__["dxx"] = _libccv.ccv_dpm_part_classifier_t_dxx_set
    __swig_getmethods__["dxx"] = _libccv.ccv_dpm_part_classifier_t_dxx_get
    if _newclass:
        dxx = _swig_property(_libccv.ccv_dpm_part_classifier_t_dxx_get, _libccv.ccv_dpm_part_classifier_t_dxx_set)
    __swig_setmethods__["dyy"] = _libccv.ccv_dpm_part_classifier_t_dyy_set
    __swig_getmethods__["dyy"] = _libccv.ccv_dpm_part_classifier_t_dyy_get
    if _newclass:
        dyy = _swig_property(_libccv.ccv_dpm_part_classifier_t_dyy_get, _libccv.ccv_dpm_part_classifier_t_dyy_set)
    __swig_setmethods__["x"] = _libccv.ccv_dpm_part_classifier_t_x_set
    __swig_getmethods__["x"] = _libccv.ccv_dpm_part_classifier_t_x_get
    if _newclass:
        x = _swig_property(_libccv.ccv_dpm_part_classifier_t_x_get, _libccv.ccv_dpm_part_classifier_t_x_set)
    __swig_setmethods__["y"] = _libccv.ccv_dpm_part_classifier_t_y_set
    __swig_getmethods__["y"] = _libccv.ccv_dpm_part_classifier_t_y_get
    if _newclass:
        y = _swig_property(_libccv.ccv_dpm_part_classifier_t_y_get, _libccv.ccv_dpm_part_classifier_t_y_set)
    __swig_setmethods__["z"] = _libccv.ccv_dpm_part_classifier_t_z_set
    __swig_getmethods__["z"] = _libccv.ccv_dpm_part_classifier_t_z_get
    if _newclass:
        z = _swig_property(_libccv.ccv_dpm_part_classifier_t_z_get, _libccv.ccv_dpm_part_classifier_t_z_set)
    __swig_setmethods__["counterpart"] = _libccv.ccv_dpm_part_classifier_t_counterpart_set
    __swig_getmethods__["counterpart"] = _libccv.ccv_dpm_part_classifier_t_counterpart_get
    if _newclass:
        counterpart = _swig_property(_libccv.ccv_dpm_part_classifier_t_counterpart_get, _libccv.ccv_dpm_part_classifier_t_counterpart_set)
    __swig_setmethods__["alpha"] = _libccv.ccv_dpm_part_classifier_t_alpha_set
    __swig_getmethods__["alpha"] = _libccv.ccv_dpm_part_classifier_t_alpha_get
    if _newclass:
        alpha = _swig_property(_libccv.ccv_dpm_part_classifier_t_alpha_get, _libccv.ccv_dpm_part_classifier_t_alpha_set)

    def __init__(self):
        this = _libccv.new_ccv_dpm_part_classifier_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_dpm_part_classifier_t
    __del__ = lambda self: None
ccv_dpm_part_classifier_t_swigregister = _libccv.ccv_dpm_part_classifier_t_swigregister
ccv_dpm_part_classifier_t_swigregister(ccv_dpm_part_classifier_t)

class ccv_dpm_root_classifier_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_dpm_root_classifier_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_dpm_root_classifier_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["count"] = _libccv.ccv_dpm_root_classifier_t_count_set
    __swig_getmethods__["count"] = _libccv.ccv_dpm_root_classifier_t_count_get
    if _newclass:
        count = _swig_property(_libccv.ccv_dpm_root_classifier_t_count_get, _libccv.ccv_dpm_root_classifier_t_count_set)
    __swig_setmethods__["root"] = _libccv.ccv_dpm_root_classifier_t_root_set
    __swig_getmethods__["root"] = _libccv.ccv_dpm_root_classifier_t_root_get
    if _newclass:
        root = _swig_property(_libccv.ccv_dpm_root_classifier_t_root_get, _libccv.ccv_dpm_root_classifier_t_root_set)
    __swig_setmethods__["part"] = _libccv.ccv_dpm_root_classifier_t_part_set
    __swig_getmethods__["part"] = _libccv.ccv_dpm_root_classifier_t_part_get
    if _newclass:
        part = _swig_property(_libccv.ccv_dpm_root_classifier_t_part_get, _libccv.ccv_dpm_root_classifier_t_part_set)
    __swig_setmethods__["alpha"] = _libccv.ccv_dpm_root_classifier_t_alpha_set
    __swig_getmethods__["alpha"] = _libccv.ccv_dpm_root_classifier_t_alpha_get
    if _newclass:
        alpha = _swig_property(_libccv.ccv_dpm_root_classifier_t_alpha_get, _libccv.ccv_dpm_root_classifier_t_alpha_set)
    __swig_setmethods__["beta"] = _libccv.ccv_dpm_root_classifier_t_beta_set
    __swig_getmethods__["beta"] = _libccv.ccv_dpm_root_classifier_t_beta_get
    if _newclass:
        beta = _swig_property(_libccv.ccv_dpm_root_classifier_t_beta_get, _libccv.ccv_dpm_root_classifier_t_beta_set)

    def __init__(self):
        this = _libccv.new_ccv_dpm_root_classifier_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_dpm_root_classifier_t
    __del__ = lambda self: None
ccv_dpm_root_classifier_t_swigregister = _libccv.ccv_dpm_root_classifier_t_swigregister
ccv_dpm_root_classifier_t_swigregister(ccv_dpm_root_classifier_t)

class ccv_dpm_mixture_model_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_dpm_mixture_model_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_dpm_mixture_model_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["count"] = _libccv.ccv_dpm_mixture_model_t_count_set
    __swig_getmethods__["count"] = _libccv.ccv_dpm_mixture_model_t_count_get
    if _newclass:
        count = _swig_property(_libccv.ccv_dpm_mixture_model_t_count_get, _libccv.ccv_dpm_mixture_model_t_count_set)
    __swig_setmethods__["root"] = _libccv.ccv_dpm_mixture_model_t_root_set
    __swig_getmethods__["root"] = _libccv.ccv_dpm_mixture_model_t_root_get
    if _newclass:
        root = _swig_property(_libccv.ccv_dpm_mixture_model_t_root_get, _libccv.ccv_dpm_mixture_model_t_root_set)

    def __init__(self):
        this = _libccv.new_ccv_dpm_mixture_model_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_dpm_mixture_model_t
    __del__ = lambda self: None
ccv_dpm_mixture_model_t_swigregister = _libccv.ccv_dpm_mixture_model_t_swigregister
ccv_dpm_mixture_model_t_swigregister(ccv_dpm_mixture_model_t)

class ccv_dpm_param_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_dpm_param_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_dpm_param_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["interval"] = _libccv.ccv_dpm_param_t_interval_set
    __swig_getmethods__["interval"] = _libccv.ccv_dpm_param_t_interval_get
    if _newclass:
        interval = _swig_property(_libccv.ccv_dpm_param_t_interval_get, _libccv.ccv_dpm_param_t_interval_set)
    __swig_setmethods__["min_neighbors"] = _libccv.ccv_dpm_param_t_min_neighbors_set
    __swig_getmethods__["min_neighbors"] = _libccv.ccv_dpm_param_t_min_neighbors_get
    if _newclass:
        min_neighbors = _swig_property(_libccv.ccv_dpm_param_t_min_neighbors_get, _libccv.ccv_dpm_param_t_min_neighbors_set)
    __swig_setmethods__["flags"] = _libccv.ccv_dpm_param_t_flags_set
    __swig_getmethods__["flags"] = _libccv.ccv_dpm_param_t_flags_get
    if _newclass:
        flags = _swig_property(_libccv.ccv_dpm_param_t_flags_get, _libccv.ccv_dpm_param_t_flags_set)
    __swig_setmethods__["threshold"] = _libccv.ccv_dpm_param_t_threshold_set
    __swig_getmethods__["threshold"] = _libccv.ccv_dpm_param_t_threshold_get
    if _newclass:
        threshold = _swig_property(_libccv.ccv_dpm_param_t_threshold_get, _libccv.ccv_dpm_param_t_threshold_set)

    def __init__(self):
        this = _libccv.new_ccv_dpm_param_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_dpm_param_t
    __del__ = lambda self: None
ccv_dpm_param_t_swigregister = _libccv.ccv_dpm_param_t_swigregister
ccv_dpm_param_t_swigregister(ccv_dpm_param_t)

class ccv_dpm_new_param_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_dpm_new_param_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_dpm_new_param_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["components"] = _libccv.ccv_dpm_new_param_t_components_set
    __swig_getmethods__["components"] = _libccv.ccv_dpm_new_param_t_components_get
    if _newclass:
        components = _swig_property(_libccv.ccv_dpm_new_param_t_components_get, _libccv.ccv_dpm_new_param_t_components_set)
    __swig_setmethods__["parts"] = _libccv.ccv_dpm_new_param_t_parts_set
    __swig_getmethods__["parts"] = _libccv.ccv_dpm_new_param_t_parts_get
    if _newclass:
        parts = _swig_property(_libccv.ccv_dpm_new_param_t_parts_get, _libccv.ccv_dpm_new_param_t_parts_set)
    __swig_setmethods__["grayscale"] = _libccv.ccv_dpm_new_param_t_grayscale_set
    __swig_getmethods__["grayscale"] = _libccv.ccv_dpm_new_param_t_grayscale_get
    if _newclass:
        grayscale = _swig_property(_libccv.ccv_dpm_new_param_t_grayscale_get, _libccv.ccv_dpm_new_param_t_grayscale_set)
    __swig_setmethods__["symmetric"] = _libccv.ccv_dpm_new_param_t_symmetric_set
    __swig_getmethods__["symmetric"] = _libccv.ccv_dpm_new_param_t_symmetric_get
    if _newclass:
        symmetric = _swig_property(_libccv.ccv_dpm_new_param_t_symmetric_get, _libccv.ccv_dpm_new_param_t_symmetric_set)
    __swig_setmethods__["min_area"] = _libccv.ccv_dpm_new_param_t_min_area_set
    __swig_getmethods__["min_area"] = _libccv.ccv_dpm_new_param_t_min_area_get
    if _newclass:
        min_area = _swig_property(_libccv.ccv_dpm_new_param_t_min_area_get, _libccv.ccv_dpm_new_param_t_min_area_set)
    __swig_setmethods__["max_area"] = _libccv.ccv_dpm_new_param_t_max_area_set
    __swig_getmethods__["max_area"] = _libccv.ccv_dpm_new_param_t_max_area_get
    if _newclass:
        max_area = _swig_property(_libccv.ccv_dpm_new_param_t_max_area_get, _libccv.ccv_dpm_new_param_t_max_area_set)
    __swig_setmethods__["iterations"] = _libccv.ccv_dpm_new_param_t_iterations_set
    __swig_getmethods__["iterations"] = _libccv.ccv_dpm_new_param_t_iterations_get
    if _newclass:
        iterations = _swig_property(_libccv.ccv_dpm_new_param_t_iterations_get, _libccv.ccv_dpm_new_param_t_iterations_set)
    __swig_setmethods__["data_minings"] = _libccv.ccv_dpm_new_param_t_data_minings_set
    __swig_getmethods__["data_minings"] = _libccv.ccv_dpm_new_param_t_data_minings_get
    if _newclass:
        data_minings = _swig_property(_libccv.ccv_dpm_new_param_t_data_minings_get, _libccv.ccv_dpm_new_param_t_data_minings_set)
    __swig_setmethods__["root_relabels"] = _libccv.ccv_dpm_new_param_t_root_relabels_set
    __swig_getmethods__["root_relabels"] = _libccv.ccv_dpm_new_param_t_root_relabels_get
    if _newclass:
        root_relabels = _swig_property(_libccv.ccv_dpm_new_param_t_root_relabels_get, _libccv.ccv_dpm_new_param_t_root_relabels_set)
    __swig_setmethods__["relabels"] = _libccv.ccv_dpm_new_param_t_relabels_set
    __swig_getmethods__["relabels"] = _libccv.ccv_dpm_new_param_t_relabels_get
    if _newclass:
        relabels = _swig_property(_libccv.ccv_dpm_new_param_t_relabels_get, _libccv.ccv_dpm_new_param_t_relabels_set)
    __swig_setmethods__["discard_estimating_constant"] = _libccv.ccv_dpm_new_param_t_discard_estimating_constant_set
    __swig_getmethods__["discard_estimating_constant"] = _libccv.ccv_dpm_new_param_t_discard_estimating_constant_get
    if _newclass:
        discard_estimating_constant = _swig_property(_libccv.ccv_dpm_new_param_t_discard_estimating_constant_get, _libccv.ccv_dpm_new_param_t_discard_estimating_constant_set)
    __swig_setmethods__["negative_cache_size"] = _libccv.ccv_dpm_new_param_t_negative_cache_size_set
    __swig_getmethods__["negative_cache_size"] = _libccv.ccv_dpm_new_param_t_negative_cache_size_get
    if _newclass:
        negative_cache_size = _swig_property(_libccv.ccv_dpm_new_param_t_negative_cache_size_get, _libccv.ccv_dpm_new_param_t_negative_cache_size_set)
    __swig_setmethods__["include_overlap"] = _libccv.ccv_dpm_new_param_t_include_overlap_set
    __swig_getmethods__["include_overlap"] = _libccv.ccv_dpm_new_param_t_include_overlap_get
    if _newclass:
        include_overlap = _swig_property(_libccv.ccv_dpm_new_param_t_include_overlap_get, _libccv.ccv_dpm_new_param_t_include_overlap_set)
    __swig_setmethods__["alpha"] = _libccv.ccv_dpm_new_param_t_alpha_set
    __swig_getmethods__["alpha"] = _libccv.ccv_dpm_new_param_t_alpha_get
    if _newclass:
        alpha = _swig_property(_libccv.ccv_dpm_new_param_t_alpha_get, _libccv.ccv_dpm_new_param_t_alpha_set)
    __swig_setmethods__["alpha_ratio"] = _libccv.ccv_dpm_new_param_t_alpha_ratio_set
    __swig_getmethods__["alpha_ratio"] = _libccv.ccv_dpm_new_param_t_alpha_ratio_get
    if _newclass:
        alpha_ratio = _swig_property(_libccv.ccv_dpm_new_param_t_alpha_ratio_get, _libccv.ccv_dpm_new_param_t_alpha_ratio_set)
    __swig_setmethods__["balance"] = _libccv.ccv_dpm_new_param_t_balance_set
    __swig_getmethods__["balance"] = _libccv.ccv_dpm_new_param_t_balance_get
    if _newclass:
        balance = _swig_property(_libccv.ccv_dpm_new_param_t_balance_get, _libccv.ccv_dpm_new_param_t_balance_set)
    __swig_setmethods__["C"] = _libccv.ccv_dpm_new_param_t_C_set
    __swig_getmethods__["C"] = _libccv.ccv_dpm_new_param_t_C_get
    if _newclass:
        C = _swig_property(_libccv.ccv_dpm_new_param_t_C_get, _libccv.ccv_dpm_new_param_t_C_set)
    __swig_setmethods__["percentile_breakdown"] = _libccv.ccv_dpm_new_param_t_percentile_breakdown_set
    __swig_getmethods__["percentile_breakdown"] = _libccv.ccv_dpm_new_param_t_percentile_breakdown_get
    if _newclass:
        percentile_breakdown = _swig_property(_libccv.ccv_dpm_new_param_t_percentile_breakdown_get, _libccv.ccv_dpm_new_param_t_percentile_breakdown_set)
    __swig_setmethods__["detector"] = _libccv.ccv_dpm_new_param_t_detector_set
    __swig_getmethods__["detector"] = _libccv.ccv_dpm_new_param_t_detector_get
    if _newclass:
        detector = _swig_property(_libccv.ccv_dpm_new_param_t_detector_get, _libccv.ccv_dpm_new_param_t_detector_set)

    def __init__(self):
        this = _libccv.new_ccv_dpm_new_param_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_dpm_new_param_t
    __del__ = lambda self: None
ccv_dpm_new_param_t_swigregister = _libccv.ccv_dpm_new_param_t_swigregister
ccv_dpm_new_param_t_swigregister(ccv_dpm_new_param_t)

CCV_DPM_NO_NESTED = _libccv.CCV_DPM_NO_NESTED

def ccv_dpm_mixture_model_new(posfiles, bboxes, posnum, bgfiles, bgnum, negnum, dir, params):
    return _libccv.ccv_dpm_mixture_model_new(posfiles, bboxes, posnum, bgfiles, bgnum, negnum, dir, params)
ccv_dpm_mixture_model_new = _libccv.ccv_dpm_mixture_model_new

def ccv_dpm_detect_objects(a, model, count, params):
    return _libccv.ccv_dpm_detect_objects(a, model, count, params)
ccv_dpm_detect_objects = _libccv.ccv_dpm_detect_objects

def ccv_dpm_read_mixture_model(directory):
    return _libccv.ccv_dpm_read_mixture_model(directory)
ccv_dpm_read_mixture_model = _libccv.ccv_dpm_read_mixture_model

def ccv_dpm_mixture_model_free(model):
    return _libccv.ccv_dpm_mixture_model_free(model)
ccv_dpm_mixture_model_free = _libccv.ccv_dpm_mixture_model_free
CCV_BBF_POINT_MAX = _libccv.CCV_BBF_POINT_MAX
CCV_BBF_POINT_MIN = _libccv.CCV_BBF_POINT_MIN
class ccv_bbf_feature_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_bbf_feature_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_bbf_feature_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["size"] = _libccv.ccv_bbf_feature_t_size_set
    __swig_getmethods__["size"] = _libccv.ccv_bbf_feature_t_size_get
    if _newclass:
        size = _swig_property(_libccv.ccv_bbf_feature_t_size_get, _libccv.ccv_bbf_feature_t_size_set)
    __swig_setmethods__["px"] = _libccv.ccv_bbf_feature_t_px_set
    __swig_getmethods__["px"] = _libccv.ccv_bbf_feature_t_px_get
    if _newclass:
        px = _swig_property(_libccv.ccv_bbf_feature_t_px_get, _libccv.ccv_bbf_feature_t_px_set)
    __swig_setmethods__["py"] = _libccv.ccv_bbf_feature_t_py_set
    __swig_getmethods__["py"] = _libccv.ccv_bbf_feature_t_py_get
    if _newclass:
        py = _swig_property(_libccv.ccv_bbf_feature_t_py_get, _libccv.ccv_bbf_feature_t_py_set)
    __swig_setmethods__["pz"] = _libccv.ccv_bbf_feature_t_pz_set
    __swig_getmethods__["pz"] = _libccv.ccv_bbf_feature_t_pz_get
    if _newclass:
        pz = _swig_property(_libccv.ccv_bbf_feature_t_pz_get, _libccv.ccv_bbf_feature_t_pz_set)
    __swig_setmethods__["nx"] = _libccv.ccv_bbf_feature_t_nx_set
    __swig_getmethods__["nx"] = _libccv.ccv_bbf_feature_t_nx_get
    if _newclass:
        nx = _swig_property(_libccv.ccv_bbf_feature_t_nx_get, _libccv.ccv_bbf_feature_t_nx_set)
    __swig_setmethods__["ny"] = _libccv.ccv_bbf_feature_t_ny_set
    __swig_getmethods__["ny"] = _libccv.ccv_bbf_feature_t_ny_get
    if _newclass:
        ny = _swig_property(_libccv.ccv_bbf_feature_t_ny_get, _libccv.ccv_bbf_feature_t_ny_set)
    __swig_setmethods__["nz"] = _libccv.ccv_bbf_feature_t_nz_set
    __swig_getmethods__["nz"] = _libccv.ccv_bbf_feature_t_nz_get
    if _newclass:
        nz = _swig_property(_libccv.ccv_bbf_feature_t_nz_get, _libccv.ccv_bbf_feature_t_nz_set)

    def __init__(self):
        this = _libccv.new_ccv_bbf_feature_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_bbf_feature_t
    __del__ = lambda self: None
ccv_bbf_feature_t_swigregister = _libccv.ccv_bbf_feature_t_swigregister
ccv_bbf_feature_t_swigregister(ccv_bbf_feature_t)
ccv_dpm_default_params = cvar.ccv_dpm_default_params

class ccv_bbf_stage_classifier_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_bbf_stage_classifier_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_bbf_stage_classifier_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["count"] = _libccv.ccv_bbf_stage_classifier_t_count_set
    __swig_getmethods__["count"] = _libccv.ccv_bbf_stage_classifier_t_count_get
    if _newclass:
        count = _swig_property(_libccv.ccv_bbf_stage_classifier_t_count_get, _libccv.ccv_bbf_stage_classifier_t_count_set)
    __swig_setmethods__["threshold"] = _libccv.ccv_bbf_stage_classifier_t_threshold_set
    __swig_getmethods__["threshold"] = _libccv.ccv_bbf_stage_classifier_t_threshold_get
    if _newclass:
        threshold = _swig_property(_libccv.ccv_bbf_stage_classifier_t_threshold_get, _libccv.ccv_bbf_stage_classifier_t_threshold_set)
    __swig_setmethods__["feature"] = _libccv.ccv_bbf_stage_classifier_t_feature_set
    __swig_getmethods__["feature"] = _libccv.ccv_bbf_stage_classifier_t_feature_get
    if _newclass:
        feature = _swig_property(_libccv.ccv_bbf_stage_classifier_t_feature_get, _libccv.ccv_bbf_stage_classifier_t_feature_set)
    __swig_setmethods__["alpha"] = _libccv.ccv_bbf_stage_classifier_t_alpha_set
    __swig_getmethods__["alpha"] = _libccv.ccv_bbf_stage_classifier_t_alpha_get
    if _newclass:
        alpha = _swig_property(_libccv.ccv_bbf_stage_classifier_t_alpha_get, _libccv.ccv_bbf_stage_classifier_t_alpha_set)

    def __init__(self):
        this = _libccv.new_ccv_bbf_stage_classifier_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_bbf_stage_classifier_t
    __del__ = lambda self: None
ccv_bbf_stage_classifier_t_swigregister = _libccv.ccv_bbf_stage_classifier_t_swigregister
ccv_bbf_stage_classifier_t_swigregister(ccv_bbf_stage_classifier_t)

class ccv_bbf_classifier_cascade_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_bbf_classifier_cascade_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_bbf_classifier_cascade_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["count"] = _libccv.ccv_bbf_classifier_cascade_t_count_set
    __swig_getmethods__["count"] = _libccv.ccv_bbf_classifier_cascade_t_count_get
    if _newclass:
        count = _swig_property(_libccv.ccv_bbf_classifier_cascade_t_count_get, _libccv.ccv_bbf_classifier_cascade_t_count_set)
    __swig_setmethods__["size"] = _libccv.ccv_bbf_classifier_cascade_t_size_set
    __swig_getmethods__["size"] = _libccv.ccv_bbf_classifier_cascade_t_size_get
    if _newclass:
        size = _swig_property(_libccv.ccv_bbf_classifier_cascade_t_size_get, _libccv.ccv_bbf_classifier_cascade_t_size_set)
    __swig_setmethods__["stage_classifier"] = _libccv.ccv_bbf_classifier_cascade_t_stage_classifier_set
    __swig_getmethods__["stage_classifier"] = _libccv.ccv_bbf_classifier_cascade_t_stage_classifier_get
    if _newclass:
        stage_classifier = _swig_property(_libccv.ccv_bbf_classifier_cascade_t_stage_classifier_get, _libccv.ccv_bbf_classifier_cascade_t_stage_classifier_set)

    def __init__(self):
        this = _libccv.new_ccv_bbf_classifier_cascade_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_bbf_classifier_cascade_t
    __del__ = lambda self: None
ccv_bbf_classifier_cascade_t_swigregister = _libccv.ccv_bbf_classifier_cascade_t_swigregister
ccv_bbf_classifier_cascade_t_swigregister(ccv_bbf_classifier_cascade_t)

CCV_BBF_GENETIC_OPT = _libccv.CCV_BBF_GENETIC_OPT
CCV_BBF_FLOAT_OPT = _libccv.CCV_BBF_FLOAT_OPT
class ccv_bbf_param_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_bbf_param_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_bbf_param_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["interval"] = _libccv.ccv_bbf_param_t_interval_set
    __swig_getmethods__["interval"] = _libccv.ccv_bbf_param_t_interval_get
    if _newclass:
        interval = _swig_property(_libccv.ccv_bbf_param_t_interval_get, _libccv.ccv_bbf_param_t_interval_set)
    __swig_setmethods__["min_neighbors"] = _libccv.ccv_bbf_param_t_min_neighbors_set
    __swig_getmethods__["min_neighbors"] = _libccv.ccv_bbf_param_t_min_neighbors_get
    if _newclass:
        min_neighbors = _swig_property(_libccv.ccv_bbf_param_t_min_neighbors_get, _libccv.ccv_bbf_param_t_min_neighbors_set)
    __swig_setmethods__["flags"] = _libccv.ccv_bbf_param_t_flags_set
    __swig_getmethods__["flags"] = _libccv.ccv_bbf_param_t_flags_get
    if _newclass:
        flags = _swig_property(_libccv.ccv_bbf_param_t_flags_get, _libccv.ccv_bbf_param_t_flags_set)
    __swig_setmethods__["accurate"] = _libccv.ccv_bbf_param_t_accurate_set
    __swig_getmethods__["accurate"] = _libccv.ccv_bbf_param_t_accurate_get
    if _newclass:
        accurate = _swig_property(_libccv.ccv_bbf_param_t_accurate_get, _libccv.ccv_bbf_param_t_accurate_set)
    __swig_setmethods__["size"] = _libccv.ccv_bbf_param_t_size_set
    __swig_getmethods__["size"] = _libccv.ccv_bbf_param_t_size_get
    if _newclass:
        size = _swig_property(_libccv.ccv_bbf_param_t_size_get, _libccv.ccv_bbf_param_t_size_set)

    def __init__(self):
        this = _libccv.new_ccv_bbf_param_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_bbf_param_t
    __del__ = lambda self: None
ccv_bbf_param_t_swigregister = _libccv.ccv_bbf_param_t_swigregister
ccv_bbf_param_t_swigregister(ccv_bbf_param_t)

class ccv_bbf_new_param_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_bbf_new_param_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_bbf_new_param_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pos_crit"] = _libccv.ccv_bbf_new_param_t_pos_crit_set
    __swig_getmethods__["pos_crit"] = _libccv.ccv_bbf_new_param_t_pos_crit_get
    if _newclass:
        pos_crit = _swig_property(_libccv.ccv_bbf_new_param_t_pos_crit_get, _libccv.ccv_bbf_new_param_t_pos_crit_set)
    __swig_setmethods__["neg_crit"] = _libccv.ccv_bbf_new_param_t_neg_crit_set
    __swig_getmethods__["neg_crit"] = _libccv.ccv_bbf_new_param_t_neg_crit_get
    if _newclass:
        neg_crit = _swig_property(_libccv.ccv_bbf_new_param_t_neg_crit_get, _libccv.ccv_bbf_new_param_t_neg_crit_set)
    __swig_setmethods__["balance_k"] = _libccv.ccv_bbf_new_param_t_balance_k_set
    __swig_getmethods__["balance_k"] = _libccv.ccv_bbf_new_param_t_balance_k_get
    if _newclass:
        balance_k = _swig_property(_libccv.ccv_bbf_new_param_t_balance_k_get, _libccv.ccv_bbf_new_param_t_balance_k_set)
    __swig_setmethods__["layer"] = _libccv.ccv_bbf_new_param_t_layer_set
    __swig_getmethods__["layer"] = _libccv.ccv_bbf_new_param_t_layer_get
    if _newclass:
        layer = _swig_property(_libccv.ccv_bbf_new_param_t_layer_get, _libccv.ccv_bbf_new_param_t_layer_set)
    __swig_setmethods__["feature_number"] = _libccv.ccv_bbf_new_param_t_feature_number_set
    __swig_getmethods__["feature_number"] = _libccv.ccv_bbf_new_param_t_feature_number_get
    if _newclass:
        feature_number = _swig_property(_libccv.ccv_bbf_new_param_t_feature_number_get, _libccv.ccv_bbf_new_param_t_feature_number_set)
    __swig_setmethods__["optimizer"] = _libccv.ccv_bbf_new_param_t_optimizer_set
    __swig_getmethods__["optimizer"] = _libccv.ccv_bbf_new_param_t_optimizer_get
    if _newclass:
        optimizer = _swig_property(_libccv.ccv_bbf_new_param_t_optimizer_get, _libccv.ccv_bbf_new_param_t_optimizer_set)
    __swig_setmethods__["detector"] = _libccv.ccv_bbf_new_param_t_detector_set
    __swig_getmethods__["detector"] = _libccv.ccv_bbf_new_param_t_detector_get
    if _newclass:
        detector = _swig_property(_libccv.ccv_bbf_new_param_t_detector_get, _libccv.ccv_bbf_new_param_t_detector_set)

    def __init__(self):
        this = _libccv.new_ccv_bbf_new_param_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_bbf_new_param_t
    __del__ = lambda self: None
ccv_bbf_new_param_t_swigregister = _libccv.ccv_bbf_new_param_t_swigregister
ccv_bbf_new_param_t_swigregister(ccv_bbf_new_param_t)

CCV_BBF_NO_NESTED = _libccv.CCV_BBF_NO_NESTED

def ccv_bbf_classifier_cascade_new(posnum, bgfiles, bgnum, negnum, size, dir, params):
    return _libccv.ccv_bbf_classifier_cascade_new(posnum, bgfiles, bgnum, negnum, size, dir, params)
ccv_bbf_classifier_cascade_new = _libccv.ccv_bbf_classifier_cascade_new

def ccv_bbf_detect_objects(a, cascade, count, params):
    return _libccv.ccv_bbf_detect_objects(a, cascade, count, params)
ccv_bbf_detect_objects = _libccv.ccv_bbf_detect_objects

def ccv_bbf_read_classifier_cascade(directory):
    return _libccv.ccv_bbf_read_classifier_cascade(directory)
ccv_bbf_read_classifier_cascade = _libccv.ccv_bbf_read_classifier_cascade

def ccv_bbf_classifier_cascade_free(cascade):
    return _libccv.ccv_bbf_classifier_cascade_free(cascade)
ccv_bbf_classifier_cascade_free = _libccv.ccv_bbf_classifier_cascade_free

def ccv_bbf_classifier_cascade_read_binary(s):
    return _libccv.ccv_bbf_classifier_cascade_read_binary(s)
ccv_bbf_classifier_cascade_read_binary = _libccv.ccv_bbf_classifier_cascade_read_binary

def ccv_bbf_classifier_cascade_write_binary(cascade, s, slen):
    return _libccv.ccv_bbf_classifier_cascade_write_binary(cascade, s, slen)
ccv_bbf_classifier_cascade_write_binary = _libccv.ccv_bbf_classifier_cascade_write_binary
class ccv_ferns_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_ferns_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_ferns_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["structs"] = _libccv.ccv_ferns_t_structs_set
    __swig_getmethods__["structs"] = _libccv.ccv_ferns_t_structs_get
    if _newclass:
        structs = _swig_property(_libccv.ccv_ferns_t_structs_get, _libccv.ccv_ferns_t_structs_set)
    __swig_setmethods__["features"] = _libccv.ccv_ferns_t_features_set
    __swig_getmethods__["features"] = _libccv.ccv_ferns_t_features_get
    if _newclass:
        features = _swig_property(_libccv.ccv_ferns_t_features_get, _libccv.ccv_ferns_t_features_set)
    __swig_setmethods__["scales"] = _libccv.ccv_ferns_t_scales_set
    __swig_getmethods__["scales"] = _libccv.ccv_ferns_t_scales_get
    if _newclass:
        scales = _swig_property(_libccv.ccv_ferns_t_scales_get, _libccv.ccv_ferns_t_scales_set)
    __swig_setmethods__["posteriors"] = _libccv.ccv_ferns_t_posteriors_set
    __swig_getmethods__["posteriors"] = _libccv.ccv_ferns_t_posteriors_get
    if _newclass:
        posteriors = _swig_property(_libccv.ccv_ferns_t_posteriors_get, _libccv.ccv_ferns_t_posteriors_set)
    __swig_setmethods__["threshold"] = _libccv.ccv_ferns_t_threshold_set
    __swig_getmethods__["threshold"] = _libccv.ccv_ferns_t_threshold_get
    if _newclass:
        threshold = _swig_property(_libccv.ccv_ferns_t_threshold_get, _libccv.ccv_ferns_t_threshold_set)
    __swig_setmethods__["cnum"] = _libccv.ccv_ferns_t_cnum_set
    __swig_getmethods__["cnum"] = _libccv.ccv_ferns_t_cnum_get
    if _newclass:
        cnum = _swig_property(_libccv.ccv_ferns_t_cnum_get, _libccv.ccv_ferns_t_cnum_set)
    __swig_setmethods__["rnum"] = _libccv.ccv_ferns_t_rnum_set
    __swig_getmethods__["rnum"] = _libccv.ccv_ferns_t_rnum_get
    if _newclass:
        rnum = _swig_property(_libccv.ccv_ferns_t_rnum_get, _libccv.ccv_ferns_t_rnum_set)
    __swig_setmethods__["posterior"] = _libccv.ccv_ferns_t_posterior_set
    __swig_getmethods__["posterior"] = _libccv.ccv_ferns_t_posterior_get
    if _newclass:
        posterior = _swig_property(_libccv.ccv_ferns_t_posterior_get, _libccv.ccv_ferns_t_posterior_set)
    __swig_setmethods__["fern"] = _libccv.ccv_ferns_t_fern_set
    __swig_getmethods__["fern"] = _libccv.ccv_ferns_t_fern_get
    if _newclass:
        fern = _swig_property(_libccv.ccv_ferns_t_fern_get, _libccv.ccv_ferns_t_fern_set)

    def __init__(self):
        this = _libccv.new_ccv_ferns_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_ferns_t
    __del__ = lambda self: None
ccv_ferns_t_swigregister = _libccv.ccv_ferns_t_swigregister
ccv_ferns_t_swigregister(ccv_ferns_t)
ccv_bbf_default_params = cvar.ccv_bbf_default_params


def ccv_ferns_new(structs, features, scales, sizes):
    return _libccv.ccv_ferns_new(structs, features, scales, sizes)
ccv_ferns_new = _libccv.ccv_ferns_new

def ccv_ferns_feature(ferns, a, scale, fern):
    return _libccv.ccv_ferns_feature(ferns, a, scale, fern)
ccv_ferns_feature = _libccv.ccv_ferns_feature

def ccv_ferns_correct(ferns, fern, c, repeat):
    return _libccv.ccv_ferns_correct(ferns, fern, c, repeat)
ccv_ferns_correct = _libccv.ccv_ferns_correct

def ccv_ferns_predict(ferns, fern):
    return _libccv.ccv_ferns_predict(ferns, fern)
ccv_ferns_predict = _libccv.ccv_ferns_predict

def ccv_ferns_free(ferns):
    return _libccv.ccv_ferns_free(ferns)
ccv_ferns_free = _libccv.ccv_ferns_free
class ccv_tld_param_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_tld_param_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_tld_param_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["win_size"] = _libccv.ccv_tld_param_t_win_size_set
    __swig_getmethods__["win_size"] = _libccv.ccv_tld_param_t_win_size_get
    if _newclass:
        win_size = _swig_property(_libccv.ccv_tld_param_t_win_size_get, _libccv.ccv_tld_param_t_win_size_set)
    __swig_setmethods__["level"] = _libccv.ccv_tld_param_t_level_set
    __swig_getmethods__["level"] = _libccv.ccv_tld_param_t_level_get
    if _newclass:
        level = _swig_property(_libccv.ccv_tld_param_t_level_get, _libccv.ccv_tld_param_t_level_set)
    __swig_setmethods__["min_eigen"] = _libccv.ccv_tld_param_t_min_eigen_set
    __swig_getmethods__["min_eigen"] = _libccv.ccv_tld_param_t_min_eigen_get
    if _newclass:
        min_eigen = _swig_property(_libccv.ccv_tld_param_t_min_eigen_get, _libccv.ccv_tld_param_t_min_eigen_set)
    __swig_setmethods__["min_forward_backward_error"] = _libccv.ccv_tld_param_t_min_forward_backward_error_set
    __swig_getmethods__["min_forward_backward_error"] = _libccv.ccv_tld_param_t_min_forward_backward_error_get
    if _newclass:
        min_forward_backward_error = _swig_property(_libccv.ccv_tld_param_t_min_forward_backward_error_get, _libccv.ccv_tld_param_t_min_forward_backward_error_set)
    __swig_setmethods__["interval"] = _libccv.ccv_tld_param_t_interval_set
    __swig_getmethods__["interval"] = _libccv.ccv_tld_param_t_interval_get
    if _newclass:
        interval = _swig_property(_libccv.ccv_tld_param_t_interval_get, _libccv.ccv_tld_param_t_interval_set)
    __swig_setmethods__["shift"] = _libccv.ccv_tld_param_t_shift_set
    __swig_getmethods__["shift"] = _libccv.ccv_tld_param_t_shift_get
    if _newclass:
        shift = _swig_property(_libccv.ccv_tld_param_t_shift_get, _libccv.ccv_tld_param_t_shift_set)
    __swig_setmethods__["min_win"] = _libccv.ccv_tld_param_t_min_win_set
    __swig_getmethods__["min_win"] = _libccv.ccv_tld_param_t_min_win_get
    if _newclass:
        min_win = _swig_property(_libccv.ccv_tld_param_t_min_win_get, _libccv.ccv_tld_param_t_min_win_set)
    __swig_setmethods__["include_overlap"] = _libccv.ccv_tld_param_t_include_overlap_set
    __swig_getmethods__["include_overlap"] = _libccv.ccv_tld_param_t_include_overlap_get
    if _newclass:
        include_overlap = _swig_property(_libccv.ccv_tld_param_t_include_overlap_get, _libccv.ccv_tld_param_t_include_overlap_set)
    __swig_setmethods__["exclude_overlap"] = _libccv.ccv_tld_param_t_exclude_overlap_set
    __swig_getmethods__["exclude_overlap"] = _libccv.ccv_tld_param_t_exclude_overlap_get
    if _newclass:
        exclude_overlap = _swig_property(_libccv.ccv_tld_param_t_exclude_overlap_get, _libccv.ccv_tld_param_t_exclude_overlap_set)
    __swig_setmethods__["structs"] = _libccv.ccv_tld_param_t_structs_set
    __swig_getmethods__["structs"] = _libccv.ccv_tld_param_t_structs_get
    if _newclass:
        structs = _swig_property(_libccv.ccv_tld_param_t_structs_get, _libccv.ccv_tld_param_t_structs_set)
    __swig_setmethods__["features"] = _libccv.ccv_tld_param_t_features_set
    __swig_getmethods__["features"] = _libccv.ccv_tld_param_t_features_get
    if _newclass:
        features = _swig_property(_libccv.ccv_tld_param_t_features_get, _libccv.ccv_tld_param_t_features_set)
    __swig_setmethods__["validate_set"] = _libccv.ccv_tld_param_t_validate_set_set
    __swig_getmethods__["validate_set"] = _libccv.ccv_tld_param_t_validate_set_get
    if _newclass:
        validate_set = _swig_property(_libccv.ccv_tld_param_t_validate_set_get, _libccv.ccv_tld_param_t_validate_set_set)
    __swig_setmethods__["nnc_same"] = _libccv.ccv_tld_param_t_nnc_same_set
    __swig_getmethods__["nnc_same"] = _libccv.ccv_tld_param_t_nnc_same_get
    if _newclass:
        nnc_same = _swig_property(_libccv.ccv_tld_param_t_nnc_same_get, _libccv.ccv_tld_param_t_nnc_same_set)
    __swig_setmethods__["nnc_thres"] = _libccv.ccv_tld_param_t_nnc_thres_set
    __swig_getmethods__["nnc_thres"] = _libccv.ccv_tld_param_t_nnc_thres_get
    if _newclass:
        nnc_thres = _swig_property(_libccv.ccv_tld_param_t_nnc_thres_get, _libccv.ccv_tld_param_t_nnc_thres_set)
    __swig_setmethods__["nnc_verify"] = _libccv.ccv_tld_param_t_nnc_verify_set
    __swig_getmethods__["nnc_verify"] = _libccv.ccv_tld_param_t_nnc_verify_get
    if _newclass:
        nnc_verify = _swig_property(_libccv.ccv_tld_param_t_nnc_verify_get, _libccv.ccv_tld_param_t_nnc_verify_set)
    __swig_setmethods__["nnc_beyond"] = _libccv.ccv_tld_param_t_nnc_beyond_set
    __swig_getmethods__["nnc_beyond"] = _libccv.ccv_tld_param_t_nnc_beyond_get
    if _newclass:
        nnc_beyond = _swig_property(_libccv.ccv_tld_param_t_nnc_beyond_get, _libccv.ccv_tld_param_t_nnc_beyond_set)
    __swig_setmethods__["nnc_collect"] = _libccv.ccv_tld_param_t_nnc_collect_set
    __swig_getmethods__["nnc_collect"] = _libccv.ccv_tld_param_t_nnc_collect_get
    if _newclass:
        nnc_collect = _swig_property(_libccv.ccv_tld_param_t_nnc_collect_get, _libccv.ccv_tld_param_t_nnc_collect_set)
    __swig_setmethods__["bad_patches"] = _libccv.ccv_tld_param_t_bad_patches_set
    __swig_getmethods__["bad_patches"] = _libccv.ccv_tld_param_t_bad_patches_get
    if _newclass:
        bad_patches = _swig_property(_libccv.ccv_tld_param_t_bad_patches_get, _libccv.ccv_tld_param_t_bad_patches_set)
    __swig_setmethods__["new_deform"] = _libccv.ccv_tld_param_t_new_deform_set
    __swig_getmethods__["new_deform"] = _libccv.ccv_tld_param_t_new_deform_get
    if _newclass:
        new_deform = _swig_property(_libccv.ccv_tld_param_t_new_deform_get, _libccv.ccv_tld_param_t_new_deform_set)
    __swig_setmethods__["track_deform"] = _libccv.ccv_tld_param_t_track_deform_set
    __swig_getmethods__["track_deform"] = _libccv.ccv_tld_param_t_track_deform_get
    if _newclass:
        track_deform = _swig_property(_libccv.ccv_tld_param_t_track_deform_get, _libccv.ccv_tld_param_t_track_deform_set)
    __swig_setmethods__["new_deform_angle"] = _libccv.ccv_tld_param_t_new_deform_angle_set
    __swig_getmethods__["new_deform_angle"] = _libccv.ccv_tld_param_t_new_deform_angle_get
    if _newclass:
        new_deform_angle = _swig_property(_libccv.ccv_tld_param_t_new_deform_angle_get, _libccv.ccv_tld_param_t_new_deform_angle_set)
    __swig_setmethods__["track_deform_angle"] = _libccv.ccv_tld_param_t_track_deform_angle_set
    __swig_getmethods__["track_deform_angle"] = _libccv.ccv_tld_param_t_track_deform_angle_get
    if _newclass:
        track_deform_angle = _swig_property(_libccv.ccv_tld_param_t_track_deform_angle_get, _libccv.ccv_tld_param_t_track_deform_angle_set)
    __swig_setmethods__["new_deform_scale"] = _libccv.ccv_tld_param_t_new_deform_scale_set
    __swig_getmethods__["new_deform_scale"] = _libccv.ccv_tld_param_t_new_deform_scale_get
    if _newclass:
        new_deform_scale = _swig_property(_libccv.ccv_tld_param_t_new_deform_scale_get, _libccv.ccv_tld_param_t_new_deform_scale_set)
    __swig_setmethods__["track_deform_scale"] = _libccv.ccv_tld_param_t_track_deform_scale_set
    __swig_getmethods__["track_deform_scale"] = _libccv.ccv_tld_param_t_track_deform_scale_get
    if _newclass:
        track_deform_scale = _swig_property(_libccv.ccv_tld_param_t_track_deform_scale_get, _libccv.ccv_tld_param_t_track_deform_scale_set)
    __swig_setmethods__["new_deform_shift"] = _libccv.ccv_tld_param_t_new_deform_shift_set
    __swig_getmethods__["new_deform_shift"] = _libccv.ccv_tld_param_t_new_deform_shift_get
    if _newclass:
        new_deform_shift = _swig_property(_libccv.ccv_tld_param_t_new_deform_shift_get, _libccv.ccv_tld_param_t_new_deform_shift_set)
    __swig_setmethods__["track_deform_shift"] = _libccv.ccv_tld_param_t_track_deform_shift_set
    __swig_getmethods__["track_deform_shift"] = _libccv.ccv_tld_param_t_track_deform_shift_get
    if _newclass:
        track_deform_shift = _swig_property(_libccv.ccv_tld_param_t_track_deform_shift_get, _libccv.ccv_tld_param_t_track_deform_shift_set)
    __swig_setmethods__["top_n"] = _libccv.ccv_tld_param_t_top_n_set
    __swig_getmethods__["top_n"] = _libccv.ccv_tld_param_t_top_n_get
    if _newclass:
        top_n = _swig_property(_libccv.ccv_tld_param_t_top_n_get, _libccv.ccv_tld_param_t_top_n_set)
    __swig_setmethods__["rotation"] = _libccv.ccv_tld_param_t_rotation_set
    __swig_getmethods__["rotation"] = _libccv.ccv_tld_param_t_rotation_get
    if _newclass:
        rotation = _swig_property(_libccv.ccv_tld_param_t_rotation_get, _libccv.ccv_tld_param_t_rotation_set)

    def __init__(self):
        this = _libccv.new_ccv_tld_param_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_tld_param_t
    __del__ = lambda self: None
ccv_tld_param_t_swigregister = _libccv.ccv_tld_param_t_swigregister
ccv_tld_param_t_swigregister(ccv_tld_param_t)

class ccv_tld_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_tld_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_tld_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["params"] = _libccv.ccv_tld_t_params_set
    __swig_getmethods__["params"] = _libccv.ccv_tld_t_params_get
    if _newclass:
        params = _swig_property(_libccv.ccv_tld_t_params_get, _libccv.ccv_tld_t_params_set)
    __swig_setmethods__["box"] = _libccv.ccv_tld_t_box_set
    __swig_getmethods__["box"] = _libccv.ccv_tld_t_box_get
    if _newclass:
        box = _swig_property(_libccv.ccv_tld_t_box_get, _libccv.ccv_tld_t_box_set)
    __swig_setmethods__["ferns"] = _libccv.ccv_tld_t_ferns_set
    __swig_getmethods__["ferns"] = _libccv.ccv_tld_t_ferns_get
    if _newclass:
        ferns = _swig_property(_libccv.ccv_tld_t_ferns_get, _libccv.ccv_tld_t_ferns_set)
    __swig_setmethods__["sv"] = _libccv.ccv_tld_t_sv_set
    __swig_getmethods__["sv"] = _libccv.ccv_tld_t_sv_get
    if _newclass:
        sv = _swig_property(_libccv.ccv_tld_t_sv_get, _libccv.ccv_tld_t_sv_set)
    __swig_setmethods__["patch"] = _libccv.ccv_tld_t_patch_set
    __swig_getmethods__["patch"] = _libccv.ccv_tld_t_patch_get
    if _newclass:
        patch = _swig_property(_libccv.ccv_tld_t_patch_get, _libccv.ccv_tld_t_patch_set)
    __swig_setmethods__["found"] = _libccv.ccv_tld_t_found_set
    __swig_getmethods__["found"] = _libccv.ccv_tld_t_found_get
    if _newclass:
        found = _swig_property(_libccv.ccv_tld_t_found_get, _libccv.ccv_tld_t_found_set)
    __swig_setmethods__["verified"] = _libccv.ccv_tld_t_verified_set
    __swig_getmethods__["verified"] = _libccv.ccv_tld_t_verified_get
    if _newclass:
        verified = _swig_property(_libccv.ccv_tld_t_verified_get, _libccv.ccv_tld_t_verified_set)
    __swig_setmethods__["top"] = _libccv.ccv_tld_t_top_set
    __swig_getmethods__["top"] = _libccv.ccv_tld_t_top_get
    if _newclass:
        top = _swig_property(_libccv.ccv_tld_t_top_get, _libccv.ccv_tld_t_top_set)
    __swig_setmethods__["ferns_thres"] = _libccv.ccv_tld_t_ferns_thres_set
    __swig_getmethods__["ferns_thres"] = _libccv.ccv_tld_t_ferns_thres_get
    if _newclass:
        ferns_thres = _swig_property(_libccv.ccv_tld_t_ferns_thres_get, _libccv.ccv_tld_t_ferns_thres_set)
    __swig_setmethods__["nnc_thres"] = _libccv.ccv_tld_t_nnc_thres_set
    __swig_getmethods__["nnc_thres"] = _libccv.ccv_tld_t_nnc_thres_get
    if _newclass:
        nnc_thres = _swig_property(_libccv.ccv_tld_t_nnc_thres_get, _libccv.ccv_tld_t_nnc_thres_set)
    __swig_setmethods__["nnc_verify_thres"] = _libccv.ccv_tld_t_nnc_verify_thres_set
    __swig_getmethods__["nnc_verify_thres"] = _libccv.ccv_tld_t_nnc_verify_thres_get
    if _newclass:
        nnc_verify_thres = _swig_property(_libccv.ccv_tld_t_nnc_verify_thres_get, _libccv.ccv_tld_t_nnc_verify_thres_set)
    __swig_setmethods__["var_thres"] = _libccv.ccv_tld_t_var_thres_set
    __swig_getmethods__["var_thres"] = _libccv.ccv_tld_t_var_thres_get
    if _newclass:
        var_thres = _swig_property(_libccv.ccv_tld_t_var_thres_get, _libccv.ccv_tld_t_var_thres_set)
    __swig_setmethods__["frame_signature"] = _libccv.ccv_tld_t_frame_signature_set
    __swig_getmethods__["frame_signature"] = _libccv.ccv_tld_t_frame_signature_get
    if _newclass:
        frame_signature = _swig_property(_libccv.ccv_tld_t_frame_signature_get, _libccv.ccv_tld_t_frame_signature_set)
    __swig_setmethods__["count"] = _libccv.ccv_tld_t_count_set
    __swig_getmethods__["count"] = _libccv.ccv_tld_t_count_get
    if _newclass:
        count = _swig_property(_libccv.ccv_tld_t_count_get, _libccv.ccv_tld_t_count_set)
    __swig_setmethods__["sfmt"] = _libccv.ccv_tld_t_sfmt_set
    __swig_getmethods__["sfmt"] = _libccv.ccv_tld_t_sfmt_get
    if _newclass:
        sfmt = _swig_property(_libccv.ccv_tld_t_sfmt_get, _libccv.ccv_tld_t_sfmt_set)
    __swig_setmethods__["dsfmt"] = _libccv.ccv_tld_t_dsfmt_set
    __swig_getmethods__["dsfmt"] = _libccv.ccv_tld_t_dsfmt_get
    if _newclass:
        dsfmt = _swig_property(_libccv.ccv_tld_t_dsfmt_get, _libccv.ccv_tld_t_dsfmt_set)
    __swig_setmethods__["fern_buffer"] = _libccv.ccv_tld_t_fern_buffer_set
    __swig_getmethods__["fern_buffer"] = _libccv.ccv_tld_t_fern_buffer_get
    if _newclass:
        fern_buffer = _swig_property(_libccv.ccv_tld_t_fern_buffer_get, _libccv.ccv_tld_t_fern_buffer_set)

    def __init__(self):
        this = _libccv.new_ccv_tld_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_tld_t
    __del__ = lambda self: None
ccv_tld_t_swigregister = _libccv.ccv_tld_t_swigregister
ccv_tld_t_swigregister(ccv_tld_t)
ccv_tld_default_params = cvar.ccv_tld_default_params

class ccv_tld_info_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_tld_info_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_tld_info_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["perform_track"] = _libccv.ccv_tld_info_t_perform_track_set
    __swig_getmethods__["perform_track"] = _libccv.ccv_tld_info_t_perform_track_get
    if _newclass:
        perform_track = _swig_property(_libccv.ccv_tld_info_t_perform_track_get, _libccv.ccv_tld_info_t_perform_track_set)
    __swig_setmethods__["perform_learn"] = _libccv.ccv_tld_info_t_perform_learn_set
    __swig_getmethods__["perform_learn"] = _libccv.ccv_tld_info_t_perform_learn_get
    if _newclass:
        perform_learn = _swig_property(_libccv.ccv_tld_info_t_perform_learn_get, _libccv.ccv_tld_info_t_perform_learn_set)
    __swig_setmethods__["track_success"] = _libccv.ccv_tld_info_t_track_success_set
    __swig_getmethods__["track_success"] = _libccv.ccv_tld_info_t_track_success_get
    if _newclass:
        track_success = _swig_property(_libccv.ccv_tld_info_t_track_success_get, _libccv.ccv_tld_info_t_track_success_set)
    __swig_setmethods__["ferns_detects"] = _libccv.ccv_tld_info_t_ferns_detects_set
    __swig_getmethods__["ferns_detects"] = _libccv.ccv_tld_info_t_ferns_detects_get
    if _newclass:
        ferns_detects = _swig_property(_libccv.ccv_tld_info_t_ferns_detects_get, _libccv.ccv_tld_info_t_ferns_detects_set)
    __swig_setmethods__["nnc_detects"] = _libccv.ccv_tld_info_t_nnc_detects_set
    __swig_getmethods__["nnc_detects"] = _libccv.ccv_tld_info_t_nnc_detects_get
    if _newclass:
        nnc_detects = _swig_property(_libccv.ccv_tld_info_t_nnc_detects_get, _libccv.ccv_tld_info_t_nnc_detects_set)
    __swig_setmethods__["clustered_detects"] = _libccv.ccv_tld_info_t_clustered_detects_set
    __swig_getmethods__["clustered_detects"] = _libccv.ccv_tld_info_t_clustered_detects_get
    if _newclass:
        clustered_detects = _swig_property(_libccv.ccv_tld_info_t_clustered_detects_get, _libccv.ccv_tld_info_t_clustered_detects_set)
    __swig_setmethods__["confident_matches"] = _libccv.ccv_tld_info_t_confident_matches_set
    __swig_getmethods__["confident_matches"] = _libccv.ccv_tld_info_t_confident_matches_get
    if _newclass:
        confident_matches = _swig_property(_libccv.ccv_tld_info_t_confident_matches_get, _libccv.ccv_tld_info_t_confident_matches_set)
    __swig_setmethods__["close_matches"] = _libccv.ccv_tld_info_t_close_matches_set
    __swig_getmethods__["close_matches"] = _libccv.ccv_tld_info_t_close_matches_get
    if _newclass:
        close_matches = _swig_property(_libccv.ccv_tld_info_t_close_matches_get, _libccv.ccv_tld_info_t_close_matches_set)

    def __init__(self):
        this = _libccv.new_ccv_tld_info_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_tld_info_t
    __del__ = lambda self: None
ccv_tld_info_t_swigregister = _libccv.ccv_tld_info_t_swigregister
ccv_tld_info_t_swigregister(ccv_tld_info_t)


def ccv_tld_new(a, box, params):
    return _libccv.ccv_tld_new(a, box, params)
ccv_tld_new = _libccv.ccv_tld_new

def ccv_tld_track_object(tld, a, b, info):
    return _libccv.ccv_tld_track_object(tld, a, b, info)
ccv_tld_track_object = _libccv.ccv_tld_track_object

def ccv_tld_free(tld):
    return _libccv.ccv_tld_free(tld)
ccv_tld_free = _libccv.ccv_tld_free
CCV_ICF_SAT_MAX = _libccv.CCV_ICF_SAT_MAX
class ccv_icf_feature_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_icf_feature_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_icf_feature_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["count"] = _libccv.ccv_icf_feature_t_count_set
    __swig_getmethods__["count"] = _libccv.ccv_icf_feature_t_count_get
    if _newclass:
        count = _swig_property(_libccv.ccv_icf_feature_t_count_get, _libccv.ccv_icf_feature_t_count_set)
    __swig_setmethods__["channel"] = _libccv.ccv_icf_feature_t_channel_set
    __swig_getmethods__["channel"] = _libccv.ccv_icf_feature_t_channel_get
    if _newclass:
        channel = _swig_property(_libccv.ccv_icf_feature_t_channel_get, _libccv.ccv_icf_feature_t_channel_set)
    __swig_setmethods__["sat"] = _libccv.ccv_icf_feature_t_sat_set
    __swig_getmethods__["sat"] = _libccv.ccv_icf_feature_t_sat_get
    if _newclass:
        sat = _swig_property(_libccv.ccv_icf_feature_t_sat_get, _libccv.ccv_icf_feature_t_sat_set)
    __swig_setmethods__["alpha"] = _libccv.ccv_icf_feature_t_alpha_set
    __swig_getmethods__["alpha"] = _libccv.ccv_icf_feature_t_alpha_get
    if _newclass:
        alpha = _swig_property(_libccv.ccv_icf_feature_t_alpha_get, _libccv.ccv_icf_feature_t_alpha_set)
    __swig_setmethods__["beta"] = _libccv.ccv_icf_feature_t_beta_set
    __swig_getmethods__["beta"] = _libccv.ccv_icf_feature_t_beta_get
    if _newclass:
        beta = _swig_property(_libccv.ccv_icf_feature_t_beta_get, _libccv.ccv_icf_feature_t_beta_set)

    def __init__(self):
        this = _libccv.new_ccv_icf_feature_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_icf_feature_t
    __del__ = lambda self: None
ccv_icf_feature_t_swigregister = _libccv.ccv_icf_feature_t_swigregister
ccv_icf_feature_t_swigregister(ccv_icf_feature_t)

class ccv_icf_decision_tree_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_icf_decision_tree_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_icf_decision_tree_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_pass"] = _libccv.ccv_icf_decision_tree_t__pass_set
    __swig_getmethods__["_pass"] = _libccv.ccv_icf_decision_tree_t__pass_get
    if _newclass:
        _pass = _swig_property(_libccv.ccv_icf_decision_tree_t__pass_get, _libccv.ccv_icf_decision_tree_t__pass_set)
    __swig_setmethods__["features"] = _libccv.ccv_icf_decision_tree_t_features_set
    __swig_getmethods__["features"] = _libccv.ccv_icf_decision_tree_t_features_get
    if _newclass:
        features = _swig_property(_libccv.ccv_icf_decision_tree_t_features_get, _libccv.ccv_icf_decision_tree_t_features_set)
    __swig_setmethods__["weigh"] = _libccv.ccv_icf_decision_tree_t_weigh_set
    __swig_getmethods__["weigh"] = _libccv.ccv_icf_decision_tree_t_weigh_get
    if _newclass:
        weigh = _swig_property(_libccv.ccv_icf_decision_tree_t_weigh_get, _libccv.ccv_icf_decision_tree_t_weigh_set)
    __swig_setmethods__["threshold"] = _libccv.ccv_icf_decision_tree_t_threshold_set
    __swig_getmethods__["threshold"] = _libccv.ccv_icf_decision_tree_t_threshold_get
    if _newclass:
        threshold = _swig_property(_libccv.ccv_icf_decision_tree_t_threshold_get, _libccv.ccv_icf_decision_tree_t_threshold_set)

    def __init__(self):
        this = _libccv.new_ccv_icf_decision_tree_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_icf_decision_tree_t
    __del__ = lambda self: None
ccv_icf_decision_tree_t_swigregister = _libccv.ccv_icf_decision_tree_t_swigregister
ccv_icf_decision_tree_t_swigregister(ccv_icf_decision_tree_t)

CCV_ICF_CLASSIFIER_TYPE_A = _libccv.CCV_ICF_CLASSIFIER_TYPE_A
CCV_ICF_CLASSIFIER_TYPE_B = _libccv.CCV_ICF_CLASSIFIER_TYPE_B
class ccv_icf_classifier_cascade_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_icf_classifier_cascade_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_icf_classifier_cascade_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _libccv.ccv_icf_classifier_cascade_t_type_set
    __swig_getmethods__["type"] = _libccv.ccv_icf_classifier_cascade_t_type_get
    if _newclass:
        type = _swig_property(_libccv.ccv_icf_classifier_cascade_t_type_get, _libccv.ccv_icf_classifier_cascade_t_type_set)
    __swig_setmethods__["count"] = _libccv.ccv_icf_classifier_cascade_t_count_set
    __swig_getmethods__["count"] = _libccv.ccv_icf_classifier_cascade_t_count_get
    if _newclass:
        count = _swig_property(_libccv.ccv_icf_classifier_cascade_t_count_get, _libccv.ccv_icf_classifier_cascade_t_count_set)
    __swig_setmethods__["grayscale"] = _libccv.ccv_icf_classifier_cascade_t_grayscale_set
    __swig_getmethods__["grayscale"] = _libccv.ccv_icf_classifier_cascade_t_grayscale_get
    if _newclass:
        grayscale = _swig_property(_libccv.ccv_icf_classifier_cascade_t_grayscale_get, _libccv.ccv_icf_classifier_cascade_t_grayscale_set)
    __swig_setmethods__["margin"] = _libccv.ccv_icf_classifier_cascade_t_margin_set
    __swig_getmethods__["margin"] = _libccv.ccv_icf_classifier_cascade_t_margin_get
    if _newclass:
        margin = _swig_property(_libccv.ccv_icf_classifier_cascade_t_margin_get, _libccv.ccv_icf_classifier_cascade_t_margin_set)
    __swig_setmethods__["size"] = _libccv.ccv_icf_classifier_cascade_t_size_set
    __swig_getmethods__["size"] = _libccv.ccv_icf_classifier_cascade_t_size_get
    if _newclass:
        size = _swig_property(_libccv.ccv_icf_classifier_cascade_t_size_get, _libccv.ccv_icf_classifier_cascade_t_size_set)
    __swig_setmethods__["weak_classifiers"] = _libccv.ccv_icf_classifier_cascade_t_weak_classifiers_set
    __swig_getmethods__["weak_classifiers"] = _libccv.ccv_icf_classifier_cascade_t_weak_classifiers_get
    if _newclass:
        weak_classifiers = _swig_property(_libccv.ccv_icf_classifier_cascade_t_weak_classifiers_get, _libccv.ccv_icf_classifier_cascade_t_weak_classifiers_set)

    def __init__(self):
        this = _libccv.new_ccv_icf_classifier_cascade_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_icf_classifier_cascade_t
    __del__ = lambda self: None
ccv_icf_classifier_cascade_t_swigregister = _libccv.ccv_icf_classifier_cascade_t_swigregister
ccv_icf_classifier_cascade_t_swigregister(ccv_icf_classifier_cascade_t)

class ccv_icf_multiscale_classifier_cascade_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_icf_multiscale_classifier_cascade_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_icf_multiscale_classifier_cascade_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _libccv.ccv_icf_multiscale_classifier_cascade_t_type_set
    __swig_getmethods__["type"] = _libccv.ccv_icf_multiscale_classifier_cascade_t_type_get
    if _newclass:
        type = _swig_property(_libccv.ccv_icf_multiscale_classifier_cascade_t_type_get, _libccv.ccv_icf_multiscale_classifier_cascade_t_type_set)
    __swig_setmethods__["count"] = _libccv.ccv_icf_multiscale_classifier_cascade_t_count_set
    __swig_getmethods__["count"] = _libccv.ccv_icf_multiscale_classifier_cascade_t_count_get
    if _newclass:
        count = _swig_property(_libccv.ccv_icf_multiscale_classifier_cascade_t_count_get, _libccv.ccv_icf_multiscale_classifier_cascade_t_count_set)
    __swig_setmethods__["octave"] = _libccv.ccv_icf_multiscale_classifier_cascade_t_octave_set
    __swig_getmethods__["octave"] = _libccv.ccv_icf_multiscale_classifier_cascade_t_octave_get
    if _newclass:
        octave = _swig_property(_libccv.ccv_icf_multiscale_classifier_cascade_t_octave_get, _libccv.ccv_icf_multiscale_classifier_cascade_t_octave_set)
    __swig_setmethods__["grayscale"] = _libccv.ccv_icf_multiscale_classifier_cascade_t_grayscale_set
    __swig_getmethods__["grayscale"] = _libccv.ccv_icf_multiscale_classifier_cascade_t_grayscale_get
    if _newclass:
        grayscale = _swig_property(_libccv.ccv_icf_multiscale_classifier_cascade_t_grayscale_get, _libccv.ccv_icf_multiscale_classifier_cascade_t_grayscale_set)
    __swig_setmethods__["cascade"] = _libccv.ccv_icf_multiscale_classifier_cascade_t_cascade_set
    __swig_getmethods__["cascade"] = _libccv.ccv_icf_multiscale_classifier_cascade_t_cascade_get
    if _newclass:
        cascade = _swig_property(_libccv.ccv_icf_multiscale_classifier_cascade_t_cascade_get, _libccv.ccv_icf_multiscale_classifier_cascade_t_cascade_set)

    def __init__(self):
        this = _libccv.new_ccv_icf_multiscale_classifier_cascade_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_icf_multiscale_classifier_cascade_t
    __del__ = lambda self: None
ccv_icf_multiscale_classifier_cascade_t_swigregister = _libccv.ccv_icf_multiscale_classifier_cascade_t_swigregister
ccv_icf_multiscale_classifier_cascade_t_swigregister(ccv_icf_multiscale_classifier_cascade_t)

class ccv_icf_param_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_icf_param_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_icf_param_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["min_neighbors"] = _libccv.ccv_icf_param_t_min_neighbors_set
    __swig_getmethods__["min_neighbors"] = _libccv.ccv_icf_param_t_min_neighbors_get
    if _newclass:
        min_neighbors = _swig_property(_libccv.ccv_icf_param_t_min_neighbors_get, _libccv.ccv_icf_param_t_min_neighbors_set)
    __swig_setmethods__["flags"] = _libccv.ccv_icf_param_t_flags_set
    __swig_getmethods__["flags"] = _libccv.ccv_icf_param_t_flags_get
    if _newclass:
        flags = _swig_property(_libccv.ccv_icf_param_t_flags_get, _libccv.ccv_icf_param_t_flags_set)
    __swig_setmethods__["step_through"] = _libccv.ccv_icf_param_t_step_through_set
    __swig_getmethods__["step_through"] = _libccv.ccv_icf_param_t_step_through_get
    if _newclass:
        step_through = _swig_property(_libccv.ccv_icf_param_t_step_through_get, _libccv.ccv_icf_param_t_step_through_set)
    __swig_setmethods__["interval"] = _libccv.ccv_icf_param_t_interval_set
    __swig_getmethods__["interval"] = _libccv.ccv_icf_param_t_interval_get
    if _newclass:
        interval = _swig_property(_libccv.ccv_icf_param_t_interval_get, _libccv.ccv_icf_param_t_interval_set)
    __swig_setmethods__["threshold"] = _libccv.ccv_icf_param_t_threshold_set
    __swig_getmethods__["threshold"] = _libccv.ccv_icf_param_t_threshold_get
    if _newclass:
        threshold = _swig_property(_libccv.ccv_icf_param_t_threshold_get, _libccv.ccv_icf_param_t_threshold_set)

    def __init__(self):
        this = _libccv.new_ccv_icf_param_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_icf_param_t
    __del__ = lambda self: None
ccv_icf_param_t_swigregister = _libccv.ccv_icf_param_t_swigregister
ccv_icf_param_t_swigregister(ccv_icf_param_t)

class ccv_icf_new_param_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_icf_new_param_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_icf_new_param_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["detector"] = _libccv.ccv_icf_new_param_t_detector_set
    __swig_getmethods__["detector"] = _libccv.ccv_icf_new_param_t_detector_get
    if _newclass:
        detector = _swig_property(_libccv.ccv_icf_new_param_t_detector_get, _libccv.ccv_icf_new_param_t_detector_set)
    __swig_setmethods__["grayscale"] = _libccv.ccv_icf_new_param_t_grayscale_set
    __swig_getmethods__["grayscale"] = _libccv.ccv_icf_new_param_t_grayscale_get
    if _newclass:
        grayscale = _swig_property(_libccv.ccv_icf_new_param_t_grayscale_get, _libccv.ccv_icf_new_param_t_grayscale_set)
    __swig_setmethods__["min_dimension"] = _libccv.ccv_icf_new_param_t_min_dimension_set
    __swig_getmethods__["min_dimension"] = _libccv.ccv_icf_new_param_t_min_dimension_get
    if _newclass:
        min_dimension = _swig_property(_libccv.ccv_icf_new_param_t_min_dimension_get, _libccv.ccv_icf_new_param_t_min_dimension_set)
    __swig_setmethods__["margin"] = _libccv.ccv_icf_new_param_t_margin_set
    __swig_getmethods__["margin"] = _libccv.ccv_icf_new_param_t_margin_get
    if _newclass:
        margin = _swig_property(_libccv.ccv_icf_new_param_t_margin_get, _libccv.ccv_icf_new_param_t_margin_set)
    __swig_setmethods__["size"] = _libccv.ccv_icf_new_param_t_size_set
    __swig_getmethods__["size"] = _libccv.ccv_icf_new_param_t_size_get
    if _newclass:
        size = _swig_property(_libccv.ccv_icf_new_param_t_size_get, _libccv.ccv_icf_new_param_t_size_set)
    __swig_setmethods__["feature_size"] = _libccv.ccv_icf_new_param_t_feature_size_set
    __swig_getmethods__["feature_size"] = _libccv.ccv_icf_new_param_t_feature_size_get
    if _newclass:
        feature_size = _swig_property(_libccv.ccv_icf_new_param_t_feature_size_get, _libccv.ccv_icf_new_param_t_feature_size_set)
    __swig_setmethods__["weak_classifier"] = _libccv.ccv_icf_new_param_t_weak_classifier_set
    __swig_getmethods__["weak_classifier"] = _libccv.ccv_icf_new_param_t_weak_classifier_get
    if _newclass:
        weak_classifier = _swig_property(_libccv.ccv_icf_new_param_t_weak_classifier_get, _libccv.ccv_icf_new_param_t_weak_classifier_set)
    __swig_setmethods__["bootstrap"] = _libccv.ccv_icf_new_param_t_bootstrap_set
    __swig_getmethods__["bootstrap"] = _libccv.ccv_icf_new_param_t_bootstrap_get
    if _newclass:
        bootstrap = _swig_property(_libccv.ccv_icf_new_param_t_bootstrap_get, _libccv.ccv_icf_new_param_t_bootstrap_set)
    __swig_setmethods__["deform_angle"] = _libccv.ccv_icf_new_param_t_deform_angle_set
    __swig_getmethods__["deform_angle"] = _libccv.ccv_icf_new_param_t_deform_angle_get
    if _newclass:
        deform_angle = _swig_property(_libccv.ccv_icf_new_param_t_deform_angle_get, _libccv.ccv_icf_new_param_t_deform_angle_set)
    __swig_setmethods__["deform_scale"] = _libccv.ccv_icf_new_param_t_deform_scale_set
    __swig_getmethods__["deform_scale"] = _libccv.ccv_icf_new_param_t_deform_scale_get
    if _newclass:
        deform_scale = _swig_property(_libccv.ccv_icf_new_param_t_deform_scale_get, _libccv.ccv_icf_new_param_t_deform_scale_set)
    __swig_setmethods__["deform_shift"] = _libccv.ccv_icf_new_param_t_deform_shift_set
    __swig_getmethods__["deform_shift"] = _libccv.ccv_icf_new_param_t_deform_shift_get
    if _newclass:
        deform_shift = _swig_property(_libccv.ccv_icf_new_param_t_deform_shift_get, _libccv.ccv_icf_new_param_t_deform_shift_set)
    __swig_setmethods__["acceptance"] = _libccv.ccv_icf_new_param_t_acceptance_set
    __swig_getmethods__["acceptance"] = _libccv.ccv_icf_new_param_t_acceptance_get
    if _newclass:
        acceptance = _swig_property(_libccv.ccv_icf_new_param_t_acceptance_get, _libccv.ccv_icf_new_param_t_acceptance_set)

    def __init__(self):
        this = _libccv.new_ccv_icf_new_param_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_icf_new_param_t
    __del__ = lambda self: None
ccv_icf_new_param_t_swigregister = _libccv.ccv_icf_new_param_t_swigregister
ccv_icf_new_param_t_swigregister(ccv_icf_new_param_t)
ccv_icf_default_params = cvar.ccv_icf_default_params


def ccv_icf(a, type):
    return _libccv.ccv_icf(a, type)
ccv_icf = _libccv.ccv_icf

def ccv_icf_classifier_cascade_new(posfiles, posnum, bgfiles, negnum, testfiles, dir, params):
    return _libccv.ccv_icf_classifier_cascade_new(posfiles, posnum, bgfiles, negnum, testfiles, dir, params)
ccv_icf_classifier_cascade_new = _libccv.ccv_icf_classifier_cascade_new

def ccv_icf_classifier_cascade_soft(cascade, posfiles, acceptance):
    return _libccv.ccv_icf_classifier_cascade_soft(cascade, posfiles, acceptance)
ccv_icf_classifier_cascade_soft = _libccv.ccv_icf_classifier_cascade_soft

def ccv_icf_read_classifier_cascade(filename):
    return _libccv.ccv_icf_read_classifier_cascade(filename)
ccv_icf_read_classifier_cascade = _libccv.ccv_icf_read_classifier_cascade

def ccv_icf_write_classifier_cascade(classifier, filename):
    return _libccv.ccv_icf_write_classifier_cascade(classifier, filename)
ccv_icf_write_classifier_cascade = _libccv.ccv_icf_write_classifier_cascade

def ccv_icf_classifier_cascade_free(classifier):
    return _libccv.ccv_icf_classifier_cascade_free(classifier)
ccv_icf_classifier_cascade_free = _libccv.ccv_icf_classifier_cascade_free

def ccv_icf_read_multiscale_classifier_cascade(directory):
    return _libccv.ccv_icf_read_multiscale_classifier_cascade(directory)
ccv_icf_read_multiscale_classifier_cascade = _libccv.ccv_icf_read_multiscale_classifier_cascade

def ccv_icf_write_multiscale_classifier_cascade(classifier, directory):
    return _libccv.ccv_icf_write_multiscale_classifier_cascade(classifier, directory)
ccv_icf_write_multiscale_classifier_cascade = _libccv.ccv_icf_write_multiscale_classifier_cascade

def ccv_icf_multiscale_classifier_cascade_free(classifier):
    return _libccv.ccv_icf_multiscale_classifier_cascade_free(classifier)
ccv_icf_multiscale_classifier_cascade_free = _libccv.ccv_icf_multiscale_classifier_cascade_free

def ccv_icf_detect_objects(a, cascade, count, params):
    return _libccv.ccv_icf_detect_objects(a, cascade, count, params)
ccv_icf_detect_objects = _libccv.ccv_icf_detect_objects
CCV_CONVNET_CONVOLUTIONAL = _libccv.CCV_CONVNET_CONVOLUTIONAL
CCV_CONVNET_FULL_CONNECT = _libccv.CCV_CONVNET_FULL_CONNECT
CCV_CONVNET_MAX_POOL = _libccv.CCV_CONVNET_MAX_POOL
CCV_CONVNET_AVERAGE_POOL = _libccv.CCV_CONVNET_AVERAGE_POOL
CCV_CONVNET_LOCAL_RESPONSE_NORM = _libccv.CCV_CONVNET_LOCAL_RESPONSE_NORM
class ccv_convnet_type_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_convnet_type_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_convnet_type_t, name)
    __repr__ = _swig_repr
    __swig_getmethods__["convolutional"] = _libccv.ccv_convnet_type_t_convolutional_get
    if _newclass:
        convolutional = _swig_property(_libccv.ccv_convnet_type_t_convolutional_get)
    __swig_getmethods__["pool"] = _libccv.ccv_convnet_type_t_pool_get
    if _newclass:
        pool = _swig_property(_libccv.ccv_convnet_type_t_pool_get)
    __swig_getmethods__["rnorm"] = _libccv.ccv_convnet_type_t_rnorm_get
    if _newclass:
        rnorm = _swig_property(_libccv.ccv_convnet_type_t_rnorm_get)
    __swig_getmethods__["full_connect"] = _libccv.ccv_convnet_type_t_full_connect_get
    if _newclass:
        full_connect = _swig_property(_libccv.ccv_convnet_type_t_full_connect_get)

    def __init__(self):
        this = _libccv.new_ccv_convnet_type_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_convnet_type_t
    __del__ = lambda self: None
ccv_convnet_type_t_swigregister = _libccv.ccv_convnet_type_t_swigregister
ccv_convnet_type_t_swigregister(ccv_convnet_type_t)

class ccv_convnet_type_t_full_connect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_convnet_type_t_full_connect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_convnet_type_t_full_connect, name)
    __repr__ = _swig_repr
    __swig_setmethods__["count"] = _libccv.ccv_convnet_type_t_full_connect_count_set
    __swig_getmethods__["count"] = _libccv.ccv_convnet_type_t_full_connect_count_get
    if _newclass:
        count = _swig_property(_libccv.ccv_convnet_type_t_full_connect_count_get, _libccv.ccv_convnet_type_t_full_connect_count_set)

    def __init__(self):
        this = _libccv.new_ccv_convnet_type_t_full_connect()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_convnet_type_t_full_connect
    __del__ = lambda self: None
ccv_convnet_type_t_full_connect_swigregister = _libccv.ccv_convnet_type_t_full_connect_swigregister
ccv_convnet_type_t_full_connect_swigregister(ccv_convnet_type_t_full_connect)

class ccv_convnet_type_t_rnorm(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_convnet_type_t_rnorm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_convnet_type_t_rnorm, name)
    __repr__ = _swig_repr
    __swig_setmethods__["size"] = _libccv.ccv_convnet_type_t_rnorm_size_set
    __swig_getmethods__["size"] = _libccv.ccv_convnet_type_t_rnorm_size_get
    if _newclass:
        size = _swig_property(_libccv.ccv_convnet_type_t_rnorm_size_get, _libccv.ccv_convnet_type_t_rnorm_size_set)
    __swig_setmethods__["kappa"] = _libccv.ccv_convnet_type_t_rnorm_kappa_set
    __swig_getmethods__["kappa"] = _libccv.ccv_convnet_type_t_rnorm_kappa_get
    if _newclass:
        kappa = _swig_property(_libccv.ccv_convnet_type_t_rnorm_kappa_get, _libccv.ccv_convnet_type_t_rnorm_kappa_set)
    __swig_setmethods__["alpha"] = _libccv.ccv_convnet_type_t_rnorm_alpha_set
    __swig_getmethods__["alpha"] = _libccv.ccv_convnet_type_t_rnorm_alpha_get
    if _newclass:
        alpha = _swig_property(_libccv.ccv_convnet_type_t_rnorm_alpha_get, _libccv.ccv_convnet_type_t_rnorm_alpha_set)
    __swig_setmethods__["beta"] = _libccv.ccv_convnet_type_t_rnorm_beta_set
    __swig_getmethods__["beta"] = _libccv.ccv_convnet_type_t_rnorm_beta_get
    if _newclass:
        beta = _swig_property(_libccv.ccv_convnet_type_t_rnorm_beta_get, _libccv.ccv_convnet_type_t_rnorm_beta_set)

    def __init__(self):
        this = _libccv.new_ccv_convnet_type_t_rnorm()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_convnet_type_t_rnorm
    __del__ = lambda self: None
ccv_convnet_type_t_rnorm_swigregister = _libccv.ccv_convnet_type_t_rnorm_swigregister
ccv_convnet_type_t_rnorm_swigregister(ccv_convnet_type_t_rnorm)

class ccv_convnet_type_t_pool(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_convnet_type_t_pool, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_convnet_type_t_pool, name)
    __repr__ = _swig_repr
    __swig_setmethods__["strides"] = _libccv.ccv_convnet_type_t_pool_strides_set
    __swig_getmethods__["strides"] = _libccv.ccv_convnet_type_t_pool_strides_get
    if _newclass:
        strides = _swig_property(_libccv.ccv_convnet_type_t_pool_strides_get, _libccv.ccv_convnet_type_t_pool_strides_set)
    __swig_setmethods__["size"] = _libccv.ccv_convnet_type_t_pool_size_set
    __swig_getmethods__["size"] = _libccv.ccv_convnet_type_t_pool_size_get
    if _newclass:
        size = _swig_property(_libccv.ccv_convnet_type_t_pool_size_get, _libccv.ccv_convnet_type_t_pool_size_set)
    __swig_setmethods__["border"] = _libccv.ccv_convnet_type_t_pool_border_set
    __swig_getmethods__["border"] = _libccv.ccv_convnet_type_t_pool_border_get
    if _newclass:
        border = _swig_property(_libccv.ccv_convnet_type_t_pool_border_get, _libccv.ccv_convnet_type_t_pool_border_set)

    def __init__(self):
        this = _libccv.new_ccv_convnet_type_t_pool()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_convnet_type_t_pool
    __del__ = lambda self: None
ccv_convnet_type_t_pool_swigregister = _libccv.ccv_convnet_type_t_pool_swigregister
ccv_convnet_type_t_pool_swigregister(ccv_convnet_type_t_pool)

class ccv_convnet_type_t_convolutional(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_convnet_type_t_convolutional, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_convnet_type_t_convolutional, name)
    __repr__ = _swig_repr
    __swig_setmethods__["count"] = _libccv.ccv_convnet_type_t_convolutional_count_set
    __swig_getmethods__["count"] = _libccv.ccv_convnet_type_t_convolutional_count_get
    if _newclass:
        count = _swig_property(_libccv.ccv_convnet_type_t_convolutional_count_get, _libccv.ccv_convnet_type_t_convolutional_count_set)
    __swig_setmethods__["strides"] = _libccv.ccv_convnet_type_t_convolutional_strides_set
    __swig_getmethods__["strides"] = _libccv.ccv_convnet_type_t_convolutional_strides_get
    if _newclass:
        strides = _swig_property(_libccv.ccv_convnet_type_t_convolutional_strides_get, _libccv.ccv_convnet_type_t_convolutional_strides_set)
    __swig_setmethods__["border"] = _libccv.ccv_convnet_type_t_convolutional_border_set
    __swig_getmethods__["border"] = _libccv.ccv_convnet_type_t_convolutional_border_get
    if _newclass:
        border = _swig_property(_libccv.ccv_convnet_type_t_convolutional_border_get, _libccv.ccv_convnet_type_t_convolutional_border_set)
    __swig_setmethods__["rows"] = _libccv.ccv_convnet_type_t_convolutional_rows_set
    __swig_getmethods__["rows"] = _libccv.ccv_convnet_type_t_convolutional_rows_get
    if _newclass:
        rows = _swig_property(_libccv.ccv_convnet_type_t_convolutional_rows_get, _libccv.ccv_convnet_type_t_convolutional_rows_set)
    __swig_setmethods__["cols"] = _libccv.ccv_convnet_type_t_convolutional_cols_set
    __swig_getmethods__["cols"] = _libccv.ccv_convnet_type_t_convolutional_cols_get
    if _newclass:
        cols = _swig_property(_libccv.ccv_convnet_type_t_convolutional_cols_get, _libccv.ccv_convnet_type_t_convolutional_cols_set)
    __swig_setmethods__["channels"] = _libccv.ccv_convnet_type_t_convolutional_channels_set
    __swig_getmethods__["channels"] = _libccv.ccv_convnet_type_t_convolutional_channels_get
    if _newclass:
        channels = _swig_property(_libccv.ccv_convnet_type_t_convolutional_channels_get, _libccv.ccv_convnet_type_t_convolutional_channels_set)
    __swig_setmethods__["partition"] = _libccv.ccv_convnet_type_t_convolutional_partition_set
    __swig_getmethods__["partition"] = _libccv.ccv_convnet_type_t_convolutional_partition_get
    if _newclass:
        partition = _swig_property(_libccv.ccv_convnet_type_t_convolutional_partition_get, _libccv.ccv_convnet_type_t_convolutional_partition_set)

    def __init__(self):
        this = _libccv.new_ccv_convnet_type_t_convolutional()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_convnet_type_t_convolutional
    __del__ = lambda self: None
ccv_convnet_type_t_convolutional_swigregister = _libccv.ccv_convnet_type_t_convolutional_swigregister
ccv_convnet_type_t_convolutional_swigregister(ccv_convnet_type_t_convolutional)

class ccv_convnet_input_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_convnet_input_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_convnet_input_t, name)
    __repr__ = _swig_repr
    __swig_getmethods__["matrix"] = _libccv.ccv_convnet_input_t_matrix_get
    if _newclass:
        matrix = _swig_property(_libccv.ccv_convnet_input_t_matrix_get)
    __swig_getmethods__["node"] = _libccv.ccv_convnet_input_t_node_get
    if _newclass:
        node = _swig_property(_libccv.ccv_convnet_input_t_node_get)

    def __init__(self):
        this = _libccv.new_ccv_convnet_input_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_convnet_input_t
    __del__ = lambda self: None
ccv_convnet_input_t_swigregister = _libccv.ccv_convnet_input_t_swigregister
ccv_convnet_input_t_swigregister(ccv_convnet_input_t)

class ccv_convnet_input_t_node(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_convnet_input_t_node, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_convnet_input_t_node, name)
    __repr__ = _swig_repr
    __swig_setmethods__["count"] = _libccv.ccv_convnet_input_t_node_count_set
    __swig_getmethods__["count"] = _libccv.ccv_convnet_input_t_node_count_get
    if _newclass:
        count = _swig_property(_libccv.ccv_convnet_input_t_node_count_get, _libccv.ccv_convnet_input_t_node_count_set)

    def __init__(self):
        this = _libccv.new_ccv_convnet_input_t_node()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_convnet_input_t_node
    __del__ = lambda self: None
ccv_convnet_input_t_node_swigregister = _libccv.ccv_convnet_input_t_node_swigregister
ccv_convnet_input_t_node_swigregister(ccv_convnet_input_t_node)

class ccv_convnet_input_t_matrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_convnet_input_t_matrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_convnet_input_t_matrix, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rows"] = _libccv.ccv_convnet_input_t_matrix_rows_set
    __swig_getmethods__["rows"] = _libccv.ccv_convnet_input_t_matrix_rows_get
    if _newclass:
        rows = _swig_property(_libccv.ccv_convnet_input_t_matrix_rows_get, _libccv.ccv_convnet_input_t_matrix_rows_set)
    __swig_setmethods__["cols"] = _libccv.ccv_convnet_input_t_matrix_cols_set
    __swig_getmethods__["cols"] = _libccv.ccv_convnet_input_t_matrix_cols_get
    if _newclass:
        cols = _swig_property(_libccv.ccv_convnet_input_t_matrix_cols_get, _libccv.ccv_convnet_input_t_matrix_cols_set)
    __swig_setmethods__["channels"] = _libccv.ccv_convnet_input_t_matrix_channels_set
    __swig_getmethods__["channels"] = _libccv.ccv_convnet_input_t_matrix_channels_get
    if _newclass:
        channels = _swig_property(_libccv.ccv_convnet_input_t_matrix_channels_get, _libccv.ccv_convnet_input_t_matrix_channels_set)
    __swig_setmethods__["partition"] = _libccv.ccv_convnet_input_t_matrix_partition_set
    __swig_getmethods__["partition"] = _libccv.ccv_convnet_input_t_matrix_partition_get
    if _newclass:
        partition = _swig_property(_libccv.ccv_convnet_input_t_matrix_partition_get, _libccv.ccv_convnet_input_t_matrix_partition_set)

    def __init__(self):
        this = _libccv.new_ccv_convnet_input_t_matrix()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_convnet_input_t_matrix
    __del__ = lambda self: None
ccv_convnet_input_t_matrix_swigregister = _libccv.ccv_convnet_input_t_matrix_swigregister
ccv_convnet_input_t_matrix_swigregister(ccv_convnet_input_t_matrix)

class ccv_convnet_layer_param_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_convnet_layer_param_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_convnet_layer_param_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _libccv.ccv_convnet_layer_param_t_type_set
    __swig_getmethods__["type"] = _libccv.ccv_convnet_layer_param_t_type_get
    if _newclass:
        type = _swig_property(_libccv.ccv_convnet_layer_param_t_type_get, _libccv.ccv_convnet_layer_param_t_type_set)
    __swig_setmethods__["bias"] = _libccv.ccv_convnet_layer_param_t_bias_set
    __swig_getmethods__["bias"] = _libccv.ccv_convnet_layer_param_t_bias_get
    if _newclass:
        bias = _swig_property(_libccv.ccv_convnet_layer_param_t_bias_get, _libccv.ccv_convnet_layer_param_t_bias_set)
    __swig_setmethods__["sigma"] = _libccv.ccv_convnet_layer_param_t_sigma_set
    __swig_getmethods__["sigma"] = _libccv.ccv_convnet_layer_param_t_sigma_get
    if _newclass:
        sigma = _swig_property(_libccv.ccv_convnet_layer_param_t_sigma_get, _libccv.ccv_convnet_layer_param_t_sigma_set)
    __swig_setmethods__["input"] = _libccv.ccv_convnet_layer_param_t_input_set
    __swig_getmethods__["input"] = _libccv.ccv_convnet_layer_param_t_input_get
    if _newclass:
        input = _swig_property(_libccv.ccv_convnet_layer_param_t_input_get, _libccv.ccv_convnet_layer_param_t_input_set)
    __swig_setmethods__["output"] = _libccv.ccv_convnet_layer_param_t_output_set
    __swig_getmethods__["output"] = _libccv.ccv_convnet_layer_param_t_output_get
    if _newclass:
        output = _swig_property(_libccv.ccv_convnet_layer_param_t_output_get, _libccv.ccv_convnet_layer_param_t_output_set)

    def __init__(self):
        this = _libccv.new_ccv_convnet_layer_param_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_convnet_layer_param_t
    __del__ = lambda self: None
ccv_convnet_layer_param_t_swigregister = _libccv.ccv_convnet_layer_param_t_swigregister
ccv_convnet_layer_param_t_swigregister(ccv_convnet_layer_param_t)

class ccv_convnet_layer_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_convnet_layer_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_convnet_layer_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _libccv.ccv_convnet_layer_t_type_set
    __swig_getmethods__["type"] = _libccv.ccv_convnet_layer_t_type_get
    if _newclass:
        type = _swig_property(_libccv.ccv_convnet_layer_t_type_get, _libccv.ccv_convnet_layer_t_type_set)
    __swig_setmethods__["w"] = _libccv.ccv_convnet_layer_t_w_set
    __swig_getmethods__["w"] = _libccv.ccv_convnet_layer_t_w_get
    if _newclass:
        w = _swig_property(_libccv.ccv_convnet_layer_t_w_get, _libccv.ccv_convnet_layer_t_w_set)
    __swig_setmethods__["bias"] = _libccv.ccv_convnet_layer_t_bias_set
    __swig_getmethods__["bias"] = _libccv.ccv_convnet_layer_t_bias_get
    if _newclass:
        bias = _swig_property(_libccv.ccv_convnet_layer_t_bias_get, _libccv.ccv_convnet_layer_t_bias_set)
    __swig_setmethods__["wnum"] = _libccv.ccv_convnet_layer_t_wnum_set
    __swig_getmethods__["wnum"] = _libccv.ccv_convnet_layer_t_wnum_get
    if _newclass:
        wnum = _swig_property(_libccv.ccv_convnet_layer_t_wnum_get, _libccv.ccv_convnet_layer_t_wnum_set)
    __swig_setmethods__["input"] = _libccv.ccv_convnet_layer_t_input_set
    __swig_getmethods__["input"] = _libccv.ccv_convnet_layer_t_input_get
    if _newclass:
        input = _swig_property(_libccv.ccv_convnet_layer_t_input_get, _libccv.ccv_convnet_layer_t_input_set)
    __swig_setmethods__["net"] = _libccv.ccv_convnet_layer_t_net_set
    __swig_getmethods__["net"] = _libccv.ccv_convnet_layer_t_net_get
    if _newclass:
        net = _swig_property(_libccv.ccv_convnet_layer_t_net_get, _libccv.ccv_convnet_layer_t_net_set)
    __swig_setmethods__["reserved"] = _libccv.ccv_convnet_layer_t_reserved_set
    __swig_getmethods__["reserved"] = _libccv.ccv_convnet_layer_t_reserved_get
    if _newclass:
        reserved = _swig_property(_libccv.ccv_convnet_layer_t_reserved_get, _libccv.ccv_convnet_layer_t_reserved_set)

    def __init__(self):
        this = _libccv.new_ccv_convnet_layer_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_convnet_layer_t
    __del__ = lambda self: None
ccv_convnet_layer_t_swigregister = _libccv.ccv_convnet_layer_t_swigregister
ccv_convnet_layer_t_swigregister(ccv_convnet_layer_t)

class ccv_convnet_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_convnet_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_convnet_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["use_cwc_accel"] = _libccv.ccv_convnet_t_use_cwc_accel_set
    __swig_getmethods__["use_cwc_accel"] = _libccv.ccv_convnet_t_use_cwc_accel_get
    if _newclass:
        use_cwc_accel = _swig_property(_libccv.ccv_convnet_t_use_cwc_accel_get, _libccv.ccv_convnet_t_use_cwc_accel_set)
    __swig_setmethods__["input"] = _libccv.ccv_convnet_t_input_set
    __swig_getmethods__["input"] = _libccv.ccv_convnet_t_input_get
    if _newclass:
        input = _swig_property(_libccv.ccv_convnet_t_input_get, _libccv.ccv_convnet_t_input_set)
    __swig_setmethods__["rows"] = _libccv.ccv_convnet_t_rows_set
    __swig_getmethods__["rows"] = _libccv.ccv_convnet_t_rows_get
    if _newclass:
        rows = _swig_property(_libccv.ccv_convnet_t_rows_get, _libccv.ccv_convnet_t_rows_set)
    __swig_setmethods__["cols"] = _libccv.ccv_convnet_t_cols_set
    __swig_getmethods__["cols"] = _libccv.ccv_convnet_t_cols_get
    if _newclass:
        cols = _swig_property(_libccv.ccv_convnet_t_cols_get, _libccv.ccv_convnet_t_cols_set)
    __swig_setmethods__["channels"] = _libccv.ccv_convnet_t_channels_set
    __swig_getmethods__["channels"] = _libccv.ccv_convnet_t_channels_get
    if _newclass:
        channels = _swig_property(_libccv.ccv_convnet_t_channels_get, _libccv.ccv_convnet_t_channels_set)
    __swig_setmethods__["count"] = _libccv.ccv_convnet_t_count_set
    __swig_getmethods__["count"] = _libccv.ccv_convnet_t_count_get
    if _newclass:
        count = _swig_property(_libccv.ccv_convnet_t_count_get, _libccv.ccv_convnet_t_count_set)
    __swig_setmethods__["mean_activity"] = _libccv.ccv_convnet_t_mean_activity_set
    __swig_getmethods__["mean_activity"] = _libccv.ccv_convnet_t_mean_activity_get
    if _newclass:
        mean_activity = _swig_property(_libccv.ccv_convnet_t_mean_activity_get, _libccv.ccv_convnet_t_mean_activity_set)
    __swig_setmethods__["layers"] = _libccv.ccv_convnet_t_layers_set
    __swig_getmethods__["layers"] = _libccv.ccv_convnet_t_layers_get
    if _newclass:
        layers = _swig_property(_libccv.ccv_convnet_t_layers_get, _libccv.ccv_convnet_t_layers_set)
    __swig_setmethods__["denoms"] = _libccv.ccv_convnet_t_denoms_set
    __swig_getmethods__["denoms"] = _libccv.ccv_convnet_t_denoms_get
    if _newclass:
        denoms = _swig_property(_libccv.ccv_convnet_t_denoms_get, _libccv.ccv_convnet_t_denoms_set)
    __swig_setmethods__["acts"] = _libccv.ccv_convnet_t_acts_set
    __swig_getmethods__["acts"] = _libccv.ccv_convnet_t_acts_get
    if _newclass:
        acts = _swig_property(_libccv.ccv_convnet_t_acts_get, _libccv.ccv_convnet_t_acts_set)
    __swig_setmethods__["reserved"] = _libccv.ccv_convnet_t_reserved_set
    __swig_getmethods__["reserved"] = _libccv.ccv_convnet_t_reserved_get
    if _newclass:
        reserved = _swig_property(_libccv.ccv_convnet_t_reserved_get, _libccv.ccv_convnet_t_reserved_set)

    def __init__(self):
        this = _libccv.new_ccv_convnet_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_convnet_t
    __del__ = lambda self: None
ccv_convnet_t_swigregister = _libccv.ccv_convnet_t_swigregister
ccv_convnet_t_swigregister(ccv_convnet_t)

class ccv_convnet_layer_sgd_param_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_convnet_layer_sgd_param_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_convnet_layer_sgd_param_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["decay"] = _libccv.ccv_convnet_layer_sgd_param_t_decay_set
    __swig_getmethods__["decay"] = _libccv.ccv_convnet_layer_sgd_param_t_decay_get
    if _newclass:
        decay = _swig_property(_libccv.ccv_convnet_layer_sgd_param_t_decay_get, _libccv.ccv_convnet_layer_sgd_param_t_decay_set)
    __swig_setmethods__["learn_rate"] = _libccv.ccv_convnet_layer_sgd_param_t_learn_rate_set
    __swig_getmethods__["learn_rate"] = _libccv.ccv_convnet_layer_sgd_param_t_learn_rate_get
    if _newclass:
        learn_rate = _swig_property(_libccv.ccv_convnet_layer_sgd_param_t_learn_rate_get, _libccv.ccv_convnet_layer_sgd_param_t_learn_rate_set)
    __swig_setmethods__["momentum"] = _libccv.ccv_convnet_layer_sgd_param_t_momentum_set
    __swig_getmethods__["momentum"] = _libccv.ccv_convnet_layer_sgd_param_t_momentum_get
    if _newclass:
        momentum = _swig_property(_libccv.ccv_convnet_layer_sgd_param_t_momentum_get, _libccv.ccv_convnet_layer_sgd_param_t_momentum_set)

    def __init__(self):
        this = _libccv.new_ccv_convnet_layer_sgd_param_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_convnet_layer_sgd_param_t
    __del__ = lambda self: None
ccv_convnet_layer_sgd_param_t_swigregister = _libccv.ccv_convnet_layer_sgd_param_t_swigregister
ccv_convnet_layer_sgd_param_t_swigregister(ccv_convnet_layer_sgd_param_t)

class ccv_convnet_layer_train_param_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_convnet_layer_train_param_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_convnet_layer_train_param_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dor"] = _libccv.ccv_convnet_layer_train_param_t_dor_set
    __swig_getmethods__["dor"] = _libccv.ccv_convnet_layer_train_param_t_dor_get
    if _newclass:
        dor = _swig_property(_libccv.ccv_convnet_layer_train_param_t_dor_get, _libccv.ccv_convnet_layer_train_param_t_dor_set)
    __swig_setmethods__["w"] = _libccv.ccv_convnet_layer_train_param_t_w_set
    __swig_getmethods__["w"] = _libccv.ccv_convnet_layer_train_param_t_w_get
    if _newclass:
        w = _swig_property(_libccv.ccv_convnet_layer_train_param_t_w_get, _libccv.ccv_convnet_layer_train_param_t_w_set)
    __swig_setmethods__["bias"] = _libccv.ccv_convnet_layer_train_param_t_bias_set
    __swig_getmethods__["bias"] = _libccv.ccv_convnet_layer_train_param_t_bias_get
    if _newclass:
        bias = _swig_property(_libccv.ccv_convnet_layer_train_param_t_bias_get, _libccv.ccv_convnet_layer_train_param_t_bias_set)

    def __init__(self):
        this = _libccv.new_ccv_convnet_layer_train_param_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_convnet_layer_train_param_t
    __del__ = lambda self: None
ccv_convnet_layer_train_param_t_swigregister = _libccv.ccv_convnet_layer_train_param_t_swigregister
ccv_convnet_layer_train_param_t_swigregister(ccv_convnet_layer_train_param_t)

class ccv_convnet_train_param_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_convnet_train_param_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_convnet_train_param_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["max_epoch"] = _libccv.ccv_convnet_train_param_t_max_epoch_set
    __swig_getmethods__["max_epoch"] = _libccv.ccv_convnet_train_param_t_max_epoch_get
    if _newclass:
        max_epoch = _swig_property(_libccv.ccv_convnet_train_param_t_max_epoch_get, _libccv.ccv_convnet_train_param_t_max_epoch_set)
    __swig_setmethods__["mini_batch"] = _libccv.ccv_convnet_train_param_t_mini_batch_set
    __swig_getmethods__["mini_batch"] = _libccv.ccv_convnet_train_param_t_mini_batch_get
    if _newclass:
        mini_batch = _swig_property(_libccv.ccv_convnet_train_param_t_mini_batch_get, _libccv.ccv_convnet_train_param_t_mini_batch_set)
    __swig_setmethods__["iterations"] = _libccv.ccv_convnet_train_param_t_iterations_set
    __swig_getmethods__["iterations"] = _libccv.ccv_convnet_train_param_t_iterations_get
    if _newclass:
        iterations = _swig_property(_libccv.ccv_convnet_train_param_t_iterations_get, _libccv.ccv_convnet_train_param_t_iterations_set)
    __swig_setmethods__["symmetric"] = _libccv.ccv_convnet_train_param_t_symmetric_set
    __swig_getmethods__["symmetric"] = _libccv.ccv_convnet_train_param_t_symmetric_get
    if _newclass:
        symmetric = _swig_property(_libccv.ccv_convnet_train_param_t_symmetric_get, _libccv.ccv_convnet_train_param_t_symmetric_set)
    __swig_setmethods__["color_gain"] = _libccv.ccv_convnet_train_param_t_color_gain_set
    __swig_getmethods__["color_gain"] = _libccv.ccv_convnet_train_param_t_color_gain_get
    if _newclass:
        color_gain = _swig_property(_libccv.ccv_convnet_train_param_t_color_gain_get, _libccv.ccv_convnet_train_param_t_color_gain_set)
    __swig_setmethods__["layer_params"] = _libccv.ccv_convnet_train_param_t_layer_params_set
    __swig_getmethods__["layer_params"] = _libccv.ccv_convnet_train_param_t_layer_params_get
    if _newclass:
        layer_params = _swig_property(_libccv.ccv_convnet_train_param_t_layer_params_get, _libccv.ccv_convnet_train_param_t_layer_params_set)

    def __init__(self):
        this = _libccv.new_ccv_convnet_train_param_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_convnet_train_param_t
    __del__ = lambda self: None
ccv_convnet_train_param_t_swigregister = _libccv.ccv_convnet_train_param_t_swigregister
ccv_convnet_train_param_t_swigregister(ccv_convnet_train_param_t)

CCV_CATEGORIZED_DENSE_MATRIX = _libccv.CCV_CATEGORIZED_DENSE_MATRIX
CCV_CATEGORIZED_FILE = _libccv.CCV_CATEGORIZED_FILE
class ccv_categorized_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_categorized_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_categorized_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["c"] = _libccv.ccv_categorized_t_c_set
    __swig_getmethods__["c"] = _libccv.ccv_categorized_t_c_get
    if _newclass:
        c = _swig_property(_libccv.ccv_categorized_t_c_get, _libccv.ccv_categorized_t_c_set)
    __swig_setmethods__["type"] = _libccv.ccv_categorized_t_type_set
    __swig_getmethods__["type"] = _libccv.ccv_categorized_t_type_get
    if _newclass:
        type = _swig_property(_libccv.ccv_categorized_t_type_get, _libccv.ccv_categorized_t_type_set)
    __swig_setmethods__["matrix"] = _libccv.ccv_categorized_t_matrix_set
    __swig_getmethods__["matrix"] = _libccv.ccv_categorized_t_matrix_get
    if _newclass:
        matrix = _swig_property(_libccv.ccv_categorized_t_matrix_get, _libccv.ccv_categorized_t_matrix_set)
    __swig_setmethods__["file"] = _libccv.ccv_categorized_t_file_set
    __swig_getmethods__["file"] = _libccv.ccv_categorized_t_file_get
    if _newclass:
        file = _swig_property(_libccv.ccv_categorized_t_file_get, _libccv.ccv_categorized_t_file_set)

    def __init__(self):
        this = _libccv.new_ccv_categorized_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_categorized_t
    __del__ = lambda self: None
ccv_categorized_t_swigregister = _libccv.ccv_categorized_t_swigregister
ccv_categorized_t_swigregister(ccv_categorized_t)


def ccv_categorized(c, matrix, file):
    return _libccv.ccv_categorized(c, matrix, file)
ccv_categorized = _libccv.ccv_categorized
class ccv_convnet_write_param_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccv_convnet_write_param_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccv_convnet_write_param_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["half_precision"] = _libccv.ccv_convnet_write_param_t_half_precision_set
    __swig_getmethods__["half_precision"] = _libccv.ccv_convnet_write_param_t_half_precision_get
    if _newclass:
        half_precision = _swig_property(_libccv.ccv_convnet_write_param_t_half_precision_get, _libccv.ccv_convnet_write_param_t_half_precision_set)

    def __init__(self):
        this = _libccv.new_ccv_convnet_write_param_t()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _libccv.delete_ccv_convnet_write_param_t
    __del__ = lambda self: None
ccv_convnet_write_param_t_swigregister = _libccv.ccv_convnet_write_param_t_swigregister
ccv_convnet_write_param_t_swigregister(ccv_convnet_write_param_t)


def ccv_convnet_new(use_cwc_accel, input, params, count):
    return _libccv.ccv_convnet_new(use_cwc_accel, input, params, count)
ccv_convnet_new = _libccv.ccv_convnet_new

def ccv_convnet_verify(convnet, output):
    return _libccv.ccv_convnet_verify(convnet, output)
ccv_convnet_verify = _libccv.ccv_convnet_verify

def ccv_convnet_supervised_train(convnet, categorizeds, tests, filename, params):
    return _libccv.ccv_convnet_supervised_train(convnet, categorizeds, tests, filename, params)
ccv_convnet_supervised_train = _libccv.ccv_convnet_supervised_train

def ccv_convnet_encode(convnet, batch):
    return _libccv.ccv_convnet_encode(convnet, batch)
ccv_convnet_encode = _libccv.ccv_convnet_encode

def ccv_convnet_classify(convnet, symmetric, ranks, tops, batch):
    return _libccv.ccv_convnet_classify(convnet, symmetric, ranks, tops, batch)
ccv_convnet_classify = _libccv.ccv_convnet_classify

def ccv_convnet_read(use_cwc_accel, filename):
    return _libccv.ccv_convnet_read(use_cwc_accel, filename)
ccv_convnet_read = _libccv.ccv_convnet_read

def ccv_convnet_write(convnet, filename, params):
    return _libccv.ccv_convnet_write(convnet, filename, params)
ccv_convnet_write = _libccv.ccv_convnet_write

def ccv_convnet_compact(convnet):
    return _libccv.ccv_convnet_compact(convnet)
ccv_convnet_compact = _libccv.ccv_convnet_compact

def ccv_convnet_free(convnet):
    return _libccv.ccv_convnet_free(convnet)
ccv_convnet_free = _libccv.ccv_convnet_free
# This file is compatible with both classic and new-style classes.


