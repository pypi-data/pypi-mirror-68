{"version":3,"sources":["webpack:///./node_modules/@polymer/iron-a11y-announcer/iron-a11y-announcer.js","webpack:///./node_modules/@polymer/iron-input/iron-input.js","webpack:///./src/components/ha-card.ts","webpack:///./src/panels/config/ha-config-section.ts","webpack:///./node_modules/@polymer/paper-input/paper-input.js","webpack:///./src/panels/aishelp/ha-panel-aishelp.js"],"names":["IronA11yAnnouncer","Polymer","_template","html","_templateObject","is","properties","mode","type","String","value","_text","created","instance","this","document","body","addEventListener","_onIronAnnounce","bind","announce","text","async","event","detail","requestAvailability","createElement","appendChild","behaviors","IronValidatableBehavior","bindValue","computed","allowedPattern","autoValidate","Boolean","_inputElement","Object","observers","listeners","input","keypress","_previousValidInput","_patternAlreadyChecked","attached","_observer","dom","observeNodes","info","_initSlottedInput","detached","unobserveNodes","inputElement","getEffectiveChildren","fire","_patternRegExp","pattern","RegExp","_bindValueChanged","undefined","validate","_onInput","_checkPatternValidity","_announceInvalidCharacter","_isPrintable","anyNonPrintable","keyCode","mozNonPrintable","charCode","_onKeypress","regexp","metaKey","ctrlKey","altKey","thisChar","fromCharCode","test","preventDefault","i","length","invalid","valid","checkValidity","required","hasValidator","call","message","_computeValue","customElement","property","css","_templateObject2","header","_templateObject3","_templateObject4","LitElement","_decorate","_initialize","_LitElement","F","_LitElement2","_inherits","HaConfigSection","_super","_createSuper","_this","_classCallCheck","_len","arguments","args","Array","_key","apply","concat","_assertThisInitialized","d","kind","decorators","key","classMap","narrow","isWide","vertical","horizontal","static","PaperInputBehavior","IronFormElementBehavior","_focusableElement","iron-input-ready","_onIronInputReady","$","nativeInput","$$","_typesThatHaveText","indexOf","alwaysFloatLabel","container","_handleValueAndAutoValidate","HaPanelAishelp","PolymerElement","hass","panel","aisLocalIP","remoteDomain","remoteConnectedInfo","serviceRemoteStatusColor","aisSecureAndroidId","states","state","customElements","define"],"mappings":"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","file":"chunk.5d648aee844272c7f7e3.js","sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/**\n`iron-a11y-announcer` is a singleton element that is intended to add a11y\nto features that require on-demand announcement from screen readers. In\norder to make use of the announcer, it is best to request its availability\nin the announcing element.\n\nExample:\n\n    Polymer({\n\n      is: 'x-chatty',\n\n      attached: function() {\n        // This will create the singleton element if it has not\n        // been created yet:\n        Polymer.IronA11yAnnouncer.requestAvailability();\n      }\n    });\n\nAfter the `iron-a11y-announcer` has been made available, elements can\nmake announces by firing bubbling `iron-announce` events.\n\nExample:\n\n    this.fire('iron-announce', {\n      text: 'This is an announcement!'\n    }, { bubbles: true });\n\nNote: announcements are only audible if you have a screen reader enabled.\n\n@group Iron Elements\n@demo demo/index.html\n*/\nexport const IronA11yAnnouncer = Polymer({\n  _template: html`\n    <style>\n      :host {\n        display: inline-block;\n        position: fixed;\n        clip: rect(0px,0px,0px,0px);\n      }\n    </style>\n    <div aria-live$=\"[[mode]]\">[[_text]]</div>\n`,\n\n  is: 'iron-a11y-announcer',\n\n  properties: {\n\n    /**\n     * The value of mode is used to set the `aria-live` attribute\n     * for the element that will be announced. Valid values are: `off`,\n     * `polite` and `assertive`.\n     */\n    mode: {type: String, value: 'polite'},\n\n    _text: {type: String, value: ''}\n  },\n\n  created: function() {\n    if (!IronA11yAnnouncer.instance) {\n      IronA11yAnnouncer.instance = this;\n    }\n\n    document.body.addEventListener(\n        'iron-announce', this._onIronAnnounce.bind(this));\n  },\n\n  /**\n   * Cause a text string to be announced by screen readers.\n   *\n   * @param {string} text The text that should be announced.\n   */\n  announce: function(text) {\n    this._text = '';\n    this.async(function() {\n      this._text = text;\n    }, 100);\n  },\n\n  _onIronAnnounce: function(event) {\n    if (event.detail && event.detail.text) {\n      this.announce(event.detail.text);\n    }\n  }\n});\n\nIronA11yAnnouncer.instance = null;\n\nIronA11yAnnouncer.requestAvailability = function() {\n  if (!IronA11yAnnouncer.instance) {\n    IronA11yAnnouncer.instance = document.createElement('iron-a11y-announcer');\n  }\n\n  document.body.appendChild(IronA11yAnnouncer.instance);\n};\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {IronA11yAnnouncer} from '@polymer/iron-a11y-announcer/iron-a11y-announcer.js';\nimport {IronValidatableBehavior} from '@polymer/iron-validatable-behavior/iron-validatable-behavior.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/**\n`<iron-input>` is a wrapper to a native `<input>` element, that adds two-way\nbinding and prevention of invalid input. To use it, you must distribute a native\n`<input>` yourself. You can continue to use the native `input` as you would\nnormally:\n\n    <iron-input>\n      <input>\n    </iron-input>\n\n    <iron-input>\n      <input type=\"email\" disabled>\n    </iron-input>\n\n### Two-way binding\n\nBy default you can only get notified of changes to a native `<input>`'s `value`\ndue to user input:\n\n    <input value=\"{{myValue::input}}\">\n\nThis means that if you imperatively set the value (i.e. `someNativeInput.value =\n'foo'`), no events will be fired and this change cannot be observed.\n\n`iron-input` adds the `bind-value` property that mirrors the native `input`'s\n'`value` property; this property can be used for two-way data binding.\n`bind-value` will notify if it is changed either by user input or by script.\n\n    <iron-input bind-value=\"{{myValue}}\">\n      <input>\n    </iron-input>\n\nNote: this means that if you want to imperatively set the native `input`'s, you\n_must_ set `bind-value` instead, so that the wrapper `iron-input` can be\nnotified.\n\n### Validation\n\n`iron-input` uses the native `input`'s validation. For simplicity, `iron-input`\nhas a `validate()` method (which internally just checks the distributed\n`input`'s validity), which sets an `invalid` attribute that can also be used for\nstyling.\n\nTo validate automatically as you type, you can use the `auto-validate`\nattribute.\n\n`iron-input` also fires an `iron-input-validate` event after `validate()` is\ncalled. You can use it to implement a custom validator:\n\n    var CatsOnlyValidator = {\n      validate: function(ironInput) {\n        var valid = !ironInput.bindValue || ironInput.bindValue === 'cat';\n        ironInput.invalid = !valid;\n        return valid;\n      }\n    }\n    ironInput.addEventListener('iron-input-validate', function() {\n      CatsOnly.validate(input2);\n    });\n\nYou can also use an element implementing an\n[`IronValidatorBehavior`](/element/PolymerElements/iron-validatable-behavior).\nThis example can also be found in the demo for this element:\n\n    <iron-input validator=\"cats-only\">\n      <input>\n    </iron-input>\n\n### Preventing invalid input\n\nIt may be desirable to only allow users to enter certain characters. You can use\nthe `allowed-pattern` attribute to accomplish this. This feature is separate\nfrom validation, and `allowed-pattern` does not affect how the input is\nvalidated.\n\n    // Only allow typing digits, but a valid input has exactly 5 digits.\n    <iron-input allowed-pattern=\"[0-9]\">\n      <input pattern=\"\\d{5}\">\n    </iron-input>\n\n@demo demo/index.html\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: inline-block;\n      }\n    </style>\n    <slot id=\"content\"></slot>\n`,\n\n  is: 'iron-input',\n  behaviors: [IronValidatableBehavior],\n\n  /**\n   * Fired whenever `validate()` is called.\n   *\n   * @event iron-input-validate\n   */\n\n  properties: {\n\n    /**\n     * Use this property instead of `value` for two-way data binding, or to\n     * set a default value for the input. **Do not** use the distributed\n     * input's `value` property to set a default value.\n     */\n    bindValue: {type: String, value: ''},\n\n    /**\n     * Computed property that echoes `bindValue` (mostly used for Polymer 1.0\n     * backcompatibility, if you were one-way binding to the Polymer 1.0\n     * `input is=\"iron-input\"` value attribute).\n     */\n    value: {type: String, computed: '_computeValue(bindValue)'},\n\n    /**\n     * Regex-like list of characters allowed as input; all characters not in the\n     * list will be rejected. The recommended format should be a list of allowed\n     * characters, for example, `[a-zA-Z0-9.+-!;:]`.\n     *\n     * This pattern represents the allowed characters for the field; as the user\n     * inputs text, each individual character will be checked against the\n     * pattern (rather than checking the entire value as a whole). If a\n     * character is not a match, it will be rejected.\n     *\n     * Pasted input will have each character checked individually; if any\n     * character doesn't match `allowedPattern`, the entire pasted string will\n     * be rejected.\n     *\n     * Note: if you were using `iron-input` in 1.0, you were also required to\n     * set `prevent-invalid-input`. This is no longer needed as of Polymer 2.0,\n     * and will be set automatically for you if an `allowedPattern` is provided.\n     *\n     */\n    allowedPattern: {type: String},\n\n    /**\n     * Set to true to auto-validate the input value as you type.\n     */\n    autoValidate: {type: Boolean, value: false},\n\n    /**\n     * The native input element.\n     */\n    _inputElement: Object,\n  },\n\n  observers: ['_bindValueChanged(bindValue, _inputElement)'],\n  listeners: {'input': '_onInput', 'keypress': '_onKeypress'},\n\n  created: function() {\n    IronA11yAnnouncer.requestAvailability();\n    this._previousValidInput = '';\n    this._patternAlreadyChecked = false;\n  },\n\n  attached: function() {\n    // If the input is added at a later time, update the internal reference.\n    this._observer = dom(this).observeNodes(function(info) {\n      this._initSlottedInput();\n    }.bind(this));\n  },\n\n  detached: function() {\n    if (this._observer) {\n      dom(this).unobserveNodes(this._observer);\n      this._observer = null;\n    }\n  },\n\n  /**\n   * Returns the distributed input element.\n   */\n  get inputElement() {\n    return this._inputElement;\n  },\n\n  _initSlottedInput: function() {\n    this._inputElement = this.getEffectiveChildren()[0];\n\n    if (this.inputElement && this.inputElement.value) {\n      this.bindValue = this.inputElement.value;\n    }\n\n    this.fire('iron-input-ready');\n  },\n\n  get _patternRegExp() {\n    var pattern;\n    if (this.allowedPattern) {\n      pattern = new RegExp(this.allowedPattern);\n    } else {\n      switch (this.inputElement.type) {\n        case 'number':\n          pattern = /[0-9.,e-]/;\n          break;\n      }\n    }\n    return pattern;\n  },\n\n  /**\n   * @suppress {checkTypes}\n   */\n  _bindValueChanged: function(bindValue, inputElement) {\n    // The observer could have run before attached() when we have actually\n    // initialized this property.\n    if (!inputElement) {\n      return;\n    }\n\n    if (bindValue === undefined) {\n      inputElement.value = null;\n    } else if (bindValue !== inputElement.value) {\n      this.inputElement.value = bindValue;\n    }\n\n    if (this.autoValidate) {\n      this.validate();\n    }\n\n    // manually notify because we don't want to notify until after setting value\n    this.fire('bind-value-changed', {value: bindValue});\n  },\n\n  _onInput: function() {\n    // Need to validate each of the characters pasted if they haven't\n    // been validated inside `_onKeypress` already.\n    if (this.allowedPattern && !this._patternAlreadyChecked) {\n      var valid = this._checkPatternValidity();\n      if (!valid) {\n        this._announceInvalidCharacter(\n            'Invalid string of characters not entered.');\n        this.inputElement.value = this._previousValidInput;\n      }\n    }\n    this.bindValue = this._previousValidInput = this.inputElement.value;\n    this._patternAlreadyChecked = false;\n  },\n\n  _isPrintable: function(event) {\n    // What a control/printable character is varies wildly based on the browser.\n    // - most control characters (arrows, backspace) do not send a `keypress`\n    // event\n    //   in Chrome, but the *do* on Firefox\n    // - in Firefox, when they do send a `keypress` event, control chars have\n    //   a charCode = 0, keyCode = xx (for ex. 40 for down arrow)\n    // - printable characters always send a keypress event.\n    // - in Firefox, printable chars always have a keyCode = 0. In Chrome, the\n    // keyCode\n    //   always matches the charCode.\n    // None of this makes any sense.\n\n    // For these keys, ASCII code == browser keycode.\n    var anyNonPrintable = (event.keyCode == 8) ||  // backspace\n        (event.keyCode == 9) ||                    // tab\n        (event.keyCode == 13) ||                   // enter\n        (event.keyCode == 27);                     // escape\n\n    // For these keys, make sure it's a browser keycode and not an ASCII code.\n    var mozNonPrintable = (event.keyCode == 19) ||  // pause\n        (event.keyCode == 20) ||                    // caps lock\n        (event.keyCode == 45) ||                    // insert\n        (event.keyCode == 46) ||                    // delete\n        (event.keyCode == 144) ||                   // num lock\n        (event.keyCode == 145) ||                   // scroll lock\n        (event.keyCode > 32 &&\n         event.keyCode < 41) ||  // page up/down, end, home, arrows\n        (event.keyCode > 111 && event.keyCode < 124);  // fn keys\n\n    return !anyNonPrintable && !(event.charCode == 0 && mozNonPrintable);\n  },\n\n  _onKeypress: function(event) {\n    if (!this.allowedPattern && this.inputElement.type !== 'number') {\n      return;\n    }\n    var regexp = this._patternRegExp;\n    if (!regexp) {\n      return;\n    }\n\n    // Handle special keys and backspace\n    if (event.metaKey || event.ctrlKey || event.altKey) {\n      return;\n    }\n\n    // Check the pattern either here or in `_onInput`, but not in both.\n    this._patternAlreadyChecked = true;\n\n    var thisChar = String.fromCharCode(event.charCode);\n    if (this._isPrintable(event) && !regexp.test(thisChar)) {\n      event.preventDefault();\n      this._announceInvalidCharacter(\n          'Invalid character ' + thisChar + ' not entered.');\n    }\n  },\n\n  _checkPatternValidity: function() {\n    var regexp = this._patternRegExp;\n    if (!regexp) {\n      return true;\n    }\n    for (var i = 0; i < this.inputElement.value.length; i++) {\n      if (!regexp.test(this.inputElement.value[i])) {\n        return false;\n      }\n    }\n    return true;\n  },\n\n  /**\n   * Returns true if `value` is valid. The validator provided in `validator`\n   * will be used first, then any constraints.\n   * @return {boolean} True if the value is valid.\n   */\n  validate: function() {\n    if (!this.inputElement) {\n      this.invalid = false;\n      return true;\n    }\n\n    // Use the nested input's native validity.\n    var valid = this.inputElement.checkValidity();\n\n    // Only do extra checking if the browser thought this was valid.\n    if (valid) {\n      // Empty, required input is invalid\n      if (this.required && this.bindValue === '') {\n        valid = false;\n      } else if (this.hasValidator()) {\n        valid = IronValidatableBehavior.validate.call(this, this.bindValue);\n      }\n    }\n\n    this.invalid = !valid;\n    this.fire('iron-input-validate');\n    return valid;\n  },\n\n  _announceInvalidCharacter: function(message) {\n    this.fire('iron-announce', {text: message});\n  },\n\n  _computeValue: function(bindValue) {\n    return bindValue;\n  }\n});\n","import {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n} from \"lit-element\";\n\n@customElement(\"ha-card\")\nclass HaCard extends LitElement {\n  @property() public header?: string;\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--paper-card-background-color, white)\n        );\n        border-radius: var(--ha-card-border-radius, 2px);\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0 2px 2px 0 rgba(0, 0, 0, 0.14),\n          0 1px 5px 0 rgba(0, 0, 0, 0.12),\n          0 3px 1px -2px rgba(0, 0, 0, 0.2)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 32px;\n        padding: 24px 16px 16px;\n        display: block;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid #e8e8e8;\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.header\n        ? html` <div class=\"card-header\">${this.header}</div> `\n        : html``}\n      <slot></slot>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-card\": HaCard;\n  }\n}\n","import { css, customElement, html, LitElement, property } from \"lit-element\";\nimport { classMap } from \"lit-html/directives/class-map\";\n\n@customElement(\"ha-config-section\")\nexport class HaConfigSection extends LitElement {\n  @property() public isWide = false;\n\n  protected render() {\n    return html`\n      <div\n        class=\"content ${classMap({\n          narrow: !this.isWide,\n        })}\"\n      >\n        <div class=\"header\"><slot name=\"header\"></slot></div>\n        <div\n          class=\"together layout ${classMap({\n            narrow: !this.isWide,\n            vertical: !this.isWide,\n            horizontal: this.isWide,\n          })}\"\n        >\n          <div class=\"intro\"><slot name=\"introduction\"></slot></div>\n          <div class=\"panel flex-auto\"><slot></slot></div>\n        </div>\n      </div>\n    `;\n  }\n\n  static get styles() {\n    return css`\n      :host {\n        display: block;\n      }\n      .content {\n        padding: 28px 20px 0;\n        max-width: 1040px;\n        margin: 0 auto;\n      }\n\n      .layout {\n        display: flex;\n      }\n\n      .horizontal {\n        flex-direction: row;\n      }\n\n      .vertical {\n        flex-direction: column;\n      }\n\n      .flex-auto {\n        flex: 1 1 auto;\n      }\n\n      .header {\n        font-family: var(--paper-font-headline_-_font-family);\n        -webkit-font-smoothing: var(\n          --paper-font-headline_-_-webkit-font-smoothing\n        );\n        font-size: var(--paper-font-headline_-_font-size);\n        font-weight: var(--paper-font-headline_-_font-weight);\n        letter-spacing: var(--paper-font-headline_-_letter-spacing);\n        line-height: var(--paper-font-headline_-_line-height);\n        opacity: var(--dark-primary-opacity);\n      }\n\n      .together {\n        margin-top: 32px;\n      }\n\n      .intro {\n        font-family: var(--paper-font-subhead_-_font-family);\n        -webkit-font-smoothing: var(\n          --paper-font-subhead_-_-webkit-font-smoothing\n        );\n        font-weight: var(--paper-font-subhead_-_font-weight);\n        line-height: var(--paper-font-subhead_-_line-height);\n        width: 100%;\n        max-width: 400px;\n        margin-right: 40px;\n        opacity: var(--dark-primary-opacity);\n        font-size: 14px;\n        padding-bottom: 20px;\n      }\n\n      .panel {\n        margin-top: -24px;\n      }\n\n      .panel ::slotted(*) {\n        margin-top: 24px;\n        display: block;\n      }\n\n      .narrow.content {\n        max-width: 640px;\n      }\n      .narrow .together {\n        margin-top: 20px;\n      }\n      .narrow .intro {\n        padding-bottom: 20px;\n        margin-right: 0;\n        max-width: 500px;\n      }\n    `;\n  }\n}\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-input/iron-input.js';\nimport './paper-input-char-counter.js';\nimport './paper-input-container.js';\nimport './paper-input-error.js';\n\nimport {IronFormElementBehavior} from '@polymer/iron-form-element-behavior/iron-form-element-behavior.js';\nimport {DomModule} from '@polymer/polymer/lib/elements/dom-module.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\nimport {PaperInputBehavior} from './paper-input-behavior.js';\n\n/**\nMaterial design: [Text\nfields](https://www.google.com/design/spec/components/text-fields.html)\n\n`<paper-input>` is a single-line text field with Material Design styling.\n\n    <paper-input label=\"Input label\"></paper-input>\n\nIt may include an optional error message or character counter.\n\n    <paper-input error-message=\"Invalid input!\" label=\"Input\n    label\"></paper-input> <paper-input char-counter label=\"Input\n    label\"></paper-input>\n\nIt can also include custom prefix or suffix elements, which are displayed\nbefore or after the text input itself. In order for an element to be\nconsidered as a prefix, it must have the `prefix` attribute (and similarly\nfor `suffix`).\n\n    <paper-input label=\"total\">\n      <div prefix>$</div>\n      <paper-icon-button slot=\"suffix\" icon=\"clear\"></paper-icon-button>\n    </paper-input>\n\nA `paper-input` can use the native `type=search` or `type=file` features.\nHowever, since we can't control the native styling of the input (search icon,\nfile button, date placeholder, etc.), in these cases the label will be\nautomatically floated. The `placeholder` attribute can still be used for\nadditional informational text.\n\n    <paper-input label=\"search!\" type=\"search\"\n        placeholder=\"search for cats\" autosave=\"test\" results=\"5\">\n    </paper-input>\n\nSee `Polymer.PaperInputBehavior` for more API docs.\n\n### Focus\n\nTo focus a paper-input, you can call the native `focus()` method as long as the\npaper input has a tab index. Similarly, `blur()` will blur the element.\n\n### Styling\n\nSee `Polymer.PaperInputContainer` for a list of custom properties used to\nstyle this element.\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-input-container-ms-clear` | Mixin applied to the Internet Explorer reveal button (the eyeball) | {}\n\n@group Paper Elements\n@element paper-input\n@hero hero.svg\n@demo demo/index.html\n*/\nPolymer({\n  is: 'paper-input',\n\n  _template: html`\n    <style>\n      :host {\n        display: block;\n      }\n\n      :host([focused]) {\n        outline: none;\n      }\n\n      :host([hidden]) {\n        display: none !important;\n      }\n\n      input {\n        /* Firefox sets a min-width on the input, which can cause layout issues */\n        min-width: 0;\n      }\n\n      /* In 1.x, the <input> is distributed to paper-input-container, which styles it.\n      In 2.x the <iron-input> is distributed to paper-input-container, which styles\n      it, but in order for this to work correctly, we need to reset some\n      of the native input's properties to inherit (from the iron-input) */\n      iron-input > input {\n        @apply --paper-input-container-shared-input-style;\n        font-family: inherit;\n        font-weight: inherit;\n        font-size: inherit;\n        letter-spacing: inherit;\n        word-spacing: inherit;\n        line-height: inherit;\n        text-shadow: inherit;\n        color: inherit;\n        cursor: inherit;\n      }\n\n      input:disabled {\n        @apply --paper-input-container-input-disabled;\n      }\n\n      input::-webkit-outer-spin-button,\n      input::-webkit-inner-spin-button {\n        @apply --paper-input-container-input-webkit-spinner;\n      }\n\n      input::-webkit-clear-button {\n        @apply --paper-input-container-input-webkit-clear;\n      }\n\n      input::-webkit-calendar-picker-indicator {\n        @apply --paper-input-container-input-webkit-calendar-picker-indicator;\n      }\n\n      input::-webkit-input-placeholder {\n        color: var(--paper-input-container-color, var(--secondary-text-color));\n      }\n\n      input:-moz-placeholder {\n        color: var(--paper-input-container-color, var(--secondary-text-color));\n      }\n\n      input::-moz-placeholder {\n        color: var(--paper-input-container-color, var(--secondary-text-color));\n      }\n\n      input::-ms-clear {\n        @apply --paper-input-container-ms-clear;\n      }\n\n      input::-ms-reveal {\n        @apply --paper-input-container-ms-reveal;\n      }\n\n      input:-ms-input-placeholder {\n        color: var(--paper-input-container-color, var(--secondary-text-color));\n      }\n\n      label {\n        pointer-events: none;\n      }\n    </style>\n\n    <paper-input-container id=\"container\" no-label-float=\"[[noLabelFloat]]\" always-float-label=\"[[_computeAlwaysFloatLabel(alwaysFloatLabel,placeholder)]]\" auto-validate$=\"[[autoValidate]]\" disabled$=\"[[disabled]]\" invalid=\"[[invalid]]\">\n\n      <slot name=\"prefix\" slot=\"prefix\"></slot>\n\n      <label hidden$=\"[[!label]]\" aria-hidden=\"true\" for$=\"[[_inputId]]\" slot=\"label\">[[label]]</label>\n\n      <!-- Need to bind maxlength so that the paper-input-char-counter works correctly -->\n      <iron-input bind-value=\"{{value}}\" slot=\"input\" class=\"input-element\" id$=\"[[_inputId]]\" maxlength$=\"[[maxlength]]\" allowed-pattern=\"[[allowedPattern]]\" invalid=\"{{invalid}}\" validator=\"[[validator]]\">\n        <input aria-labelledby$=\"[[_ariaLabelledBy]]\" aria-describedby$=\"[[_ariaDescribedBy]]\" disabled$=\"[[disabled]]\" title$=\"[[title]]\" type$=\"[[type]]\" pattern$=\"[[pattern]]\" required$=\"[[required]]\" autocomplete$=\"[[autocomplete]]\" autofocus$=\"[[autofocus]]\" inputmode$=\"[[inputmode]]\" minlength$=\"[[minlength]]\" maxlength$=\"[[maxlength]]\" min$=\"[[min]]\" max$=\"[[max]]\" step$=\"[[step]]\" name$=\"[[name]]\" placeholder$=\"[[placeholder]]\" readonly$=\"[[readonly]]\" list$=\"[[list]]\" size$=\"[[size]]\" autocapitalize$=\"[[autocapitalize]]\" autocorrect$=\"[[autocorrect]]\" on-change=\"_onChange\" tabindex$=\"[[tabIndex]]\" autosave$=\"[[autosave]]\" results$=\"[[results]]\" accept$=\"[[accept]]\" multiple$=\"[[multiple]]\">\n      </iron-input>\n\n      <slot name=\"suffix\" slot=\"suffix\"></slot>\n\n      <template is=\"dom-if\" if=\"[[errorMessage]]\">\n        <paper-input-error aria-live=\"assertive\" slot=\"add-on\">[[errorMessage]]</paper-input-error>\n      </template>\n\n      <template is=\"dom-if\" if=\"[[charCounter]]\">\n        <paper-input-char-counter slot=\"add-on\"></paper-input-char-counter>\n      </template>\n\n    </paper-input-container>\n  `,\n\n  behaviors: [PaperInputBehavior, IronFormElementBehavior],\n\n  properties: {\n    value: {\n      // Required for the correct TypeScript type-generation\n      type: String\n    }\n  },\n\n  /**\n   * Returns a reference to the focusable element. Overridden from\n   * PaperInputBehavior to correctly focus the native input.\n   *\n   * @return {!HTMLElement}\n   */\n  get _focusableElement() {\n    return this.inputElement._inputElement;\n  },\n\n  // Note: This event is only available in the 1.0 version of this element.\n  // In 2.0, the functionality of `_onIronInputReady` is done in\n  // PaperInputBehavior::attached.\n  listeners: {'iron-input-ready': '_onIronInputReady'},\n\n  _onIronInputReady: function() {\n    // Even though this is only used in the next line, save this for\n    // backwards compatibility, since the native input had this ID until 2.0.5.\n    if (!this.$.nativeInput) {\n      this.$.nativeInput = this.$$('input');\n    }\n    if (this.inputElement &&\n        this._typesThatHaveText.indexOf(this.$.nativeInput.type) !== -1) {\n      this.alwaysFloatLabel = true;\n    }\n\n    // Only validate when attached if the input already has a value.\n    if (!!this.inputElement.bindValue) {\n      this.$.container._handleValueAndAutoValidate(this.inputElement);\n    }\n  },\n});\n","import \"@material/mwc-button\";\nimport \"@polymer/paper-input/paper-input\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\n\nimport \"../../components/ha-card\";\nimport \"../../resources/ha-style\";\nimport \"../config/ha-config-section\";\n\nclass HaPanelAishelp extends PolymerElement {\n  static get template() {\n    return html`\n      <style include=\"iron-flex ha-style\">\n        .center-container {\n          @apply --layout-vertical;\n          @apply --layout-center-center;\n          height: 70px;\n        }\n        a {\n          color: var(--primary-color);\n        }\n        ha-card > paper-toggle-button {\n          margin: -4px 0;\n          position: absolute;\n          right: 8px;\n          top: 32px;\n        }\n        .card-actions {\n          display: flex;\n        }\n        .card-actions a {\n          text-decoration: none;\n        }\n        .spacer {\n          flex-grow: 1;\n        }\n        .content {\n          background-color: var(--primary-background-color);\n          width: 100%;\n          min-height: 100%;\n        }\n        ha-card > svg {\n          margin: -4px 0;\n          position: absolute;\n          right: 32px;\n          top: 32px;\n        }\n        div.svgStatusIconDiv{\n          margin: -4px 0;\n          position: absolute;\n          right: 32px;\n          top: 32px;\n        }\n        svg > path {\n          fill: var(--primary-color);\n        }\n      </style>\n      <app-toolbar>\n        <ha-menu-button hass=\"[[hass]]\" narrow=\"[[narrow]]\"></ha-menu-button>\n        <div main-title>[[panel.title]]</div>\n      </app-toolbar>\n      <div class=\"content\">\n      <has-subpage>\n        <ha-config-section class=\"content\" is-wide=\"[[isWide]]\">\n          <span slot=\"header\">Przydatne Linki</span>\n          <span slot=\"introduction\"\n            >W tej sekcji znajdziesz przydatne linki dotyczące twojej bramki</span\n          >\n          <ha-card header=\"Identyfikator bramki\">\n            <svg style=\"width:36px;height:36px\" viewBox=\"0 0 24 24\">\n              <path d=\"M6,18V8H8V18H6M6,4.5H8V6.5H6V4.5M17,4H19V18H17V17.75C17,17.75 15.67,18 15,18A5,5 0 0,1 10,13A5,5 0 0,1 15,8C15.67,8 17,8.25 17,8.25V4M17,10.25C17,10.25 15.67,10 15,10A3,3 0 0,0 12,13A3,3 0 0,0 15,16C15.67,16 17,15.75 17,15.75V10.25Z\" />\n            </svg>\n            <div class=\"card-content\">\n              To urządzenie posiada swój unikalny identyfikator, został on losowo wygenerowany przy pierwszym uruchomieniu i pozostanie stały przez cały okres użytkowania urządzenia.\n              Identyfikator tego urządzenia to <a href=\"#\"> [[aisSecureAndroidId]] </a>\n              <div style=\"text-align: center; margin-top: 10px;\">\n                <img src=\"local/dom_access_code.png\">\n              </div>\n            </div>\n          </ha-card>\n          <ha-card header=\"Aplikacja\">\n            <svg style=\"width:36px;height:36px\" viewBox=\"0 0 24 24\">\n                <path d=\"M3,4H21A1,1 0 0,1 22,5V16A1,1 0 0,1 21,17H22L24,20V21H0V20L2,17H3A1,1 0 0,1 2,16V5A1,1 0 0,1 3,4M4,6V15H20V6H4Z\" />\n            </svg>\n            <div class=\"card-content\">\n              Aplikacja dostępna jest w sieci lokalnej pod adresem:\n              <a\n                href=\"http://[[aisLocalIP]]\"\n                target=\"_blank\"\n                >http://[[aisLocalIP]]</a\n              >\n            </div>\n          </ha-card>\n          <ha-card header=\"Serwer FTP\">\n            <svg style=\"width:36px;height:36px\" viewBox=\"0 0 24 24\">\n                <path d=\"M13,19H14A1,1 0 0,1 15,20H22V22H15A1,1 0 0,1 14,23H10A1,1 0 0,1 9,22H2V20H9A1,1 0 0,1 10,19H11V17H4A1,1 0 0,1 3,16V12A1,1 0 0,1 4,11H20A1,1 0 0,1 21,12V16A1,1 0 0,1 20,17H13V19M4,3H20A1,1 0 0,1 21,4V8A1,1 0 0,1 20,9H4A1,1 0 0,1 3,8V4A1,1 0 0,1 4,3M9,7H10V5H9V7M9,15H10V13H9V15M5,5V7H7V5H5M5,13V15H7V13H5Z\" />\n            </svg>\n            <div class=\"card-content\">\n              Na urządzeniu działa serwer ftp dostępny pod adresem:\n              <a\n                href=\"ftp://[[aisLocalIP]]\"\n                target=\"_blank\"\n                >ftp://[[aisLocalIP]]</a\n              >\n            </div>\n          </ha-card>\n          <ha-card header=\"SSH\">\n            <svg style=\"width:36px;height:36px\" viewBox=\"0 0 24 24\">\n                <path d=\"M20,19V7H4V19H20M20,3A2,2 0 0,1 22,5V19A2,2 0 0,1 20,21H4A2,2 0 0,1 2,19V5C2,3.89 2.9,3 4,3H20M13,17V15H18V17H13M9.58,13L5.57,9H8.4L11.7,12.3C12.09,12.69 12.09,13.33 11.7,13.72L8.42,17H5.59L9.58,13Z\" />\n            </svg>\n            <div class=\"card-content\">\n              Pobierz\n              <a href=\"/local/id_rsa_ais?v=1\" target=\"_blank\"\n                >autoryzowany klucz ssh</a\n              > i połącz się ze swojej konsoli poleceniem: <br>ssh [[aisLocalIP]] -i <ścieżka do pobranego klucza ssh>\n              <br><br>Możesz też łączyć się za pomocą hasła:<br><a>ssh [[aisLocalIP]]</a><br>szczegóły w <a href=\"https://www.ai-speaker.com/docs/ais_bramka_remote_ssh#dost%C4%99p-do-konsoli-z-klienta-ssh)\" target=\"_blank\">dokumentacji</a>\n            </div>\n          </ha-card>\n          <ha-card header=\"Tunel\">\n            <div class=\"svgStatusIconDiv\" style=\"fill:[[serviceRemoteStatusColor]]\">\n             <svg style=\"width:36px;height:36px\" viewBox=\"0 0 24 24\">\n                  <path d=\"M16.36,14C16.44,13.34 16.5,12.68 16.5,12C16.5,11.32 16.44,10.66 16.36,10H19.74C19.9,10.64 20,11.31 20,12C20,12.69 19.9,13.36 19.74,14M14.59,19.56C15.19,18.45 15.65,17.25 15.97,16H18.92C17.96,17.65 16.43,18.93 14.59,19.56M14.34,14H9.66C9.56,13.34 9.5,12.68 9.5,12C9.5,11.32 9.56,10.65 9.66,10H14.34C14.43,10.65 14.5,11.32 14.5,12C14.5,12.68 14.43,13.34 14.34,14M12,19.96C11.17,18.76 10.5,17.43 10.09,16H13.91C13.5,17.43 12.83,18.76 12,19.96M8,8H5.08C6.03,6.34 7.57,5.06 9.4,4.44C8.8,5.55 8.35,6.75 8,8M5.08,16H8C8.35,17.25 8.8,18.45 9.4,19.56C7.57,18.93 6.03,17.65 5.08,16M4.26,14C4.1,13.36 4,12.69 4,12C4,11.31 4.1,10.64 4.26,10H7.64C7.56,10.66 7.5,11.32 7.5,12C7.5,12.68 7.56,13.34 7.64,14M12,4.03C12.83,5.23 13.5,6.57 13.91,8H10.09C10.5,6.57 11.17,5.23 12,4.03M18.92,8H15.97C15.65,6.75 15.19,5.55 14.59,4.44C16.43,5.07 17.96,6.34 18.92,8M12,2C6.47,2 2,6.5 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z\" />\n              </svg>\n            </div>\n            <div class=\"card-content\">\n              [[remoteConnectedInfo]] <a href=[[remoteDomain]]>[[remoteDomain]]</a>\n              <p>Ustawienia zdalnego dostępu możesz zmienić w <a href=\"/config/ais_dom\">konfiguracji bramki</a> </p>\n            </div>\n          </ha-card>\n          <ha-card header=\"Portal Integratora\">\n            <svg style=\"width:36px;height:36px\" viewBox=\"0 0 24 24\">\n              <path d=\"M15.5,12C18,12 20,14 20,16.5C20,17.38 19.75,18.21 19.31,18.9L22.39,22L21,23.39L17.88,20.32C17.19,20.75 16.37,21 15.5,21C13,21 11,19 11,16.5C11,14 13,12 15.5,12M15.5,14A2.5,2.5 0 0,0 13,16.5A2.5,2.5 0 0,0 15.5,19A2.5,2.5 0 0,0 18,16.5A2.5,2.5 0 0,0 15.5,14M22,13A3,3 0 0,0 19,10H17.5V9.5A5.5,5.5 0 0,0 12,4C9.5,4 7.37,5.69 6.71,8H6A4,4 0 0,0 2,12A4,4 0 0,0 6,16H9V16.5C9,17 9.06,17.5 9.17,18H6A6,6 0 0,1 0,12C0,8.9 2.34,6.36 5.35,6.04C6.6,3.64 9.11,2 12,2C15.64,2 18.67,4.59 19.36,8.04C21.95,8.22 24,10.36 24,13C24,14.65 23.21,16.1 22,17V16.5C22,15.77 21.88,15.06 21.65,14.4C21.87,14 22,13.5 22,13Z\" />\n            </svg>\n            <div class=\"card-content\">\n              Portal Integratora to miejsce, w którym można dodawać własne stacje radiowe, podcasty oraz\n              konfigurować inne składowe systemu\n              <a href=\"https://www.ai-speaker.com/ords/f?p=100\" target=\"_blank\"\n                >Przejdz do Portalu Integratora</a\n              >\n            </div>\n          </ha-card>\n          <ha-card header=\"Logi aktualizacji\">\n            <svg style=\"width:36px;height:36px\" viewBox=\"0 0 24 24\">\n                <path d=\"M5,3C3.89,3 3,3.89 3,5V19C3,20.11 3.89,21 5,21H19C20.11,21 21,20.11 21,19V5C21,3.89 20.11,3 19,3H5M5,5H19V19H5V5M7,7V9H17V7H7M7,11V13H17V11H7M7,15V17H14V15H7Z\" />\n            </svg>\n            <div class=\"card-content\">\n              Pobierz\n              <a href=\"/local/upgrade_log.txt\" target=\"_blank\"\n                >logi aktualizacji</a\n              >\n            </div>\n          </ha-card>\n        </ha-config-section>\n      </hss-subpage>\n      </div>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: Object,\n      narrow: Boolean,\n      panel: Object,\n      aisLocalIP: {\n        type: String,\n        computed: \"_computeAisLocalIP(hass)\",\n      },\n      remoteDomain: {\n        type: String,\n        computed: \"_computeRemoteDomain(hass)\",\n      },\n      remoteConnectedInfo: {\n        type: String,\n        computed: \"_computeRremoteConnectedInfo(hass)\",\n      },\n      serviceRemoteStatusColor: {\n        type: String,\n        value: \"#000000\",\n      },\n      aisSecureAndroidId: {\n        type: String,\n        value: \"dom-xxxxxxxx\",\n      },\n    };\n  }\n\n  _computeAisLocalIP(hass) {\n    return hass.states[\"sensor.internal_ip_address\"].state;\n  }\n\n  _computeRemoteDomain(hass) {\n    this.aisSecureAndroidId =\n      hass.states[\"sensor.ais_secure_android_id_dom\"].state;\n    return \"https://\" + this.aisSecureAndroidId + \".paczka.pro\";\n  }\n\n  _computeRremoteConnectedInfo(hass) {\n    if (hass.states[\"input_boolean.ais_remote_access\"].state === \"on\") {\n      this.serviceRemoteStatusColor = \"#FF9800\";\n      return \"Twoja bramka jest dostępna pod adresem: \";\n    }\n    this.serviceRemoteStatusColor = \"#000000\";\n    return \"Gdy włączysz szyfrowany tunel to Twoja bramka będzie dostępna z Internetu pod adresem: \";\n  }\n}\n\ncustomElements.define(\"ha-panel-aishelp\", HaPanelAishelp);\n"],"sourceRoot":""}