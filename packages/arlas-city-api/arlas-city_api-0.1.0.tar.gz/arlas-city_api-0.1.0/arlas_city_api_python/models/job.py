# coding: utf-8

"""
    ARLAS CITY API

    ARLAS-city content manager

    OpenAPI spec version: 0.1.0
    Contact: contact@gisaia.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Job(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'collection': 'str',
        'created_at': 'int',
        'modified_at': 'int',
        'operation_id': 'str',
        'started_at': 'int',
        'finished_at': 'int',
        'error': 'str',
        'steps': 'list[Step]',
        'archive_ids': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'collection': 'collection',
        'created_at': 'created_at',
        'modified_at': 'modified_at',
        'operation_id': 'operation_id',
        'started_at': 'started_at',
        'finished_at': 'finished_at',
        'error': 'error',
        'steps': 'steps',
        'archive_ids': 'archive_ids'
    }

    def __init__(self, id=None, collection=None, created_at=None, modified_at=None, operation_id=None, started_at=None, finished_at=None, error=None, steps=None, archive_ids=None):
        """
        Job - a model defined in Swagger
        """

        self._id = None
        self._collection = None
        self._created_at = None
        self._modified_at = None
        self._operation_id = None
        self._started_at = None
        self._finished_at = None
        self._error = None
        self._steps = None
        self._archive_ids = None

        if id is not None:
          self.id = id
        if collection is not None:
          self.collection = collection
        if created_at is not None:
          self.created_at = created_at
        if modified_at is not None:
          self.modified_at = modified_at
        if operation_id is not None:
          self.operation_id = operation_id
        if started_at is not None:
          self.started_at = started_at
        if finished_at is not None:
          self.finished_at = finished_at
        if error is not None:
          self.error = error
        if steps is not None:
          self.steps = steps
        if archive_ids is not None:
          self.archive_ids = archive_ids

    @property
    def id(self):
        """
        Gets the id of this Job.

        :return: The id of this Job.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Job.

        :param id: The id of this Job.
        :type: str
        """

        self._id = id

    @property
    def collection(self):
        """
        Gets the collection of this Job.

        :return: The collection of this Job.
        :rtype: str
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """
        Sets the collection of this Job.

        :param collection: The collection of this Job.
        :type: str
        """

        self._collection = collection

    @property
    def created_at(self):
        """
        Gets the created_at of this Job.

        :return: The created_at of this Job.
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Job.

        :param created_at: The created_at of this Job.
        :type: int
        """

        self._created_at = created_at

    @property
    def modified_at(self):
        """
        Gets the modified_at of this Job.

        :return: The modified_at of this Job.
        :rtype: int
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """
        Sets the modified_at of this Job.

        :param modified_at: The modified_at of this Job.
        :type: int
        """

        self._modified_at = modified_at

    @property
    def operation_id(self):
        """
        Gets the operation_id of this Job.

        :return: The operation_id of this Job.
        :rtype: str
        """
        return self._operation_id

    @operation_id.setter
    def operation_id(self, operation_id):
        """
        Sets the operation_id of this Job.

        :param operation_id: The operation_id of this Job.
        :type: str
        """

        self._operation_id = operation_id

    @property
    def started_at(self):
        """
        Gets the started_at of this Job.

        :return: The started_at of this Job.
        :rtype: int
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """
        Sets the started_at of this Job.

        :param started_at: The started_at of this Job.
        :type: int
        """

        self._started_at = started_at

    @property
    def finished_at(self):
        """
        Gets the finished_at of this Job.

        :return: The finished_at of this Job.
        :rtype: int
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """
        Sets the finished_at of this Job.

        :param finished_at: The finished_at of this Job.
        :type: int
        """

        self._finished_at = finished_at

    @property
    def error(self):
        """
        Gets the error of this Job.

        :return: The error of this Job.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """
        Sets the error of this Job.

        :param error: The error of this Job.
        :type: str
        """

        self._error = error

    @property
    def steps(self):
        """
        Gets the steps of this Job.

        :return: The steps of this Job.
        :rtype: list[Step]
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """
        Sets the steps of this Job.

        :param steps: The steps of this Job.
        :type: list[Step]
        """

        self._steps = steps

    @property
    def archive_ids(self):
        """
        Gets the archive_ids of this Job.

        :return: The archive_ids of this Job.
        :rtype: list[str]
        """
        return self._archive_ids

    @archive_ids.setter
    def archive_ids(self, archive_ids):
        """
        Sets the archive_ids of this Job.

        :param archive_ids: The archive_ids of this Job.
        :type: list[str]
        """

        self._archive_ids = archive_ids

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Job):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
