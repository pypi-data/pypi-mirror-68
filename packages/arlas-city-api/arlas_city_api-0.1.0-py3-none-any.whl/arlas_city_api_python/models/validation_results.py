# coding: utf-8

"""
    ARLAS CITY API

    ARLAS-city content manager

    OpenAPI spec version: 0.1.0
    Contact: contact@gisaia.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ValidationResults(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'routes': 'dict(str, IssuesDetails)',
        'trips': 'dict(str, IssuesDetails)',
        'stops': 'dict(str, IssuesDetails)',
        'shapes': 'dict(str, IssuesDetails)',
        'dates': 'dict(str, IssuesDetails)'
    }

    attribute_map = {
        'routes': 'routes',
        'trips': 'trips',
        'stops': 'stops',
        'shapes': 'shapes',
        'dates': 'dates'
    }

    def __init__(self, routes=None, trips=None, stops=None, shapes=None, dates=None):
        """
        ValidationResults - a model defined in Swagger
        """

        self._routes = None
        self._trips = None
        self._stops = None
        self._shapes = None
        self._dates = None

        if routes is not None:
          self.routes = routes
        if trips is not None:
          self.trips = trips
        if stops is not None:
          self.stops = stops
        if shapes is not None:
          self.shapes = shapes
        if dates is not None:
          self.dates = dates

    @property
    def routes(self):
        """
        Gets the routes of this ValidationResults.

        :return: The routes of this ValidationResults.
        :rtype: dict(str, IssuesDetails)
        """
        return self._routes

    @routes.setter
    def routes(self, routes):
        """
        Sets the routes of this ValidationResults.

        :param routes: The routes of this ValidationResults.
        :type: dict(str, IssuesDetails)
        """

        self._routes = routes

    @property
    def trips(self):
        """
        Gets the trips of this ValidationResults.

        :return: The trips of this ValidationResults.
        :rtype: dict(str, IssuesDetails)
        """
        return self._trips

    @trips.setter
    def trips(self, trips):
        """
        Sets the trips of this ValidationResults.

        :param trips: The trips of this ValidationResults.
        :type: dict(str, IssuesDetails)
        """

        self._trips = trips

    @property
    def stops(self):
        """
        Gets the stops of this ValidationResults.

        :return: The stops of this ValidationResults.
        :rtype: dict(str, IssuesDetails)
        """
        return self._stops

    @stops.setter
    def stops(self, stops):
        """
        Sets the stops of this ValidationResults.

        :param stops: The stops of this ValidationResults.
        :type: dict(str, IssuesDetails)
        """

        self._stops = stops

    @property
    def shapes(self):
        """
        Gets the shapes of this ValidationResults.

        :return: The shapes of this ValidationResults.
        :rtype: dict(str, IssuesDetails)
        """
        return self._shapes

    @shapes.setter
    def shapes(self, shapes):
        """
        Sets the shapes of this ValidationResults.

        :param shapes: The shapes of this ValidationResults.
        :type: dict(str, IssuesDetails)
        """

        self._shapes = shapes

    @property
    def dates(self):
        """
        Gets the dates of this ValidationResults.

        :return: The dates of this ValidationResults.
        :rtype: dict(str, IssuesDetails)
        """
        return self._dates

    @dates.setter
    def dates(self, dates):
        """
        Sets the dates of this ValidationResults.

        :param dates: The dates of this ValidationResults.
        :type: dict(str, IssuesDetails)
        """

        self._dates = dates

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ValidationResults):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
