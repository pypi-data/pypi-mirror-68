# coding: utf-8

"""
    ARLAS CITY API

    ARLAS-city content manager

    OpenAPI spec version: 0.1.0
    Contact: contact@gisaia.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FeedStatistics(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'nb_agencies': 'int',
        'nb_routes': 'int',
        'nb_trips': 'int',
        'nb_stops': 'int',
        'nb_stop_times': 'int',
        'start_date': 'datetime',
        'end_date': 'datetime'
    }

    attribute_map = {
        'nb_agencies': 'nb_agencies',
        'nb_routes': 'nb_routes',
        'nb_trips': 'nb_trips',
        'nb_stops': 'nb_stops',
        'nb_stop_times': 'nb_stop_times',
        'start_date': 'start_date',
        'end_date': 'end_date'
    }

    def __init__(self, nb_agencies=None, nb_routes=None, nb_trips=None, nb_stops=None, nb_stop_times=None, start_date=None, end_date=None):
        """
        FeedStatistics - a model defined in Swagger
        """

        self._nb_agencies = None
        self._nb_routes = None
        self._nb_trips = None
        self._nb_stops = None
        self._nb_stop_times = None
        self._start_date = None
        self._end_date = None

        if nb_agencies is not None:
          self.nb_agencies = nb_agencies
        if nb_routes is not None:
          self.nb_routes = nb_routes
        if nb_trips is not None:
          self.nb_trips = nb_trips
        if nb_stops is not None:
          self.nb_stops = nb_stops
        if nb_stop_times is not None:
          self.nb_stop_times = nb_stop_times
        if start_date is not None:
          self.start_date = start_date
        if end_date is not None:
          self.end_date = end_date

    @property
    def nb_agencies(self):
        """
        Gets the nb_agencies of this FeedStatistics.

        :return: The nb_agencies of this FeedStatistics.
        :rtype: int
        """
        return self._nb_agencies

    @nb_agencies.setter
    def nb_agencies(self, nb_agencies):
        """
        Sets the nb_agencies of this FeedStatistics.

        :param nb_agencies: The nb_agencies of this FeedStatistics.
        :type: int
        """

        self._nb_agencies = nb_agencies

    @property
    def nb_routes(self):
        """
        Gets the nb_routes of this FeedStatistics.

        :return: The nb_routes of this FeedStatistics.
        :rtype: int
        """
        return self._nb_routes

    @nb_routes.setter
    def nb_routes(self, nb_routes):
        """
        Sets the nb_routes of this FeedStatistics.

        :param nb_routes: The nb_routes of this FeedStatistics.
        :type: int
        """

        self._nb_routes = nb_routes

    @property
    def nb_trips(self):
        """
        Gets the nb_trips of this FeedStatistics.

        :return: The nb_trips of this FeedStatistics.
        :rtype: int
        """
        return self._nb_trips

    @nb_trips.setter
    def nb_trips(self, nb_trips):
        """
        Sets the nb_trips of this FeedStatistics.

        :param nb_trips: The nb_trips of this FeedStatistics.
        :type: int
        """

        self._nb_trips = nb_trips

    @property
    def nb_stops(self):
        """
        Gets the nb_stops of this FeedStatistics.

        :return: The nb_stops of this FeedStatistics.
        :rtype: int
        """
        return self._nb_stops

    @nb_stops.setter
    def nb_stops(self, nb_stops):
        """
        Sets the nb_stops of this FeedStatistics.

        :param nb_stops: The nb_stops of this FeedStatistics.
        :type: int
        """

        self._nb_stops = nb_stops

    @property
    def nb_stop_times(self):
        """
        Gets the nb_stop_times of this FeedStatistics.

        :return: The nb_stop_times of this FeedStatistics.
        :rtype: int
        """
        return self._nb_stop_times

    @nb_stop_times.setter
    def nb_stop_times(self, nb_stop_times):
        """
        Sets the nb_stop_times of this FeedStatistics.

        :param nb_stop_times: The nb_stop_times of this FeedStatistics.
        :type: int
        """

        self._nb_stop_times = nb_stop_times

    @property
    def start_date(self):
        """
        Gets the start_date of this FeedStatistics.

        :return: The start_date of this FeedStatistics.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """
        Sets the start_date of this FeedStatistics.

        :param start_date: The start_date of this FeedStatistics.
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """
        Gets the end_date of this FeedStatistics.

        :return: The end_date of this FeedStatistics.
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """
        Sets the end_date of this FeedStatistics.

        :param end_date: The end_date of this FeedStatistics.
        :type: datetime
        """

        self._end_date = end_date

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FeedStatistics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
