# coding: utf-8

"""
    DBpedia

    This is the API of the DBpedia Ontology  # noqa: E501

    The version of the OpenAPI document: v0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dbpedia.configuration import Configuration


class Spacecraft(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'dry_cargo': 'list[object]',
        'rocket': 'list[object]',
        'decay': 'list[str]',
        'type': 'list[str]',
        'port1': 'list[object]',
        'introduction_date': 'list[str]',
        'port2': 'list[object]',
        'free_flight_time': 'list[object]',
        'diameter': 'list[object]',
        'design_company': 'list[object]',
        'discharge': 'list[float]',
        'port2_docked_time': 'list[object]',
        'id': 'str',
        'rebuilder': 'list[object]',
        'port1_docking_date': 'list[str]',
        'height': 'list[object]',
        'model_end_date': 'list[str]',
        'number_of_launches': 'list[int]',
        'port1_undocking_date': 'list[str]',
        'model_end_year': 'list[str]',
        'cargo_water': 'list[object]',
        'port2_undocking_date': 'list[str]',
        'port1_docked_time': 'list[object]',
        'weight': 'list[object]',
        'version': 'list[object]',
        'apoapsis': 'list[object]',
        'discharge_average': 'list[float]',
        'total_cargo': 'list[object]',
        'number_of_crew': 'list[int]',
        'power_type': 'list[object]',
        'cargo_fuel': 'list[object]',
        'cargo_gas': 'list[object]',
        'mass': 'list[object]',
        'description': 'list[str]',
        'engine_type': 'list[object]',
        'total_mass': 'list[object]',
        'crew': 'list[object]',
        'docked_time': 'list[object]',
        'assembly': 'list[object]',
        '_class': 'list[object]',
        'model_start_date': 'list[str]',
        'inclination': 'list[float]',
        'periapsis': 'list[object]',
        'regime': 'list[str]',
        'port2_docking_date': 'list[str]',
        'length': 'list[object]',
        'launch': 'list[str]',
        'label': 'list[str]',
        'number_of_seats': 'list[int]',
        'model_start_year': 'list[str]',
        'width': 'list[object]',
        'related_mean_of_transportation': 'list[object]',
        'target_space_station': 'list[object]'
    }

    attribute_map = {
        'dry_cargo': 'dryCargo',
        'rocket': 'rocket',
        'decay': 'decay',
        'type': 'type',
        'port1': 'port1',
        'introduction_date': 'introductionDate',
        'port2': 'port2',
        'free_flight_time': 'freeFlightTime',
        'diameter': 'diameter',
        'design_company': 'designCompany',
        'discharge': 'discharge',
        'port2_docked_time': 'port2DockedTime',
        'id': 'id',
        'rebuilder': 'rebuilder',
        'port1_docking_date': 'port1DockingDate',
        'height': 'height',
        'model_end_date': 'modelEndDate',
        'number_of_launches': 'numberOfLaunches',
        'port1_undocking_date': 'port1UndockingDate',
        'model_end_year': 'modelEndYear',
        'cargo_water': 'cargoWater',
        'port2_undocking_date': 'port2UndockingDate',
        'port1_docked_time': 'port1DockedTime',
        'weight': 'weight',
        'version': 'version',
        'apoapsis': 'apoapsis',
        'discharge_average': 'dischargeAverage',
        'total_cargo': 'totalCargo',
        'number_of_crew': 'numberOfCrew',
        'power_type': 'powerType',
        'cargo_fuel': 'cargoFuel',
        'cargo_gas': 'cargoGas',
        'mass': 'mass',
        'description': 'description',
        'engine_type': 'engineType',
        'total_mass': 'totalMass',
        'crew': 'crew',
        'docked_time': 'dockedTime',
        'assembly': 'assembly',
        '_class': 'class',
        'model_start_date': 'modelStartDate',
        'inclination': 'inclination',
        'periapsis': 'periapsis',
        'regime': 'regime',
        'port2_docking_date': 'port2DockingDate',
        'length': 'length',
        'launch': 'launch',
        'label': 'label',
        'number_of_seats': 'numberOfSeats',
        'model_start_year': 'modelStartYear',
        'width': 'width',
        'related_mean_of_transportation': 'relatedMeanOfTransportation',
        'target_space_station': 'targetSpaceStation'
    }

    def __init__(self, dry_cargo=None, rocket=None, decay=None, type=None, port1=None, introduction_date=None, port2=None, free_flight_time=None, diameter=None, design_company=None, discharge=None, port2_docked_time=None, id=None, rebuilder=None, port1_docking_date=None, height=None, model_end_date=None, number_of_launches=None, port1_undocking_date=None, model_end_year=None, cargo_water=None, port2_undocking_date=None, port1_docked_time=None, weight=None, version=None, apoapsis=None, discharge_average=None, total_cargo=None, number_of_crew=None, power_type=None, cargo_fuel=None, cargo_gas=None, mass=None, description=None, engine_type=None, total_mass=None, crew=None, docked_time=None, assembly=None, _class=None, model_start_date=None, inclination=None, periapsis=None, regime=None, port2_docking_date=None, length=None, launch=None, label=None, number_of_seats=None, model_start_year=None, width=None, related_mean_of_transportation=None, target_space_station=None, local_vars_configuration=None):  # noqa: E501
        """Spacecraft - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._dry_cargo = None
        self._rocket = None
        self._decay = None
        self._type = None
        self._port1 = None
        self._introduction_date = None
        self._port2 = None
        self._free_flight_time = None
        self._diameter = None
        self._design_company = None
        self._discharge = None
        self._port2_docked_time = None
        self._id = None
        self._rebuilder = None
        self._port1_docking_date = None
        self._height = None
        self._model_end_date = None
        self._number_of_launches = None
        self._port1_undocking_date = None
        self._model_end_year = None
        self._cargo_water = None
        self._port2_undocking_date = None
        self._port1_docked_time = None
        self._weight = None
        self._version = None
        self._apoapsis = None
        self._discharge_average = None
        self._total_cargo = None
        self._number_of_crew = None
        self._power_type = None
        self._cargo_fuel = None
        self._cargo_gas = None
        self._mass = None
        self._description = None
        self._engine_type = None
        self._total_mass = None
        self._crew = None
        self._docked_time = None
        self._assembly = None
        self.__class = None
        self._model_start_date = None
        self._inclination = None
        self._periapsis = None
        self._regime = None
        self._port2_docking_date = None
        self._length = None
        self._launch = None
        self._label = None
        self._number_of_seats = None
        self._model_start_year = None
        self._width = None
        self._related_mean_of_transportation = None
        self._target_space_station = None
        self.discriminator = None

        self.dry_cargo = dry_cargo
        self.rocket = rocket
        self.decay = decay
        self.type = type
        self.port1 = port1
        self.introduction_date = introduction_date
        self.port2 = port2
        self.free_flight_time = free_flight_time
        self.diameter = diameter
        self.design_company = design_company
        self.discharge = discharge
        self.port2_docked_time = port2_docked_time
        if id is not None:
            self.id = id
        self.rebuilder = rebuilder
        self.port1_docking_date = port1_docking_date
        self.height = height
        self.model_end_date = model_end_date
        self.number_of_launches = number_of_launches
        self.port1_undocking_date = port1_undocking_date
        self.model_end_year = model_end_year
        self.cargo_water = cargo_water
        self.port2_undocking_date = port2_undocking_date
        self.port1_docked_time = port1_docked_time
        self.weight = weight
        self.version = version
        self.apoapsis = apoapsis
        self.discharge_average = discharge_average
        self.total_cargo = total_cargo
        self.number_of_crew = number_of_crew
        self.power_type = power_type
        self.cargo_fuel = cargo_fuel
        self.cargo_gas = cargo_gas
        self.mass = mass
        self.description = description
        self.engine_type = engine_type
        self.total_mass = total_mass
        self.crew = crew
        self.docked_time = docked_time
        self.assembly = assembly
        self._class = _class
        self.model_start_date = model_start_date
        self.inclination = inclination
        self.periapsis = periapsis
        self.regime = regime
        self.port2_docking_date = port2_docking_date
        self.length = length
        self.launch = launch
        self.label = label
        self.number_of_seats = number_of_seats
        self.model_start_year = model_start_year
        self.width = width
        self.related_mean_of_transportation = related_mean_of_transportation
        self.target_space_station = target_space_station

    @property
    def dry_cargo(self):
        """Gets the dry_cargo of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The dry_cargo of this Spacecraft.  # noqa: E501
        :rtype: list[object]
        """
        return self._dry_cargo

    @dry_cargo.setter
    def dry_cargo(self, dry_cargo):
        """Sets the dry_cargo of this Spacecraft.

        Description not available  # noqa: E501

        :param dry_cargo: The dry_cargo of this Spacecraft.  # noqa: E501
        :type: list[object]
        """

        self._dry_cargo = dry_cargo

    @property
    def rocket(self):
        """Gets the rocket of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The rocket of this Spacecraft.  # noqa: E501
        :rtype: list[object]
        """
        return self._rocket

    @rocket.setter
    def rocket(self, rocket):
        """Sets the rocket of this Spacecraft.

        Description not available  # noqa: E501

        :param rocket: The rocket of this Spacecraft.  # noqa: E501
        :type: list[object]
        """

        self._rocket = rocket

    @property
    def decay(self):
        """Gets the decay of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The decay of this Spacecraft.  # noqa: E501
        :rtype: list[str]
        """
        return self._decay

    @decay.setter
    def decay(self, decay):
        """Sets the decay of this Spacecraft.

        Description not available  # noqa: E501

        :param decay: The decay of this Spacecraft.  # noqa: E501
        :type: list[str]
        """

        self._decay = decay

    @property
    def type(self):
        """Gets the type of this Spacecraft.  # noqa: E501

        type of the resource  # noqa: E501

        :return: The type of this Spacecraft.  # noqa: E501
        :rtype: list[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Spacecraft.

        type of the resource  # noqa: E501

        :param type: The type of this Spacecraft.  # noqa: E501
        :type: list[str]
        """

        self._type = type

    @property
    def port1(self):
        """Gets the port1 of this Spacecraft.  # noqa: E501

        first docking port of a spacecraft  # noqa: E501

        :return: The port1 of this Spacecraft.  # noqa: E501
        :rtype: list[object]
        """
        return self._port1

    @port1.setter
    def port1(self, port1):
        """Sets the port1 of this Spacecraft.

        first docking port of a spacecraft  # noqa: E501

        :param port1: The port1 of this Spacecraft.  # noqa: E501
        :type: list[object]
        """

        self._port1 = port1

    @property
    def introduction_date(self):
        """Gets the introduction_date of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The introduction_date of this Spacecraft.  # noqa: E501
        :rtype: list[str]
        """
        return self._introduction_date

    @introduction_date.setter
    def introduction_date(self, introduction_date):
        """Sets the introduction_date of this Spacecraft.

        Description not available  # noqa: E501

        :param introduction_date: The introduction_date of this Spacecraft.  # noqa: E501
        :type: list[str]
        """

        self._introduction_date = introduction_date

    @property
    def port2(self):
        """Gets the port2 of this Spacecraft.  # noqa: E501

        second docking port of a spacecraft  # noqa: E501

        :return: The port2 of this Spacecraft.  # noqa: E501
        :rtype: list[object]
        """
        return self._port2

    @port2.setter
    def port2(self, port2):
        """Sets the port2 of this Spacecraft.

        second docking port of a spacecraft  # noqa: E501

        :param port2: The port2 of this Spacecraft.  # noqa: E501
        :type: list[object]
        """

        self._port2 = port2

    @property
    def free_flight_time(self):
        """Gets the free_flight_time of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The free_flight_time of this Spacecraft.  # noqa: E501
        :rtype: list[object]
        """
        return self._free_flight_time

    @free_flight_time.setter
    def free_flight_time(self, free_flight_time):
        """Sets the free_flight_time of this Spacecraft.

        Description not available  # noqa: E501

        :param free_flight_time: The free_flight_time of this Spacecraft.  # noqa: E501
        :type: list[object]
        """

        self._free_flight_time = free_flight_time

    @property
    def diameter(self):
        """Gets the diameter of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The diameter of this Spacecraft.  # noqa: E501
        :rtype: list[object]
        """
        return self._diameter

    @diameter.setter
    def diameter(self, diameter):
        """Sets the diameter of this Spacecraft.

        Description not available  # noqa: E501

        :param diameter: The diameter of this Spacecraft.  # noqa: E501
        :type: list[object]
        """

        self._diameter = diameter

    @property
    def design_company(self):
        """Gets the design_company of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The design_company of this Spacecraft.  # noqa: E501
        :rtype: list[object]
        """
        return self._design_company

    @design_company.setter
    def design_company(self, design_company):
        """Sets the design_company of this Spacecraft.

        Description not available  # noqa: E501

        :param design_company: The design_company of this Spacecraft.  # noqa: E501
        :type: list[object]
        """

        self._design_company = design_company

    @property
    def discharge(self):
        """Gets the discharge of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The discharge of this Spacecraft.  # noqa: E501
        :rtype: list[float]
        """
        return self._discharge

    @discharge.setter
    def discharge(self, discharge):
        """Sets the discharge of this Spacecraft.

        Description not available  # noqa: E501

        :param discharge: The discharge of this Spacecraft.  # noqa: E501
        :type: list[float]
        """

        self._discharge = discharge

    @property
    def port2_docked_time(self):
        """Gets the port2_docked_time of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The port2_docked_time of this Spacecraft.  # noqa: E501
        :rtype: list[object]
        """
        return self._port2_docked_time

    @port2_docked_time.setter
    def port2_docked_time(self, port2_docked_time):
        """Sets the port2_docked_time of this Spacecraft.

        Description not available  # noqa: E501

        :param port2_docked_time: The port2_docked_time of this Spacecraft.  # noqa: E501
        :type: list[object]
        """

        self._port2_docked_time = port2_docked_time

    @property
    def id(self):
        """Gets the id of this Spacecraft.  # noqa: E501

        identifier  # noqa: E501

        :return: The id of this Spacecraft.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Spacecraft.

        identifier  # noqa: E501

        :param id: The id of this Spacecraft.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def rebuilder(self):
        """Gets the rebuilder of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The rebuilder of this Spacecraft.  # noqa: E501
        :rtype: list[object]
        """
        return self._rebuilder

    @rebuilder.setter
    def rebuilder(self, rebuilder):
        """Sets the rebuilder of this Spacecraft.

        Description not available  # noqa: E501

        :param rebuilder: The rebuilder of this Spacecraft.  # noqa: E501
        :type: list[object]
        """

        self._rebuilder = rebuilder

    @property
    def port1_docking_date(self):
        """Gets the port1_docking_date of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The port1_docking_date of this Spacecraft.  # noqa: E501
        :rtype: list[str]
        """
        return self._port1_docking_date

    @port1_docking_date.setter
    def port1_docking_date(self, port1_docking_date):
        """Sets the port1_docking_date of this Spacecraft.

        Description not available  # noqa: E501

        :param port1_docking_date: The port1_docking_date of this Spacecraft.  # noqa: E501
        :type: list[str]
        """

        self._port1_docking_date = port1_docking_date

    @property
    def height(self):
        """Gets the height of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The height of this Spacecraft.  # noqa: E501
        :rtype: list[object]
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Spacecraft.

        Description not available  # noqa: E501

        :param height: The height of this Spacecraft.  # noqa: E501
        :type: list[object]
        """

        self._height = height

    @property
    def model_end_date(self):
        """Gets the model_end_date of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The model_end_date of this Spacecraft.  # noqa: E501
        :rtype: list[str]
        """
        return self._model_end_date

    @model_end_date.setter
    def model_end_date(self, model_end_date):
        """Sets the model_end_date of this Spacecraft.

        Description not available  # noqa: E501

        :param model_end_date: The model_end_date of this Spacecraft.  # noqa: E501
        :type: list[str]
        """

        self._model_end_date = model_end_date

    @property
    def number_of_launches(self):
        """Gets the number_of_launches of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The number_of_launches of this Spacecraft.  # noqa: E501
        :rtype: list[int]
        """
        return self._number_of_launches

    @number_of_launches.setter
    def number_of_launches(self, number_of_launches):
        """Sets the number_of_launches of this Spacecraft.

        Description not available  # noqa: E501

        :param number_of_launches: The number_of_launches of this Spacecraft.  # noqa: E501
        :type: list[int]
        """

        self._number_of_launches = number_of_launches

    @property
    def port1_undocking_date(self):
        """Gets the port1_undocking_date of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The port1_undocking_date of this Spacecraft.  # noqa: E501
        :rtype: list[str]
        """
        return self._port1_undocking_date

    @port1_undocking_date.setter
    def port1_undocking_date(self, port1_undocking_date):
        """Sets the port1_undocking_date of this Spacecraft.

        Description not available  # noqa: E501

        :param port1_undocking_date: The port1_undocking_date of this Spacecraft.  # noqa: E501
        :type: list[str]
        """

        self._port1_undocking_date = port1_undocking_date

    @property
    def model_end_year(self):
        """Gets the model_end_year of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The model_end_year of this Spacecraft.  # noqa: E501
        :rtype: list[str]
        """
        return self._model_end_year

    @model_end_year.setter
    def model_end_year(self, model_end_year):
        """Sets the model_end_year of this Spacecraft.

        Description not available  # noqa: E501

        :param model_end_year: The model_end_year of this Spacecraft.  # noqa: E501
        :type: list[str]
        """

        self._model_end_year = model_end_year

    @property
    def cargo_water(self):
        """Gets the cargo_water of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The cargo_water of this Spacecraft.  # noqa: E501
        :rtype: list[object]
        """
        return self._cargo_water

    @cargo_water.setter
    def cargo_water(self, cargo_water):
        """Sets the cargo_water of this Spacecraft.

        Description not available  # noqa: E501

        :param cargo_water: The cargo_water of this Spacecraft.  # noqa: E501
        :type: list[object]
        """

        self._cargo_water = cargo_water

    @property
    def port2_undocking_date(self):
        """Gets the port2_undocking_date of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The port2_undocking_date of this Spacecraft.  # noqa: E501
        :rtype: list[str]
        """
        return self._port2_undocking_date

    @port2_undocking_date.setter
    def port2_undocking_date(self, port2_undocking_date):
        """Sets the port2_undocking_date of this Spacecraft.

        Description not available  # noqa: E501

        :param port2_undocking_date: The port2_undocking_date of this Spacecraft.  # noqa: E501
        :type: list[str]
        """

        self._port2_undocking_date = port2_undocking_date

    @property
    def port1_docked_time(self):
        """Gets the port1_docked_time of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The port1_docked_time of this Spacecraft.  # noqa: E501
        :rtype: list[object]
        """
        return self._port1_docked_time

    @port1_docked_time.setter
    def port1_docked_time(self, port1_docked_time):
        """Sets the port1_docked_time of this Spacecraft.

        Description not available  # noqa: E501

        :param port1_docked_time: The port1_docked_time of this Spacecraft.  # noqa: E501
        :type: list[object]
        """

        self._port1_docked_time = port1_docked_time

    @property
    def weight(self):
        """Gets the weight of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The weight of this Spacecraft.  # noqa: E501
        :rtype: list[object]
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this Spacecraft.

        Description not available  # noqa: E501

        :param weight: The weight of this Spacecraft.  # noqa: E501
        :type: list[object]
        """

        self._weight = weight

    @property
    def version(self):
        """Gets the version of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The version of this Spacecraft.  # noqa: E501
        :rtype: list[object]
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Spacecraft.

        Description not available  # noqa: E501

        :param version: The version of this Spacecraft.  # noqa: E501
        :type: list[object]
        """

        self._version = version

    @property
    def apoapsis(self):
        """Gets the apoapsis of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The apoapsis of this Spacecraft.  # noqa: E501
        :rtype: list[object]
        """
        return self._apoapsis

    @apoapsis.setter
    def apoapsis(self, apoapsis):
        """Sets the apoapsis of this Spacecraft.

        Description not available  # noqa: E501

        :param apoapsis: The apoapsis of this Spacecraft.  # noqa: E501
        :type: list[object]
        """

        self._apoapsis = apoapsis

    @property
    def discharge_average(self):
        """Gets the discharge_average of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The discharge_average of this Spacecraft.  # noqa: E501
        :rtype: list[float]
        """
        return self._discharge_average

    @discharge_average.setter
    def discharge_average(self, discharge_average):
        """Sets the discharge_average of this Spacecraft.

        Description not available  # noqa: E501

        :param discharge_average: The discharge_average of this Spacecraft.  # noqa: E501
        :type: list[float]
        """

        self._discharge_average = discharge_average

    @property
    def total_cargo(self):
        """Gets the total_cargo of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The total_cargo of this Spacecraft.  # noqa: E501
        :rtype: list[object]
        """
        return self._total_cargo

    @total_cargo.setter
    def total_cargo(self, total_cargo):
        """Sets the total_cargo of this Spacecraft.

        Description not available  # noqa: E501

        :param total_cargo: The total_cargo of this Spacecraft.  # noqa: E501
        :type: list[object]
        """

        self._total_cargo = total_cargo

    @property
    def number_of_crew(self):
        """Gets the number_of_crew of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The number_of_crew of this Spacecraft.  # noqa: E501
        :rtype: list[int]
        """
        return self._number_of_crew

    @number_of_crew.setter
    def number_of_crew(self, number_of_crew):
        """Sets the number_of_crew of this Spacecraft.

        Description not available  # noqa: E501

        :param number_of_crew: The number_of_crew of this Spacecraft.  # noqa: E501
        :type: list[int]
        """

        self._number_of_crew = number_of_crew

    @property
    def power_type(self):
        """Gets the power_type of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The power_type of this Spacecraft.  # noqa: E501
        :rtype: list[object]
        """
        return self._power_type

    @power_type.setter
    def power_type(self, power_type):
        """Sets the power_type of this Spacecraft.

        Description not available  # noqa: E501

        :param power_type: The power_type of this Spacecraft.  # noqa: E501
        :type: list[object]
        """

        self._power_type = power_type

    @property
    def cargo_fuel(self):
        """Gets the cargo_fuel of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The cargo_fuel of this Spacecraft.  # noqa: E501
        :rtype: list[object]
        """
        return self._cargo_fuel

    @cargo_fuel.setter
    def cargo_fuel(self, cargo_fuel):
        """Sets the cargo_fuel of this Spacecraft.

        Description not available  # noqa: E501

        :param cargo_fuel: The cargo_fuel of this Spacecraft.  # noqa: E501
        :type: list[object]
        """

        self._cargo_fuel = cargo_fuel

    @property
    def cargo_gas(self):
        """Gets the cargo_gas of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The cargo_gas of this Spacecraft.  # noqa: E501
        :rtype: list[object]
        """
        return self._cargo_gas

    @cargo_gas.setter
    def cargo_gas(self, cargo_gas):
        """Sets the cargo_gas of this Spacecraft.

        Description not available  # noqa: E501

        :param cargo_gas: The cargo_gas of this Spacecraft.  # noqa: E501
        :type: list[object]
        """

        self._cargo_gas = cargo_gas

    @property
    def mass(self):
        """Gets the mass of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The mass of this Spacecraft.  # noqa: E501
        :rtype: list[object]
        """
        return self._mass

    @mass.setter
    def mass(self, mass):
        """Sets the mass of this Spacecraft.

        Description not available  # noqa: E501

        :param mass: The mass of this Spacecraft.  # noqa: E501
        :type: list[object]
        """

        self._mass = mass

    @property
    def description(self):
        """Gets the description of this Spacecraft.  # noqa: E501

        small description  # noqa: E501

        :return: The description of this Spacecraft.  # noqa: E501
        :rtype: list[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Spacecraft.

        small description  # noqa: E501

        :param description: The description of this Spacecraft.  # noqa: E501
        :type: list[str]
        """

        self._description = description

    @property
    def engine_type(self):
        """Gets the engine_type of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The engine_type of this Spacecraft.  # noqa: E501
        :rtype: list[object]
        """
        return self._engine_type

    @engine_type.setter
    def engine_type(self, engine_type):
        """Sets the engine_type of this Spacecraft.

        Description not available  # noqa: E501

        :param engine_type: The engine_type of this Spacecraft.  # noqa: E501
        :type: list[object]
        """

        self._engine_type = engine_type

    @property
    def total_mass(self):
        """Gets the total_mass of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The total_mass of this Spacecraft.  # noqa: E501
        :rtype: list[object]
        """
        return self._total_mass

    @total_mass.setter
    def total_mass(self, total_mass):
        """Sets the total_mass of this Spacecraft.

        Description not available  # noqa: E501

        :param total_mass: The total_mass of this Spacecraft.  # noqa: E501
        :type: list[object]
        """

        self._total_mass = total_mass

    @property
    def crew(self):
        """Gets the crew of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The crew of this Spacecraft.  # noqa: E501
        :rtype: list[object]
        """
        return self._crew

    @crew.setter
    def crew(self, crew):
        """Sets the crew of this Spacecraft.

        Description not available  # noqa: E501

        :param crew: The crew of this Spacecraft.  # noqa: E501
        :type: list[object]
        """

        self._crew = crew

    @property
    def docked_time(self):
        """Gets the docked_time of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The docked_time of this Spacecraft.  # noqa: E501
        :rtype: list[object]
        """
        return self._docked_time

    @docked_time.setter
    def docked_time(self, docked_time):
        """Sets the docked_time of this Spacecraft.

        Description not available  # noqa: E501

        :param docked_time: The docked_time of this Spacecraft.  # noqa: E501
        :type: list[object]
        """

        self._docked_time = docked_time

    @property
    def assembly(self):
        """Gets the assembly of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The assembly of this Spacecraft.  # noqa: E501
        :rtype: list[object]
        """
        return self._assembly

    @assembly.setter
    def assembly(self, assembly):
        """Sets the assembly of this Spacecraft.

        Description not available  # noqa: E501

        :param assembly: The assembly of this Spacecraft.  # noqa: E501
        :type: list[object]
        """

        self._assembly = assembly

    @property
    def _class(self):
        """Gets the _class of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The _class of this Spacecraft.  # noqa: E501
        :rtype: list[object]
        """
        return self.__class

    @_class.setter
    def _class(self, _class):
        """Sets the _class of this Spacecraft.

        Description not available  # noqa: E501

        :param _class: The _class of this Spacecraft.  # noqa: E501
        :type: list[object]
        """

        self.__class = _class

    @property
    def model_start_date(self):
        """Gets the model_start_date of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The model_start_date of this Spacecraft.  # noqa: E501
        :rtype: list[str]
        """
        return self._model_start_date

    @model_start_date.setter
    def model_start_date(self, model_start_date):
        """Sets the model_start_date of this Spacecraft.

        Description not available  # noqa: E501

        :param model_start_date: The model_start_date of this Spacecraft.  # noqa: E501
        :type: list[str]
        """

        self._model_start_date = model_start_date

    @property
    def inclination(self):
        """Gets the inclination of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The inclination of this Spacecraft.  # noqa: E501
        :rtype: list[float]
        """
        return self._inclination

    @inclination.setter
    def inclination(self, inclination):
        """Sets the inclination of this Spacecraft.

        Description not available  # noqa: E501

        :param inclination: The inclination of this Spacecraft.  # noqa: E501
        :type: list[float]
        """

        self._inclination = inclination

    @property
    def periapsis(self):
        """Gets the periapsis of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The periapsis of this Spacecraft.  # noqa: E501
        :rtype: list[object]
        """
        return self._periapsis

    @periapsis.setter
    def periapsis(self, periapsis):
        """Sets the periapsis of this Spacecraft.

        Description not available  # noqa: E501

        :param periapsis: The periapsis of this Spacecraft.  # noqa: E501
        :type: list[object]
        """

        self._periapsis = periapsis

    @property
    def regime(self):
        """Gets the regime of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The regime of this Spacecraft.  # noqa: E501
        :rtype: list[str]
        """
        return self._regime

    @regime.setter
    def regime(self, regime):
        """Sets the regime of this Spacecraft.

        Description not available  # noqa: E501

        :param regime: The regime of this Spacecraft.  # noqa: E501
        :type: list[str]
        """

        self._regime = regime

    @property
    def port2_docking_date(self):
        """Gets the port2_docking_date of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The port2_docking_date of this Spacecraft.  # noqa: E501
        :rtype: list[str]
        """
        return self._port2_docking_date

    @port2_docking_date.setter
    def port2_docking_date(self, port2_docking_date):
        """Sets the port2_docking_date of this Spacecraft.

        Description not available  # noqa: E501

        :param port2_docking_date: The port2_docking_date of this Spacecraft.  # noqa: E501
        :type: list[str]
        """

        self._port2_docking_date = port2_docking_date

    @property
    def length(self):
        """Gets the length of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The length of this Spacecraft.  # noqa: E501
        :rtype: list[object]
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this Spacecraft.

        Description not available  # noqa: E501

        :param length: The length of this Spacecraft.  # noqa: E501
        :type: list[object]
        """

        self._length = length

    @property
    def launch(self):
        """Gets the launch of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The launch of this Spacecraft.  # noqa: E501
        :rtype: list[str]
        """
        return self._launch

    @launch.setter
    def launch(self, launch):
        """Sets the launch of this Spacecraft.

        Description not available  # noqa: E501

        :param launch: The launch of this Spacecraft.  # noqa: E501
        :type: list[str]
        """

        self._launch = launch

    @property
    def label(self):
        """Gets the label of this Spacecraft.  # noqa: E501

        short description of the resource  # noqa: E501

        :return: The label of this Spacecraft.  # noqa: E501
        :rtype: list[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Spacecraft.

        short description of the resource  # noqa: E501

        :param label: The label of this Spacecraft.  # noqa: E501
        :type: list[str]
        """

        self._label = label

    @property
    def number_of_seats(self):
        """Gets the number_of_seats of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The number_of_seats of this Spacecraft.  # noqa: E501
        :rtype: list[int]
        """
        return self._number_of_seats

    @number_of_seats.setter
    def number_of_seats(self, number_of_seats):
        """Sets the number_of_seats of this Spacecraft.

        Description not available  # noqa: E501

        :param number_of_seats: The number_of_seats of this Spacecraft.  # noqa: E501
        :type: list[int]
        """

        self._number_of_seats = number_of_seats

    @property
    def model_start_year(self):
        """Gets the model_start_year of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The model_start_year of this Spacecraft.  # noqa: E501
        :rtype: list[str]
        """
        return self._model_start_year

    @model_start_year.setter
    def model_start_year(self, model_start_year):
        """Sets the model_start_year of this Spacecraft.

        Description not available  # noqa: E501

        :param model_start_year: The model_start_year of this Spacecraft.  # noqa: E501
        :type: list[str]
        """

        self._model_start_year = model_start_year

    @property
    def width(self):
        """Gets the width of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The width of this Spacecraft.  # noqa: E501
        :rtype: list[object]
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Spacecraft.

        Description not available  # noqa: E501

        :param width: The width of this Spacecraft.  # noqa: E501
        :type: list[object]
        """

        self._width = width

    @property
    def related_mean_of_transportation(self):
        """Gets the related_mean_of_transportation of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The related_mean_of_transportation of this Spacecraft.  # noqa: E501
        :rtype: list[object]
        """
        return self._related_mean_of_transportation

    @related_mean_of_transportation.setter
    def related_mean_of_transportation(self, related_mean_of_transportation):
        """Sets the related_mean_of_transportation of this Spacecraft.

        Description not available  # noqa: E501

        :param related_mean_of_transportation: The related_mean_of_transportation of this Spacecraft.  # noqa: E501
        :type: list[object]
        """

        self._related_mean_of_transportation = related_mean_of_transportation

    @property
    def target_space_station(self):
        """Gets the target_space_station of this Spacecraft.  # noqa: E501

        Description not available  # noqa: E501

        :return: The target_space_station of this Spacecraft.  # noqa: E501
        :rtype: list[object]
        """
        return self._target_space_station

    @target_space_station.setter
    def target_space_station(self, target_space_station):
        """Sets the target_space_station of this Spacecraft.

        Description not available  # noqa: E501

        :param target_space_station: The target_space_station of this Spacecraft.  # noqa: E501
        :type: list[object]
        """

        self._target_space_station = target_space_station

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Spacecraft):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Spacecraft):
            return True

        return self.to_dict() != other.to_dict()
