# coding: utf-8

"""
    DBpedia

    This is the API of the DBpedia Ontology  # noqa: E501

    The version of the OpenAPI document: v0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dbpedia.configuration import Configuration


class GrandPrix(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'distance': 'list[object]',
        'number_of_people_attending': 'list[int]',
        'end_date': 'list[str]',
        'third_driver_country': 'list[object]',
        'description': 'list[str]',
        'first_driver_country': 'list[object]',
        'fastest_driver_country': 'list[object]',
        'first_driver': 'list[object]',
        'type': 'list[str]',
        'silver_medalist': 'list[object]',
        'participant': 'list[str]',
        'fastest_driver_team': 'list[object]',
        'duration': 'list[float]',
        'third_driver': 'list[object]',
        'medalist': 'list[object]',
        'previous_event': 'list[object]',
        'champion_in_single_female': 'list[object]',
        'course': 'list[object]',
        'distance_laps': 'list[int]',
        'champion_in_double_male': 'list[object]',
        'id': 'str',
        'following_event': 'list[object]',
        'first_driver_team': 'list[object]',
        'champion_in_single_male': 'list[object]',
        'pole_driver': 'list[object]',
        'second_driver_country': 'list[object]',
        'bronze_medalist': 'list[object]',
        'champion_in_mixed_double': 'list[object]',
        'caused_by': 'list[object]',
        'label': 'list[str]',
        'gold_medalist': 'list[object]',
        'second_driver': 'list[object]',
        'fastest_driver': 'list[object]',
        'second_team': 'list[object]',
        'champion_in_single': 'list[object]',
        'race_track': 'list[object]',
        'third_team': 'list[object]',
        'next_event': 'list[object]',
        'champion_in_double_female': 'list[object]',
        'champion_in_double': 'list[object]',
        'start_date': 'list[str]',
        'pole_driver_country': 'list[object]',
        'champion': 'list[object]',
        'pole_driver_team': 'list[object]'
    }

    attribute_map = {
        'distance': 'distance',
        'number_of_people_attending': 'numberOfPeopleAttending',
        'end_date': 'endDate',
        'third_driver_country': 'thirdDriverCountry',
        'description': 'description',
        'first_driver_country': 'firstDriverCountry',
        'fastest_driver_country': 'fastestDriverCountry',
        'first_driver': 'firstDriver',
        'type': 'type',
        'silver_medalist': 'silverMedalist',
        'participant': 'participant',
        'fastest_driver_team': 'fastestDriverTeam',
        'duration': 'duration',
        'third_driver': 'thirdDriver',
        'medalist': 'medalist',
        'previous_event': 'previousEvent',
        'champion_in_single_female': 'championInSingleFemale',
        'course': 'course',
        'distance_laps': 'distanceLaps',
        'champion_in_double_male': 'championInDoubleMale',
        'id': 'id',
        'following_event': 'followingEvent',
        'first_driver_team': 'firstDriverTeam',
        'champion_in_single_male': 'championInSingleMale',
        'pole_driver': 'poleDriver',
        'second_driver_country': 'secondDriverCountry',
        'bronze_medalist': 'bronzeMedalist',
        'champion_in_mixed_double': 'championInMixedDouble',
        'caused_by': 'causedBy',
        'label': 'label',
        'gold_medalist': 'goldMedalist',
        'second_driver': 'secondDriver',
        'fastest_driver': 'fastestDriver',
        'second_team': 'secondTeam',
        'champion_in_single': 'championInSingle',
        'race_track': 'raceTrack',
        'third_team': 'thirdTeam',
        'next_event': 'nextEvent',
        'champion_in_double_female': 'championInDoubleFemale',
        'champion_in_double': 'championInDouble',
        'start_date': 'startDate',
        'pole_driver_country': 'poleDriverCountry',
        'champion': 'champion',
        'pole_driver_team': 'poleDriverTeam'
    }

    def __init__(self, distance=None, number_of_people_attending=None, end_date=None, third_driver_country=None, description=None, first_driver_country=None, fastest_driver_country=None, first_driver=None, type=None, silver_medalist=None, participant=None, fastest_driver_team=None, duration=None, third_driver=None, medalist=None, previous_event=None, champion_in_single_female=None, course=None, distance_laps=None, champion_in_double_male=None, id=None, following_event=None, first_driver_team=None, champion_in_single_male=None, pole_driver=None, second_driver_country=None, bronze_medalist=None, champion_in_mixed_double=None, caused_by=None, label=None, gold_medalist=None, second_driver=None, fastest_driver=None, second_team=None, champion_in_single=None, race_track=None, third_team=None, next_event=None, champion_in_double_female=None, champion_in_double=None, start_date=None, pole_driver_country=None, champion=None, pole_driver_team=None, local_vars_configuration=None):  # noqa: E501
        """GrandPrix - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._distance = None
        self._number_of_people_attending = None
        self._end_date = None
        self._third_driver_country = None
        self._description = None
        self._first_driver_country = None
        self._fastest_driver_country = None
        self._first_driver = None
        self._type = None
        self._silver_medalist = None
        self._participant = None
        self._fastest_driver_team = None
        self._duration = None
        self._third_driver = None
        self._medalist = None
        self._previous_event = None
        self._champion_in_single_female = None
        self._course = None
        self._distance_laps = None
        self._champion_in_double_male = None
        self._id = None
        self._following_event = None
        self._first_driver_team = None
        self._champion_in_single_male = None
        self._pole_driver = None
        self._second_driver_country = None
        self._bronze_medalist = None
        self._champion_in_mixed_double = None
        self._caused_by = None
        self._label = None
        self._gold_medalist = None
        self._second_driver = None
        self._fastest_driver = None
        self._second_team = None
        self._champion_in_single = None
        self._race_track = None
        self._third_team = None
        self._next_event = None
        self._champion_in_double_female = None
        self._champion_in_double = None
        self._start_date = None
        self._pole_driver_country = None
        self._champion = None
        self._pole_driver_team = None
        self.discriminator = None

        self.distance = distance
        self.number_of_people_attending = number_of_people_attending
        self.end_date = end_date
        self.third_driver_country = third_driver_country
        self.description = description
        self.first_driver_country = first_driver_country
        self.fastest_driver_country = fastest_driver_country
        self.first_driver = first_driver
        self.type = type
        self.silver_medalist = silver_medalist
        self.participant = participant
        self.fastest_driver_team = fastest_driver_team
        self.duration = duration
        self.third_driver = third_driver
        self.medalist = medalist
        self.previous_event = previous_event
        self.champion_in_single_female = champion_in_single_female
        self.course = course
        self.distance_laps = distance_laps
        self.champion_in_double_male = champion_in_double_male
        if id is not None:
            self.id = id
        self.following_event = following_event
        self.first_driver_team = first_driver_team
        self.champion_in_single_male = champion_in_single_male
        self.pole_driver = pole_driver
        self.second_driver_country = second_driver_country
        self.bronze_medalist = bronze_medalist
        self.champion_in_mixed_double = champion_in_mixed_double
        self.caused_by = caused_by
        self.label = label
        self.gold_medalist = gold_medalist
        self.second_driver = second_driver
        self.fastest_driver = fastest_driver
        self.second_team = second_team
        self.champion_in_single = champion_in_single
        self.race_track = race_track
        self.third_team = third_team
        self.next_event = next_event
        self.champion_in_double_female = champion_in_double_female
        self.champion_in_double = champion_in_double
        self.start_date = start_date
        self.pole_driver_country = pole_driver_country
        self.champion = champion
        self.pole_driver_team = pole_driver_team

    @property
    def distance(self):
        """Gets the distance of this GrandPrix.  # noqa: E501

        Description not available  # noqa: E501

        :return: The distance of this GrandPrix.  # noqa: E501
        :rtype: list[object]
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this GrandPrix.

        Description not available  # noqa: E501

        :param distance: The distance of this GrandPrix.  # noqa: E501
        :type: list[object]
        """

        self._distance = distance

    @property
    def number_of_people_attending(self):
        """Gets the number_of_people_attending of this GrandPrix.  # noqa: E501

        Description not available  # noqa: E501

        :return: The number_of_people_attending of this GrandPrix.  # noqa: E501
        :rtype: list[int]
        """
        return self._number_of_people_attending

    @number_of_people_attending.setter
    def number_of_people_attending(self, number_of_people_attending):
        """Sets the number_of_people_attending of this GrandPrix.

        Description not available  # noqa: E501

        :param number_of_people_attending: The number_of_people_attending of this GrandPrix.  # noqa: E501
        :type: list[int]
        """

        self._number_of_people_attending = number_of_people_attending

    @property
    def end_date(self):
        """Gets the end_date of this GrandPrix.  # noqa: E501

        The end date of the event.  # noqa: E501

        :return: The end_date of this GrandPrix.  # noqa: E501
        :rtype: list[str]
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this GrandPrix.

        The end date of the event.  # noqa: E501

        :param end_date: The end_date of this GrandPrix.  # noqa: E501
        :type: list[str]
        """

        self._end_date = end_date

    @property
    def third_driver_country(self):
        """Gets the third_driver_country of this GrandPrix.  # noqa: E501

        Description not available  # noqa: E501

        :return: The third_driver_country of this GrandPrix.  # noqa: E501
        :rtype: list[object]
        """
        return self._third_driver_country

    @third_driver_country.setter
    def third_driver_country(self, third_driver_country):
        """Sets the third_driver_country of this GrandPrix.

        Description not available  # noqa: E501

        :param third_driver_country: The third_driver_country of this GrandPrix.  # noqa: E501
        :type: list[object]
        """

        self._third_driver_country = third_driver_country

    @property
    def description(self):
        """Gets the description of this GrandPrix.  # noqa: E501

        small description  # noqa: E501

        :return: The description of this GrandPrix.  # noqa: E501
        :rtype: list[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GrandPrix.

        small description  # noqa: E501

        :param description: The description of this GrandPrix.  # noqa: E501
        :type: list[str]
        """

        self._description = description

    @property
    def first_driver_country(self):
        """Gets the first_driver_country of this GrandPrix.  # noqa: E501

        Description not available  # noqa: E501

        :return: The first_driver_country of this GrandPrix.  # noqa: E501
        :rtype: list[object]
        """
        return self._first_driver_country

    @first_driver_country.setter
    def first_driver_country(self, first_driver_country):
        """Sets the first_driver_country of this GrandPrix.

        Description not available  # noqa: E501

        :param first_driver_country: The first_driver_country of this GrandPrix.  # noqa: E501
        :type: list[object]
        """

        self._first_driver_country = first_driver_country

    @property
    def fastest_driver_country(self):
        """Gets the fastest_driver_country of this GrandPrix.  # noqa: E501

        Description not available  # noqa: E501

        :return: The fastest_driver_country of this GrandPrix.  # noqa: E501
        :rtype: list[object]
        """
        return self._fastest_driver_country

    @fastest_driver_country.setter
    def fastest_driver_country(self, fastest_driver_country):
        """Sets the fastest_driver_country of this GrandPrix.

        Description not available  # noqa: E501

        :param fastest_driver_country: The fastest_driver_country of this GrandPrix.  # noqa: E501
        :type: list[object]
        """

        self._fastest_driver_country = fastest_driver_country

    @property
    def first_driver(self):
        """Gets the first_driver of this GrandPrix.  # noqa: E501

        Description not available  # noqa: E501

        :return: The first_driver of this GrandPrix.  # noqa: E501
        :rtype: list[object]
        """
        return self._first_driver

    @first_driver.setter
    def first_driver(self, first_driver):
        """Sets the first_driver of this GrandPrix.

        Description not available  # noqa: E501

        :param first_driver: The first_driver of this GrandPrix.  # noqa: E501
        :type: list[object]
        """

        self._first_driver = first_driver

    @property
    def type(self):
        """Gets the type of this GrandPrix.  # noqa: E501

        type of the resource  # noqa: E501

        :return: The type of this GrandPrix.  # noqa: E501
        :rtype: list[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GrandPrix.

        type of the resource  # noqa: E501

        :param type: The type of this GrandPrix.  # noqa: E501
        :type: list[str]
        """

        self._type = type

    @property
    def silver_medalist(self):
        """Gets the silver_medalist of this GrandPrix.  # noqa: E501

        Description not available  # noqa: E501

        :return: The silver_medalist of this GrandPrix.  # noqa: E501
        :rtype: list[object]
        """
        return self._silver_medalist

    @silver_medalist.setter
    def silver_medalist(self, silver_medalist):
        """Sets the silver_medalist of this GrandPrix.

        Description not available  # noqa: E501

        :param silver_medalist: The silver_medalist of this GrandPrix.  # noqa: E501
        :type: list[object]
        """

        self._silver_medalist = silver_medalist

    @property
    def participant(self):
        """Gets the participant of this GrandPrix.  # noqa: E501

        Description not available  # noqa: E501

        :return: The participant of this GrandPrix.  # noqa: E501
        :rtype: list[str]
        """
        return self._participant

    @participant.setter
    def participant(self, participant):
        """Sets the participant of this GrandPrix.

        Description not available  # noqa: E501

        :param participant: The participant of this GrandPrix.  # noqa: E501
        :type: list[str]
        """

        self._participant = participant

    @property
    def fastest_driver_team(self):
        """Gets the fastest_driver_team of this GrandPrix.  # noqa: E501

        Description not available  # noqa: E501

        :return: The fastest_driver_team of this GrandPrix.  # noqa: E501
        :rtype: list[object]
        """
        return self._fastest_driver_team

    @fastest_driver_team.setter
    def fastest_driver_team(self, fastest_driver_team):
        """Sets the fastest_driver_team of this GrandPrix.

        Description not available  # noqa: E501

        :param fastest_driver_team: The fastest_driver_team of this GrandPrix.  # noqa: E501
        :type: list[object]
        """

        self._fastest_driver_team = fastest_driver_team

    @property
    def duration(self):
        """Gets the duration of this GrandPrix.  # noqa: E501

        The duration of the item (movie, audio recording, event, etc.) in ISO 8601 date format  # noqa: E501

        :return: The duration of this GrandPrix.  # noqa: E501
        :rtype: list[float]
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this GrandPrix.

        The duration of the item (movie, audio recording, event, etc.) in ISO 8601 date format  # noqa: E501

        :param duration: The duration of this GrandPrix.  # noqa: E501
        :type: list[float]
        """

        self._duration = duration

    @property
    def third_driver(self):
        """Gets the third_driver of this GrandPrix.  # noqa: E501

        Description not available  # noqa: E501

        :return: The third_driver of this GrandPrix.  # noqa: E501
        :rtype: list[object]
        """
        return self._third_driver

    @third_driver.setter
    def third_driver(self, third_driver):
        """Sets the third_driver of this GrandPrix.

        Description not available  # noqa: E501

        :param third_driver: The third_driver of this GrandPrix.  # noqa: E501
        :type: list[object]
        """

        self._third_driver = third_driver

    @property
    def medalist(self):
        """Gets the medalist of this GrandPrix.  # noqa: E501

        Description not available  # noqa: E501

        :return: The medalist of this GrandPrix.  # noqa: E501
        :rtype: list[object]
        """
        return self._medalist

    @medalist.setter
    def medalist(self, medalist):
        """Sets the medalist of this GrandPrix.

        Description not available  # noqa: E501

        :param medalist: The medalist of this GrandPrix.  # noqa: E501
        :type: list[object]
        """

        self._medalist = medalist

    @property
    def previous_event(self):
        """Gets the previous_event of this GrandPrix.  # noqa: E501

        Description not available  # noqa: E501

        :return: The previous_event of this GrandPrix.  # noqa: E501
        :rtype: list[object]
        """
        return self._previous_event

    @previous_event.setter
    def previous_event(self, previous_event):
        """Sets the previous_event of this GrandPrix.

        Description not available  # noqa: E501

        :param previous_event: The previous_event of this GrandPrix.  # noqa: E501
        :type: list[object]
        """

        self._previous_event = previous_event

    @property
    def champion_in_single_female(self):
        """Gets the champion_in_single_female of this GrandPrix.  # noqa: E501

        winner of a competition in the single female session, to distinguish from the double session (as in tennis)  # noqa: E501

        :return: The champion_in_single_female of this GrandPrix.  # noqa: E501
        :rtype: list[object]
        """
        return self._champion_in_single_female

    @champion_in_single_female.setter
    def champion_in_single_female(self, champion_in_single_female):
        """Sets the champion_in_single_female of this GrandPrix.

        winner of a competition in the single female session, to distinguish from the double session (as in tennis)  # noqa: E501

        :param champion_in_single_female: The champion_in_single_female of this GrandPrix.  # noqa: E501
        :type: list[object]
        """

        self._champion_in_single_female = champion_in_single_female

    @property
    def course(self):
        """Gets the course of this GrandPrix.  # noqa: E501

        Description not available  # noqa: E501

        :return: The course of this GrandPrix.  # noqa: E501
        :rtype: list[object]
        """
        return self._course

    @course.setter
    def course(self, course):
        """Sets the course of this GrandPrix.

        Description not available  # noqa: E501

        :param course: The course of this GrandPrix.  # noqa: E501
        :type: list[object]
        """

        self._course = course

    @property
    def distance_laps(self):
        """Gets the distance_laps of this GrandPrix.  # noqa: E501

        Description not available  # noqa: E501

        :return: The distance_laps of this GrandPrix.  # noqa: E501
        :rtype: list[int]
        """
        return self._distance_laps

    @distance_laps.setter
    def distance_laps(self, distance_laps):
        """Sets the distance_laps of this GrandPrix.

        Description not available  # noqa: E501

        :param distance_laps: The distance_laps of this GrandPrix.  # noqa: E501
        :type: list[int]
        """

        self._distance_laps = distance_laps

    @property
    def champion_in_double_male(self):
        """Gets the champion_in_double_male of this GrandPrix.  # noqa: E501

        winner of a competition in the male double session (as in tennis)  # noqa: E501

        :return: The champion_in_double_male of this GrandPrix.  # noqa: E501
        :rtype: list[object]
        """
        return self._champion_in_double_male

    @champion_in_double_male.setter
    def champion_in_double_male(self, champion_in_double_male):
        """Sets the champion_in_double_male of this GrandPrix.

        winner of a competition in the male double session (as in tennis)  # noqa: E501

        :param champion_in_double_male: The champion_in_double_male of this GrandPrix.  # noqa: E501
        :type: list[object]
        """

        self._champion_in_double_male = champion_in_double_male

    @property
    def id(self):
        """Gets the id of this GrandPrix.  # noqa: E501

        identifier  # noqa: E501

        :return: The id of this GrandPrix.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GrandPrix.

        identifier  # noqa: E501

        :param id: The id of this GrandPrix.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def following_event(self):
        """Gets the following_event of this GrandPrix.  # noqa: E501

        Description not available  # noqa: E501

        :return: The following_event of this GrandPrix.  # noqa: E501
        :rtype: list[object]
        """
        return self._following_event

    @following_event.setter
    def following_event(self, following_event):
        """Sets the following_event of this GrandPrix.

        Description not available  # noqa: E501

        :param following_event: The following_event of this GrandPrix.  # noqa: E501
        :type: list[object]
        """

        self._following_event = following_event

    @property
    def first_driver_team(self):
        """Gets the first_driver_team of this GrandPrix.  # noqa: E501

        Description not available  # noqa: E501

        :return: The first_driver_team of this GrandPrix.  # noqa: E501
        :rtype: list[object]
        """
        return self._first_driver_team

    @first_driver_team.setter
    def first_driver_team(self, first_driver_team):
        """Sets the first_driver_team of this GrandPrix.

        Description not available  # noqa: E501

        :param first_driver_team: The first_driver_team of this GrandPrix.  # noqa: E501
        :type: list[object]
        """

        self._first_driver_team = first_driver_team

    @property
    def champion_in_single_male(self):
        """Gets the champion_in_single_male of this GrandPrix.  # noqa: E501

        winner of a competition in the single male session, to distinguish from the double session (as in tennis)  # noqa: E501

        :return: The champion_in_single_male of this GrandPrix.  # noqa: E501
        :rtype: list[object]
        """
        return self._champion_in_single_male

    @champion_in_single_male.setter
    def champion_in_single_male(self, champion_in_single_male):
        """Sets the champion_in_single_male of this GrandPrix.

        winner of a competition in the single male session, to distinguish from the double session (as in tennis)  # noqa: E501

        :param champion_in_single_male: The champion_in_single_male of this GrandPrix.  # noqa: E501
        :type: list[object]
        """

        self._champion_in_single_male = champion_in_single_male

    @property
    def pole_driver(self):
        """Gets the pole_driver of this GrandPrix.  # noqa: E501

        Description not available  # noqa: E501

        :return: The pole_driver of this GrandPrix.  # noqa: E501
        :rtype: list[object]
        """
        return self._pole_driver

    @pole_driver.setter
    def pole_driver(self, pole_driver):
        """Sets the pole_driver of this GrandPrix.

        Description not available  # noqa: E501

        :param pole_driver: The pole_driver of this GrandPrix.  # noqa: E501
        :type: list[object]
        """

        self._pole_driver = pole_driver

    @property
    def second_driver_country(self):
        """Gets the second_driver_country of this GrandPrix.  # noqa: E501

        Description not available  # noqa: E501

        :return: The second_driver_country of this GrandPrix.  # noqa: E501
        :rtype: list[object]
        """
        return self._second_driver_country

    @second_driver_country.setter
    def second_driver_country(self, second_driver_country):
        """Sets the second_driver_country of this GrandPrix.

        Description not available  # noqa: E501

        :param second_driver_country: The second_driver_country of this GrandPrix.  # noqa: E501
        :type: list[object]
        """

        self._second_driver_country = second_driver_country

    @property
    def bronze_medalist(self):
        """Gets the bronze_medalist of this GrandPrix.  # noqa: E501

        Description not available  # noqa: E501

        :return: The bronze_medalist of this GrandPrix.  # noqa: E501
        :rtype: list[object]
        """
        return self._bronze_medalist

    @bronze_medalist.setter
    def bronze_medalist(self, bronze_medalist):
        """Sets the bronze_medalist of this GrandPrix.

        Description not available  # noqa: E501

        :param bronze_medalist: The bronze_medalist of this GrandPrix.  # noqa: E501
        :type: list[object]
        """

        self._bronze_medalist = bronze_medalist

    @property
    def champion_in_mixed_double(self):
        """Gets the champion_in_mixed_double of this GrandPrix.  # noqa: E501

        winner of a competition in the mixed double session (as in tennis)  # noqa: E501

        :return: The champion_in_mixed_double of this GrandPrix.  # noqa: E501
        :rtype: list[object]
        """
        return self._champion_in_mixed_double

    @champion_in_mixed_double.setter
    def champion_in_mixed_double(self, champion_in_mixed_double):
        """Sets the champion_in_mixed_double of this GrandPrix.

        winner of a competition in the mixed double session (as in tennis)  # noqa: E501

        :param champion_in_mixed_double: The champion_in_mixed_double of this GrandPrix.  # noqa: E501
        :type: list[object]
        """

        self._champion_in_mixed_double = champion_in_mixed_double

    @property
    def caused_by(self):
        """Gets the caused_by of this GrandPrix.  # noqa: E501

        Description not available  # noqa: E501

        :return: The caused_by of this GrandPrix.  # noqa: E501
        :rtype: list[object]
        """
        return self._caused_by

    @caused_by.setter
    def caused_by(self, caused_by):
        """Sets the caused_by of this GrandPrix.

        Description not available  # noqa: E501

        :param caused_by: The caused_by of this GrandPrix.  # noqa: E501
        :type: list[object]
        """

        self._caused_by = caused_by

    @property
    def label(self):
        """Gets the label of this GrandPrix.  # noqa: E501

        short description of the resource  # noqa: E501

        :return: The label of this GrandPrix.  # noqa: E501
        :rtype: list[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this GrandPrix.

        short description of the resource  # noqa: E501

        :param label: The label of this GrandPrix.  # noqa: E501
        :type: list[str]
        """

        self._label = label

    @property
    def gold_medalist(self):
        """Gets the gold_medalist of this GrandPrix.  # noqa: E501

        Description not available  # noqa: E501

        :return: The gold_medalist of this GrandPrix.  # noqa: E501
        :rtype: list[object]
        """
        return self._gold_medalist

    @gold_medalist.setter
    def gold_medalist(self, gold_medalist):
        """Sets the gold_medalist of this GrandPrix.

        Description not available  # noqa: E501

        :param gold_medalist: The gold_medalist of this GrandPrix.  # noqa: E501
        :type: list[object]
        """

        self._gold_medalist = gold_medalist

    @property
    def second_driver(self):
        """Gets the second_driver of this GrandPrix.  # noqa: E501

        Description not available  # noqa: E501

        :return: The second_driver of this GrandPrix.  # noqa: E501
        :rtype: list[object]
        """
        return self._second_driver

    @second_driver.setter
    def second_driver(self, second_driver):
        """Sets the second_driver of this GrandPrix.

        Description not available  # noqa: E501

        :param second_driver: The second_driver of this GrandPrix.  # noqa: E501
        :type: list[object]
        """

        self._second_driver = second_driver

    @property
    def fastest_driver(self):
        """Gets the fastest_driver of this GrandPrix.  # noqa: E501

        Description not available  # noqa: E501

        :return: The fastest_driver of this GrandPrix.  # noqa: E501
        :rtype: list[object]
        """
        return self._fastest_driver

    @fastest_driver.setter
    def fastest_driver(self, fastest_driver):
        """Sets the fastest_driver of this GrandPrix.

        Description not available  # noqa: E501

        :param fastest_driver: The fastest_driver of this GrandPrix.  # noqa: E501
        :type: list[object]
        """

        self._fastest_driver = fastest_driver

    @property
    def second_team(self):
        """Gets the second_team of this GrandPrix.  # noqa: E501

        Description not available  # noqa: E501

        :return: The second_team of this GrandPrix.  # noqa: E501
        :rtype: list[object]
        """
        return self._second_team

    @second_team.setter
    def second_team(self, second_team):
        """Sets the second_team of this GrandPrix.

        Description not available  # noqa: E501

        :param second_team: The second_team of this GrandPrix.  # noqa: E501
        :type: list[object]
        """

        self._second_team = second_team

    @property
    def champion_in_single(self):
        """Gets the champion_in_single of this GrandPrix.  # noqa: E501

        winner of a competition in the single session, to distinguish from the double session (as in tennis)  # noqa: E501

        :return: The champion_in_single of this GrandPrix.  # noqa: E501
        :rtype: list[object]
        """
        return self._champion_in_single

    @champion_in_single.setter
    def champion_in_single(self, champion_in_single):
        """Sets the champion_in_single of this GrandPrix.

        winner of a competition in the single session, to distinguish from the double session (as in tennis)  # noqa: E501

        :param champion_in_single: The champion_in_single of this GrandPrix.  # noqa: E501
        :type: list[object]
        """

        self._champion_in_single = champion_in_single

    @property
    def race_track(self):
        """Gets the race_track of this GrandPrix.  # noqa: E501

        Description not available  # noqa: E501

        :return: The race_track of this GrandPrix.  # noqa: E501
        :rtype: list[object]
        """
        return self._race_track

    @race_track.setter
    def race_track(self, race_track):
        """Sets the race_track of this GrandPrix.

        Description not available  # noqa: E501

        :param race_track: The race_track of this GrandPrix.  # noqa: E501
        :type: list[object]
        """

        self._race_track = race_track

    @property
    def third_team(self):
        """Gets the third_team of this GrandPrix.  # noqa: E501

        Description not available  # noqa: E501

        :return: The third_team of this GrandPrix.  # noqa: E501
        :rtype: list[object]
        """
        return self._third_team

    @third_team.setter
    def third_team(self, third_team):
        """Sets the third_team of this GrandPrix.

        Description not available  # noqa: E501

        :param third_team: The third_team of this GrandPrix.  # noqa: E501
        :type: list[object]
        """

        self._third_team = third_team

    @property
    def next_event(self):
        """Gets the next_event of this GrandPrix.  # noqa: E501

        Description not available  # noqa: E501

        :return: The next_event of this GrandPrix.  # noqa: E501
        :rtype: list[object]
        """
        return self._next_event

    @next_event.setter
    def next_event(self, next_event):
        """Sets the next_event of this GrandPrix.

        Description not available  # noqa: E501

        :param next_event: The next_event of this GrandPrix.  # noqa: E501
        :type: list[object]
        """

        self._next_event = next_event

    @property
    def champion_in_double_female(self):
        """Gets the champion_in_double_female of this GrandPrix.  # noqa: E501

        winner of a competition in the female double session (as in tennis)  # noqa: E501

        :return: The champion_in_double_female of this GrandPrix.  # noqa: E501
        :rtype: list[object]
        """
        return self._champion_in_double_female

    @champion_in_double_female.setter
    def champion_in_double_female(self, champion_in_double_female):
        """Sets the champion_in_double_female of this GrandPrix.

        winner of a competition in the female double session (as in tennis)  # noqa: E501

        :param champion_in_double_female: The champion_in_double_female of this GrandPrix.  # noqa: E501
        :type: list[object]
        """

        self._champion_in_double_female = champion_in_double_female

    @property
    def champion_in_double(self):
        """Gets the champion_in_double of this GrandPrix.  # noqa: E501

        winner of a competition in the double session (as in tennis)  # noqa: E501

        :return: The champion_in_double of this GrandPrix.  # noqa: E501
        :rtype: list[object]
        """
        return self._champion_in_double

    @champion_in_double.setter
    def champion_in_double(self, champion_in_double):
        """Sets the champion_in_double of this GrandPrix.

        winner of a competition in the double session (as in tennis)  # noqa: E501

        :param champion_in_double: The champion_in_double of this GrandPrix.  # noqa: E501
        :type: list[object]
        """

        self._champion_in_double = champion_in_double

    @property
    def start_date(self):
        """Gets the start_date of this GrandPrix.  # noqa: E501

        The start date of the event.  # noqa: E501

        :return: The start_date of this GrandPrix.  # noqa: E501
        :rtype: list[str]
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this GrandPrix.

        The start date of the event.  # noqa: E501

        :param start_date: The start_date of this GrandPrix.  # noqa: E501
        :type: list[str]
        """

        self._start_date = start_date

    @property
    def pole_driver_country(self):
        """Gets the pole_driver_country of this GrandPrix.  # noqa: E501

        Description not available  # noqa: E501

        :return: The pole_driver_country of this GrandPrix.  # noqa: E501
        :rtype: list[object]
        """
        return self._pole_driver_country

    @pole_driver_country.setter
    def pole_driver_country(self, pole_driver_country):
        """Sets the pole_driver_country of this GrandPrix.

        Description not available  # noqa: E501

        :param pole_driver_country: The pole_driver_country of this GrandPrix.  # noqa: E501
        :type: list[object]
        """

        self._pole_driver_country = pole_driver_country

    @property
    def champion(self):
        """Gets the champion of this GrandPrix.  # noqa: E501

        winner of a competition  # noqa: E501

        :return: The champion of this GrandPrix.  # noqa: E501
        :rtype: list[object]
        """
        return self._champion

    @champion.setter
    def champion(self, champion):
        """Sets the champion of this GrandPrix.

        winner of a competition  # noqa: E501

        :param champion: The champion of this GrandPrix.  # noqa: E501
        :type: list[object]
        """

        self._champion = champion

    @property
    def pole_driver_team(self):
        """Gets the pole_driver_team of this GrandPrix.  # noqa: E501

        Description not available  # noqa: E501

        :return: The pole_driver_team of this GrandPrix.  # noqa: E501
        :rtype: list[object]
        """
        return self._pole_driver_team

    @pole_driver_team.setter
    def pole_driver_team(self, pole_driver_team):
        """Sets the pole_driver_team of this GrandPrix.

        Description not available  # noqa: E501

        :param pole_driver_team: The pole_driver_team of this GrandPrix.  # noqa: E501
        :type: list[object]
        """

        self._pole_driver_team = pole_driver_team

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GrandPrix):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GrandPrix):
            return True

        return self.to_dict() != other.to_dict()
