# coding: utf-8

"""
    DBpedia

    This is the API of the DBpedia Ontology  # noqa: E501

    The version of the OpenAPI document: v0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dbpedia.configuration import Configuration


class ChemicalElement(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'lethal_on_mice': 'list[str]',
        'density': 'list[object]',
        'carcinogen': 'list[str]',
        'description': 'list[str]',
        'molecular_weight': 'list[int]',
        'label': 'list[str]',
        'type': 'list[str]',
        'melting_point': 'list[object]',
        'solvent_with_good_solubility': 'list[object]',
        'boiling_point': 'list[object]',
        'lethal_on_chickens': 'list[str]',
        'lethal_on_rats': 'list[str]',
        'flash_point': 'list[int]',
        'lethal_on_rabbits': 'list[str]',
        'solvent_with_mediocre_solubility': 'list[object]',
        'solubility': 'list[int]',
        'formula': 'list[str]',
        'id': 'str',
        'solvent_with_bad_solubility': 'list[object]',
        'not_soluble_in': 'list[object]'
    }

    attribute_map = {
        'lethal_on_mice': 'lethalOnMice',
        'density': 'density',
        'carcinogen': 'carcinogen',
        'description': 'description',
        'molecular_weight': 'molecularWeight',
        'label': 'label',
        'type': 'type',
        'melting_point': 'meltingPoint',
        'solvent_with_good_solubility': 'solventWithGoodSolubility',
        'boiling_point': 'boilingPoint',
        'lethal_on_chickens': 'lethalOnChickens',
        'lethal_on_rats': 'lethalOnRats',
        'flash_point': 'flashPoint',
        'lethal_on_rabbits': 'lethalOnRabbits',
        'solvent_with_mediocre_solubility': 'solventWithMediocreSolubility',
        'solubility': 'solubility',
        'formula': 'formula',
        'id': 'id',
        'solvent_with_bad_solubility': 'solventWithBadSolubility',
        'not_soluble_in': 'notSolubleIn'
    }

    def __init__(self, lethal_on_mice=None, density=None, carcinogen=None, description=None, molecular_weight=None, label=None, type=None, melting_point=None, solvent_with_good_solubility=None, boiling_point=None, lethal_on_chickens=None, lethal_on_rats=None, flash_point=None, lethal_on_rabbits=None, solvent_with_mediocre_solubility=None, solubility=None, formula=None, id=None, solvent_with_bad_solubility=None, not_soluble_in=None, local_vars_configuration=None):  # noqa: E501
        """ChemicalElement - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._lethal_on_mice = None
        self._density = None
        self._carcinogen = None
        self._description = None
        self._molecular_weight = None
        self._label = None
        self._type = None
        self._melting_point = None
        self._solvent_with_good_solubility = None
        self._boiling_point = None
        self._lethal_on_chickens = None
        self._lethal_on_rats = None
        self._flash_point = None
        self._lethal_on_rabbits = None
        self._solvent_with_mediocre_solubility = None
        self._solubility = None
        self._formula = None
        self._id = None
        self._solvent_with_bad_solubility = None
        self._not_soluble_in = None
        self.discriminator = None

        self.lethal_on_mice = lethal_on_mice
        self.density = density
        self.carcinogen = carcinogen
        self.description = description
        self.molecular_weight = molecular_weight
        self.label = label
        self.type = type
        self.melting_point = melting_point
        self.solvent_with_good_solubility = solvent_with_good_solubility
        self.boiling_point = boiling_point
        self.lethal_on_chickens = lethal_on_chickens
        self.lethal_on_rats = lethal_on_rats
        self.flash_point = flash_point
        self.lethal_on_rabbits = lethal_on_rabbits
        self.solvent_with_mediocre_solubility = solvent_with_mediocre_solubility
        self.solubility = solubility
        self.formula = formula
        if id is not None:
            self.id = id
        self.solvent_with_bad_solubility = solvent_with_bad_solubility
        self.not_soluble_in = not_soluble_in

    @property
    def lethal_on_mice(self):
        """Gets the lethal_on_mice of this ChemicalElement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The lethal_on_mice of this ChemicalElement.  # noqa: E501
        :rtype: list[str]
        """
        return self._lethal_on_mice

    @lethal_on_mice.setter
    def lethal_on_mice(self, lethal_on_mice):
        """Sets the lethal_on_mice of this ChemicalElement.

        Description not available  # noqa: E501

        :param lethal_on_mice: The lethal_on_mice of this ChemicalElement.  # noqa: E501
        :type: list[str]
        """

        self._lethal_on_mice = lethal_on_mice

    @property
    def density(self):
        """Gets the density of this ChemicalElement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The density of this ChemicalElement.  # noqa: E501
        :rtype: list[object]
        """
        return self._density

    @density.setter
    def density(self, density):
        """Sets the density of this ChemicalElement.

        Description not available  # noqa: E501

        :param density: The density of this ChemicalElement.  # noqa: E501
        :type: list[object]
        """

        self._density = density

    @property
    def carcinogen(self):
        """Gets the carcinogen of this ChemicalElement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The carcinogen of this ChemicalElement.  # noqa: E501
        :rtype: list[str]
        """
        return self._carcinogen

    @carcinogen.setter
    def carcinogen(self, carcinogen):
        """Sets the carcinogen of this ChemicalElement.

        Description not available  # noqa: E501

        :param carcinogen: The carcinogen of this ChemicalElement.  # noqa: E501
        :type: list[str]
        """

        self._carcinogen = carcinogen

    @property
    def description(self):
        """Gets the description of this ChemicalElement.  # noqa: E501

        small description  # noqa: E501

        :return: The description of this ChemicalElement.  # noqa: E501
        :rtype: list[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ChemicalElement.

        small description  # noqa: E501

        :param description: The description of this ChemicalElement.  # noqa: E501
        :type: list[str]
        """

        self._description = description

    @property
    def molecular_weight(self):
        """Gets the molecular_weight of this ChemicalElement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The molecular_weight of this ChemicalElement.  # noqa: E501
        :rtype: list[int]
        """
        return self._molecular_weight

    @molecular_weight.setter
    def molecular_weight(self, molecular_weight):
        """Sets the molecular_weight of this ChemicalElement.

        Description not available  # noqa: E501

        :param molecular_weight: The molecular_weight of this ChemicalElement.  # noqa: E501
        :type: list[int]
        """

        self._molecular_weight = molecular_weight

    @property
    def label(self):
        """Gets the label of this ChemicalElement.  # noqa: E501

        short description of the resource  # noqa: E501

        :return: The label of this ChemicalElement.  # noqa: E501
        :rtype: list[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ChemicalElement.

        short description of the resource  # noqa: E501

        :param label: The label of this ChemicalElement.  # noqa: E501
        :type: list[str]
        """

        self._label = label

    @property
    def type(self):
        """Gets the type of this ChemicalElement.  # noqa: E501

        type of the resource  # noqa: E501

        :return: The type of this ChemicalElement.  # noqa: E501
        :rtype: list[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ChemicalElement.

        type of the resource  # noqa: E501

        :param type: The type of this ChemicalElement.  # noqa: E501
        :type: list[str]
        """

        self._type = type

    @property
    def melting_point(self):
        """Gets the melting_point of this ChemicalElement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The melting_point of this ChemicalElement.  # noqa: E501
        :rtype: list[object]
        """
        return self._melting_point

    @melting_point.setter
    def melting_point(self, melting_point):
        """Sets the melting_point of this ChemicalElement.

        Description not available  # noqa: E501

        :param melting_point: The melting_point of this ChemicalElement.  # noqa: E501
        :type: list[object]
        """

        self._melting_point = melting_point

    @property
    def solvent_with_good_solubility(self):
        """Gets the solvent_with_good_solubility of this ChemicalElement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The solvent_with_good_solubility of this ChemicalElement.  # noqa: E501
        :rtype: list[object]
        """
        return self._solvent_with_good_solubility

    @solvent_with_good_solubility.setter
    def solvent_with_good_solubility(self, solvent_with_good_solubility):
        """Sets the solvent_with_good_solubility of this ChemicalElement.

        Description not available  # noqa: E501

        :param solvent_with_good_solubility: The solvent_with_good_solubility of this ChemicalElement.  # noqa: E501
        :type: list[object]
        """

        self._solvent_with_good_solubility = solvent_with_good_solubility

    @property
    def boiling_point(self):
        """Gets the boiling_point of this ChemicalElement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The boiling_point of this ChemicalElement.  # noqa: E501
        :rtype: list[object]
        """
        return self._boiling_point

    @boiling_point.setter
    def boiling_point(self, boiling_point):
        """Sets the boiling_point of this ChemicalElement.

        Description not available  # noqa: E501

        :param boiling_point: The boiling_point of this ChemicalElement.  # noqa: E501
        :type: list[object]
        """

        self._boiling_point = boiling_point

    @property
    def lethal_on_chickens(self):
        """Gets the lethal_on_chickens of this ChemicalElement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The lethal_on_chickens of this ChemicalElement.  # noqa: E501
        :rtype: list[str]
        """
        return self._lethal_on_chickens

    @lethal_on_chickens.setter
    def lethal_on_chickens(self, lethal_on_chickens):
        """Sets the lethal_on_chickens of this ChemicalElement.

        Description not available  # noqa: E501

        :param lethal_on_chickens: The lethal_on_chickens of this ChemicalElement.  # noqa: E501
        :type: list[str]
        """

        self._lethal_on_chickens = lethal_on_chickens

    @property
    def lethal_on_rats(self):
        """Gets the lethal_on_rats of this ChemicalElement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The lethal_on_rats of this ChemicalElement.  # noqa: E501
        :rtype: list[str]
        """
        return self._lethal_on_rats

    @lethal_on_rats.setter
    def lethal_on_rats(self, lethal_on_rats):
        """Sets the lethal_on_rats of this ChemicalElement.

        Description not available  # noqa: E501

        :param lethal_on_rats: The lethal_on_rats of this ChemicalElement.  # noqa: E501
        :type: list[str]
        """

        self._lethal_on_rats = lethal_on_rats

    @property
    def flash_point(self):
        """Gets the flash_point of this ChemicalElement.  # noqa: E501

        lowest temperature at which a substance can vaporize and start burning  # noqa: E501

        :return: The flash_point of this ChemicalElement.  # noqa: E501
        :rtype: list[int]
        """
        return self._flash_point

    @flash_point.setter
    def flash_point(self, flash_point):
        """Sets the flash_point of this ChemicalElement.

        lowest temperature at which a substance can vaporize and start burning  # noqa: E501

        :param flash_point: The flash_point of this ChemicalElement.  # noqa: E501
        :type: list[int]
        """

        self._flash_point = flash_point

    @property
    def lethal_on_rabbits(self):
        """Gets the lethal_on_rabbits of this ChemicalElement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The lethal_on_rabbits of this ChemicalElement.  # noqa: E501
        :rtype: list[str]
        """
        return self._lethal_on_rabbits

    @lethal_on_rabbits.setter
    def lethal_on_rabbits(self, lethal_on_rabbits):
        """Sets the lethal_on_rabbits of this ChemicalElement.

        Description not available  # noqa: E501

        :param lethal_on_rabbits: The lethal_on_rabbits of this ChemicalElement.  # noqa: E501
        :type: list[str]
        """

        self._lethal_on_rabbits = lethal_on_rabbits

    @property
    def solvent_with_mediocre_solubility(self):
        """Gets the solvent_with_mediocre_solubility of this ChemicalElement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The solvent_with_mediocre_solubility of this ChemicalElement.  # noqa: E501
        :rtype: list[object]
        """
        return self._solvent_with_mediocre_solubility

    @solvent_with_mediocre_solubility.setter
    def solvent_with_mediocre_solubility(self, solvent_with_mediocre_solubility):
        """Sets the solvent_with_mediocre_solubility of this ChemicalElement.

        Description not available  # noqa: E501

        :param solvent_with_mediocre_solubility: The solvent_with_mediocre_solubility of this ChemicalElement.  # noqa: E501
        :type: list[object]
        """

        self._solvent_with_mediocre_solubility = solvent_with_mediocre_solubility

    @property
    def solubility(self):
        """Gets the solubility of this ChemicalElement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The solubility of this ChemicalElement.  # noqa: E501
        :rtype: list[int]
        """
        return self._solubility

    @solubility.setter
    def solubility(self, solubility):
        """Sets the solubility of this ChemicalElement.

        Description not available  # noqa: E501

        :param solubility: The solubility of this ChemicalElement.  # noqa: E501
        :type: list[int]
        """

        self._solubility = solubility

    @property
    def formula(self):
        """Gets the formula of this ChemicalElement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The formula of this ChemicalElement.  # noqa: E501
        :rtype: list[str]
        """
        return self._formula

    @formula.setter
    def formula(self, formula):
        """Sets the formula of this ChemicalElement.

        Description not available  # noqa: E501

        :param formula: The formula of this ChemicalElement.  # noqa: E501
        :type: list[str]
        """

        self._formula = formula

    @property
    def id(self):
        """Gets the id of this ChemicalElement.  # noqa: E501

        identifier  # noqa: E501

        :return: The id of this ChemicalElement.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ChemicalElement.

        identifier  # noqa: E501

        :param id: The id of this ChemicalElement.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def solvent_with_bad_solubility(self):
        """Gets the solvent_with_bad_solubility of this ChemicalElement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The solvent_with_bad_solubility of this ChemicalElement.  # noqa: E501
        :rtype: list[object]
        """
        return self._solvent_with_bad_solubility

    @solvent_with_bad_solubility.setter
    def solvent_with_bad_solubility(self, solvent_with_bad_solubility):
        """Sets the solvent_with_bad_solubility of this ChemicalElement.

        Description not available  # noqa: E501

        :param solvent_with_bad_solubility: The solvent_with_bad_solubility of this ChemicalElement.  # noqa: E501
        :type: list[object]
        """

        self._solvent_with_bad_solubility = solvent_with_bad_solubility

    @property
    def not_soluble_in(self):
        """Gets the not_soluble_in of this ChemicalElement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The not_soluble_in of this ChemicalElement.  # noqa: E501
        :rtype: list[object]
        """
        return self._not_soluble_in

    @not_soluble_in.setter
    def not_soluble_in(self, not_soluble_in):
        """Sets the not_soluble_in of this ChemicalElement.

        Description not available  # noqa: E501

        :param not_soluble_in: The not_soluble_in of this ChemicalElement.  # noqa: E501
        :type: list[object]
        """

        self._not_soluble_in = not_soluble_in

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChemicalElement):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ChemicalElement):
            return True

        return self.to_dict() != other.to_dict()
