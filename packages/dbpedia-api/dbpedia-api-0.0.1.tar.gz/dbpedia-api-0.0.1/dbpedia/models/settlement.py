# coding: utf-8

"""
    DBpedia

    This is the API of the DBpedia Ontology  # noqa: E501

    The version of the OpenAPI document: v0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dbpedia.configuration import Configuration


class Settlement(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'irish_name': 'list[str]',
        'reff_bourgmestre': 'list[object]',
        'wilaya': 'list[object]',
        'same_name': 'list[str]',
        'geoloc_department': 'list[object]',
        'cornish_name': 'list[str]',
        'official_name': 'list[str]',
        'type': 'list[str]',
        'minority': 'list[object]',
        'lowest_point': 'list[object]',
        'agglomeration_population': 'list[object]',
        'distance_to_cardiff': 'list[float]',
        'daira': 'list[object]',
        'meaning': 'list[str]',
        'dutch_name': 'list[str]',
        'manx_name': 'list[str]',
        'code_settlement': 'list[str]',
        'winter_temperature': 'list[float]',
        'id': 'str',
        'twin_city': 'list[object]',
        'day': 'list[str]',
        'distance_to_charing_cross': 'list[float]',
        'distance_to_london': 'list[float]',
        'distance_to_dublin': 'list[float]',
        'sharing_out_name': 'list[object]',
        'distance_to_capital': 'list[float]',
        'distance_to_edinburgh': 'list[float]',
        'other_information': 'list[str]',
        'gaelic_name': 'list[str]',
        'coast_line': 'list[float]',
        'kabyle_name': 'list[str]',
        'association_of_local_government': 'list[object]',
        'iso_code_region': 'list[object]',
        'administrative_collectivity': 'list[object]',
        'merged_settlement': 'list[object]',
        'joint_community': 'list[object]',
        'federal_state': 'list[object]',
        'welsh_name': 'list[str]',
        'collectivity_minority': 'list[object]',
        'chaoui_name': 'list[str]',
        'scottish_name': 'list[str]',
        'english_name': 'list[str]',
        'algerian_settlement_name': 'list[str]',
        'patron_saint': 'list[object]',
        'phone_prefix_label': 'list[str]',
        'commune': 'list[object]',
        'description': 'list[str]',
        'frazioni': 'list[object]',
        'political_majority': 'list[object]',
        'arabic_name': 'list[str]',
        'tamazight_name': 'list[str]',
        'insee_code': 'list[int]',
        'population_total_reference': 'list[object]',
        'touareg_name': 'list[str]',
        'political_seats': 'list[int]',
        'distance_to_douglas': 'list[float]',
        'algerian_name': 'list[str]',
        'other_language': 'list[str]',
        'ofs_code': 'list[str]',
        'touareg_settlement_name': 'list[str]',
        'distance_to_belfast': 'list[float]',
        'prov_code': 'list[str]',
        'largest_metro': 'list[object]',
        'label': 'list[str]',
        'mozabite_name': 'list[str]',
        'highest_point': 'list[object]',
        'bourgmestre': 'list[object]',
        'summer_temperature': 'list[float]',
        'finnish_name': 'list[str]',
        'tamazight_settlement_name': 'list[str]',
        'canton': 'list[object]',
        'administrative_district': 'list[object]',
        'agglomeration_population_year': 'list[str]'
    }

    attribute_map = {
        'irish_name': 'irishName',
        'reff_bourgmestre': 'reffBourgmestre',
        'wilaya': 'wilaya',
        'same_name': 'sameName',
        'geoloc_department': 'geolocDepartment',
        'cornish_name': 'cornishName',
        'official_name': 'officialName',
        'type': 'type',
        'minority': 'minority',
        'lowest_point': 'lowestPoint',
        'agglomeration_population': 'agglomerationPopulation',
        'distance_to_cardiff': 'distanceToCardiff',
        'daira': 'daira',
        'meaning': 'meaning',
        'dutch_name': 'dutchName',
        'manx_name': 'manxName',
        'code_settlement': 'codeSettlement',
        'winter_temperature': 'winterTemperature',
        'id': 'id',
        'twin_city': 'twinCity',
        'day': 'day',
        'distance_to_charing_cross': 'distanceToCharingCross',
        'distance_to_london': 'distanceToLondon',
        'distance_to_dublin': 'distanceToDublin',
        'sharing_out_name': 'sharingOutName',
        'distance_to_capital': 'distanceToCapital',
        'distance_to_edinburgh': 'distanceToEdinburgh',
        'other_information': 'otherInformation',
        'gaelic_name': 'gaelicName',
        'coast_line': 'coastLine',
        'kabyle_name': 'kabyleName',
        'association_of_local_government': 'associationOfLocalGovernment',
        'iso_code_region': 'isoCodeRegion',
        'administrative_collectivity': 'administrativeCollectivity',
        'merged_settlement': 'mergedSettlement',
        'joint_community': 'jointCommunity',
        'federal_state': 'federalState',
        'welsh_name': 'welshName',
        'collectivity_minority': 'collectivityMinority',
        'chaoui_name': 'chaouiName',
        'scottish_name': 'scottishName',
        'english_name': 'englishName',
        'algerian_settlement_name': 'algerianSettlementName',
        'patron_saint': 'patronSaint',
        'phone_prefix_label': 'phonePrefixLabel',
        'commune': 'commune',
        'description': 'description',
        'frazioni': 'frazioni',
        'political_majority': 'politicalMajority',
        'arabic_name': 'arabicName',
        'tamazight_name': 'tamazightName',
        'insee_code': 'inseeCode',
        'population_total_reference': 'populationTotalReference',
        'touareg_name': 'touaregName',
        'political_seats': 'politicalSeats',
        'distance_to_douglas': 'distanceToDouglas',
        'algerian_name': 'algerianName',
        'other_language': 'otherLanguage',
        'ofs_code': 'ofsCode',
        'touareg_settlement_name': 'touaregSettlementName',
        'distance_to_belfast': 'distanceToBelfast',
        'prov_code': 'provCode',
        'largest_metro': 'largestMetro',
        'label': 'label',
        'mozabite_name': 'mozabiteName',
        'highest_point': 'highestPoint',
        'bourgmestre': 'bourgmestre',
        'summer_temperature': 'summerTemperature',
        'finnish_name': 'finnishName',
        'tamazight_settlement_name': 'tamazightSettlementName',
        'canton': 'canton',
        'administrative_district': 'administrativeDistrict',
        'agglomeration_population_year': 'agglomerationPopulationYear'
    }

    def __init__(self, irish_name=None, reff_bourgmestre=None, wilaya=None, same_name=None, geoloc_department=None, cornish_name=None, official_name=None, type=None, minority=None, lowest_point=None, agglomeration_population=None, distance_to_cardiff=None, daira=None, meaning=None, dutch_name=None, manx_name=None, code_settlement=None, winter_temperature=None, id=None, twin_city=None, day=None, distance_to_charing_cross=None, distance_to_london=None, distance_to_dublin=None, sharing_out_name=None, distance_to_capital=None, distance_to_edinburgh=None, other_information=None, gaelic_name=None, coast_line=None, kabyle_name=None, association_of_local_government=None, iso_code_region=None, administrative_collectivity=None, merged_settlement=None, joint_community=None, federal_state=None, welsh_name=None, collectivity_minority=None, chaoui_name=None, scottish_name=None, english_name=None, algerian_settlement_name=None, patron_saint=None, phone_prefix_label=None, commune=None, description=None, frazioni=None, political_majority=None, arabic_name=None, tamazight_name=None, insee_code=None, population_total_reference=None, touareg_name=None, political_seats=None, distance_to_douglas=None, algerian_name=None, other_language=None, ofs_code=None, touareg_settlement_name=None, distance_to_belfast=None, prov_code=None, largest_metro=None, label=None, mozabite_name=None, highest_point=None, bourgmestre=None, summer_temperature=None, finnish_name=None, tamazight_settlement_name=None, canton=None, administrative_district=None, agglomeration_population_year=None, local_vars_configuration=None):  # noqa: E501
        """Settlement - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._irish_name = None
        self._reff_bourgmestre = None
        self._wilaya = None
        self._same_name = None
        self._geoloc_department = None
        self._cornish_name = None
        self._official_name = None
        self._type = None
        self._minority = None
        self._lowest_point = None
        self._agglomeration_population = None
        self._distance_to_cardiff = None
        self._daira = None
        self._meaning = None
        self._dutch_name = None
        self._manx_name = None
        self._code_settlement = None
        self._winter_temperature = None
        self._id = None
        self._twin_city = None
        self._day = None
        self._distance_to_charing_cross = None
        self._distance_to_london = None
        self._distance_to_dublin = None
        self._sharing_out_name = None
        self._distance_to_capital = None
        self._distance_to_edinburgh = None
        self._other_information = None
        self._gaelic_name = None
        self._coast_line = None
        self._kabyle_name = None
        self._association_of_local_government = None
        self._iso_code_region = None
        self._administrative_collectivity = None
        self._merged_settlement = None
        self._joint_community = None
        self._federal_state = None
        self._welsh_name = None
        self._collectivity_minority = None
        self._chaoui_name = None
        self._scottish_name = None
        self._english_name = None
        self._algerian_settlement_name = None
        self._patron_saint = None
        self._phone_prefix_label = None
        self._commune = None
        self._description = None
        self._frazioni = None
        self._political_majority = None
        self._arabic_name = None
        self._tamazight_name = None
        self._insee_code = None
        self._population_total_reference = None
        self._touareg_name = None
        self._political_seats = None
        self._distance_to_douglas = None
        self._algerian_name = None
        self._other_language = None
        self._ofs_code = None
        self._touareg_settlement_name = None
        self._distance_to_belfast = None
        self._prov_code = None
        self._largest_metro = None
        self._label = None
        self._mozabite_name = None
        self._highest_point = None
        self._bourgmestre = None
        self._summer_temperature = None
        self._finnish_name = None
        self._tamazight_settlement_name = None
        self._canton = None
        self._administrative_district = None
        self._agglomeration_population_year = None
        self.discriminator = None

        self.irish_name = irish_name
        self.reff_bourgmestre = reff_bourgmestre
        self.wilaya = wilaya
        self.same_name = same_name
        self.geoloc_department = geoloc_department
        self.cornish_name = cornish_name
        self.official_name = official_name
        self.type = type
        self.minority = minority
        self.lowest_point = lowest_point
        self.agglomeration_population = agglomeration_population
        self.distance_to_cardiff = distance_to_cardiff
        self.daira = daira
        self.meaning = meaning
        self.dutch_name = dutch_name
        self.manx_name = manx_name
        self.code_settlement = code_settlement
        self.winter_temperature = winter_temperature
        if id is not None:
            self.id = id
        self.twin_city = twin_city
        self.day = day
        self.distance_to_charing_cross = distance_to_charing_cross
        self.distance_to_london = distance_to_london
        self.distance_to_dublin = distance_to_dublin
        self.sharing_out_name = sharing_out_name
        self.distance_to_capital = distance_to_capital
        self.distance_to_edinburgh = distance_to_edinburgh
        self.other_information = other_information
        self.gaelic_name = gaelic_name
        self.coast_line = coast_line
        self.kabyle_name = kabyle_name
        self.association_of_local_government = association_of_local_government
        self.iso_code_region = iso_code_region
        self.administrative_collectivity = administrative_collectivity
        self.merged_settlement = merged_settlement
        self.joint_community = joint_community
        self.federal_state = federal_state
        self.welsh_name = welsh_name
        self.collectivity_minority = collectivity_minority
        self.chaoui_name = chaoui_name
        self.scottish_name = scottish_name
        self.english_name = english_name
        self.algerian_settlement_name = algerian_settlement_name
        self.patron_saint = patron_saint
        self.phone_prefix_label = phone_prefix_label
        self.commune = commune
        self.description = description
        self.frazioni = frazioni
        self.political_majority = political_majority
        self.arabic_name = arabic_name
        self.tamazight_name = tamazight_name
        self.insee_code = insee_code
        self.population_total_reference = population_total_reference
        self.touareg_name = touareg_name
        self.political_seats = political_seats
        self.distance_to_douglas = distance_to_douglas
        self.algerian_name = algerian_name
        self.other_language = other_language
        self.ofs_code = ofs_code
        self.touareg_settlement_name = touareg_settlement_name
        self.distance_to_belfast = distance_to_belfast
        self.prov_code = prov_code
        self.largest_metro = largest_metro
        self.label = label
        self.mozabite_name = mozabite_name
        self.highest_point = highest_point
        self.bourgmestre = bourgmestre
        self.summer_temperature = summer_temperature
        self.finnish_name = finnish_name
        self.tamazight_settlement_name = tamazight_settlement_name
        self.canton = canton
        self.administrative_district = administrative_district
        self.agglomeration_population_year = agglomeration_population_year

    @property
    def irish_name(self):
        """Gets the irish_name of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The irish_name of this Settlement.  # noqa: E501
        :rtype: list[str]
        """
        return self._irish_name

    @irish_name.setter
    def irish_name(self, irish_name):
        """Sets the irish_name of this Settlement.

        Description not available  # noqa: E501

        :param irish_name: The irish_name of this Settlement.  # noqa: E501
        :type: list[str]
        """

        self._irish_name = irish_name

    @property
    def reff_bourgmestre(self):
        """Gets the reff_bourgmestre of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The reff_bourgmestre of this Settlement.  # noqa: E501
        :rtype: list[object]
        """
        return self._reff_bourgmestre

    @reff_bourgmestre.setter
    def reff_bourgmestre(self, reff_bourgmestre):
        """Sets the reff_bourgmestre of this Settlement.

        Description not available  # noqa: E501

        :param reff_bourgmestre: The reff_bourgmestre of this Settlement.  # noqa: E501
        :type: list[object]
        """

        self._reff_bourgmestre = reff_bourgmestre

    @property
    def wilaya(self):
        """Gets the wilaya of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The wilaya of this Settlement.  # noqa: E501
        :rtype: list[object]
        """
        return self._wilaya

    @wilaya.setter
    def wilaya(self, wilaya):
        """Sets the wilaya of this Settlement.

        Description not available  # noqa: E501

        :param wilaya: The wilaya of this Settlement.  # noqa: E501
        :type: list[object]
        """

        self._wilaya = wilaya

    @property
    def same_name(self):
        """Gets the same_name of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The same_name of this Settlement.  # noqa: E501
        :rtype: list[str]
        """
        return self._same_name

    @same_name.setter
    def same_name(self, same_name):
        """Sets the same_name of this Settlement.

        Description not available  # noqa: E501

        :param same_name: The same_name of this Settlement.  # noqa: E501
        :type: list[str]
        """

        self._same_name = same_name

    @property
    def geoloc_department(self):
        """Gets the geoloc_department of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The geoloc_department of this Settlement.  # noqa: E501
        :rtype: list[object]
        """
        return self._geoloc_department

    @geoloc_department.setter
    def geoloc_department(self, geoloc_department):
        """Sets the geoloc_department of this Settlement.

        Description not available  # noqa: E501

        :param geoloc_department: The geoloc_department of this Settlement.  # noqa: E501
        :type: list[object]
        """

        self._geoloc_department = geoloc_department

    @property
    def cornish_name(self):
        """Gets the cornish_name of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The cornish_name of this Settlement.  # noqa: E501
        :rtype: list[str]
        """
        return self._cornish_name

    @cornish_name.setter
    def cornish_name(self, cornish_name):
        """Sets the cornish_name of this Settlement.

        Description not available  # noqa: E501

        :param cornish_name: The cornish_name of this Settlement.  # noqa: E501
        :type: list[str]
        """

        self._cornish_name = cornish_name

    @property
    def official_name(self):
        """Gets the official_name of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The official_name of this Settlement.  # noqa: E501
        :rtype: list[str]
        """
        return self._official_name

    @official_name.setter
    def official_name(self, official_name):
        """Sets the official_name of this Settlement.

        Description not available  # noqa: E501

        :param official_name: The official_name of this Settlement.  # noqa: E501
        :type: list[str]
        """

        self._official_name = official_name

    @property
    def type(self):
        """Gets the type of this Settlement.  # noqa: E501

        type of the resource  # noqa: E501

        :return: The type of this Settlement.  # noqa: E501
        :rtype: list[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Settlement.

        type of the resource  # noqa: E501

        :param type: The type of this Settlement.  # noqa: E501
        :type: list[str]
        """

        self._type = type

    @property
    def minority(self):
        """Gets the minority of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The minority of this Settlement.  # noqa: E501
        :rtype: list[object]
        """
        return self._minority

    @minority.setter
    def minority(self, minority):
        """Sets the minority of this Settlement.

        Description not available  # noqa: E501

        :param minority: The minority of this Settlement.  # noqa: E501
        :type: list[object]
        """

        self._minority = minority

    @property
    def lowest_point(self):
        """Gets the lowest_point of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The lowest_point of this Settlement.  # noqa: E501
        :rtype: list[object]
        """
        return self._lowest_point

    @lowest_point.setter
    def lowest_point(self, lowest_point):
        """Sets the lowest_point of this Settlement.

        Description not available  # noqa: E501

        :param lowest_point: The lowest_point of this Settlement.  # noqa: E501
        :type: list[object]
        """

        self._lowest_point = lowest_point

    @property
    def agglomeration_population(self):
        """Gets the agglomeration_population of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The agglomeration_population of this Settlement.  # noqa: E501
        :rtype: list[object]
        """
        return self._agglomeration_population

    @agglomeration_population.setter
    def agglomeration_population(self, agglomeration_population):
        """Sets the agglomeration_population of this Settlement.

        Description not available  # noqa: E501

        :param agglomeration_population: The agglomeration_population of this Settlement.  # noqa: E501
        :type: list[object]
        """

        self._agglomeration_population = agglomeration_population

    @property
    def distance_to_cardiff(self):
        """Gets the distance_to_cardiff of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The distance_to_cardiff of this Settlement.  # noqa: E501
        :rtype: list[float]
        """
        return self._distance_to_cardiff

    @distance_to_cardiff.setter
    def distance_to_cardiff(self, distance_to_cardiff):
        """Sets the distance_to_cardiff of this Settlement.

        Description not available  # noqa: E501

        :param distance_to_cardiff: The distance_to_cardiff of this Settlement.  # noqa: E501
        :type: list[float]
        """

        self._distance_to_cardiff = distance_to_cardiff

    @property
    def daira(self):
        """Gets the daira of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The daira of this Settlement.  # noqa: E501
        :rtype: list[object]
        """
        return self._daira

    @daira.setter
    def daira(self, daira):
        """Sets the daira of this Settlement.

        Description not available  # noqa: E501

        :param daira: The daira of this Settlement.  # noqa: E501
        :type: list[object]
        """

        self._daira = daira

    @property
    def meaning(self):
        """Gets the meaning of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The meaning of this Settlement.  # noqa: E501
        :rtype: list[str]
        """
        return self._meaning

    @meaning.setter
    def meaning(self, meaning):
        """Sets the meaning of this Settlement.

        Description not available  # noqa: E501

        :param meaning: The meaning of this Settlement.  # noqa: E501
        :type: list[str]
        """

        self._meaning = meaning

    @property
    def dutch_name(self):
        """Gets the dutch_name of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The dutch_name of this Settlement.  # noqa: E501
        :rtype: list[str]
        """
        return self._dutch_name

    @dutch_name.setter
    def dutch_name(self, dutch_name):
        """Sets the dutch_name of this Settlement.

        Description not available  # noqa: E501

        :param dutch_name: The dutch_name of this Settlement.  # noqa: E501
        :type: list[str]
        """

        self._dutch_name = dutch_name

    @property
    def manx_name(self):
        """Gets the manx_name of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The manx_name of this Settlement.  # noqa: E501
        :rtype: list[str]
        """
        return self._manx_name

    @manx_name.setter
    def manx_name(self, manx_name):
        """Sets the manx_name of this Settlement.

        Description not available  # noqa: E501

        :param manx_name: The manx_name of this Settlement.  # noqa: E501
        :type: list[str]
        """

        self._manx_name = manx_name

    @property
    def code_settlement(self):
        """Gets the code_settlement of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The code_settlement of this Settlement.  # noqa: E501
        :rtype: list[str]
        """
        return self._code_settlement

    @code_settlement.setter
    def code_settlement(self, code_settlement):
        """Sets the code_settlement of this Settlement.

        Description not available  # noqa: E501

        :param code_settlement: The code_settlement of this Settlement.  # noqa: E501
        :type: list[str]
        """

        self._code_settlement = code_settlement

    @property
    def winter_temperature(self):
        """Gets the winter_temperature of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The winter_temperature of this Settlement.  # noqa: E501
        :rtype: list[float]
        """
        return self._winter_temperature

    @winter_temperature.setter
    def winter_temperature(self, winter_temperature):
        """Sets the winter_temperature of this Settlement.

        Description not available  # noqa: E501

        :param winter_temperature: The winter_temperature of this Settlement.  # noqa: E501
        :type: list[float]
        """

        self._winter_temperature = winter_temperature

    @property
    def id(self):
        """Gets the id of this Settlement.  # noqa: E501

        identifier  # noqa: E501

        :return: The id of this Settlement.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Settlement.

        identifier  # noqa: E501

        :param id: The id of this Settlement.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def twin_city(self):
        """Gets the twin_city of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The twin_city of this Settlement.  # noqa: E501
        :rtype: list[object]
        """
        return self._twin_city

    @twin_city.setter
    def twin_city(self, twin_city):
        """Sets the twin_city of this Settlement.

        Description not available  # noqa: E501

        :param twin_city: The twin_city of this Settlement.  # noqa: E501
        :type: list[object]
        """

        self._twin_city = twin_city

    @property
    def day(self):
        """Gets the day of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The day of this Settlement.  # noqa: E501
        :rtype: list[str]
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this Settlement.

        Description not available  # noqa: E501

        :param day: The day of this Settlement.  # noqa: E501
        :type: list[str]
        """

        self._day = day

    @property
    def distance_to_charing_cross(self):
        """Gets the distance_to_charing_cross of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The distance_to_charing_cross of this Settlement.  # noqa: E501
        :rtype: list[float]
        """
        return self._distance_to_charing_cross

    @distance_to_charing_cross.setter
    def distance_to_charing_cross(self, distance_to_charing_cross):
        """Sets the distance_to_charing_cross of this Settlement.

        Description not available  # noqa: E501

        :param distance_to_charing_cross: The distance_to_charing_cross of this Settlement.  # noqa: E501
        :type: list[float]
        """

        self._distance_to_charing_cross = distance_to_charing_cross

    @property
    def distance_to_london(self):
        """Gets the distance_to_london of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The distance_to_london of this Settlement.  # noqa: E501
        :rtype: list[float]
        """
        return self._distance_to_london

    @distance_to_london.setter
    def distance_to_london(self, distance_to_london):
        """Sets the distance_to_london of this Settlement.

        Description not available  # noqa: E501

        :param distance_to_london: The distance_to_london of this Settlement.  # noqa: E501
        :type: list[float]
        """

        self._distance_to_london = distance_to_london

    @property
    def distance_to_dublin(self):
        """Gets the distance_to_dublin of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The distance_to_dublin of this Settlement.  # noqa: E501
        :rtype: list[float]
        """
        return self._distance_to_dublin

    @distance_to_dublin.setter
    def distance_to_dublin(self, distance_to_dublin):
        """Sets the distance_to_dublin of this Settlement.

        Description not available  # noqa: E501

        :param distance_to_dublin: The distance_to_dublin of this Settlement.  # noqa: E501
        :type: list[float]
        """

        self._distance_to_dublin = distance_to_dublin

    @property
    def sharing_out_name(self):
        """Gets the sharing_out_name of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The sharing_out_name of this Settlement.  # noqa: E501
        :rtype: list[object]
        """
        return self._sharing_out_name

    @sharing_out_name.setter
    def sharing_out_name(self, sharing_out_name):
        """Sets the sharing_out_name of this Settlement.

        Description not available  # noqa: E501

        :param sharing_out_name: The sharing_out_name of this Settlement.  # noqa: E501
        :type: list[object]
        """

        self._sharing_out_name = sharing_out_name

    @property
    def distance_to_capital(self):
        """Gets the distance_to_capital of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The distance_to_capital of this Settlement.  # noqa: E501
        :rtype: list[float]
        """
        return self._distance_to_capital

    @distance_to_capital.setter
    def distance_to_capital(self, distance_to_capital):
        """Sets the distance_to_capital of this Settlement.

        Description not available  # noqa: E501

        :param distance_to_capital: The distance_to_capital of this Settlement.  # noqa: E501
        :type: list[float]
        """

        self._distance_to_capital = distance_to_capital

    @property
    def distance_to_edinburgh(self):
        """Gets the distance_to_edinburgh of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The distance_to_edinburgh of this Settlement.  # noqa: E501
        :rtype: list[float]
        """
        return self._distance_to_edinburgh

    @distance_to_edinburgh.setter
    def distance_to_edinburgh(self, distance_to_edinburgh):
        """Sets the distance_to_edinburgh of this Settlement.

        Description not available  # noqa: E501

        :param distance_to_edinburgh: The distance_to_edinburgh of this Settlement.  # noqa: E501
        :type: list[float]
        """

        self._distance_to_edinburgh = distance_to_edinburgh

    @property
    def other_information(self):
        """Gets the other_information of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The other_information of this Settlement.  # noqa: E501
        :rtype: list[str]
        """
        return self._other_information

    @other_information.setter
    def other_information(self, other_information):
        """Sets the other_information of this Settlement.

        Description not available  # noqa: E501

        :param other_information: The other_information of this Settlement.  # noqa: E501
        :type: list[str]
        """

        self._other_information = other_information

    @property
    def gaelic_name(self):
        """Gets the gaelic_name of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The gaelic_name of this Settlement.  # noqa: E501
        :rtype: list[str]
        """
        return self._gaelic_name

    @gaelic_name.setter
    def gaelic_name(self, gaelic_name):
        """Sets the gaelic_name of this Settlement.

        Description not available  # noqa: E501

        :param gaelic_name: The gaelic_name of this Settlement.  # noqa: E501
        :type: list[str]
        """

        self._gaelic_name = gaelic_name

    @property
    def coast_line(self):
        """Gets the coast_line of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The coast_line of this Settlement.  # noqa: E501
        :rtype: list[float]
        """
        return self._coast_line

    @coast_line.setter
    def coast_line(self, coast_line):
        """Sets the coast_line of this Settlement.

        Description not available  # noqa: E501

        :param coast_line: The coast_line of this Settlement.  # noqa: E501
        :type: list[float]
        """

        self._coast_line = coast_line

    @property
    def kabyle_name(self):
        """Gets the kabyle_name of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The kabyle_name of this Settlement.  # noqa: E501
        :rtype: list[str]
        """
        return self._kabyle_name

    @kabyle_name.setter
    def kabyle_name(self, kabyle_name):
        """Sets the kabyle_name of this Settlement.

        Description not available  # noqa: E501

        :param kabyle_name: The kabyle_name of this Settlement.  # noqa: E501
        :type: list[str]
        """

        self._kabyle_name = kabyle_name

    @property
    def association_of_local_government(self):
        """Gets the association_of_local_government of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The association_of_local_government of this Settlement.  # noqa: E501
        :rtype: list[object]
        """
        return self._association_of_local_government

    @association_of_local_government.setter
    def association_of_local_government(self, association_of_local_government):
        """Sets the association_of_local_government of this Settlement.

        Description not available  # noqa: E501

        :param association_of_local_government: The association_of_local_government of this Settlement.  # noqa: E501
        :type: list[object]
        """

        self._association_of_local_government = association_of_local_government

    @property
    def iso_code_region(self):
        """Gets the iso_code_region of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The iso_code_region of this Settlement.  # noqa: E501
        :rtype: list[object]
        """
        return self._iso_code_region

    @iso_code_region.setter
    def iso_code_region(self, iso_code_region):
        """Sets the iso_code_region of this Settlement.

        Description not available  # noqa: E501

        :param iso_code_region: The iso_code_region of this Settlement.  # noqa: E501
        :type: list[object]
        """

        self._iso_code_region = iso_code_region

    @property
    def administrative_collectivity(self):
        """Gets the administrative_collectivity of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The administrative_collectivity of this Settlement.  # noqa: E501
        :rtype: list[object]
        """
        return self._administrative_collectivity

    @administrative_collectivity.setter
    def administrative_collectivity(self, administrative_collectivity):
        """Sets the administrative_collectivity of this Settlement.

        Description not available  # noqa: E501

        :param administrative_collectivity: The administrative_collectivity of this Settlement.  # noqa: E501
        :type: list[object]
        """

        self._administrative_collectivity = administrative_collectivity

    @property
    def merged_settlement(self):
        """Gets the merged_settlement of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The merged_settlement of this Settlement.  # noqa: E501
        :rtype: list[object]
        """
        return self._merged_settlement

    @merged_settlement.setter
    def merged_settlement(self, merged_settlement):
        """Sets the merged_settlement of this Settlement.

        Description not available  # noqa: E501

        :param merged_settlement: The merged_settlement of this Settlement.  # noqa: E501
        :type: list[object]
        """

        self._merged_settlement = merged_settlement

    @property
    def joint_community(self):
        """Gets the joint_community of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The joint_community of this Settlement.  # noqa: E501
        :rtype: list[object]
        """
        return self._joint_community

    @joint_community.setter
    def joint_community(self, joint_community):
        """Sets the joint_community of this Settlement.

        Description not available  # noqa: E501

        :param joint_community: The joint_community of this Settlement.  # noqa: E501
        :type: list[object]
        """

        self._joint_community = joint_community

    @property
    def federal_state(self):
        """Gets the federal_state of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The federal_state of this Settlement.  # noqa: E501
        :rtype: list[object]
        """
        return self._federal_state

    @federal_state.setter
    def federal_state(self, federal_state):
        """Sets the federal_state of this Settlement.

        Description not available  # noqa: E501

        :param federal_state: The federal_state of this Settlement.  # noqa: E501
        :type: list[object]
        """

        self._federal_state = federal_state

    @property
    def welsh_name(self):
        """Gets the welsh_name of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The welsh_name of this Settlement.  # noqa: E501
        :rtype: list[str]
        """
        return self._welsh_name

    @welsh_name.setter
    def welsh_name(self, welsh_name):
        """Sets the welsh_name of this Settlement.

        Description not available  # noqa: E501

        :param welsh_name: The welsh_name of this Settlement.  # noqa: E501
        :type: list[str]
        """

        self._welsh_name = welsh_name

    @property
    def collectivity_minority(self):
        """Gets the collectivity_minority of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The collectivity_minority of this Settlement.  # noqa: E501
        :rtype: list[object]
        """
        return self._collectivity_minority

    @collectivity_minority.setter
    def collectivity_minority(self, collectivity_minority):
        """Sets the collectivity_minority of this Settlement.

        Description not available  # noqa: E501

        :param collectivity_minority: The collectivity_minority of this Settlement.  # noqa: E501
        :type: list[object]
        """

        self._collectivity_minority = collectivity_minority

    @property
    def chaoui_name(self):
        """Gets the chaoui_name of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The chaoui_name of this Settlement.  # noqa: E501
        :rtype: list[str]
        """
        return self._chaoui_name

    @chaoui_name.setter
    def chaoui_name(self, chaoui_name):
        """Sets the chaoui_name of this Settlement.

        Description not available  # noqa: E501

        :param chaoui_name: The chaoui_name of this Settlement.  # noqa: E501
        :type: list[str]
        """

        self._chaoui_name = chaoui_name

    @property
    def scottish_name(self):
        """Gets the scottish_name of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The scottish_name of this Settlement.  # noqa: E501
        :rtype: list[str]
        """
        return self._scottish_name

    @scottish_name.setter
    def scottish_name(self, scottish_name):
        """Sets the scottish_name of this Settlement.

        Description not available  # noqa: E501

        :param scottish_name: The scottish_name of this Settlement.  # noqa: E501
        :type: list[str]
        """

        self._scottish_name = scottish_name

    @property
    def english_name(self):
        """Gets the english_name of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The english_name of this Settlement.  # noqa: E501
        :rtype: list[str]
        """
        return self._english_name

    @english_name.setter
    def english_name(self, english_name):
        """Sets the english_name of this Settlement.

        Description not available  # noqa: E501

        :param english_name: The english_name of this Settlement.  # noqa: E501
        :type: list[str]
        """

        self._english_name = english_name

    @property
    def algerian_settlement_name(self):
        """Gets the algerian_settlement_name of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The algerian_settlement_name of this Settlement.  # noqa: E501
        :rtype: list[str]
        """
        return self._algerian_settlement_name

    @algerian_settlement_name.setter
    def algerian_settlement_name(self, algerian_settlement_name):
        """Sets the algerian_settlement_name of this Settlement.

        Description not available  # noqa: E501

        :param algerian_settlement_name: The algerian_settlement_name of this Settlement.  # noqa: E501
        :type: list[str]
        """

        self._algerian_settlement_name = algerian_settlement_name

    @property
    def patron_saint(self):
        """Gets the patron_saint of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The patron_saint of this Settlement.  # noqa: E501
        :rtype: list[object]
        """
        return self._patron_saint

    @patron_saint.setter
    def patron_saint(self, patron_saint):
        """Sets the patron_saint of this Settlement.

        Description not available  # noqa: E501

        :param patron_saint: The patron_saint of this Settlement.  # noqa: E501
        :type: list[object]
        """

        self._patron_saint = patron_saint

    @property
    def phone_prefix_label(self):
        """Gets the phone_prefix_label of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The phone_prefix_label of this Settlement.  # noqa: E501
        :rtype: list[str]
        """
        return self._phone_prefix_label

    @phone_prefix_label.setter
    def phone_prefix_label(self, phone_prefix_label):
        """Sets the phone_prefix_label of this Settlement.

        Description not available  # noqa: E501

        :param phone_prefix_label: The phone_prefix_label of this Settlement.  # noqa: E501
        :type: list[str]
        """

        self._phone_prefix_label = phone_prefix_label

    @property
    def commune(self):
        """Gets the commune of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The commune of this Settlement.  # noqa: E501
        :rtype: list[object]
        """
        return self._commune

    @commune.setter
    def commune(self, commune):
        """Sets the commune of this Settlement.

        Description not available  # noqa: E501

        :param commune: The commune of this Settlement.  # noqa: E501
        :type: list[object]
        """

        self._commune = commune

    @property
    def description(self):
        """Gets the description of this Settlement.  # noqa: E501

        small description  # noqa: E501

        :return: The description of this Settlement.  # noqa: E501
        :rtype: list[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Settlement.

        small description  # noqa: E501

        :param description: The description of this Settlement.  # noqa: E501
        :type: list[str]
        """

        self._description = description

    @property
    def frazioni(self):
        """Gets the frazioni of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The frazioni of this Settlement.  # noqa: E501
        :rtype: list[object]
        """
        return self._frazioni

    @frazioni.setter
    def frazioni(self, frazioni):
        """Sets the frazioni of this Settlement.

        Description not available  # noqa: E501

        :param frazioni: The frazioni of this Settlement.  # noqa: E501
        :type: list[object]
        """

        self._frazioni = frazioni

    @property
    def political_majority(self):
        """Gets the political_majority of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The political_majority of this Settlement.  # noqa: E501
        :rtype: list[object]
        """
        return self._political_majority

    @political_majority.setter
    def political_majority(self, political_majority):
        """Sets the political_majority of this Settlement.

        Description not available  # noqa: E501

        :param political_majority: The political_majority of this Settlement.  # noqa: E501
        :type: list[object]
        """

        self._political_majority = political_majority

    @property
    def arabic_name(self):
        """Gets the arabic_name of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The arabic_name of this Settlement.  # noqa: E501
        :rtype: list[str]
        """
        return self._arabic_name

    @arabic_name.setter
    def arabic_name(self, arabic_name):
        """Sets the arabic_name of this Settlement.

        Description not available  # noqa: E501

        :param arabic_name: The arabic_name of this Settlement.  # noqa: E501
        :type: list[str]
        """

        self._arabic_name = arabic_name

    @property
    def tamazight_name(self):
        """Gets the tamazight_name of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The tamazight_name of this Settlement.  # noqa: E501
        :rtype: list[str]
        """
        return self._tamazight_name

    @tamazight_name.setter
    def tamazight_name(self, tamazight_name):
        """Sets the tamazight_name of this Settlement.

        Description not available  # noqa: E501

        :param tamazight_name: The tamazight_name of this Settlement.  # noqa: E501
        :type: list[str]
        """

        self._tamazight_name = tamazight_name

    @property
    def insee_code(self):
        """Gets the insee_code of this Settlement.  # noqa: E501

        numerical indexing code used by the French National Institute for Statistics and Economic Studies (INSEE) to identify various entities  # noqa: E501

        :return: The insee_code of this Settlement.  # noqa: E501
        :rtype: list[int]
        """
        return self._insee_code

    @insee_code.setter
    def insee_code(self, insee_code):
        """Sets the insee_code of this Settlement.

        numerical indexing code used by the French National Institute for Statistics and Economic Studies (INSEE) to identify various entities  # noqa: E501

        :param insee_code: The insee_code of this Settlement.  # noqa: E501
        :type: list[int]
        """

        self._insee_code = insee_code

    @property
    def population_total_reference(self):
        """Gets the population_total_reference of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The population_total_reference of this Settlement.  # noqa: E501
        :rtype: list[object]
        """
        return self._population_total_reference

    @population_total_reference.setter
    def population_total_reference(self, population_total_reference):
        """Sets the population_total_reference of this Settlement.

        Description not available  # noqa: E501

        :param population_total_reference: The population_total_reference of this Settlement.  # noqa: E501
        :type: list[object]
        """

        self._population_total_reference = population_total_reference

    @property
    def touareg_name(self):
        """Gets the touareg_name of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The touareg_name of this Settlement.  # noqa: E501
        :rtype: list[str]
        """
        return self._touareg_name

    @touareg_name.setter
    def touareg_name(self, touareg_name):
        """Sets the touareg_name of this Settlement.

        Description not available  # noqa: E501

        :param touareg_name: The touareg_name of this Settlement.  # noqa: E501
        :type: list[str]
        """

        self._touareg_name = touareg_name

    @property
    def political_seats(self):
        """Gets the political_seats of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The political_seats of this Settlement.  # noqa: E501
        :rtype: list[int]
        """
        return self._political_seats

    @political_seats.setter
    def political_seats(self, political_seats):
        """Sets the political_seats of this Settlement.

        Description not available  # noqa: E501

        :param political_seats: The political_seats of this Settlement.  # noqa: E501
        :type: list[int]
        """

        self._political_seats = political_seats

    @property
    def distance_to_douglas(self):
        """Gets the distance_to_douglas of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The distance_to_douglas of this Settlement.  # noqa: E501
        :rtype: list[float]
        """
        return self._distance_to_douglas

    @distance_to_douglas.setter
    def distance_to_douglas(self, distance_to_douglas):
        """Sets the distance_to_douglas of this Settlement.

        Description not available  # noqa: E501

        :param distance_to_douglas: The distance_to_douglas of this Settlement.  # noqa: E501
        :type: list[float]
        """

        self._distance_to_douglas = distance_to_douglas

    @property
    def algerian_name(self):
        """Gets the algerian_name of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The algerian_name of this Settlement.  # noqa: E501
        :rtype: list[str]
        """
        return self._algerian_name

    @algerian_name.setter
    def algerian_name(self, algerian_name):
        """Sets the algerian_name of this Settlement.

        Description not available  # noqa: E501

        :param algerian_name: The algerian_name of this Settlement.  # noqa: E501
        :type: list[str]
        """

        self._algerian_name = algerian_name

    @property
    def other_language(self):
        """Gets the other_language of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The other_language of this Settlement.  # noqa: E501
        :rtype: list[str]
        """
        return self._other_language

    @other_language.setter
    def other_language(self, other_language):
        """Sets the other_language of this Settlement.

        Description not available  # noqa: E501

        :param other_language: The other_language of this Settlement.  # noqa: E501
        :type: list[str]
        """

        self._other_language = other_language

    @property
    def ofs_code(self):
        """Gets the ofs_code of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The ofs_code of this Settlement.  # noqa: E501
        :rtype: list[str]
        """
        return self._ofs_code

    @ofs_code.setter
    def ofs_code(self, ofs_code):
        """Sets the ofs_code of this Settlement.

        Description not available  # noqa: E501

        :param ofs_code: The ofs_code of this Settlement.  # noqa: E501
        :type: list[str]
        """

        self._ofs_code = ofs_code

    @property
    def touareg_settlement_name(self):
        """Gets the touareg_settlement_name of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The touareg_settlement_name of this Settlement.  # noqa: E501
        :rtype: list[str]
        """
        return self._touareg_settlement_name

    @touareg_settlement_name.setter
    def touareg_settlement_name(self, touareg_settlement_name):
        """Sets the touareg_settlement_name of this Settlement.

        Description not available  # noqa: E501

        :param touareg_settlement_name: The touareg_settlement_name of this Settlement.  # noqa: E501
        :type: list[str]
        """

        self._touareg_settlement_name = touareg_settlement_name

    @property
    def distance_to_belfast(self):
        """Gets the distance_to_belfast of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The distance_to_belfast of this Settlement.  # noqa: E501
        :rtype: list[float]
        """
        return self._distance_to_belfast

    @distance_to_belfast.setter
    def distance_to_belfast(self, distance_to_belfast):
        """Sets the distance_to_belfast of this Settlement.

        Description not available  # noqa: E501

        :param distance_to_belfast: The distance_to_belfast of this Settlement.  # noqa: E501
        :type: list[float]
        """

        self._distance_to_belfast = distance_to_belfast

    @property
    def prov_code(self):
        """Gets the prov_code of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The prov_code of this Settlement.  # noqa: E501
        :rtype: list[str]
        """
        return self._prov_code

    @prov_code.setter
    def prov_code(self, prov_code):
        """Sets the prov_code of this Settlement.

        Description not available  # noqa: E501

        :param prov_code: The prov_code of this Settlement.  # noqa: E501
        :type: list[str]
        """

        self._prov_code = prov_code

    @property
    def largest_metro(self):
        """Gets the largest_metro of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The largest_metro of this Settlement.  # noqa: E501
        :rtype: list[object]
        """
        return self._largest_metro

    @largest_metro.setter
    def largest_metro(self, largest_metro):
        """Sets the largest_metro of this Settlement.

        Description not available  # noqa: E501

        :param largest_metro: The largest_metro of this Settlement.  # noqa: E501
        :type: list[object]
        """

        self._largest_metro = largest_metro

    @property
    def label(self):
        """Gets the label of this Settlement.  # noqa: E501

        short description of the resource  # noqa: E501

        :return: The label of this Settlement.  # noqa: E501
        :rtype: list[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Settlement.

        short description of the resource  # noqa: E501

        :param label: The label of this Settlement.  # noqa: E501
        :type: list[str]
        """

        self._label = label

    @property
    def mozabite_name(self):
        """Gets the mozabite_name of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The mozabite_name of this Settlement.  # noqa: E501
        :rtype: list[str]
        """
        return self._mozabite_name

    @mozabite_name.setter
    def mozabite_name(self, mozabite_name):
        """Sets the mozabite_name of this Settlement.

        Description not available  # noqa: E501

        :param mozabite_name: The mozabite_name of this Settlement.  # noqa: E501
        :type: list[str]
        """

        self._mozabite_name = mozabite_name

    @property
    def highest_point(self):
        """Gets the highest_point of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The highest_point of this Settlement.  # noqa: E501
        :rtype: list[object]
        """
        return self._highest_point

    @highest_point.setter
    def highest_point(self, highest_point):
        """Sets the highest_point of this Settlement.

        Description not available  # noqa: E501

        :param highest_point: The highest_point of this Settlement.  # noqa: E501
        :type: list[object]
        """

        self._highest_point = highest_point

    @property
    def bourgmestre(self):
        """Gets the bourgmestre of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The bourgmestre of this Settlement.  # noqa: E501
        :rtype: list[object]
        """
        return self._bourgmestre

    @bourgmestre.setter
    def bourgmestre(self, bourgmestre):
        """Sets the bourgmestre of this Settlement.

        Description not available  # noqa: E501

        :param bourgmestre: The bourgmestre of this Settlement.  # noqa: E501
        :type: list[object]
        """

        self._bourgmestre = bourgmestre

    @property
    def summer_temperature(self):
        """Gets the summer_temperature of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The summer_temperature of this Settlement.  # noqa: E501
        :rtype: list[float]
        """
        return self._summer_temperature

    @summer_temperature.setter
    def summer_temperature(self, summer_temperature):
        """Sets the summer_temperature of this Settlement.

        Description not available  # noqa: E501

        :param summer_temperature: The summer_temperature of this Settlement.  # noqa: E501
        :type: list[float]
        """

        self._summer_temperature = summer_temperature

    @property
    def finnish_name(self):
        """Gets the finnish_name of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The finnish_name of this Settlement.  # noqa: E501
        :rtype: list[str]
        """
        return self._finnish_name

    @finnish_name.setter
    def finnish_name(self, finnish_name):
        """Sets the finnish_name of this Settlement.

        Description not available  # noqa: E501

        :param finnish_name: The finnish_name of this Settlement.  # noqa: E501
        :type: list[str]
        """

        self._finnish_name = finnish_name

    @property
    def tamazight_settlement_name(self):
        """Gets the tamazight_settlement_name of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The tamazight_settlement_name of this Settlement.  # noqa: E501
        :rtype: list[str]
        """
        return self._tamazight_settlement_name

    @tamazight_settlement_name.setter
    def tamazight_settlement_name(self, tamazight_settlement_name):
        """Sets the tamazight_settlement_name of this Settlement.

        Description not available  # noqa: E501

        :param tamazight_settlement_name: The tamazight_settlement_name of this Settlement.  # noqa: E501
        :type: list[str]
        """

        self._tamazight_settlement_name = tamazight_settlement_name

    @property
    def canton(self):
        """Gets the canton of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The canton of this Settlement.  # noqa: E501
        :rtype: list[object]
        """
        return self._canton

    @canton.setter
    def canton(self, canton):
        """Sets the canton of this Settlement.

        Description not available  # noqa: E501

        :param canton: The canton of this Settlement.  # noqa: E501
        :type: list[object]
        """

        self._canton = canton

    @property
    def administrative_district(self):
        """Gets the administrative_district of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The administrative_district of this Settlement.  # noqa: E501
        :rtype: list[object]
        """
        return self._administrative_district

    @administrative_district.setter
    def administrative_district(self, administrative_district):
        """Sets the administrative_district of this Settlement.

        Description not available  # noqa: E501

        :param administrative_district: The administrative_district of this Settlement.  # noqa: E501
        :type: list[object]
        """

        self._administrative_district = administrative_district

    @property
    def agglomeration_population_year(self):
        """Gets the agglomeration_population_year of this Settlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The agglomeration_population_year of this Settlement.  # noqa: E501
        :rtype: list[str]
        """
        return self._agglomeration_population_year

    @agglomeration_population_year.setter
    def agglomeration_population_year(self, agglomeration_population_year):
        """Sets the agglomeration_population_year of this Settlement.

        Description not available  # noqa: E501

        :param agglomeration_population_year: The agglomeration_population_year of this Settlement.  # noqa: E501
        :type: list[str]
        """

        self._agglomeration_population_year = agglomeration_population_year

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Settlement):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Settlement):
            return True

        return self.to_dict() != other.to_dict()
