# coding: utf-8

"""
    DBpedia

    This is the API of the DBpedia Ontology  # noqa: E501

    The version of the OpenAPI document: v0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dbpedia.configuration import Configuration


class Constellation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'number_of_stars': 'list[int]',
        'periapsis': 'list[float]',
        'absolute_magnitude': 'list[float]',
        'orbital_eccentricity': 'list[float]',
        'description': 'list[str]',
        'right_ascension': 'list[int]',
        'label': 'list[str]',
        'neighbour_constellations': 'list[str]',
        'type': 'list[str]',
        'max_absolute_magnitude': 'list[float]',
        'apoapsis': 'list[float]',
        'declination': 'list[int]',
        'von_klitzing_constant': 'list[float]',
        'messier_name': 'list[str]',
        'max_apparent_magnitude': 'list[float]',
        'id': 'str',
        'ngc_name': 'list[str]'
    }

    attribute_map = {
        'number_of_stars': 'numberOfStars',
        'periapsis': 'periapsis',
        'absolute_magnitude': 'absoluteMagnitude',
        'orbital_eccentricity': 'orbitalEccentricity',
        'description': 'description',
        'right_ascension': 'rightAscension',
        'label': 'label',
        'neighbour_constellations': 'neighbourConstellations',
        'type': 'type',
        'max_absolute_magnitude': 'maxAbsoluteMagnitude',
        'apoapsis': 'apoapsis',
        'declination': 'declination',
        'von_klitzing_constant': 'vonKlitzingConstant',
        'messier_name': 'messierName',
        'max_apparent_magnitude': 'maxApparentMagnitude',
        'id': 'id',
        'ngc_name': 'ngcName'
    }

    def __init__(self, number_of_stars=None, periapsis=None, absolute_magnitude=None, orbital_eccentricity=None, description=None, right_ascension=None, label=None, neighbour_constellations=None, type=None, max_absolute_magnitude=None, apoapsis=None, declination=None, von_klitzing_constant=None, messier_name=None, max_apparent_magnitude=None, id=None, ngc_name=None, local_vars_configuration=None):  # noqa: E501
        """Constellation - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._number_of_stars = None
        self._periapsis = None
        self._absolute_magnitude = None
        self._orbital_eccentricity = None
        self._description = None
        self._right_ascension = None
        self._label = None
        self._neighbour_constellations = None
        self._type = None
        self._max_absolute_magnitude = None
        self._apoapsis = None
        self._declination = None
        self._von_klitzing_constant = None
        self._messier_name = None
        self._max_apparent_magnitude = None
        self._id = None
        self._ngc_name = None
        self.discriminator = None

        self.number_of_stars = number_of_stars
        self.periapsis = periapsis
        self.absolute_magnitude = absolute_magnitude
        self.orbital_eccentricity = orbital_eccentricity
        self.description = description
        self.right_ascension = right_ascension
        self.label = label
        self.neighbour_constellations = neighbour_constellations
        self.type = type
        self.max_absolute_magnitude = max_absolute_magnitude
        self.apoapsis = apoapsis
        self.declination = declination
        self.von_klitzing_constant = von_klitzing_constant
        self.messier_name = messier_name
        self.max_apparent_magnitude = max_apparent_magnitude
        if id is not None:
            self.id = id
        self.ngc_name = ngc_name

    @property
    def number_of_stars(self):
        """Gets the number_of_stars of this Constellation.  # noqa: E501

        Description not available  # noqa: E501

        :return: The number_of_stars of this Constellation.  # noqa: E501
        :rtype: list[int]
        """
        return self._number_of_stars

    @number_of_stars.setter
    def number_of_stars(self, number_of_stars):
        """Sets the number_of_stars of this Constellation.

        Description not available  # noqa: E501

        :param number_of_stars: The number_of_stars of this Constellation.  # noqa: E501
        :type: list[int]
        """

        self._number_of_stars = number_of_stars

    @property
    def periapsis(self):
        """Gets the periapsis of this Constellation.  # noqa: E501

        Description not available  # noqa: E501

        :return: The periapsis of this Constellation.  # noqa: E501
        :rtype: list[float]
        """
        return self._periapsis

    @periapsis.setter
    def periapsis(self, periapsis):
        """Sets the periapsis of this Constellation.

        Description not available  # noqa: E501

        :param periapsis: The periapsis of this Constellation.  # noqa: E501
        :type: list[float]
        """

        self._periapsis = periapsis

    @property
    def absolute_magnitude(self):
        """Gets the absolute_magnitude of this Constellation.  # noqa: E501

        Description not available  # noqa: E501

        :return: The absolute_magnitude of this Constellation.  # noqa: E501
        :rtype: list[float]
        """
        return self._absolute_magnitude

    @absolute_magnitude.setter
    def absolute_magnitude(self, absolute_magnitude):
        """Sets the absolute_magnitude of this Constellation.

        Description not available  # noqa: E501

        :param absolute_magnitude: The absolute_magnitude of this Constellation.  # noqa: E501
        :type: list[float]
        """

        self._absolute_magnitude = absolute_magnitude

    @property
    def orbital_eccentricity(self):
        """Gets the orbital_eccentricity of this Constellation.  # noqa: E501

        Description not available  # noqa: E501

        :return: The orbital_eccentricity of this Constellation.  # noqa: E501
        :rtype: list[float]
        """
        return self._orbital_eccentricity

    @orbital_eccentricity.setter
    def orbital_eccentricity(self, orbital_eccentricity):
        """Sets the orbital_eccentricity of this Constellation.

        Description not available  # noqa: E501

        :param orbital_eccentricity: The orbital_eccentricity of this Constellation.  # noqa: E501
        :type: list[float]
        """

        self._orbital_eccentricity = orbital_eccentricity

    @property
    def description(self):
        """Gets the description of this Constellation.  # noqa: E501

        small description  # noqa: E501

        :return: The description of this Constellation.  # noqa: E501
        :rtype: list[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Constellation.

        small description  # noqa: E501

        :param description: The description of this Constellation.  # noqa: E501
        :type: list[str]
        """

        self._description = description

    @property
    def right_ascension(self):
        """Gets the right_ascension of this Constellation.  # noqa: E501

        Description not available  # noqa: E501

        :return: The right_ascension of this Constellation.  # noqa: E501
        :rtype: list[int]
        """
        return self._right_ascension

    @right_ascension.setter
    def right_ascension(self, right_ascension):
        """Sets the right_ascension of this Constellation.

        Description not available  # noqa: E501

        :param right_ascension: The right_ascension of this Constellation.  # noqa: E501
        :type: list[int]
        """

        self._right_ascension = right_ascension

    @property
    def label(self):
        """Gets the label of this Constellation.  # noqa: E501

        short description of the resource  # noqa: E501

        :return: The label of this Constellation.  # noqa: E501
        :rtype: list[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Constellation.

        short description of the resource  # noqa: E501

        :param label: The label of this Constellation.  # noqa: E501
        :type: list[str]
        """

        self._label = label

    @property
    def neighbour_constellations(self):
        """Gets the neighbour_constellations of this Constellation.  # noqa: E501

        Description not available  # noqa: E501

        :return: The neighbour_constellations of this Constellation.  # noqa: E501
        :rtype: list[str]
        """
        return self._neighbour_constellations

    @neighbour_constellations.setter
    def neighbour_constellations(self, neighbour_constellations):
        """Sets the neighbour_constellations of this Constellation.

        Description not available  # noqa: E501

        :param neighbour_constellations: The neighbour_constellations of this Constellation.  # noqa: E501
        :type: list[str]
        """

        self._neighbour_constellations = neighbour_constellations

    @property
    def type(self):
        """Gets the type of this Constellation.  # noqa: E501

        type of the resource  # noqa: E501

        :return: The type of this Constellation.  # noqa: E501
        :rtype: list[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Constellation.

        type of the resource  # noqa: E501

        :param type: The type of this Constellation.  # noqa: E501
        :type: list[str]
        """

        self._type = type

    @property
    def max_absolute_magnitude(self):
        """Gets the max_absolute_magnitude of this Constellation.  # noqa: E501

        Description not available  # noqa: E501

        :return: The max_absolute_magnitude of this Constellation.  # noqa: E501
        :rtype: list[float]
        """
        return self._max_absolute_magnitude

    @max_absolute_magnitude.setter
    def max_absolute_magnitude(self, max_absolute_magnitude):
        """Sets the max_absolute_magnitude of this Constellation.

        Description not available  # noqa: E501

        :param max_absolute_magnitude: The max_absolute_magnitude of this Constellation.  # noqa: E501
        :type: list[float]
        """

        self._max_absolute_magnitude = max_absolute_magnitude

    @property
    def apoapsis(self):
        """Gets the apoapsis of this Constellation.  # noqa: E501

        Description not available  # noqa: E501

        :return: The apoapsis of this Constellation.  # noqa: E501
        :rtype: list[float]
        """
        return self._apoapsis

    @apoapsis.setter
    def apoapsis(self, apoapsis):
        """Sets the apoapsis of this Constellation.

        Description not available  # noqa: E501

        :param apoapsis: The apoapsis of this Constellation.  # noqa: E501
        :type: list[float]
        """

        self._apoapsis = apoapsis

    @property
    def declination(self):
        """Gets the declination of this Constellation.  # noqa: E501

        Description not available  # noqa: E501

        :return: The declination of this Constellation.  # noqa: E501
        :rtype: list[int]
        """
        return self._declination

    @declination.setter
    def declination(self, declination):
        """Sets the declination of this Constellation.

        Description not available  # noqa: E501

        :param declination: The declination of this Constellation.  # noqa: E501
        :type: list[int]
        """

        self._declination = declination

    @property
    def von_klitzing_constant(self):
        """Gets the von_klitzing_constant of this Constellation.  # noqa: E501

        Description not available  # noqa: E501

        :return: The von_klitzing_constant of this Constellation.  # noqa: E501
        :rtype: list[float]
        """
        return self._von_klitzing_constant

    @von_klitzing_constant.setter
    def von_klitzing_constant(self, von_klitzing_constant):
        """Sets the von_klitzing_constant of this Constellation.

        Description not available  # noqa: E501

        :param von_klitzing_constant: The von_klitzing_constant of this Constellation.  # noqa: E501
        :type: list[float]
        """

        self._von_klitzing_constant = von_klitzing_constant

    @property
    def messier_name(self):
        """Gets the messier_name of this Constellation.  # noqa: E501

        Name for Messier objects  # noqa: E501

        :return: The messier_name of this Constellation.  # noqa: E501
        :rtype: list[str]
        """
        return self._messier_name

    @messier_name.setter
    def messier_name(self, messier_name):
        """Sets the messier_name of this Constellation.

        Name for Messier objects  # noqa: E501

        :param messier_name: The messier_name of this Constellation.  # noqa: E501
        :type: list[str]
        """

        self._messier_name = messier_name

    @property
    def max_apparent_magnitude(self):
        """Gets the max_apparent_magnitude of this Constellation.  # noqa: E501

        Description not available  # noqa: E501

        :return: The max_apparent_magnitude of this Constellation.  # noqa: E501
        :rtype: list[float]
        """
        return self._max_apparent_magnitude

    @max_apparent_magnitude.setter
    def max_apparent_magnitude(self, max_apparent_magnitude):
        """Sets the max_apparent_magnitude of this Constellation.

        Description not available  # noqa: E501

        :param max_apparent_magnitude: The max_apparent_magnitude of this Constellation.  # noqa: E501
        :type: list[float]
        """

        self._max_apparent_magnitude = max_apparent_magnitude

    @property
    def id(self):
        """Gets the id of this Constellation.  # noqa: E501

        identifier  # noqa: E501

        :return: The id of this Constellation.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Constellation.

        identifier  # noqa: E501

        :param id: The id of this Constellation.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def ngc_name(self):
        """Gets the ngc_name of this Constellation.  # noqa: E501

        Name for NGC objects  # noqa: E501

        :return: The ngc_name of this Constellation.  # noqa: E501
        :rtype: list[str]
        """
        return self._ngc_name

    @ngc_name.setter
    def ngc_name(self, ngc_name):
        """Sets the ngc_name of this Constellation.

        Name for NGC objects  # noqa: E501

        :param ngc_name: The ngc_name of this Constellation.  # noqa: E501
        :type: list[str]
        """

        self._ngc_name = ngc_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Constellation):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Constellation):
            return True

        return self.to_dict() != other.to_dict()
