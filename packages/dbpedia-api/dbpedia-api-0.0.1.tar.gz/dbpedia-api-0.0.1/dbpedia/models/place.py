# coding: utf-8

"""
    DBpedia

    This is the API of the DBpedia Ontology  # noqa: E501

    The version of the OpenAPI document: v0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dbpedia.configuration import Configuration


class Place(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'daylight_saving_time_zone': 'list[object]',
        'long_distance_piste_number': 'list[int]',
        'rank_agreement': 'list[int]',
        'political_leader': 'list[object]',
        'red_long_distance_piste_number': 'list[int]',
        'type': 'list[str]',
        'parliament': 'list[object]',
        'linked_space': 'list[str]',
        'area_water': 'list[float]',
        'supply': 'list[object]',
        'green_ski_piste_number': 'list[int]',
        'output': 'list[float]',
        'quote': 'list[str]',
        'province': 'list[object]',
        'region_type': 'list[str]',
        'number_of_island': 'list[str]',
        'id': 'str',
        'piscicultural_population': 'list[str]',
        'land_percentage': 'list[float]',
        'water_percentage': 'list[float]',
        'geoloc_dual': 'list[str]',
        'subregion': 'list[object]',
        'time_zone': 'list[object]',
        'lowest': 'list[str]',
        'minimum_elevation': 'list[float]',
        'human_development_index_rank': 'list[str]',
        'route': 'list[str]',
        'map_caption': 'list[str]',
        'plant': 'list[object]',
        'green_long_distance_piste_number': 'list[int]',
        'coast_length': 'list[float]',
        'cannon_number': 'list[int]',
        'grid_reference': 'list[str]',
        'blue_long_distance_piste_number': 'list[int]',
        'bioclimate': 'list[str]',
        'city_link': 'list[str]',
        'date_agreement': 'list[str]',
        'mayor_article': 'list[str]',
        'area_of_catchment_quote': 'list[str]',
        'iso31661_code': 'list[str]',
        'sea': 'list[object]',
        'settlement': 'list[object]',
        'ski_lift': 'list[int]',
        'maximum_depth': 'list[float]',
        'unesco': 'list[object]',
        'gross_domestic_product_rank': 'list[str]',
        'region_link': 'list[str]',
        'artificial_snow_area': 'list[float]',
        'located_in_area': 'list[object]',
        'map': 'list[object]',
        'type_coordinate': 'list[str]',
        'code_provincial_monument': 'list[str]',
        'coordinates': 'list[str]',
        'map_description': 'list[str]',
        'climate': 'list[object]',
        'flower': 'list[object]',
        'law_country': 'list[str]',
        'area_date': 'list[str]',
        'information_name': 'list[str]',
        'depth': 'list[float]',
        'kind_of_coordinate': 'list[str]',
        'black_long_distance_piste_number': 'list[int]',
        'water_area': 'list[float]',
        'frontier_length': 'list[float]',
        'depths': 'list[object]',
        'information': 'list[str]',
        'governing_body': 'list[object]',
        'black_ski_piste_number': 'list[int]',
        'river': 'list[object]',
        'heritage_register': 'list[object]',
        'currency_code': 'list[str]',
        'related_places': 'list[object]',
        'subdivisions': 'list[int]',
        'refcul': 'list[str]',
        'tu': 'list[str]',
        'climb_up_number': 'list[int]',
        'fauna': 'list[str]',
        'land_area': 'list[float]',
        'code_national_monument': 'list[str]',
        'flora': 'list[str]',
        'year_of_construction': 'list[str]',
        'subsystem': 'list[str]',
        'president_regional_council_mandate': 'list[str]',
        'retention_time': 'list[str]',
        'maximum_elevation': 'list[float]',
        'reference': 'list[str]',
        'code_land_registry': 'list[str]',
        'forester_district': 'list[object]',
        'named_by_language': 'list[object]',
        'volume_quote': 'list[str]',
        'population_date': 'list[str]',
        'province_link': 'list[object]',
        'gross_domestic_product_per_people': 'list[str]',
        'kind_of_rock': 'list[str]',
        'bird': 'list[object]',
        'president_general_council_mandate': 'list[str]',
        'limit': 'list[str]',
        'refgeo': 'list[str]',
        'protection_status': 'list[str]',
        'regional_prefecture': 'list[str]',
        'refgen': 'list[str]',
        'different': 'list[str]',
        'representative': 'list[int]',
        'refpol': 'list[str]',
        'maximum_area_quote': 'list[str]',
        'population_quote': 'list[str]',
        'utc_offset': 'list[str]',
        'per_capita_income_rank': 'list[str]',
        'ski_piste_kilometre': 'list[float]',
        'biggest_city': 'list[object]',
        'tree': 'list[object]',
        'vehicle_code': 'list[str]',
        'minimum_area': 'list[str]',
        'municipality_code': 'list[str]',
        'water': 'list[str]',
        'elevation_quote': 'list[str]',
        'average_depth_quote': 'list[str]',
        'geologic_period': 'list[str]',
        'area_land': 'list[float]',
        'red_ski_piste_number': 'list[int]',
        'unlo_code': 'list[str]',
        'district': 'list[object]',
        'main_island': 'list[object]',
        'parliament_type': 'list[str]',
        'previous_entity': 'list[object]',
        'maximum_area': 'list[str]',
        'lake': 'list[object]',
        'neighbour_region': 'list[str]',
        'event_date': 'list[str]',
        'minimum_area_quote': 'list[str]',
        'altitude': 'list[object]',
        'sovereign_country': 'list[object]',
        'national_topographic_system_map_number': 'list[str]',
        'budget_year': 'list[str]',
        'historical_map': 'list[str]',
        'next_entity': 'list[object]',
        'annual_temperature': 'list[float]',
        'scale': 'list[str]',
        'description': 'list[str]',
        'regency': 'list[object]',
        'long_distance_piste_kilometre': 'list[float]',
        'code_municipal_monument': 'list[str]',
        'average_depth': 'list[str]',
        'sub_prefecture': 'list[str]',
        'ski_piste_number': 'list[int]',
        'subdivision': 'list[object]',
        'snow_park_number': 'list[int]',
        'depth_quote': 'list[str]',
        'area_quote': 'list[str]',
        'area_total': 'list[float]',
        'avifauna_population': 'list[str]',
        'ski_tow': 'list[int]',
        'capital_coordinates': 'list[str]',
        'land': 'list[object]',
        'length_quote': 'list[str]',
        'relief': 'list[str]',
        'elevation': 'list[float]',
        'endangered_since': 'list[str]',
        'subdivision_link': 'list[str]',
        'merger_date': 'list[str]',
        'blue_ski_piste_number': 'list[int]',
        'label': 'list[str]',
        'historical_name': 'list[str]',
        'nearest_city': 'list[object]',
        'subsystem_link': 'list[str]',
        'nuts_code': 'list[str]',
        'authority_mandate': 'list[str]',
        'whole_area': 'list[object]',
        'iso_code': 'list[str]',
        'area_rank': 'list[str]',
        'width_quote': 'list[str]',
        'maximum_depth_quote': 'list[str]',
        'cable_car': 'list[int]'
    }

    attribute_map = {
        'daylight_saving_time_zone': 'daylightSavingTimeZone',
        'long_distance_piste_number': 'longDistancePisteNumber',
        'rank_agreement': 'rankAgreement',
        'political_leader': 'politicalLeader',
        'red_long_distance_piste_number': 'redLongDistancePisteNumber',
        'type': 'type',
        'parliament': 'parliament',
        'linked_space': 'linkedSpace',
        'area_water': 'areaWater',
        'supply': 'supply',
        'green_ski_piste_number': 'greenSkiPisteNumber',
        'output': 'output',
        'quote': 'quote',
        'province': 'province',
        'region_type': 'regionType',
        'number_of_island': 'numberOfIsland',
        'id': 'id',
        'piscicultural_population': 'pisciculturalPopulation',
        'land_percentage': 'landPercentage',
        'water_percentage': 'waterPercentage',
        'geoloc_dual': 'geolocDual',
        'subregion': 'subregion',
        'time_zone': 'timeZone',
        'lowest': 'lowest',
        'minimum_elevation': 'minimumElevation',
        'human_development_index_rank': 'humanDevelopmentIndexRank',
        'route': 'route',
        'map_caption': 'mapCaption',
        'plant': 'plant',
        'green_long_distance_piste_number': 'greenLongDistancePisteNumber',
        'coast_length': 'coastLength',
        'cannon_number': 'cannonNumber',
        'grid_reference': 'gridReference',
        'blue_long_distance_piste_number': 'blueLongDistancePisteNumber',
        'bioclimate': 'bioclimate',
        'city_link': 'cityLink',
        'date_agreement': 'dateAgreement',
        'mayor_article': 'mayorArticle',
        'area_of_catchment_quote': 'areaOfCatchmentQuote',
        'iso31661_code': 'iso31661Code',
        'sea': 'sea',
        'settlement': 'settlement',
        'ski_lift': 'skiLift',
        'maximum_depth': 'maximumDepth',
        'unesco': 'unesco',
        'gross_domestic_product_rank': 'grossDomesticProductRank',
        'region_link': 'regionLink',
        'artificial_snow_area': 'artificialSnowArea',
        'located_in_area': 'locatedInArea',
        'map': 'map',
        'type_coordinate': 'typeCoordinate',
        'code_provincial_monument': 'codeProvincialMonument',
        'coordinates': 'coordinates',
        'map_description': 'mapDescription',
        'climate': 'climate',
        'flower': 'flower',
        'law_country': 'lawCountry',
        'area_date': 'areaDate',
        'information_name': 'informationName',
        'depth': 'depth',
        'kind_of_coordinate': 'kindOfCoordinate',
        'black_long_distance_piste_number': 'blackLongDistancePisteNumber',
        'water_area': 'waterArea',
        'frontier_length': 'frontierLength',
        'depths': 'depths',
        'information': 'information',
        'governing_body': 'governingBody',
        'black_ski_piste_number': 'blackSkiPisteNumber',
        'river': 'river',
        'heritage_register': 'heritageRegister',
        'currency_code': 'currencyCode',
        'related_places': 'relatedPlaces',
        'subdivisions': 'subdivisions',
        'refcul': 'refcul',
        'tu': 'tu',
        'climb_up_number': 'climbUpNumber',
        'fauna': 'fauna',
        'land_area': 'landArea',
        'code_national_monument': 'codeNationalMonument',
        'flora': 'flora',
        'year_of_construction': 'yearOfConstruction',
        'subsystem': 'subsystem',
        'president_regional_council_mandate': 'presidentRegionalCouncilMandate',
        'retention_time': 'retentionTime',
        'maximum_elevation': 'maximumElevation',
        'reference': 'reference',
        'code_land_registry': 'codeLandRegistry',
        'forester_district': 'foresterDistrict',
        'named_by_language': 'namedByLanguage',
        'volume_quote': 'volumeQuote',
        'population_date': 'populationDate',
        'province_link': 'provinceLink',
        'gross_domestic_product_per_people': 'grossDomesticProductPerPeople',
        'kind_of_rock': 'kindOfRock',
        'bird': 'bird',
        'president_general_council_mandate': 'presidentGeneralCouncilMandate',
        'limit': 'limit',
        'refgeo': 'refgeo',
        'protection_status': 'protectionStatus',
        'regional_prefecture': 'regionalPrefecture',
        'refgen': 'refgen',
        'different': 'different',
        'representative': 'representative',
        'refpol': 'refpol',
        'maximum_area_quote': 'maximumAreaQuote',
        'population_quote': 'populationQuote',
        'utc_offset': 'utcOffset',
        'per_capita_income_rank': 'perCapitaIncomeRank',
        'ski_piste_kilometre': 'skiPisteKilometre',
        'biggest_city': 'biggestCity',
        'tree': 'tree',
        'vehicle_code': 'vehicleCode',
        'minimum_area': 'minimumArea',
        'municipality_code': 'municipalityCode',
        'water': 'water',
        'elevation_quote': 'elevationQuote',
        'average_depth_quote': 'averageDepthQuote',
        'geologic_period': 'geologicPeriod',
        'area_land': 'areaLand',
        'red_ski_piste_number': 'redSkiPisteNumber',
        'unlo_code': 'unloCode',
        'district': 'district',
        'main_island': 'mainIsland',
        'parliament_type': 'parliamentType',
        'previous_entity': 'previousEntity',
        'maximum_area': 'maximumArea',
        'lake': 'lake',
        'neighbour_region': 'neighbourRegion',
        'event_date': 'eventDate',
        'minimum_area_quote': 'minimumAreaQuote',
        'altitude': 'altitude',
        'sovereign_country': 'sovereignCountry',
        'national_topographic_system_map_number': 'nationalTopographicSystemMapNumber',
        'budget_year': 'budgetYear',
        'historical_map': 'historicalMap',
        'next_entity': 'nextEntity',
        'annual_temperature': 'annualTemperature',
        'scale': 'scale',
        'description': 'description',
        'regency': 'regency',
        'long_distance_piste_kilometre': 'longDistancePisteKilometre',
        'code_municipal_monument': 'codeMunicipalMonument',
        'average_depth': 'averageDepth',
        'sub_prefecture': 'subPrefecture',
        'ski_piste_number': 'skiPisteNumber',
        'subdivision': 'subdivision',
        'snow_park_number': 'snowParkNumber',
        'depth_quote': 'depthQuote',
        'area_quote': 'areaQuote',
        'area_total': 'areaTotal',
        'avifauna_population': 'avifaunaPopulation',
        'ski_tow': 'skiTow',
        'capital_coordinates': 'capitalCoordinates',
        'land': 'land',
        'length_quote': 'lengthQuote',
        'relief': 'relief',
        'elevation': 'elevation',
        'endangered_since': 'endangeredSince',
        'subdivision_link': 'subdivisionLink',
        'merger_date': 'mergerDate',
        'blue_ski_piste_number': 'blueSkiPisteNumber',
        'label': 'label',
        'historical_name': 'historicalName',
        'nearest_city': 'nearestCity',
        'subsystem_link': 'subsystemLink',
        'nuts_code': 'nutsCode',
        'authority_mandate': 'authorityMandate',
        'whole_area': 'wholeArea',
        'iso_code': 'isoCode',
        'area_rank': 'areaRank',
        'width_quote': 'widthQuote',
        'maximum_depth_quote': 'maximumDepthQuote',
        'cable_car': 'cableCar'
    }

    def __init__(self, daylight_saving_time_zone=None, long_distance_piste_number=None, rank_agreement=None, political_leader=None, red_long_distance_piste_number=None, type=None, parliament=None, linked_space=None, area_water=None, supply=None, green_ski_piste_number=None, output=None, quote=None, province=None, region_type=None, number_of_island=None, id=None, piscicultural_population=None, land_percentage=None, water_percentage=None, geoloc_dual=None, subregion=None, time_zone=None, lowest=None, minimum_elevation=None, human_development_index_rank=None, route=None, map_caption=None, plant=None, green_long_distance_piste_number=None, coast_length=None, cannon_number=None, grid_reference=None, blue_long_distance_piste_number=None, bioclimate=None, city_link=None, date_agreement=None, mayor_article=None, area_of_catchment_quote=None, iso31661_code=None, sea=None, settlement=None, ski_lift=None, maximum_depth=None, unesco=None, gross_domestic_product_rank=None, region_link=None, artificial_snow_area=None, located_in_area=None, map=None, type_coordinate=None, code_provincial_monument=None, coordinates=None, map_description=None, climate=None, flower=None, law_country=None, area_date=None, information_name=None, depth=None, kind_of_coordinate=None, black_long_distance_piste_number=None, water_area=None, frontier_length=None, depths=None, information=None, governing_body=None, black_ski_piste_number=None, river=None, heritage_register=None, currency_code=None, related_places=None, subdivisions=None, refcul=None, tu=None, climb_up_number=None, fauna=None, land_area=None, code_national_monument=None, flora=None, year_of_construction=None, subsystem=None, president_regional_council_mandate=None, retention_time=None, maximum_elevation=None, reference=None, code_land_registry=None, forester_district=None, named_by_language=None, volume_quote=None, population_date=None, province_link=None, gross_domestic_product_per_people=None, kind_of_rock=None, bird=None, president_general_council_mandate=None, limit=None, refgeo=None, protection_status=None, regional_prefecture=None, refgen=None, different=None, representative=None, refpol=None, maximum_area_quote=None, population_quote=None, utc_offset=None, per_capita_income_rank=None, ski_piste_kilometre=None, biggest_city=None, tree=None, vehicle_code=None, minimum_area=None, municipality_code=None, water=None, elevation_quote=None, average_depth_quote=None, geologic_period=None, area_land=None, red_ski_piste_number=None, unlo_code=None, district=None, main_island=None, parliament_type=None, previous_entity=None, maximum_area=None, lake=None, neighbour_region=None, event_date=None, minimum_area_quote=None, altitude=None, sovereign_country=None, national_topographic_system_map_number=None, budget_year=None, historical_map=None, next_entity=None, annual_temperature=None, scale=None, description=None, regency=None, long_distance_piste_kilometre=None, code_municipal_monument=None, average_depth=None, sub_prefecture=None, ski_piste_number=None, subdivision=None, snow_park_number=None, depth_quote=None, area_quote=None, area_total=None, avifauna_population=None, ski_tow=None, capital_coordinates=None, land=None, length_quote=None, relief=None, elevation=None, endangered_since=None, subdivision_link=None, merger_date=None, blue_ski_piste_number=None, label=None, historical_name=None, nearest_city=None, subsystem_link=None, nuts_code=None, authority_mandate=None, whole_area=None, iso_code=None, area_rank=None, width_quote=None, maximum_depth_quote=None, cable_car=None, local_vars_configuration=None):  # noqa: E501
        """Place - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._daylight_saving_time_zone = None
        self._long_distance_piste_number = None
        self._rank_agreement = None
        self._political_leader = None
        self._red_long_distance_piste_number = None
        self._type = None
        self._parliament = None
        self._linked_space = None
        self._area_water = None
        self._supply = None
        self._green_ski_piste_number = None
        self._output = None
        self._quote = None
        self._province = None
        self._region_type = None
        self._number_of_island = None
        self._id = None
        self._piscicultural_population = None
        self._land_percentage = None
        self._water_percentage = None
        self._geoloc_dual = None
        self._subregion = None
        self._time_zone = None
        self._lowest = None
        self._minimum_elevation = None
        self._human_development_index_rank = None
        self._route = None
        self._map_caption = None
        self._plant = None
        self._green_long_distance_piste_number = None
        self._coast_length = None
        self._cannon_number = None
        self._grid_reference = None
        self._blue_long_distance_piste_number = None
        self._bioclimate = None
        self._city_link = None
        self._date_agreement = None
        self._mayor_article = None
        self._area_of_catchment_quote = None
        self._iso31661_code = None
        self._sea = None
        self._settlement = None
        self._ski_lift = None
        self._maximum_depth = None
        self._unesco = None
        self._gross_domestic_product_rank = None
        self._region_link = None
        self._artificial_snow_area = None
        self._located_in_area = None
        self._map = None
        self._type_coordinate = None
        self._code_provincial_monument = None
        self._coordinates = None
        self._map_description = None
        self._climate = None
        self._flower = None
        self._law_country = None
        self._area_date = None
        self._information_name = None
        self._depth = None
        self._kind_of_coordinate = None
        self._black_long_distance_piste_number = None
        self._water_area = None
        self._frontier_length = None
        self._depths = None
        self._information = None
        self._governing_body = None
        self._black_ski_piste_number = None
        self._river = None
        self._heritage_register = None
        self._currency_code = None
        self._related_places = None
        self._subdivisions = None
        self._refcul = None
        self._tu = None
        self._climb_up_number = None
        self._fauna = None
        self._land_area = None
        self._code_national_monument = None
        self._flora = None
        self._year_of_construction = None
        self._subsystem = None
        self._president_regional_council_mandate = None
        self._retention_time = None
        self._maximum_elevation = None
        self._reference = None
        self._code_land_registry = None
        self._forester_district = None
        self._named_by_language = None
        self._volume_quote = None
        self._population_date = None
        self._province_link = None
        self._gross_domestic_product_per_people = None
        self._kind_of_rock = None
        self._bird = None
        self._president_general_council_mandate = None
        self._limit = None
        self._refgeo = None
        self._protection_status = None
        self._regional_prefecture = None
        self._refgen = None
        self._different = None
        self._representative = None
        self._refpol = None
        self._maximum_area_quote = None
        self._population_quote = None
        self._utc_offset = None
        self._per_capita_income_rank = None
        self._ski_piste_kilometre = None
        self._biggest_city = None
        self._tree = None
        self._vehicle_code = None
        self._minimum_area = None
        self._municipality_code = None
        self._water = None
        self._elevation_quote = None
        self._average_depth_quote = None
        self._geologic_period = None
        self._area_land = None
        self._red_ski_piste_number = None
        self._unlo_code = None
        self._district = None
        self._main_island = None
        self._parliament_type = None
        self._previous_entity = None
        self._maximum_area = None
        self._lake = None
        self._neighbour_region = None
        self._event_date = None
        self._minimum_area_quote = None
        self._altitude = None
        self._sovereign_country = None
        self._national_topographic_system_map_number = None
        self._budget_year = None
        self._historical_map = None
        self._next_entity = None
        self._annual_temperature = None
        self._scale = None
        self._description = None
        self._regency = None
        self._long_distance_piste_kilometre = None
        self._code_municipal_monument = None
        self._average_depth = None
        self._sub_prefecture = None
        self._ski_piste_number = None
        self._subdivision = None
        self._snow_park_number = None
        self._depth_quote = None
        self._area_quote = None
        self._area_total = None
        self._avifauna_population = None
        self._ski_tow = None
        self._capital_coordinates = None
        self._land = None
        self._length_quote = None
        self._relief = None
        self._elevation = None
        self._endangered_since = None
        self._subdivision_link = None
        self._merger_date = None
        self._blue_ski_piste_number = None
        self._label = None
        self._historical_name = None
        self._nearest_city = None
        self._subsystem_link = None
        self._nuts_code = None
        self._authority_mandate = None
        self._whole_area = None
        self._iso_code = None
        self._area_rank = None
        self._width_quote = None
        self._maximum_depth_quote = None
        self._cable_car = None
        self.discriminator = None

        self.daylight_saving_time_zone = daylight_saving_time_zone
        self.long_distance_piste_number = long_distance_piste_number
        self.rank_agreement = rank_agreement
        self.political_leader = political_leader
        self.red_long_distance_piste_number = red_long_distance_piste_number
        self.type = type
        self.parliament = parliament
        self.linked_space = linked_space
        self.area_water = area_water
        self.supply = supply
        self.green_ski_piste_number = green_ski_piste_number
        self.output = output
        self.quote = quote
        self.province = province
        self.region_type = region_type
        self.number_of_island = number_of_island
        if id is not None:
            self.id = id
        self.piscicultural_population = piscicultural_population
        self.land_percentage = land_percentage
        self.water_percentage = water_percentage
        self.geoloc_dual = geoloc_dual
        self.subregion = subregion
        self.time_zone = time_zone
        self.lowest = lowest
        self.minimum_elevation = minimum_elevation
        self.human_development_index_rank = human_development_index_rank
        self.route = route
        self.map_caption = map_caption
        self.plant = plant
        self.green_long_distance_piste_number = green_long_distance_piste_number
        self.coast_length = coast_length
        self.cannon_number = cannon_number
        self.grid_reference = grid_reference
        self.blue_long_distance_piste_number = blue_long_distance_piste_number
        self.bioclimate = bioclimate
        self.city_link = city_link
        self.date_agreement = date_agreement
        self.mayor_article = mayor_article
        self.area_of_catchment_quote = area_of_catchment_quote
        self.iso31661_code = iso31661_code
        self.sea = sea
        self.settlement = settlement
        self.ski_lift = ski_lift
        self.maximum_depth = maximum_depth
        self.unesco = unesco
        self.gross_domestic_product_rank = gross_domestic_product_rank
        self.region_link = region_link
        self.artificial_snow_area = artificial_snow_area
        self.located_in_area = located_in_area
        self.map = map
        self.type_coordinate = type_coordinate
        self.code_provincial_monument = code_provincial_monument
        self.coordinates = coordinates
        self.map_description = map_description
        self.climate = climate
        self.flower = flower
        self.law_country = law_country
        self.area_date = area_date
        self.information_name = information_name
        self.depth = depth
        self.kind_of_coordinate = kind_of_coordinate
        self.black_long_distance_piste_number = black_long_distance_piste_number
        self.water_area = water_area
        self.frontier_length = frontier_length
        self.depths = depths
        self.information = information
        self.governing_body = governing_body
        self.black_ski_piste_number = black_ski_piste_number
        self.river = river
        self.heritage_register = heritage_register
        self.currency_code = currency_code
        self.related_places = related_places
        self.subdivisions = subdivisions
        self.refcul = refcul
        self.tu = tu
        self.climb_up_number = climb_up_number
        self.fauna = fauna
        self.land_area = land_area
        self.code_national_monument = code_national_monument
        self.flora = flora
        self.year_of_construction = year_of_construction
        self.subsystem = subsystem
        self.president_regional_council_mandate = president_regional_council_mandate
        self.retention_time = retention_time
        self.maximum_elevation = maximum_elevation
        self.reference = reference
        self.code_land_registry = code_land_registry
        self.forester_district = forester_district
        self.named_by_language = named_by_language
        self.volume_quote = volume_quote
        self.population_date = population_date
        self.province_link = province_link
        self.gross_domestic_product_per_people = gross_domestic_product_per_people
        self.kind_of_rock = kind_of_rock
        self.bird = bird
        self.president_general_council_mandate = president_general_council_mandate
        self.limit = limit
        self.refgeo = refgeo
        self.protection_status = protection_status
        self.regional_prefecture = regional_prefecture
        self.refgen = refgen
        self.different = different
        self.representative = representative
        self.refpol = refpol
        self.maximum_area_quote = maximum_area_quote
        self.population_quote = population_quote
        self.utc_offset = utc_offset
        self.per_capita_income_rank = per_capita_income_rank
        self.ski_piste_kilometre = ski_piste_kilometre
        self.biggest_city = biggest_city
        self.tree = tree
        self.vehicle_code = vehicle_code
        self.minimum_area = minimum_area
        self.municipality_code = municipality_code
        self.water = water
        self.elevation_quote = elevation_quote
        self.average_depth_quote = average_depth_quote
        self.geologic_period = geologic_period
        self.area_land = area_land
        self.red_ski_piste_number = red_ski_piste_number
        self.unlo_code = unlo_code
        self.district = district
        self.main_island = main_island
        self.parliament_type = parliament_type
        self.previous_entity = previous_entity
        self.maximum_area = maximum_area
        self.lake = lake
        self.neighbour_region = neighbour_region
        self.event_date = event_date
        self.minimum_area_quote = minimum_area_quote
        self.altitude = altitude
        self.sovereign_country = sovereign_country
        self.national_topographic_system_map_number = national_topographic_system_map_number
        self.budget_year = budget_year
        self.historical_map = historical_map
        self.next_entity = next_entity
        self.annual_temperature = annual_temperature
        self.scale = scale
        self.description = description
        self.regency = regency
        self.long_distance_piste_kilometre = long_distance_piste_kilometre
        self.code_municipal_monument = code_municipal_monument
        self.average_depth = average_depth
        self.sub_prefecture = sub_prefecture
        self.ski_piste_number = ski_piste_number
        self.subdivision = subdivision
        self.snow_park_number = snow_park_number
        self.depth_quote = depth_quote
        self.area_quote = area_quote
        self.area_total = area_total
        self.avifauna_population = avifauna_population
        self.ski_tow = ski_tow
        self.capital_coordinates = capital_coordinates
        self.land = land
        self.length_quote = length_quote
        self.relief = relief
        self.elevation = elevation
        self.endangered_since = endangered_since
        self.subdivision_link = subdivision_link
        self.merger_date = merger_date
        self.blue_ski_piste_number = blue_ski_piste_number
        self.label = label
        self.historical_name = historical_name
        self.nearest_city = nearest_city
        self.subsystem_link = subsystem_link
        self.nuts_code = nuts_code
        self.authority_mandate = authority_mandate
        self.whole_area = whole_area
        self.iso_code = iso_code
        self.area_rank = area_rank
        self.width_quote = width_quote
        self.maximum_depth_quote = maximum_depth_quote
        self.cable_car = cable_car

    @property
    def daylight_saving_time_zone(self):
        """Gets the daylight_saving_time_zone of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The daylight_saving_time_zone of this Place.  # noqa: E501
        :rtype: list[object]
        """
        return self._daylight_saving_time_zone

    @daylight_saving_time_zone.setter
    def daylight_saving_time_zone(self, daylight_saving_time_zone):
        """Sets the daylight_saving_time_zone of this Place.

        Description not available  # noqa: E501

        :param daylight_saving_time_zone: The daylight_saving_time_zone of this Place.  # noqa: E501
        :type: list[object]
        """

        self._daylight_saving_time_zone = daylight_saving_time_zone

    @property
    def long_distance_piste_number(self):
        """Gets the long_distance_piste_number of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The long_distance_piste_number of this Place.  # noqa: E501
        :rtype: list[int]
        """
        return self._long_distance_piste_number

    @long_distance_piste_number.setter
    def long_distance_piste_number(self, long_distance_piste_number):
        """Sets the long_distance_piste_number of this Place.

        Description not available  # noqa: E501

        :param long_distance_piste_number: The long_distance_piste_number of this Place.  # noqa: E501
        :type: list[int]
        """

        self._long_distance_piste_number = long_distance_piste_number

    @property
    def rank_agreement(self):
        """Gets the rank_agreement of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The rank_agreement of this Place.  # noqa: E501
        :rtype: list[int]
        """
        return self._rank_agreement

    @rank_agreement.setter
    def rank_agreement(self, rank_agreement):
        """Sets the rank_agreement of this Place.

        Description not available  # noqa: E501

        :param rank_agreement: The rank_agreement of this Place.  # noqa: E501
        :type: list[int]
        """

        self._rank_agreement = rank_agreement

    @property
    def political_leader(self):
        """Gets the political_leader of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The political_leader of this Place.  # noqa: E501
        :rtype: list[object]
        """
        return self._political_leader

    @political_leader.setter
    def political_leader(self, political_leader):
        """Sets the political_leader of this Place.

        Description not available  # noqa: E501

        :param political_leader: The political_leader of this Place.  # noqa: E501
        :type: list[object]
        """

        self._political_leader = political_leader

    @property
    def red_long_distance_piste_number(self):
        """Gets the red_long_distance_piste_number of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The red_long_distance_piste_number of this Place.  # noqa: E501
        :rtype: list[int]
        """
        return self._red_long_distance_piste_number

    @red_long_distance_piste_number.setter
    def red_long_distance_piste_number(self, red_long_distance_piste_number):
        """Sets the red_long_distance_piste_number of this Place.

        Description not available  # noqa: E501

        :param red_long_distance_piste_number: The red_long_distance_piste_number of this Place.  # noqa: E501
        :type: list[int]
        """

        self._red_long_distance_piste_number = red_long_distance_piste_number

    @property
    def type(self):
        """Gets the type of this Place.  # noqa: E501

        type of the resource  # noqa: E501

        :return: The type of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Place.

        type of the resource  # noqa: E501

        :param type: The type of this Place.  # noqa: E501
        :type: list[str]
        """

        self._type = type

    @property
    def parliament(self):
        """Gets the parliament of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The parliament of this Place.  # noqa: E501
        :rtype: list[object]
        """
        return self._parliament

    @parliament.setter
    def parliament(self, parliament):
        """Sets the parliament of this Place.

        Description not available  # noqa: E501

        :param parliament: The parliament of this Place.  # noqa: E501
        :type: list[object]
        """

        self._parliament = parliament

    @property
    def linked_space(self):
        """Gets the linked_space of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The linked_space of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._linked_space

    @linked_space.setter
    def linked_space(self, linked_space):
        """Sets the linked_space of this Place.

        Description not available  # noqa: E501

        :param linked_space: The linked_space of this Place.  # noqa: E501
        :type: list[str]
        """

        self._linked_space = linked_space

    @property
    def area_water(self):
        """Gets the area_water of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The area_water of this Place.  # noqa: E501
        :rtype: list[float]
        """
        return self._area_water

    @area_water.setter
    def area_water(self, area_water):
        """Sets the area_water of this Place.

        Description not available  # noqa: E501

        :param area_water: The area_water of this Place.  # noqa: E501
        :type: list[float]
        """

        self._area_water = area_water

    @property
    def supply(self):
        """Gets the supply of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The supply of this Place.  # noqa: E501
        :rtype: list[object]
        """
        return self._supply

    @supply.setter
    def supply(self, supply):
        """Sets the supply of this Place.

        Description not available  # noqa: E501

        :param supply: The supply of this Place.  # noqa: E501
        :type: list[object]
        """

        self._supply = supply

    @property
    def green_ski_piste_number(self):
        """Gets the green_ski_piste_number of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The green_ski_piste_number of this Place.  # noqa: E501
        :rtype: list[int]
        """
        return self._green_ski_piste_number

    @green_ski_piste_number.setter
    def green_ski_piste_number(self, green_ski_piste_number):
        """Sets the green_ski_piste_number of this Place.

        Description not available  # noqa: E501

        :param green_ski_piste_number: The green_ski_piste_number of this Place.  # noqa: E501
        :type: list[int]
        """

        self._green_ski_piste_number = green_ski_piste_number

    @property
    def output(self):
        """Gets the output of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The output of this Place.  # noqa: E501
        :rtype: list[float]
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this Place.

        Description not available  # noqa: E501

        :param output: The output of this Place.  # noqa: E501
        :type: list[float]
        """

        self._output = output

    @property
    def quote(self):
        """Gets the quote of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The quote of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._quote

    @quote.setter
    def quote(self, quote):
        """Sets the quote of this Place.

        Description not available  # noqa: E501

        :param quote: The quote of this Place.  # noqa: E501
        :type: list[str]
        """

        self._quote = quote

    @property
    def province(self):
        """Gets the province of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The province of this Place.  # noqa: E501
        :rtype: list[object]
        """
        return self._province

    @province.setter
    def province(self, province):
        """Sets the province of this Place.

        Description not available  # noqa: E501

        :param province: The province of this Place.  # noqa: E501
        :type: list[object]
        """

        self._province = province

    @property
    def region_type(self):
        """Gets the region_type of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The region_type of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._region_type

    @region_type.setter
    def region_type(self, region_type):
        """Sets the region_type of this Place.

        Description not available  # noqa: E501

        :param region_type: The region_type of this Place.  # noqa: E501
        :type: list[str]
        """

        self._region_type = region_type

    @property
    def number_of_island(self):
        """Gets the number_of_island of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The number_of_island of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._number_of_island

    @number_of_island.setter
    def number_of_island(self, number_of_island):
        """Sets the number_of_island of this Place.

        Description not available  # noqa: E501

        :param number_of_island: The number_of_island of this Place.  # noqa: E501
        :type: list[str]
        """

        self._number_of_island = number_of_island

    @property
    def id(self):
        """Gets the id of this Place.  # noqa: E501

        identifier  # noqa: E501

        :return: The id of this Place.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Place.

        identifier  # noqa: E501

        :param id: The id of this Place.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def piscicultural_population(self):
        """Gets the piscicultural_population of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The piscicultural_population of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._piscicultural_population

    @piscicultural_population.setter
    def piscicultural_population(self, piscicultural_population):
        """Sets the piscicultural_population of this Place.

        Description not available  # noqa: E501

        :param piscicultural_population: The piscicultural_population of this Place.  # noqa: E501
        :type: list[str]
        """

        self._piscicultural_population = piscicultural_population

    @property
    def land_percentage(self):
        """Gets the land_percentage of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The land_percentage of this Place.  # noqa: E501
        :rtype: list[float]
        """
        return self._land_percentage

    @land_percentage.setter
    def land_percentage(self, land_percentage):
        """Sets the land_percentage of this Place.

        Description not available  # noqa: E501

        :param land_percentage: The land_percentage of this Place.  # noqa: E501
        :type: list[float]
        """

        self._land_percentage = land_percentage

    @property
    def water_percentage(self):
        """Gets the water_percentage of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The water_percentage of this Place.  # noqa: E501
        :rtype: list[float]
        """
        return self._water_percentage

    @water_percentage.setter
    def water_percentage(self, water_percentage):
        """Sets the water_percentage of this Place.

        Description not available  # noqa: E501

        :param water_percentage: The water_percentage of this Place.  # noqa: E501
        :type: list[float]
        """

        self._water_percentage = water_percentage

    @property
    def geoloc_dual(self):
        """Gets the geoloc_dual of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The geoloc_dual of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._geoloc_dual

    @geoloc_dual.setter
    def geoloc_dual(self, geoloc_dual):
        """Sets the geoloc_dual of this Place.

        Description not available  # noqa: E501

        :param geoloc_dual: The geoloc_dual of this Place.  # noqa: E501
        :type: list[str]
        """

        self._geoloc_dual = geoloc_dual

    @property
    def subregion(self):
        """Gets the subregion of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The subregion of this Place.  # noqa: E501
        :rtype: list[object]
        """
        return self._subregion

    @subregion.setter
    def subregion(self, subregion):
        """Sets the subregion of this Place.

        Description not available  # noqa: E501

        :param subregion: The subregion of this Place.  # noqa: E501
        :type: list[object]
        """

        self._subregion = subregion

    @property
    def time_zone(self):
        """Gets the time_zone of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The time_zone of this Place.  # noqa: E501
        :rtype: list[object]
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this Place.

        Description not available  # noqa: E501

        :param time_zone: The time_zone of this Place.  # noqa: E501
        :type: list[object]
        """

        self._time_zone = time_zone

    @property
    def lowest(self):
        """Gets the lowest of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The lowest of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._lowest

    @lowest.setter
    def lowest(self, lowest):
        """Sets the lowest of this Place.

        Description not available  # noqa: E501

        :param lowest: The lowest of this Place.  # noqa: E501
        :type: list[str]
        """

        self._lowest = lowest

    @property
    def minimum_elevation(self):
        """Gets the minimum_elevation of this Place.  # noqa: E501

        minimum elevation above the sea level  # noqa: E501

        :return: The minimum_elevation of this Place.  # noqa: E501
        :rtype: list[float]
        """
        return self._minimum_elevation

    @minimum_elevation.setter
    def minimum_elevation(self, minimum_elevation):
        """Sets the minimum_elevation of this Place.

        minimum elevation above the sea level  # noqa: E501

        :param minimum_elevation: The minimum_elevation of this Place.  # noqa: E501
        :type: list[float]
        """

        self._minimum_elevation = minimum_elevation

    @property
    def human_development_index_rank(self):
        """Gets the human_development_index_rank of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The human_development_index_rank of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._human_development_index_rank

    @human_development_index_rank.setter
    def human_development_index_rank(self, human_development_index_rank):
        """Sets the human_development_index_rank of this Place.

        Description not available  # noqa: E501

        :param human_development_index_rank: The human_development_index_rank of this Place.  # noqa: E501
        :type: list[str]
        """

        self._human_development_index_rank = human_development_index_rank

    @property
    def route(self):
        """Gets the route of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The route of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._route

    @route.setter
    def route(self, route):
        """Sets the route of this Place.

        Description not available  # noqa: E501

        :param route: The route of this Place.  # noqa: E501
        :type: list[str]
        """

        self._route = route

    @property
    def map_caption(self):
        """Gets the map_caption of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The map_caption of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._map_caption

    @map_caption.setter
    def map_caption(self, map_caption):
        """Sets the map_caption of this Place.

        Description not available  # noqa: E501

        :param map_caption: The map_caption of this Place.  # noqa: E501
        :type: list[str]
        """

        self._map_caption = map_caption

    @property
    def plant(self):
        """Gets the plant of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The plant of this Place.  # noqa: E501
        :rtype: list[object]
        """
        return self._plant

    @plant.setter
    def plant(self, plant):
        """Sets the plant of this Place.

        Description not available  # noqa: E501

        :param plant: The plant of this Place.  # noqa: E501
        :type: list[object]
        """

        self._plant = plant

    @property
    def green_long_distance_piste_number(self):
        """Gets the green_long_distance_piste_number of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The green_long_distance_piste_number of this Place.  # noqa: E501
        :rtype: list[int]
        """
        return self._green_long_distance_piste_number

    @green_long_distance_piste_number.setter
    def green_long_distance_piste_number(self, green_long_distance_piste_number):
        """Sets the green_long_distance_piste_number of this Place.

        Description not available  # noqa: E501

        :param green_long_distance_piste_number: The green_long_distance_piste_number of this Place.  # noqa: E501
        :type: list[int]
        """

        self._green_long_distance_piste_number = green_long_distance_piste_number

    @property
    def coast_length(self):
        """Gets the coast_length of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The coast_length of this Place.  # noqa: E501
        :rtype: list[float]
        """
        return self._coast_length

    @coast_length.setter
    def coast_length(self, coast_length):
        """Sets the coast_length of this Place.

        Description not available  # noqa: E501

        :param coast_length: The coast_length of this Place.  # noqa: E501
        :type: list[float]
        """

        self._coast_length = coast_length

    @property
    def cannon_number(self):
        """Gets the cannon_number of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The cannon_number of this Place.  # noqa: E501
        :rtype: list[int]
        """
        return self._cannon_number

    @cannon_number.setter
    def cannon_number(self, cannon_number):
        """Sets the cannon_number of this Place.

        Description not available  # noqa: E501

        :param cannon_number: The cannon_number of this Place.  # noqa: E501
        :type: list[int]
        """

        self._cannon_number = cannon_number

    @property
    def grid_reference(self):
        """Gets the grid_reference of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The grid_reference of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._grid_reference

    @grid_reference.setter
    def grid_reference(self, grid_reference):
        """Sets the grid_reference of this Place.

        Description not available  # noqa: E501

        :param grid_reference: The grid_reference of this Place.  # noqa: E501
        :type: list[str]
        """

        self._grid_reference = grid_reference

    @property
    def blue_long_distance_piste_number(self):
        """Gets the blue_long_distance_piste_number of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The blue_long_distance_piste_number of this Place.  # noqa: E501
        :rtype: list[int]
        """
        return self._blue_long_distance_piste_number

    @blue_long_distance_piste_number.setter
    def blue_long_distance_piste_number(self, blue_long_distance_piste_number):
        """Sets the blue_long_distance_piste_number of this Place.

        Description not available  # noqa: E501

        :param blue_long_distance_piste_number: The blue_long_distance_piste_number of this Place.  # noqa: E501
        :type: list[int]
        """

        self._blue_long_distance_piste_number = blue_long_distance_piste_number

    @property
    def bioclimate(self):
        """Gets the bioclimate of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The bioclimate of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._bioclimate

    @bioclimate.setter
    def bioclimate(self, bioclimate):
        """Sets the bioclimate of this Place.

        Description not available  # noqa: E501

        :param bioclimate: The bioclimate of this Place.  # noqa: E501
        :type: list[str]
        """

        self._bioclimate = bioclimate

    @property
    def city_link(self):
        """Gets the city_link of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The city_link of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._city_link

    @city_link.setter
    def city_link(self, city_link):
        """Sets the city_link of this Place.

        Description not available  # noqa: E501

        :param city_link: The city_link of this Place.  # noqa: E501
        :type: list[str]
        """

        self._city_link = city_link

    @property
    def date_agreement(self):
        """Gets the date_agreement of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The date_agreement of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._date_agreement

    @date_agreement.setter
    def date_agreement(self, date_agreement):
        """Sets the date_agreement of this Place.

        Description not available  # noqa: E501

        :param date_agreement: The date_agreement of this Place.  # noqa: E501
        :type: list[str]
        """

        self._date_agreement = date_agreement

    @property
    def mayor_article(self):
        """Gets the mayor_article of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The mayor_article of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._mayor_article

    @mayor_article.setter
    def mayor_article(self, mayor_article):
        """Sets the mayor_article of this Place.

        Description not available  # noqa: E501

        :param mayor_article: The mayor_article of this Place.  # noqa: E501
        :type: list[str]
        """

        self._mayor_article = mayor_article

    @property
    def area_of_catchment_quote(self):
        """Gets the area_of_catchment_quote of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The area_of_catchment_quote of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._area_of_catchment_quote

    @area_of_catchment_quote.setter
    def area_of_catchment_quote(self, area_of_catchment_quote):
        """Sets the area_of_catchment_quote of this Place.

        Description not available  # noqa: E501

        :param area_of_catchment_quote: The area_of_catchment_quote of this Place.  # noqa: E501
        :type: list[str]
        """

        self._area_of_catchment_quote = area_of_catchment_quote

    @property
    def iso31661_code(self):
        """Gets the iso31661_code of this Place.  # noqa: E501

        defines codes for the names of countries, dependent territories, and special areas of geographical interest  # noqa: E501

        :return: The iso31661_code of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._iso31661_code

    @iso31661_code.setter
    def iso31661_code(self, iso31661_code):
        """Sets the iso31661_code of this Place.

        defines codes for the names of countries, dependent territories, and special areas of geographical interest  # noqa: E501

        :param iso31661_code: The iso31661_code of this Place.  # noqa: E501
        :type: list[str]
        """

        self._iso31661_code = iso31661_code

    @property
    def sea(self):
        """Gets the sea of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The sea of this Place.  # noqa: E501
        :rtype: list[object]
        """
        return self._sea

    @sea.setter
    def sea(self, sea):
        """Sets the sea of this Place.

        Description not available  # noqa: E501

        :param sea: The sea of this Place.  # noqa: E501
        :type: list[object]
        """

        self._sea = sea

    @property
    def settlement(self):
        """Gets the settlement of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The settlement of this Place.  # noqa: E501
        :rtype: list[object]
        """
        return self._settlement

    @settlement.setter
    def settlement(self, settlement):
        """Sets the settlement of this Place.

        Description not available  # noqa: E501

        :param settlement: The settlement of this Place.  # noqa: E501
        :type: list[object]
        """

        self._settlement = settlement

    @property
    def ski_lift(self):
        """Gets the ski_lift of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The ski_lift of this Place.  # noqa: E501
        :rtype: list[int]
        """
        return self._ski_lift

    @ski_lift.setter
    def ski_lift(self, ski_lift):
        """Sets the ski_lift of this Place.

        Description not available  # noqa: E501

        :param ski_lift: The ski_lift of this Place.  # noqa: E501
        :type: list[int]
        """

        self._ski_lift = ski_lift

    @property
    def maximum_depth(self):
        """Gets the maximum_depth of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The maximum_depth of this Place.  # noqa: E501
        :rtype: list[float]
        """
        return self._maximum_depth

    @maximum_depth.setter
    def maximum_depth(self, maximum_depth):
        """Sets the maximum_depth of this Place.

        Description not available  # noqa: E501

        :param maximum_depth: The maximum_depth of this Place.  # noqa: E501
        :type: list[float]
        """

        self._maximum_depth = maximum_depth

    @property
    def unesco(self):
        """Gets the unesco of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The unesco of this Place.  # noqa: E501
        :rtype: list[object]
        """
        return self._unesco

    @unesco.setter
    def unesco(self, unesco):
        """Sets the unesco of this Place.

        Description not available  # noqa: E501

        :param unesco: The unesco of this Place.  # noqa: E501
        :type: list[object]
        """

        self._unesco = unesco

    @property
    def gross_domestic_product_rank(self):
        """Gets the gross_domestic_product_rank of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The gross_domestic_product_rank of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._gross_domestic_product_rank

    @gross_domestic_product_rank.setter
    def gross_domestic_product_rank(self, gross_domestic_product_rank):
        """Sets the gross_domestic_product_rank of this Place.

        Description not available  # noqa: E501

        :param gross_domestic_product_rank: The gross_domestic_product_rank of this Place.  # noqa: E501
        :type: list[str]
        """

        self._gross_domestic_product_rank = gross_domestic_product_rank

    @property
    def region_link(self):
        """Gets the region_link of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The region_link of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._region_link

    @region_link.setter
    def region_link(self, region_link):
        """Sets the region_link of this Place.

        Description not available  # noqa: E501

        :param region_link: The region_link of this Place.  # noqa: E501
        :type: list[str]
        """

        self._region_link = region_link

    @property
    def artificial_snow_area(self):
        """Gets the artificial_snow_area of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The artificial_snow_area of this Place.  # noqa: E501
        :rtype: list[float]
        """
        return self._artificial_snow_area

    @artificial_snow_area.setter
    def artificial_snow_area(self, artificial_snow_area):
        """Sets the artificial_snow_area of this Place.

        Description not available  # noqa: E501

        :param artificial_snow_area: The artificial_snow_area of this Place.  # noqa: E501
        :type: list[float]
        """

        self._artificial_snow_area = artificial_snow_area

    @property
    def located_in_area(self):
        """Gets the located_in_area of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The located_in_area of this Place.  # noqa: E501
        :rtype: list[object]
        """
        return self._located_in_area

    @located_in_area.setter
    def located_in_area(self, located_in_area):
        """Sets the located_in_area of this Place.

        Description not available  # noqa: E501

        :param located_in_area: The located_in_area of this Place.  # noqa: E501
        :type: list[object]
        """

        self._located_in_area = located_in_area

    @property
    def map(self):
        """Gets the map of this Place.  # noqa: E501

        A map of the place.  # noqa: E501

        :return: The map of this Place.  # noqa: E501
        :rtype: list[object]
        """
        return self._map

    @map.setter
    def map(self, map):
        """Sets the map of this Place.

        A map of the place.  # noqa: E501

        :param map: The map of this Place.  # noqa: E501
        :type: list[object]
        """

        self._map = map

    @property
    def type_coordinate(self):
        """Gets the type_coordinate of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The type_coordinate of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._type_coordinate

    @type_coordinate.setter
    def type_coordinate(self, type_coordinate):
        """Sets the type_coordinate of this Place.

        Description not available  # noqa: E501

        :param type_coordinate: The type_coordinate of this Place.  # noqa: E501
        :type: list[str]
        """

        self._type_coordinate = type_coordinate

    @property
    def code_provincial_monument(self):
        """Gets the code_provincial_monument of this Place.  # noqa: E501

        Code assigned to (Dutch) monuments at the provincial level, mostly for monuments in the countryside, or for waterworks  # noqa: E501

        :return: The code_provincial_monument of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._code_provincial_monument

    @code_provincial_monument.setter
    def code_provincial_monument(self, code_provincial_monument):
        """Sets the code_provincial_monument of this Place.

        Code assigned to (Dutch) monuments at the provincial level, mostly for monuments in the countryside, or for waterworks  # noqa: E501

        :param code_provincial_monument: The code_provincial_monument of this Place.  # noqa: E501
        :type: list[str]
        """

        self._code_provincial_monument = code_provincial_monument

    @property
    def coordinates(self):
        """Gets the coordinates of this Place.  # noqa: E501

        ένα σύστημα συντεταγμένων με δύο μεγέθη.  # noqa: E501

        :return: The coordinates of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates):
        """Sets the coordinates of this Place.

        ένα σύστημα συντεταγμένων με δύο μεγέθη.  # noqa: E501

        :param coordinates: The coordinates of this Place.  # noqa: E501
        :type: list[str]
        """

        self._coordinates = coordinates

    @property
    def map_description(self):
        """Gets the map_description of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The map_description of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._map_description

    @map_description.setter
    def map_description(self, map_description):
        """Sets the map_description of this Place.

        Description not available  # noqa: E501

        :param map_description: The map_description of this Place.  # noqa: E501
        :type: list[str]
        """

        self._map_description = map_description

    @property
    def climate(self):
        """Gets the climate of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The climate of this Place.  # noqa: E501
        :rtype: list[object]
        """
        return self._climate

    @climate.setter
    def climate(self, climate):
        """Sets the climate of this Place.

        Description not available  # noqa: E501

        :param climate: The climate of this Place.  # noqa: E501
        :type: list[object]
        """

        self._climate = climate

    @property
    def flower(self):
        """Gets the flower of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The flower of this Place.  # noqa: E501
        :rtype: list[object]
        """
        return self._flower

    @flower.setter
    def flower(self, flower):
        """Sets the flower of this Place.

        Description not available  # noqa: E501

        :param flower: The flower of this Place.  # noqa: E501
        :type: list[object]
        """

        self._flower = flower

    @property
    def law_country(self):
        """Gets the law_country of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The law_country of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._law_country

    @law_country.setter
    def law_country(self, law_country):
        """Sets the law_country of this Place.

        Description not available  # noqa: E501

        :param law_country: The law_country of this Place.  # noqa: E501
        :type: list[str]
        """

        self._law_country = law_country

    @property
    def area_date(self):
        """Gets the area_date of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The area_date of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._area_date

    @area_date.setter
    def area_date(self, area_date):
        """Sets the area_date of this Place.

        Description not available  # noqa: E501

        :param area_date: The area_date of this Place.  # noqa: E501
        :type: list[str]
        """

        self._area_date = area_date

    @property
    def information_name(self):
        """Gets the information_name of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The information_name of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._information_name

    @information_name.setter
    def information_name(self, information_name):
        """Sets the information_name of this Place.

        Description not available  # noqa: E501

        :param information_name: The information_name of this Place.  # noqa: E501
        :type: list[str]
        """

        self._information_name = information_name

    @property
    def depth(self):
        """Gets the depth of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The depth of this Place.  # noqa: E501
        :rtype: list[float]
        """
        return self._depth

    @depth.setter
    def depth(self, depth):
        """Sets the depth of this Place.

        Description not available  # noqa: E501

        :param depth: The depth of this Place.  # noqa: E501
        :type: list[float]
        """

        self._depth = depth

    @property
    def kind_of_coordinate(self):
        """Gets the kind_of_coordinate of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The kind_of_coordinate of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._kind_of_coordinate

    @kind_of_coordinate.setter
    def kind_of_coordinate(self, kind_of_coordinate):
        """Sets the kind_of_coordinate of this Place.

        Description not available  # noqa: E501

        :param kind_of_coordinate: The kind_of_coordinate of this Place.  # noqa: E501
        :type: list[str]
        """

        self._kind_of_coordinate = kind_of_coordinate

    @property
    def black_long_distance_piste_number(self):
        """Gets the black_long_distance_piste_number of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The black_long_distance_piste_number of this Place.  # noqa: E501
        :rtype: list[int]
        """
        return self._black_long_distance_piste_number

    @black_long_distance_piste_number.setter
    def black_long_distance_piste_number(self, black_long_distance_piste_number):
        """Sets the black_long_distance_piste_number of this Place.

        Description not available  # noqa: E501

        :param black_long_distance_piste_number: The black_long_distance_piste_number of this Place.  # noqa: E501
        :type: list[int]
        """

        self._black_long_distance_piste_number = black_long_distance_piste_number

    @property
    def water_area(self):
        """Gets the water_area of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The water_area of this Place.  # noqa: E501
        :rtype: list[float]
        """
        return self._water_area

    @water_area.setter
    def water_area(self, water_area):
        """Sets the water_area of this Place.

        Description not available  # noqa: E501

        :param water_area: The water_area of this Place.  # noqa: E501
        :type: list[float]
        """

        self._water_area = water_area

    @property
    def frontier_length(self):
        """Gets the frontier_length of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The frontier_length of this Place.  # noqa: E501
        :rtype: list[float]
        """
        return self._frontier_length

    @frontier_length.setter
    def frontier_length(self, frontier_length):
        """Sets the frontier_length of this Place.

        Description not available  # noqa: E501

        :param frontier_length: The frontier_length of this Place.  # noqa: E501
        :type: list[float]
        """

        self._frontier_length = frontier_length

    @property
    def depths(self):
        """Gets the depths of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The depths of this Place.  # noqa: E501
        :rtype: list[object]
        """
        return self._depths

    @depths.setter
    def depths(self, depths):
        """Sets the depths of this Place.

        Description not available  # noqa: E501

        :param depths: The depths of this Place.  # noqa: E501
        :type: list[object]
        """

        self._depths = depths

    @property
    def information(self):
        """Gets the information of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The information of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._information

    @information.setter
    def information(self, information):
        """Sets the information of this Place.

        Description not available  # noqa: E501

        :param information: The information of this Place.  # noqa: E501
        :type: list[str]
        """

        self._information = information

    @property
    def governing_body(self):
        """Gets the governing_body of this Place.  # noqa: E501

        Body that owns/operates the Place.  # noqa: E501

        :return: The governing_body of this Place.  # noqa: E501
        :rtype: list[object]
        """
        return self._governing_body

    @governing_body.setter
    def governing_body(self, governing_body):
        """Sets the governing_body of this Place.

        Body that owns/operates the Place.  # noqa: E501

        :param governing_body: The governing_body of this Place.  # noqa: E501
        :type: list[object]
        """

        self._governing_body = governing_body

    @property
    def black_ski_piste_number(self):
        """Gets the black_ski_piste_number of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The black_ski_piste_number of this Place.  # noqa: E501
        :rtype: list[int]
        """
        return self._black_ski_piste_number

    @black_ski_piste_number.setter
    def black_ski_piste_number(self, black_ski_piste_number):
        """Sets the black_ski_piste_number of this Place.

        Description not available  # noqa: E501

        :param black_ski_piste_number: The black_ski_piste_number of this Place.  # noqa: E501
        :type: list[int]
        """

        self._black_ski_piste_number = black_ski_piste_number

    @property
    def river(self):
        """Gets the river of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The river of this Place.  # noqa: E501
        :rtype: list[object]
        """
        return self._river

    @river.setter
    def river(self, river):
        """Sets the river of this Place.

        Description not available  # noqa: E501

        :param river: The river of this Place.  # noqa: E501
        :type: list[object]
        """

        self._river = river

    @property
    def heritage_register(self):
        """Gets the heritage_register of this Place.  # noqa: E501

        registered in a heritage register : inventory of cultural properties, natural and man-made, tangible and intangible, movable and immovable, that are deemed to be of sufficient heritage value to be separately identified and recorded.  # noqa: E501

        :return: The heritage_register of this Place.  # noqa: E501
        :rtype: list[object]
        """
        return self._heritage_register

    @heritage_register.setter
    def heritage_register(self, heritage_register):
        """Sets the heritage_register of this Place.

        registered in a heritage register : inventory of cultural properties, natural and man-made, tangible and intangible, movable and immovable, that are deemed to be of sufficient heritage value to be separately identified and recorded.  # noqa: E501

        :param heritage_register: The heritage_register of this Place.  # noqa: E501
        :type: list[object]
        """

        self._heritage_register = heritage_register

    @property
    def currency_code(self):
        """Gets the currency_code of this Place.  # noqa: E501

        ISO 4217 currency designators.  # noqa: E501

        :return: The currency_code of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this Place.

        ISO 4217 currency designators.  # noqa: E501

        :param currency_code: The currency_code of this Place.  # noqa: E501
        :type: list[str]
        """

        self._currency_code = currency_code

    @property
    def related_places(self):
        """Gets the related_places of this Place.  # noqa: E501

        This property is to accommodate the list field that contains a list of, e.g., monuments in the same town  # noqa: E501

        :return: The related_places of this Place.  # noqa: E501
        :rtype: list[object]
        """
        return self._related_places

    @related_places.setter
    def related_places(self, related_places):
        """Sets the related_places of this Place.

        This property is to accommodate the list field that contains a list of, e.g., monuments in the same town  # noqa: E501

        :param related_places: The related_places of this Place.  # noqa: E501
        :type: list[object]
        """

        self._related_places = related_places

    @property
    def subdivisions(self):
        """Gets the subdivisions of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The subdivisions of this Place.  # noqa: E501
        :rtype: list[int]
        """
        return self._subdivisions

    @subdivisions.setter
    def subdivisions(self, subdivisions):
        """Sets the subdivisions of this Place.

        Description not available  # noqa: E501

        :param subdivisions: The subdivisions of this Place.  # noqa: E501
        :type: list[int]
        """

        self._subdivisions = subdivisions

    @property
    def refcul(self):
        """Gets the refcul of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The refcul of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._refcul

    @refcul.setter
    def refcul(self, refcul):
        """Sets the refcul of this Place.

        Description not available  # noqa: E501

        :param refcul: The refcul of this Place.  # noqa: E501
        :type: list[str]
        """

        self._refcul = refcul

    @property
    def tu(self):
        """Gets the tu of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The tu of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._tu

    @tu.setter
    def tu(self, tu):
        """Sets the tu of this Place.

        Description not available  # noqa: E501

        :param tu: The tu of this Place.  # noqa: E501
        :type: list[str]
        """

        self._tu = tu

    @property
    def climb_up_number(self):
        """Gets the climb_up_number of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The climb_up_number of this Place.  # noqa: E501
        :rtype: list[int]
        """
        return self._climb_up_number

    @climb_up_number.setter
    def climb_up_number(self, climb_up_number):
        """Sets the climb_up_number of this Place.

        Description not available  # noqa: E501

        :param climb_up_number: The climb_up_number of this Place.  # noqa: E501
        :type: list[int]
        """

        self._climb_up_number = climb_up_number

    @property
    def fauna(self):
        """Gets the fauna of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The fauna of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._fauna

    @fauna.setter
    def fauna(self, fauna):
        """Sets the fauna of this Place.

        Description not available  # noqa: E501

        :param fauna: The fauna of this Place.  # noqa: E501
        :type: list[str]
        """

        self._fauna = fauna

    @property
    def land_area(self):
        """Gets the land_area of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The land_area of this Place.  # noqa: E501
        :rtype: list[float]
        """
        return self._land_area

    @land_area.setter
    def land_area(self, land_area):
        """Sets the land_area of this Place.

        Description not available  # noqa: E501

        :param land_area: The land_area of this Place.  # noqa: E501
        :type: list[float]
        """

        self._land_area = land_area

    @property
    def code_national_monument(self):
        """Gets the code_national_monument of this Place.  # noqa: E501

        Code assigned to (Dutch) monuments at the national level, deemed to be of national value  # noqa: E501

        :return: The code_national_monument of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._code_national_monument

    @code_national_monument.setter
    def code_national_monument(self, code_national_monument):
        """Sets the code_national_monument of this Place.

        Code assigned to (Dutch) monuments at the national level, deemed to be of national value  # noqa: E501

        :param code_national_monument: The code_national_monument of this Place.  # noqa: E501
        :type: list[str]
        """

        self._code_national_monument = code_national_monument

    @property
    def flora(self):
        """Gets the flora of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The flora of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._flora

    @flora.setter
    def flora(self, flora):
        """Sets the flora of this Place.

        Description not available  # noqa: E501

        :param flora: The flora of this Place.  # noqa: E501
        :type: list[str]
        """

        self._flora = flora

    @property
    def year_of_construction(self):
        """Gets the year_of_construction of this Place.  # noqa: E501

        The year in which construction of the Place was finished.  # noqa: E501

        :return: The year_of_construction of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._year_of_construction

    @year_of_construction.setter
    def year_of_construction(self, year_of_construction):
        """Sets the year_of_construction of this Place.

        The year in which construction of the Place was finished.  # noqa: E501

        :param year_of_construction: The year_of_construction of this Place.  # noqa: E501
        :type: list[str]
        """

        self._year_of_construction = year_of_construction

    @property
    def subsystem(self):
        """Gets the subsystem of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The subsystem of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._subsystem

    @subsystem.setter
    def subsystem(self, subsystem):
        """Sets the subsystem of this Place.

        Description not available  # noqa: E501

        :param subsystem: The subsystem of this Place.  # noqa: E501
        :type: list[str]
        """

        self._subsystem = subsystem

    @property
    def president_regional_council_mandate(self):
        """Gets the president_regional_council_mandate of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The president_regional_council_mandate of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._president_regional_council_mandate

    @president_regional_council_mandate.setter
    def president_regional_council_mandate(self, president_regional_council_mandate):
        """Sets the president_regional_council_mandate of this Place.

        Description not available  # noqa: E501

        :param president_regional_council_mandate: The president_regional_council_mandate of this Place.  # noqa: E501
        :type: list[str]
        """

        self._president_regional_council_mandate = president_regional_council_mandate

    @property
    def retention_time(self):
        """Gets the retention_time of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The retention_time of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._retention_time

    @retention_time.setter
    def retention_time(self, retention_time):
        """Sets the retention_time of this Place.

        Description not available  # noqa: E501

        :param retention_time: The retention_time of this Place.  # noqa: E501
        :type: list[str]
        """

        self._retention_time = retention_time

    @property
    def maximum_elevation(self):
        """Gets the maximum_elevation of this Place.  # noqa: E501

        maximum elevation above the sea level  # noqa: E501

        :return: The maximum_elevation of this Place.  # noqa: E501
        :rtype: list[float]
        """
        return self._maximum_elevation

    @maximum_elevation.setter
    def maximum_elevation(self, maximum_elevation):
        """Sets the maximum_elevation of this Place.

        maximum elevation above the sea level  # noqa: E501

        :param maximum_elevation: The maximum_elevation of this Place.  # noqa: E501
        :type: list[float]
        """

        self._maximum_elevation = maximum_elevation

    @property
    def reference(self):
        """Gets the reference of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The reference of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this Place.

        Description not available  # noqa: E501

        :param reference: The reference of this Place.  # noqa: E501
        :type: list[str]
        """

        self._reference = reference

    @property
    def code_land_registry(self):
        """Gets the code_land_registry of this Place.  # noqa: E501

        Land Registry code designating a parcel of land  # noqa: E501

        :return: The code_land_registry of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._code_land_registry

    @code_land_registry.setter
    def code_land_registry(self, code_land_registry):
        """Sets the code_land_registry of this Place.

        Land Registry code designating a parcel of land  # noqa: E501

        :param code_land_registry: The code_land_registry of this Place.  # noqa: E501
        :type: list[str]
        """

        self._code_land_registry = code_land_registry

    @property
    def forester_district(self):
        """Gets the forester_district of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The forester_district of this Place.  # noqa: E501
        :rtype: list[object]
        """
        return self._forester_district

    @forester_district.setter
    def forester_district(self, forester_district):
        """Sets the forester_district of this Place.

        Description not available  # noqa: E501

        :param forester_district: The forester_district of this Place.  # noqa: E501
        :type: list[object]
        """

        self._forester_district = forester_district

    @property
    def named_by_language(self):
        """Gets the named_by_language of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The named_by_language of this Place.  # noqa: E501
        :rtype: list[object]
        """
        return self._named_by_language

    @named_by_language.setter
    def named_by_language(self, named_by_language):
        """Sets the named_by_language of this Place.

        Description not available  # noqa: E501

        :param named_by_language: The named_by_language of this Place.  # noqa: E501
        :type: list[object]
        """

        self._named_by_language = named_by_language

    @property
    def volume_quote(self):
        """Gets the volume_quote of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The volume_quote of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._volume_quote

    @volume_quote.setter
    def volume_quote(self, volume_quote):
        """Sets the volume_quote of this Place.

        Description not available  # noqa: E501

        :param volume_quote: The volume_quote of this Place.  # noqa: E501
        :type: list[str]
        """

        self._volume_quote = volume_quote

    @property
    def population_date(self):
        """Gets the population_date of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The population_date of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._population_date

    @population_date.setter
    def population_date(self, population_date):
        """Sets the population_date of this Place.

        Description not available  # noqa: E501

        :param population_date: The population_date of this Place.  # noqa: E501
        :type: list[str]
        """

        self._population_date = population_date

    @property
    def province_link(self):
        """Gets the province_link of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The province_link of this Place.  # noqa: E501
        :rtype: list[object]
        """
        return self._province_link

    @province_link.setter
    def province_link(self, province_link):
        """Sets the province_link of this Place.

        Description not available  # noqa: E501

        :param province_link: The province_link of this Place.  # noqa: E501
        :type: list[object]
        """

        self._province_link = province_link

    @property
    def gross_domestic_product_per_people(self):
        """Gets the gross_domestic_product_per_people of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The gross_domestic_product_per_people of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._gross_domestic_product_per_people

    @gross_domestic_product_per_people.setter
    def gross_domestic_product_per_people(self, gross_domestic_product_per_people):
        """Sets the gross_domestic_product_per_people of this Place.

        Description not available  # noqa: E501

        :param gross_domestic_product_per_people: The gross_domestic_product_per_people of this Place.  # noqa: E501
        :type: list[str]
        """

        self._gross_domestic_product_per_people = gross_domestic_product_per_people

    @property
    def kind_of_rock(self):
        """Gets the kind_of_rock of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The kind_of_rock of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._kind_of_rock

    @kind_of_rock.setter
    def kind_of_rock(self, kind_of_rock):
        """Sets the kind_of_rock of this Place.

        Description not available  # noqa: E501

        :param kind_of_rock: The kind_of_rock of this Place.  # noqa: E501
        :type: list[str]
        """

        self._kind_of_rock = kind_of_rock

    @property
    def bird(self):
        """Gets the bird of this Place.  # noqa: E501

        Τα πτηνά είναι ζώα ομοιόθερμα σπονδυλωτά, που στη συντριπτική πλειονότητα τους μπορούν να πετούν με τις πτέρυγες ή φτερούγες τους.  # noqa: E501

        :return: The bird of this Place.  # noqa: E501
        :rtype: list[object]
        """
        return self._bird

    @bird.setter
    def bird(self, bird):
        """Sets the bird of this Place.

        Τα πτηνά είναι ζώα ομοιόθερμα σπονδυλωτά, που στη συντριπτική πλειονότητα τους μπορούν να πετούν με τις πτέρυγες ή φτερούγες τους.  # noqa: E501

        :param bird: The bird of this Place.  # noqa: E501
        :type: list[object]
        """

        self._bird = bird

    @property
    def president_general_council_mandate(self):
        """Gets the president_general_council_mandate of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The president_general_council_mandate of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._president_general_council_mandate

    @president_general_council_mandate.setter
    def president_general_council_mandate(self, president_general_council_mandate):
        """Sets the president_general_council_mandate of this Place.

        Description not available  # noqa: E501

        :param president_general_council_mandate: The president_general_council_mandate of this Place.  # noqa: E501
        :type: list[str]
        """

        self._president_general_council_mandate = president_general_council_mandate

    @property
    def limit(self):
        """Gets the limit of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The limit of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this Place.

        Description not available  # noqa: E501

        :param limit: The limit of this Place.  # noqa: E501
        :type: list[str]
        """

        self._limit = limit

    @property
    def refgeo(self):
        """Gets the refgeo of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The refgeo of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._refgeo

    @refgeo.setter
    def refgeo(self, refgeo):
        """Sets the refgeo of this Place.

        Description not available  # noqa: E501

        :param refgeo: The refgeo of this Place.  # noqa: E501
        :type: list[str]
        """

        self._refgeo = refgeo

    @property
    def protection_status(self):
        """Gets the protection_status of this Place.  # noqa: E501

        The sort of status that is granted to a protected Building or Monument. This is not about being protected or not, this is about the nature of the protection regime. E.g., in the Netherlands the protection status 'rijksmonument' points to more elaborate protection than other statuses.  # noqa: E501

        :return: The protection_status of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._protection_status

    @protection_status.setter
    def protection_status(self, protection_status):
        """Sets the protection_status of this Place.

        The sort of status that is granted to a protected Building or Monument. This is not about being protected or not, this is about the nature of the protection regime. E.g., in the Netherlands the protection status 'rijksmonument' points to more elaborate protection than other statuses.  # noqa: E501

        :param protection_status: The protection_status of this Place.  # noqa: E501
        :type: list[str]
        """

        self._protection_status = protection_status

    @property
    def regional_prefecture(self):
        """Gets the regional_prefecture of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The regional_prefecture of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._regional_prefecture

    @regional_prefecture.setter
    def regional_prefecture(self, regional_prefecture):
        """Sets the regional_prefecture of this Place.

        Description not available  # noqa: E501

        :param regional_prefecture: The regional_prefecture of this Place.  # noqa: E501
        :type: list[str]
        """

        self._regional_prefecture = regional_prefecture

    @property
    def refgen(self):
        """Gets the refgen of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The refgen of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._refgen

    @refgen.setter
    def refgen(self, refgen):
        """Sets the refgen of this Place.

        Description not available  # noqa: E501

        :param refgen: The refgen of this Place.  # noqa: E501
        :type: list[str]
        """

        self._refgen = refgen

    @property
    def different(self):
        """Gets the different of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The different of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._different

    @different.setter
    def different(self, different):
        """Sets the different of this Place.

        Description not available  # noqa: E501

        :param different: The different of this Place.  # noqa: E501
        :type: list[str]
        """

        self._different = different

    @property
    def representative(self):
        """Gets the representative of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The representative of this Place.  # noqa: E501
        :rtype: list[int]
        """
        return self._representative

    @representative.setter
    def representative(self, representative):
        """Sets the representative of this Place.

        Description not available  # noqa: E501

        :param representative: The representative of this Place.  # noqa: E501
        :type: list[int]
        """

        self._representative = representative

    @property
    def refpol(self):
        """Gets the refpol of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The refpol of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._refpol

    @refpol.setter
    def refpol(self, refpol):
        """Sets the refpol of this Place.

        Description not available  # noqa: E501

        :param refpol: The refpol of this Place.  # noqa: E501
        :type: list[str]
        """

        self._refpol = refpol

    @property
    def maximum_area_quote(self):
        """Gets the maximum_area_quote of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The maximum_area_quote of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._maximum_area_quote

    @maximum_area_quote.setter
    def maximum_area_quote(self, maximum_area_quote):
        """Sets the maximum_area_quote of this Place.

        Description not available  # noqa: E501

        :param maximum_area_quote: The maximum_area_quote of this Place.  # noqa: E501
        :type: list[str]
        """

        self._maximum_area_quote = maximum_area_quote

    @property
    def population_quote(self):
        """Gets the population_quote of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The population_quote of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._population_quote

    @population_quote.setter
    def population_quote(self, population_quote):
        """Sets the population_quote of this Place.

        Description not available  # noqa: E501

        :param population_quote: The population_quote of this Place.  # noqa: E501
        :type: list[str]
        """

        self._population_quote = population_quote

    @property
    def utc_offset(self):
        """Gets the utc_offset of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The utc_offset of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._utc_offset

    @utc_offset.setter
    def utc_offset(self, utc_offset):
        """Sets the utc_offset of this Place.

        Description not available  # noqa: E501

        :param utc_offset: The utc_offset of this Place.  # noqa: E501
        :type: list[str]
        """

        self._utc_offset = utc_offset

    @property
    def per_capita_income_rank(self):
        """Gets the per_capita_income_rank of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The per_capita_income_rank of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._per_capita_income_rank

    @per_capita_income_rank.setter
    def per_capita_income_rank(self, per_capita_income_rank):
        """Sets the per_capita_income_rank of this Place.

        Description not available  # noqa: E501

        :param per_capita_income_rank: The per_capita_income_rank of this Place.  # noqa: E501
        :type: list[str]
        """

        self._per_capita_income_rank = per_capita_income_rank

    @property
    def ski_piste_kilometre(self):
        """Gets the ski_piste_kilometre of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The ski_piste_kilometre of this Place.  # noqa: E501
        :rtype: list[float]
        """
        return self._ski_piste_kilometre

    @ski_piste_kilometre.setter
    def ski_piste_kilometre(self, ski_piste_kilometre):
        """Sets the ski_piste_kilometre of this Place.

        Description not available  # noqa: E501

        :param ski_piste_kilometre: The ski_piste_kilometre of this Place.  # noqa: E501
        :type: list[float]
        """

        self._ski_piste_kilometre = ski_piste_kilometre

    @property
    def biggest_city(self):
        """Gets the biggest_city of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The biggest_city of this Place.  # noqa: E501
        :rtype: list[object]
        """
        return self._biggest_city

    @biggest_city.setter
    def biggest_city(self, biggest_city):
        """Sets the biggest_city of this Place.

        Description not available  # noqa: E501

        :param biggest_city: The biggest_city of this Place.  # noqa: E501
        :type: list[object]
        """

        self._biggest_city = biggest_city

    @property
    def tree(self):
        """Gets the tree of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The tree of this Place.  # noqa: E501
        :rtype: list[object]
        """
        return self._tree

    @tree.setter
    def tree(self, tree):
        """Sets the tree of this Place.

        Description not available  # noqa: E501

        :param tree: The tree of this Place.  # noqa: E501
        :type: list[object]
        """

        self._tree = tree

    @property
    def vehicle_code(self):
        """Gets the vehicle_code of this Place.  # noqa: E501

        Region related vehicle code on the vehicle plates.  # noqa: E501

        :return: The vehicle_code of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._vehicle_code

    @vehicle_code.setter
    def vehicle_code(self, vehicle_code):
        """Sets the vehicle_code of this Place.

        Region related vehicle code on the vehicle plates.  # noqa: E501

        :param vehicle_code: The vehicle_code of this Place.  # noqa: E501
        :type: list[str]
        """

        self._vehicle_code = vehicle_code

    @property
    def minimum_area(self):
        """Gets the minimum_area of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The minimum_area of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._minimum_area

    @minimum_area.setter
    def minimum_area(self, minimum_area):
        """Sets the minimum_area of this Place.

        Description not available  # noqa: E501

        :param minimum_area: The minimum_area of this Place.  # noqa: E501
        :type: list[str]
        """

        self._minimum_area = minimum_area

    @property
    def municipality_code(self):
        """Gets the municipality_code of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The municipality_code of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._municipality_code

    @municipality_code.setter
    def municipality_code(self, municipality_code):
        """Sets the municipality_code of this Place.

        Description not available  # noqa: E501

        :param municipality_code: The municipality_code of this Place.  # noqa: E501
        :type: list[str]
        """

        self._municipality_code = municipality_code

    @property
    def water(self):
        """Gets the water of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The water of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._water

    @water.setter
    def water(self, water):
        """Sets the water of this Place.

        Description not available  # noqa: E501

        :param water: The water of this Place.  # noqa: E501
        :type: list[str]
        """

        self._water = water

    @property
    def elevation_quote(self):
        """Gets the elevation_quote of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The elevation_quote of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._elevation_quote

    @elevation_quote.setter
    def elevation_quote(self, elevation_quote):
        """Sets the elevation_quote of this Place.

        Description not available  # noqa: E501

        :param elevation_quote: The elevation_quote of this Place.  # noqa: E501
        :type: list[str]
        """

        self._elevation_quote = elevation_quote

    @property
    def average_depth_quote(self):
        """Gets the average_depth_quote of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The average_depth_quote of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._average_depth_quote

    @average_depth_quote.setter
    def average_depth_quote(self, average_depth_quote):
        """Sets the average_depth_quote of this Place.

        Description not available  # noqa: E501

        :param average_depth_quote: The average_depth_quote of this Place.  # noqa: E501
        :type: list[str]
        """

        self._average_depth_quote = average_depth_quote

    @property
    def geologic_period(self):
        """Gets the geologic_period of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The geologic_period of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._geologic_period

    @geologic_period.setter
    def geologic_period(self, geologic_period):
        """Sets the geologic_period of this Place.

        Description not available  # noqa: E501

        :param geologic_period: The geologic_period of this Place.  # noqa: E501
        :type: list[str]
        """

        self._geologic_period = geologic_period

    @property
    def area_land(self):
        """Gets the area_land of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The area_land of this Place.  # noqa: E501
        :rtype: list[float]
        """
        return self._area_land

    @area_land.setter
    def area_land(self, area_land):
        """Sets the area_land of this Place.

        Description not available  # noqa: E501

        :param area_land: The area_land of this Place.  # noqa: E501
        :type: list[float]
        """

        self._area_land = area_land

    @property
    def red_ski_piste_number(self):
        """Gets the red_ski_piste_number of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The red_ski_piste_number of this Place.  # noqa: E501
        :rtype: list[int]
        """
        return self._red_ski_piste_number

    @red_ski_piste_number.setter
    def red_ski_piste_number(self, red_ski_piste_number):
        """Sets the red_ski_piste_number of this Place.

        Description not available  # noqa: E501

        :param red_ski_piste_number: The red_ski_piste_number of this Place.  # noqa: E501
        :type: list[int]
        """

        self._red_ski_piste_number = red_ski_piste_number

    @property
    def unlo_code(self):
        """Gets the unlo_code of this Place.  # noqa: E501

        UN/LOCODE, the United Nations Code for Trade and Transport Locations, is a geographic coding scheme developed and maintained by United Nations Economic Commission for Europe (UNECE), a unit of the United Nations. UN/LOCODE assigns codes to locations used in trade and transport  with functions such as seaports, rail and road terminals, airports, post offices and border crossing points.  # noqa: E501

        :return: The unlo_code of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._unlo_code

    @unlo_code.setter
    def unlo_code(self, unlo_code):
        """Sets the unlo_code of this Place.

        UN/LOCODE, the United Nations Code for Trade and Transport Locations, is a geographic coding scheme developed and maintained by United Nations Economic Commission for Europe (UNECE), a unit of the United Nations. UN/LOCODE assigns codes to locations used in trade and transport  with functions such as seaports, rail and road terminals, airports, post offices and border crossing points.  # noqa: E501

        :param unlo_code: The unlo_code of this Place.  # noqa: E501
        :type: list[str]
        """

        self._unlo_code = unlo_code

    @property
    def district(self):
        """Gets the district of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The district of this Place.  # noqa: E501
        :rtype: list[object]
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this Place.

        Description not available  # noqa: E501

        :param district: The district of this Place.  # noqa: E501
        :type: list[object]
        """

        self._district = district

    @property
    def main_island(self):
        """Gets the main_island of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The main_island of this Place.  # noqa: E501
        :rtype: list[object]
        """
        return self._main_island

    @main_island.setter
    def main_island(self, main_island):
        """Sets the main_island of this Place.

        Description not available  # noqa: E501

        :param main_island: The main_island of this Place.  # noqa: E501
        :type: list[object]
        """

        self._main_island = main_island

    @property
    def parliament_type(self):
        """Gets the parliament_type of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The parliament_type of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._parliament_type

    @parliament_type.setter
    def parliament_type(self, parliament_type):
        """Sets the parliament_type of this Place.

        Description not available  # noqa: E501

        :param parliament_type: The parliament_type of this Place.  # noqa: E501
        :type: list[str]
        """

        self._parliament_type = parliament_type

    @property
    def previous_entity(self):
        """Gets the previous_entity of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The previous_entity of this Place.  # noqa: E501
        :rtype: list[object]
        """
        return self._previous_entity

    @previous_entity.setter
    def previous_entity(self, previous_entity):
        """Sets the previous_entity of this Place.

        Description not available  # noqa: E501

        :param previous_entity: The previous_entity of this Place.  # noqa: E501
        :type: list[object]
        """

        self._previous_entity = previous_entity

    @property
    def maximum_area(self):
        """Gets the maximum_area of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The maximum_area of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._maximum_area

    @maximum_area.setter
    def maximum_area(self, maximum_area):
        """Sets the maximum_area of this Place.

        Description not available  # noqa: E501

        :param maximum_area: The maximum_area of this Place.  # noqa: E501
        :type: list[str]
        """

        self._maximum_area = maximum_area

    @property
    def lake(self):
        """Gets the lake of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The lake of this Place.  # noqa: E501
        :rtype: list[object]
        """
        return self._lake

    @lake.setter
    def lake(self, lake):
        """Sets the lake of this Place.

        Description not available  # noqa: E501

        :param lake: The lake of this Place.  # noqa: E501
        :type: list[object]
        """

        self._lake = lake

    @property
    def neighbour_region(self):
        """Gets the neighbour_region of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The neighbour_region of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._neighbour_region

    @neighbour_region.setter
    def neighbour_region(self, neighbour_region):
        """Sets the neighbour_region of this Place.

        Description not available  # noqa: E501

        :param neighbour_region: The neighbour_region of this Place.  # noqa: E501
        :type: list[str]
        """

        self._neighbour_region = neighbour_region

    @property
    def event_date(self):
        """Gets the event_date of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The event_date of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._event_date

    @event_date.setter
    def event_date(self, event_date):
        """Sets the event_date of this Place.

        Description not available  # noqa: E501

        :param event_date: The event_date of this Place.  # noqa: E501
        :type: list[str]
        """

        self._event_date = event_date

    @property
    def minimum_area_quote(self):
        """Gets the minimum_area_quote of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The minimum_area_quote of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._minimum_area_quote

    @minimum_area_quote.setter
    def minimum_area_quote(self, minimum_area_quote):
        """Sets the minimum_area_quote of this Place.

        Description not available  # noqa: E501

        :param minimum_area_quote: The minimum_area_quote of this Place.  # noqa: E501
        :type: list[str]
        """

        self._minimum_area_quote = minimum_area_quote

    @property
    def altitude(self):
        """Gets the altitude of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The altitude of this Place.  # noqa: E501
        :rtype: list[object]
        """
        return self._altitude

    @altitude.setter
    def altitude(self, altitude):
        """Sets the altitude of this Place.

        Description not available  # noqa: E501

        :param altitude: The altitude of this Place.  # noqa: E501
        :type: list[object]
        """

        self._altitude = altitude

    @property
    def sovereign_country(self):
        """Gets the sovereign_country of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The sovereign_country of this Place.  # noqa: E501
        :rtype: list[object]
        """
        return self._sovereign_country

    @sovereign_country.setter
    def sovereign_country(self, sovereign_country):
        """Sets the sovereign_country of this Place.

        Description not available  # noqa: E501

        :param sovereign_country: The sovereign_country of this Place.  # noqa: E501
        :type: list[object]
        """

        self._sovereign_country = sovereign_country

    @property
    def national_topographic_system_map_number(self):
        """Gets the national_topographic_system_map_number of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The national_topographic_system_map_number of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._national_topographic_system_map_number

    @national_topographic_system_map_number.setter
    def national_topographic_system_map_number(self, national_topographic_system_map_number):
        """Sets the national_topographic_system_map_number of this Place.

        Description not available  # noqa: E501

        :param national_topographic_system_map_number: The national_topographic_system_map_number of this Place.  # noqa: E501
        :type: list[str]
        """

        self._national_topographic_system_map_number = national_topographic_system_map_number

    @property
    def budget_year(self):
        """Gets the budget_year of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The budget_year of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._budget_year

    @budget_year.setter
    def budget_year(self, budget_year):
        """Sets the budget_year of this Place.

        Description not available  # noqa: E501

        :param budget_year: The budget_year of this Place.  # noqa: E501
        :type: list[str]
        """

        self._budget_year = budget_year

    @property
    def historical_map(self):
        """Gets the historical_map of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The historical_map of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._historical_map

    @historical_map.setter
    def historical_map(self, historical_map):
        """Sets the historical_map of this Place.

        Description not available  # noqa: E501

        :param historical_map: The historical_map of this Place.  # noqa: E501
        :type: list[str]
        """

        self._historical_map = historical_map

    @property
    def next_entity(self):
        """Gets the next_entity of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The next_entity of this Place.  # noqa: E501
        :rtype: list[object]
        """
        return self._next_entity

    @next_entity.setter
    def next_entity(self, next_entity):
        """Sets the next_entity of this Place.

        Description not available  # noqa: E501

        :param next_entity: The next_entity of this Place.  # noqa: E501
        :type: list[object]
        """

        self._next_entity = next_entity

    @property
    def annual_temperature(self):
        """Gets the annual_temperature of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The annual_temperature of this Place.  # noqa: E501
        :rtype: list[float]
        """
        return self._annual_temperature

    @annual_temperature.setter
    def annual_temperature(self, annual_temperature):
        """Sets the annual_temperature of this Place.

        Description not available  # noqa: E501

        :param annual_temperature: The annual_temperature of this Place.  # noqa: E501
        :type: list[float]
        """

        self._annual_temperature = annual_temperature

    @property
    def scale(self):
        """Gets the scale of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The scale of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._scale

    @scale.setter
    def scale(self, scale):
        """Sets the scale of this Place.

        Description not available  # noqa: E501

        :param scale: The scale of this Place.  # noqa: E501
        :type: list[str]
        """

        self._scale = scale

    @property
    def description(self):
        """Gets the description of this Place.  # noqa: E501

        small description  # noqa: E501

        :return: The description of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Place.

        small description  # noqa: E501

        :param description: The description of this Place.  # noqa: E501
        :type: list[str]
        """

        self._description = description

    @property
    def regency(self):
        """Gets the regency of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The regency of this Place.  # noqa: E501
        :rtype: list[object]
        """
        return self._regency

    @regency.setter
    def regency(self, regency):
        """Sets the regency of this Place.

        Description not available  # noqa: E501

        :param regency: The regency of this Place.  # noqa: E501
        :type: list[object]
        """

        self._regency = regency

    @property
    def long_distance_piste_kilometre(self):
        """Gets the long_distance_piste_kilometre of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The long_distance_piste_kilometre of this Place.  # noqa: E501
        :rtype: list[float]
        """
        return self._long_distance_piste_kilometre

    @long_distance_piste_kilometre.setter
    def long_distance_piste_kilometre(self, long_distance_piste_kilometre):
        """Sets the long_distance_piste_kilometre of this Place.

        Description not available  # noqa: E501

        :param long_distance_piste_kilometre: The long_distance_piste_kilometre of this Place.  # noqa: E501
        :type: list[float]
        """

        self._long_distance_piste_kilometre = long_distance_piste_kilometre

    @property
    def code_municipal_monument(self):
        """Gets the code_municipal_monument of this Place.  # noqa: E501

        Code assigned to (Dutch) monuments at the municipal level, deemed to be of local value  # noqa: E501

        :return: The code_municipal_monument of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._code_municipal_monument

    @code_municipal_monument.setter
    def code_municipal_monument(self, code_municipal_monument):
        """Sets the code_municipal_monument of this Place.

        Code assigned to (Dutch) monuments at the municipal level, deemed to be of local value  # noqa: E501

        :param code_municipal_monument: The code_municipal_monument of this Place.  # noqa: E501
        :type: list[str]
        """

        self._code_municipal_monument = code_municipal_monument

    @property
    def average_depth(self):
        """Gets the average_depth of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The average_depth of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._average_depth

    @average_depth.setter
    def average_depth(self, average_depth):
        """Sets the average_depth of this Place.

        Description not available  # noqa: E501

        :param average_depth: The average_depth of this Place.  # noqa: E501
        :type: list[str]
        """

        self._average_depth = average_depth

    @property
    def sub_prefecture(self):
        """Gets the sub_prefecture of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The sub_prefecture of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._sub_prefecture

    @sub_prefecture.setter
    def sub_prefecture(self, sub_prefecture):
        """Sets the sub_prefecture of this Place.

        Description not available  # noqa: E501

        :param sub_prefecture: The sub_prefecture of this Place.  # noqa: E501
        :type: list[str]
        """

        self._sub_prefecture = sub_prefecture

    @property
    def ski_piste_number(self):
        """Gets the ski_piste_number of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The ski_piste_number of this Place.  # noqa: E501
        :rtype: list[int]
        """
        return self._ski_piste_number

    @ski_piste_number.setter
    def ski_piste_number(self, ski_piste_number):
        """Sets the ski_piste_number of this Place.

        Description not available  # noqa: E501

        :param ski_piste_number: The ski_piste_number of this Place.  # noqa: E501
        :type: list[int]
        """

        self._ski_piste_number = ski_piste_number

    @property
    def subdivision(self):
        """Gets the subdivision of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The subdivision of this Place.  # noqa: E501
        :rtype: list[object]
        """
        return self._subdivision

    @subdivision.setter
    def subdivision(self, subdivision):
        """Sets the subdivision of this Place.

        Description not available  # noqa: E501

        :param subdivision: The subdivision of this Place.  # noqa: E501
        :type: list[object]
        """

        self._subdivision = subdivision

    @property
    def snow_park_number(self):
        """Gets the snow_park_number of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The snow_park_number of this Place.  # noqa: E501
        :rtype: list[int]
        """
        return self._snow_park_number

    @snow_park_number.setter
    def snow_park_number(self, snow_park_number):
        """Sets the snow_park_number of this Place.

        Description not available  # noqa: E501

        :param snow_park_number: The snow_park_number of this Place.  # noqa: E501
        :type: list[int]
        """

        self._snow_park_number = snow_park_number

    @property
    def depth_quote(self):
        """Gets the depth_quote of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The depth_quote of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._depth_quote

    @depth_quote.setter
    def depth_quote(self, depth_quote):
        """Sets the depth_quote of this Place.

        Description not available  # noqa: E501

        :param depth_quote: The depth_quote of this Place.  # noqa: E501
        :type: list[str]
        """

        self._depth_quote = depth_quote

    @property
    def area_quote(self):
        """Gets the area_quote of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The area_quote of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._area_quote

    @area_quote.setter
    def area_quote(self, area_quote):
        """Sets the area_quote of this Place.

        Description not available  # noqa: E501

        :param area_quote: The area_quote of this Place.  # noqa: E501
        :type: list[str]
        """

        self._area_quote = area_quote

    @property
    def area_total(self):
        """Gets the area_total of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The area_total of this Place.  # noqa: E501
        :rtype: list[float]
        """
        return self._area_total

    @area_total.setter
    def area_total(self, area_total):
        """Sets the area_total of this Place.

        Description not available  # noqa: E501

        :param area_total: The area_total of this Place.  # noqa: E501
        :type: list[float]
        """

        self._area_total = area_total

    @property
    def avifauna_population(self):
        """Gets the avifauna_population of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The avifauna_population of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._avifauna_population

    @avifauna_population.setter
    def avifauna_population(self, avifauna_population):
        """Sets the avifauna_population of this Place.

        Description not available  # noqa: E501

        :param avifauna_population: The avifauna_population of this Place.  # noqa: E501
        :type: list[str]
        """

        self._avifauna_population = avifauna_population

    @property
    def ski_tow(self):
        """Gets the ski_tow of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The ski_tow of this Place.  # noqa: E501
        :rtype: list[int]
        """
        return self._ski_tow

    @ski_tow.setter
    def ski_tow(self, ski_tow):
        """Sets the ski_tow of this Place.

        Description not available  # noqa: E501

        :param ski_tow: The ski_tow of this Place.  # noqa: E501
        :type: list[int]
        """

        self._ski_tow = ski_tow

    @property
    def capital_coordinates(self):
        """Gets the capital_coordinates of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The capital_coordinates of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._capital_coordinates

    @capital_coordinates.setter
    def capital_coordinates(self, capital_coordinates):
        """Sets the capital_coordinates of this Place.

        Description not available  # noqa: E501

        :param capital_coordinates: The capital_coordinates of this Place.  # noqa: E501
        :type: list[str]
        """

        self._capital_coordinates = capital_coordinates

    @property
    def land(self):
        """Gets the land of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The land of this Place.  # noqa: E501
        :rtype: list[object]
        """
        return self._land

    @land.setter
    def land(self, land):
        """Sets the land of this Place.

        Description not available  # noqa: E501

        :param land: The land of this Place.  # noqa: E501
        :type: list[object]
        """

        self._land = land

    @property
    def length_quote(self):
        """Gets the length_quote of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The length_quote of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._length_quote

    @length_quote.setter
    def length_quote(self, length_quote):
        """Sets the length_quote of this Place.

        Description not available  # noqa: E501

        :param length_quote: The length_quote of this Place.  # noqa: E501
        :type: list[str]
        """

        self._length_quote = length_quote

    @property
    def relief(self):
        """Gets the relief of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The relief of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._relief

    @relief.setter
    def relief(self, relief):
        """Sets the relief of this Place.

        Description not available  # noqa: E501

        :param relief: The relief of this Place.  # noqa: E501
        :type: list[str]
        """

        self._relief = relief

    @property
    def elevation(self):
        """Gets the elevation of this Place.  # noqa: E501

        average elevation above the sea level  # noqa: E501

        :return: The elevation of this Place.  # noqa: E501
        :rtype: list[float]
        """
        return self._elevation

    @elevation.setter
    def elevation(self, elevation):
        """Sets the elevation of this Place.

        average elevation above the sea level  # noqa: E501

        :param elevation: The elevation of this Place.  # noqa: E501
        :type: list[float]
        """

        self._elevation = elevation

    @property
    def endangered_since(self):
        """Gets the endangered_since of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The endangered_since of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._endangered_since

    @endangered_since.setter
    def endangered_since(self, endangered_since):
        """Sets the endangered_since of this Place.

        Description not available  # noqa: E501

        :param endangered_since: The endangered_since of this Place.  # noqa: E501
        :type: list[str]
        """

        self._endangered_since = endangered_since

    @property
    def subdivision_link(self):
        """Gets the subdivision_link of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The subdivision_link of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._subdivision_link

    @subdivision_link.setter
    def subdivision_link(self, subdivision_link):
        """Sets the subdivision_link of this Place.

        Description not available  # noqa: E501

        :param subdivision_link: The subdivision_link of this Place.  # noqa: E501
        :type: list[str]
        """

        self._subdivision_link = subdivision_link

    @property
    def merger_date(self):
        """Gets the merger_date of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The merger_date of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._merger_date

    @merger_date.setter
    def merger_date(self, merger_date):
        """Sets the merger_date of this Place.

        Description not available  # noqa: E501

        :param merger_date: The merger_date of this Place.  # noqa: E501
        :type: list[str]
        """

        self._merger_date = merger_date

    @property
    def blue_ski_piste_number(self):
        """Gets the blue_ski_piste_number of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The blue_ski_piste_number of this Place.  # noqa: E501
        :rtype: list[int]
        """
        return self._blue_ski_piste_number

    @blue_ski_piste_number.setter
    def blue_ski_piste_number(self, blue_ski_piste_number):
        """Sets the blue_ski_piste_number of this Place.

        Description not available  # noqa: E501

        :param blue_ski_piste_number: The blue_ski_piste_number of this Place.  # noqa: E501
        :type: list[int]
        """

        self._blue_ski_piste_number = blue_ski_piste_number

    @property
    def label(self):
        """Gets the label of this Place.  # noqa: E501

        short description of the resource  # noqa: E501

        :return: The label of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Place.

        short description of the resource  # noqa: E501

        :param label: The label of this Place.  # noqa: E501
        :type: list[str]
        """

        self._label = label

    @property
    def historical_name(self):
        """Gets the historical_name of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The historical_name of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._historical_name

    @historical_name.setter
    def historical_name(self, historical_name):
        """Sets the historical_name of this Place.

        Description not available  # noqa: E501

        :param historical_name: The historical_name of this Place.  # noqa: E501
        :type: list[str]
        """

        self._historical_name = historical_name

    @property
    def nearest_city(self):
        """Gets the nearest_city of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The nearest_city of this Place.  # noqa: E501
        :rtype: list[object]
        """
        return self._nearest_city

    @nearest_city.setter
    def nearest_city(self, nearest_city):
        """Sets the nearest_city of this Place.

        Description not available  # noqa: E501

        :param nearest_city: The nearest_city of this Place.  # noqa: E501
        :type: list[object]
        """

        self._nearest_city = nearest_city

    @property
    def subsystem_link(self):
        """Gets the subsystem_link of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The subsystem_link of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._subsystem_link

    @subsystem_link.setter
    def subsystem_link(self, subsystem_link):
        """Sets the subsystem_link of this Place.

        Description not available  # noqa: E501

        :param subsystem_link: The subsystem_link of this Place.  # noqa: E501
        :type: list[str]
        """

        self._subsystem_link = subsystem_link

    @property
    def nuts_code(self):
        """Gets the nuts_code of this Place.  # noqa: E501

        Nomenclature of Territorial Units for Statistics (NUTS) is a geocode  standard for referencing the subdivisions of countries  for statistical purposes. The standard is developed and regulated by the European Union, and thus only covers the member states of the EU in detail.  # noqa: E501

        :return: The nuts_code of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._nuts_code

    @nuts_code.setter
    def nuts_code(self, nuts_code):
        """Sets the nuts_code of this Place.

        Nomenclature of Territorial Units for Statistics (NUTS) is a geocode  standard for referencing the subdivisions of countries  for statistical purposes. The standard is developed and regulated by the European Union, and thus only covers the member states of the EU in detail.  # noqa: E501

        :param nuts_code: The nuts_code of this Place.  # noqa: E501
        :type: list[str]
        """

        self._nuts_code = nuts_code

    @property
    def authority_mandate(self):
        """Gets the authority_mandate of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The authority_mandate of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._authority_mandate

    @authority_mandate.setter
    def authority_mandate(self, authority_mandate):
        """Sets the authority_mandate of this Place.

        Description not available  # noqa: E501

        :param authority_mandate: The authority_mandate of this Place.  # noqa: E501
        :type: list[str]
        """

        self._authority_mandate = authority_mandate

    @property
    def whole_area(self):
        """Gets the whole_area of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The whole_area of this Place.  # noqa: E501
        :rtype: list[object]
        """
        return self._whole_area

    @whole_area.setter
    def whole_area(self, whole_area):
        """Sets the whole_area of this Place.

        Description not available  # noqa: E501

        :param whole_area: The whole_area of this Place.  # noqa: E501
        :type: list[object]
        """

        self._whole_area = whole_area

    @property
    def iso_code(self):
        """Gets the iso_code of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The iso_code of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._iso_code

    @iso_code.setter
    def iso_code(self, iso_code):
        """Sets the iso_code of this Place.

        Description not available  # noqa: E501

        :param iso_code: The iso_code of this Place.  # noqa: E501
        :type: list[str]
        """

        self._iso_code = iso_code

    @property
    def area_rank(self):
        """Gets the area_rank of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The area_rank of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._area_rank

    @area_rank.setter
    def area_rank(self, area_rank):
        """Sets the area_rank of this Place.

        Description not available  # noqa: E501

        :param area_rank: The area_rank of this Place.  # noqa: E501
        :type: list[str]
        """

        self._area_rank = area_rank

    @property
    def width_quote(self):
        """Gets the width_quote of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The width_quote of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._width_quote

    @width_quote.setter
    def width_quote(self, width_quote):
        """Sets the width_quote of this Place.

        Description not available  # noqa: E501

        :param width_quote: The width_quote of this Place.  # noqa: E501
        :type: list[str]
        """

        self._width_quote = width_quote

    @property
    def maximum_depth_quote(self):
        """Gets the maximum_depth_quote of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The maximum_depth_quote of this Place.  # noqa: E501
        :rtype: list[str]
        """
        return self._maximum_depth_quote

    @maximum_depth_quote.setter
    def maximum_depth_quote(self, maximum_depth_quote):
        """Sets the maximum_depth_quote of this Place.

        Description not available  # noqa: E501

        :param maximum_depth_quote: The maximum_depth_quote of this Place.  # noqa: E501
        :type: list[str]
        """

        self._maximum_depth_quote = maximum_depth_quote

    @property
    def cable_car(self):
        """Gets the cable_car of this Place.  # noqa: E501

        Description not available  # noqa: E501

        :return: The cable_car of this Place.  # noqa: E501
        :rtype: list[int]
        """
        return self._cable_car

    @cable_car.setter
    def cable_car(self, cable_car):
        """Sets the cable_car of this Place.

        Description not available  # noqa: E501

        :param cable_car: The cable_car of this Place.  # noqa: E501
        :type: list[int]
        """

        self._cable_car = cable_car

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Place):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Place):
            return True

        return self.to_dict() != other.to_dict()
