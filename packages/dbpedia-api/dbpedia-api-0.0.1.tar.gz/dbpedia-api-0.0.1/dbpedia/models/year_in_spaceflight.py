# coding: utf-8

"""
    DBpedia

    This is the API of the DBpedia Ontology  # noqa: E501

    The version of the OpenAPI document: v0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dbpedia.configuration import Configuration


class YearInSpaceflight(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'country_with_first_satellite_launched': 'list[object]',
        'last_launch': 'list[str]',
        'description': 'list[str]',
        'country_with_first_astronaut': 'list[object]',
        'label': 'list[str]',
        'type': 'list[str]',
        'maiden_flight_rocket': 'list[object]',
        'country_with_first_satellite': 'list[object]',
        'orbital_flights': 'list[int]',
        'first_launch': 'list[str]',
        'country_with_first_spaceflight': 'list[object]',
        'total_travellers': 'list[int]',
        'retired_rocket': 'list[object]',
        'suborbital_flights': 'list[int]',
        'id': 'str'
    }

    attribute_map = {
        'country_with_first_satellite_launched': 'countryWithFirstSatelliteLaunched',
        'last_launch': 'lastLaunch',
        'description': 'description',
        'country_with_first_astronaut': 'countryWithFirstAstronaut',
        'label': 'label',
        'type': 'type',
        'maiden_flight_rocket': 'maidenFlightRocket',
        'country_with_first_satellite': 'countryWithFirstSatellite',
        'orbital_flights': 'orbitalFlights',
        'first_launch': 'firstLaunch',
        'country_with_first_spaceflight': 'countryWithFirstSpaceflight',
        'total_travellers': 'totalTravellers',
        'retired_rocket': 'retiredRocket',
        'suborbital_flights': 'suborbitalFlights',
        'id': 'id'
    }

    def __init__(self, country_with_first_satellite_launched=None, last_launch=None, description=None, country_with_first_astronaut=None, label=None, type=None, maiden_flight_rocket=None, country_with_first_satellite=None, orbital_flights=None, first_launch=None, country_with_first_spaceflight=None, total_travellers=None, retired_rocket=None, suborbital_flights=None, id=None, local_vars_configuration=None):  # noqa: E501
        """YearInSpaceflight - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._country_with_first_satellite_launched = None
        self._last_launch = None
        self._description = None
        self._country_with_first_astronaut = None
        self._label = None
        self._type = None
        self._maiden_flight_rocket = None
        self._country_with_first_satellite = None
        self._orbital_flights = None
        self._first_launch = None
        self._country_with_first_spaceflight = None
        self._total_travellers = None
        self._retired_rocket = None
        self._suborbital_flights = None
        self._id = None
        self.discriminator = None

        self.country_with_first_satellite_launched = country_with_first_satellite_launched
        self.last_launch = last_launch
        self.description = description
        self.country_with_first_astronaut = country_with_first_astronaut
        self.label = label
        self.type = type
        self.maiden_flight_rocket = maiden_flight_rocket
        self.country_with_first_satellite = country_with_first_satellite
        self.orbital_flights = orbital_flights
        self.first_launch = first_launch
        self.country_with_first_spaceflight = country_with_first_spaceflight
        self.total_travellers = total_travellers
        self.retired_rocket = retired_rocket
        self.suborbital_flights = suborbital_flights
        if id is not None:
            self.id = id

    @property
    def country_with_first_satellite_launched(self):
        """Gets the country_with_first_satellite_launched of this YearInSpaceflight.  # noqa: E501

        Description not available  # noqa: E501

        :return: The country_with_first_satellite_launched of this YearInSpaceflight.  # noqa: E501
        :rtype: list[object]
        """
        return self._country_with_first_satellite_launched

    @country_with_first_satellite_launched.setter
    def country_with_first_satellite_launched(self, country_with_first_satellite_launched):
        """Sets the country_with_first_satellite_launched of this YearInSpaceflight.

        Description not available  # noqa: E501

        :param country_with_first_satellite_launched: The country_with_first_satellite_launched of this YearInSpaceflight.  # noqa: E501
        :type: list[object]
        """

        self._country_with_first_satellite_launched = country_with_first_satellite_launched

    @property
    def last_launch(self):
        """Gets the last_launch of this YearInSpaceflight.  # noqa: E501

        Description not available  # noqa: E501

        :return: The last_launch of this YearInSpaceflight.  # noqa: E501
        :rtype: list[str]
        """
        return self._last_launch

    @last_launch.setter
    def last_launch(self, last_launch):
        """Sets the last_launch of this YearInSpaceflight.

        Description not available  # noqa: E501

        :param last_launch: The last_launch of this YearInSpaceflight.  # noqa: E501
        :type: list[str]
        """

        self._last_launch = last_launch

    @property
    def description(self):
        """Gets the description of this YearInSpaceflight.  # noqa: E501

        small description  # noqa: E501

        :return: The description of this YearInSpaceflight.  # noqa: E501
        :rtype: list[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this YearInSpaceflight.

        small description  # noqa: E501

        :param description: The description of this YearInSpaceflight.  # noqa: E501
        :type: list[str]
        """

        self._description = description

    @property
    def country_with_first_astronaut(self):
        """Gets the country_with_first_astronaut of this YearInSpaceflight.  # noqa: E501

        Description not available  # noqa: E501

        :return: The country_with_first_astronaut of this YearInSpaceflight.  # noqa: E501
        :rtype: list[object]
        """
        return self._country_with_first_astronaut

    @country_with_first_astronaut.setter
    def country_with_first_astronaut(self, country_with_first_astronaut):
        """Sets the country_with_first_astronaut of this YearInSpaceflight.

        Description not available  # noqa: E501

        :param country_with_first_astronaut: The country_with_first_astronaut of this YearInSpaceflight.  # noqa: E501
        :type: list[object]
        """

        self._country_with_first_astronaut = country_with_first_astronaut

    @property
    def label(self):
        """Gets the label of this YearInSpaceflight.  # noqa: E501

        short description of the resource  # noqa: E501

        :return: The label of this YearInSpaceflight.  # noqa: E501
        :rtype: list[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this YearInSpaceflight.

        short description of the resource  # noqa: E501

        :param label: The label of this YearInSpaceflight.  # noqa: E501
        :type: list[str]
        """

        self._label = label

    @property
    def type(self):
        """Gets the type of this YearInSpaceflight.  # noqa: E501

        type of the resource  # noqa: E501

        :return: The type of this YearInSpaceflight.  # noqa: E501
        :rtype: list[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this YearInSpaceflight.

        type of the resource  # noqa: E501

        :param type: The type of this YearInSpaceflight.  # noqa: E501
        :type: list[str]
        """

        self._type = type

    @property
    def maiden_flight_rocket(self):
        """Gets the maiden_flight_rocket of this YearInSpaceflight.  # noqa: E501

        Description not available  # noqa: E501

        :return: The maiden_flight_rocket of this YearInSpaceflight.  # noqa: E501
        :rtype: list[object]
        """
        return self._maiden_flight_rocket

    @maiden_flight_rocket.setter
    def maiden_flight_rocket(self, maiden_flight_rocket):
        """Sets the maiden_flight_rocket of this YearInSpaceflight.

        Description not available  # noqa: E501

        :param maiden_flight_rocket: The maiden_flight_rocket of this YearInSpaceflight.  # noqa: E501
        :type: list[object]
        """

        self._maiden_flight_rocket = maiden_flight_rocket

    @property
    def country_with_first_satellite(self):
        """Gets the country_with_first_satellite of this YearInSpaceflight.  # noqa: E501

        Description not available  # noqa: E501

        :return: The country_with_first_satellite of this YearInSpaceflight.  # noqa: E501
        :rtype: list[object]
        """
        return self._country_with_first_satellite

    @country_with_first_satellite.setter
    def country_with_first_satellite(self, country_with_first_satellite):
        """Sets the country_with_first_satellite of this YearInSpaceflight.

        Description not available  # noqa: E501

        :param country_with_first_satellite: The country_with_first_satellite of this YearInSpaceflight.  # noqa: E501
        :type: list[object]
        """

        self._country_with_first_satellite = country_with_first_satellite

    @property
    def orbital_flights(self):
        """Gets the orbital_flights of this YearInSpaceflight.  # noqa: E501

        Description not available  # noqa: E501

        :return: The orbital_flights of this YearInSpaceflight.  # noqa: E501
        :rtype: list[int]
        """
        return self._orbital_flights

    @orbital_flights.setter
    def orbital_flights(self, orbital_flights):
        """Sets the orbital_flights of this YearInSpaceflight.

        Description not available  # noqa: E501

        :param orbital_flights: The orbital_flights of this YearInSpaceflight.  # noqa: E501
        :type: list[int]
        """

        self._orbital_flights = orbital_flights

    @property
    def first_launch(self):
        """Gets the first_launch of this YearInSpaceflight.  # noqa: E501

        Description not available  # noqa: E501

        :return: The first_launch of this YearInSpaceflight.  # noqa: E501
        :rtype: list[str]
        """
        return self._first_launch

    @first_launch.setter
    def first_launch(self, first_launch):
        """Sets the first_launch of this YearInSpaceflight.

        Description not available  # noqa: E501

        :param first_launch: The first_launch of this YearInSpaceflight.  # noqa: E501
        :type: list[str]
        """

        self._first_launch = first_launch

    @property
    def country_with_first_spaceflight(self):
        """Gets the country_with_first_spaceflight of this YearInSpaceflight.  # noqa: E501

        Description not available  # noqa: E501

        :return: The country_with_first_spaceflight of this YearInSpaceflight.  # noqa: E501
        :rtype: list[object]
        """
        return self._country_with_first_spaceflight

    @country_with_first_spaceflight.setter
    def country_with_first_spaceflight(self, country_with_first_spaceflight):
        """Sets the country_with_first_spaceflight of this YearInSpaceflight.

        Description not available  # noqa: E501

        :param country_with_first_spaceflight: The country_with_first_spaceflight of this YearInSpaceflight.  # noqa: E501
        :type: list[object]
        """

        self._country_with_first_spaceflight = country_with_first_spaceflight

    @property
    def total_travellers(self):
        """Gets the total_travellers of this YearInSpaceflight.  # noqa: E501

        Description not available  # noqa: E501

        :return: The total_travellers of this YearInSpaceflight.  # noqa: E501
        :rtype: list[int]
        """
        return self._total_travellers

    @total_travellers.setter
    def total_travellers(self, total_travellers):
        """Sets the total_travellers of this YearInSpaceflight.

        Description not available  # noqa: E501

        :param total_travellers: The total_travellers of this YearInSpaceflight.  # noqa: E501
        :type: list[int]
        """

        self._total_travellers = total_travellers

    @property
    def retired_rocket(self):
        """Gets the retired_rocket of this YearInSpaceflight.  # noqa: E501

        Description not available  # noqa: E501

        :return: The retired_rocket of this YearInSpaceflight.  # noqa: E501
        :rtype: list[object]
        """
        return self._retired_rocket

    @retired_rocket.setter
    def retired_rocket(self, retired_rocket):
        """Sets the retired_rocket of this YearInSpaceflight.

        Description not available  # noqa: E501

        :param retired_rocket: The retired_rocket of this YearInSpaceflight.  # noqa: E501
        :type: list[object]
        """

        self._retired_rocket = retired_rocket

    @property
    def suborbital_flights(self):
        """Gets the suborbital_flights of this YearInSpaceflight.  # noqa: E501

        Description not available  # noqa: E501

        :return: The suborbital_flights of this YearInSpaceflight.  # noqa: E501
        :rtype: list[int]
        """
        return self._suborbital_flights

    @suborbital_flights.setter
    def suborbital_flights(self, suborbital_flights):
        """Sets the suborbital_flights of this YearInSpaceflight.

        Description not available  # noqa: E501

        :param suborbital_flights: The suborbital_flights of this YearInSpaceflight.  # noqa: E501
        :type: list[int]
        """

        self._suborbital_flights = suborbital_flights

    @property
    def id(self):
        """Gets the id of this YearInSpaceflight.  # noqa: E501

        identifier  # noqa: E501

        :return: The id of this YearInSpaceflight.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this YearInSpaceflight.

        identifier  # noqa: E501

        :param id: The id of this YearInSpaceflight.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, YearInSpaceflight):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, YearInSpaceflight):
            return True

        return self.to_dict() != other.to_dict()
