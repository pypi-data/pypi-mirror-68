# coding: utf-8

"""
    DBpedia

    This is the API of the DBpedia Ontology  # noqa: E501

    The version of the OpenAPI document: v0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dbpedia.configuration import Configuration


class Ligament(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'branch_to': 'list[object]',
        'vein': 'list[object]',
        'gray_page': 'list[int]',
        'mesh_number': 'list[str]',
        'organ_system': 'list[object]',
        'mesh_name': 'list[str]',
        'description': 'list[str]',
        'label': 'list[str]',
        'drains_to': 'list[object]',
        'artery': 'list[object]',
        'type': 'list[str]',
        'branch_from': 'list[object]',
        'drains_from': 'list[object]',
        'lymph': 'list[object]',
        'dorlands_prefix': 'list[str]',
        'nerve': 'list[object]',
        'dorlands_suffix': 'list[str]',
        'precursor': 'list[object]',
        'id': 'str',
        'gray_subject': 'list[int]'
    }

    attribute_map = {
        'branch_to': 'branchTo',
        'vein': 'vein',
        'gray_page': 'grayPage',
        'mesh_number': 'meshNumber',
        'organ_system': 'organSystem',
        'mesh_name': 'meshName',
        'description': 'description',
        'label': 'label',
        'drains_to': 'drainsTo',
        'artery': 'artery',
        'type': 'type',
        'branch_from': 'branchFrom',
        'drains_from': 'drainsFrom',
        'lymph': 'lymph',
        'dorlands_prefix': 'dorlandsPrefix',
        'nerve': 'nerve',
        'dorlands_suffix': 'dorlandsSuffix',
        'precursor': 'precursor',
        'id': 'id',
        'gray_subject': 'graySubject'
    }

    def __init__(self, branch_to=None, vein=None, gray_page=None, mesh_number=None, organ_system=None, mesh_name=None, description=None, label=None, drains_to=None, artery=None, type=None, branch_from=None, drains_from=None, lymph=None, dorlands_prefix=None, nerve=None, dorlands_suffix=None, precursor=None, id=None, gray_subject=None, local_vars_configuration=None):  # noqa: E501
        """Ligament - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._branch_to = None
        self._vein = None
        self._gray_page = None
        self._mesh_number = None
        self._organ_system = None
        self._mesh_name = None
        self._description = None
        self._label = None
        self._drains_to = None
        self._artery = None
        self._type = None
        self._branch_from = None
        self._drains_from = None
        self._lymph = None
        self._dorlands_prefix = None
        self._nerve = None
        self._dorlands_suffix = None
        self._precursor = None
        self._id = None
        self._gray_subject = None
        self.discriminator = None

        self.branch_to = branch_to
        self.vein = vein
        self.gray_page = gray_page
        self.mesh_number = mesh_number
        self.organ_system = organ_system
        self.mesh_name = mesh_name
        self.description = description
        self.label = label
        self.drains_to = drains_to
        self.artery = artery
        self.type = type
        self.branch_from = branch_from
        self.drains_from = drains_from
        self.lymph = lymph
        self.dorlands_prefix = dorlands_prefix
        self.nerve = nerve
        self.dorlands_suffix = dorlands_suffix
        self.precursor = precursor
        if id is not None:
            self.id = id
        self.gray_subject = gray_subject

    @property
    def branch_to(self):
        """Gets the branch_to of this Ligament.  # noqa: E501

        Description not available  # noqa: E501

        :return: The branch_to of this Ligament.  # noqa: E501
        :rtype: list[object]
        """
        return self._branch_to

    @branch_to.setter
    def branch_to(self, branch_to):
        """Sets the branch_to of this Ligament.

        Description not available  # noqa: E501

        :param branch_to: The branch_to of this Ligament.  # noqa: E501
        :type: list[object]
        """

        self._branch_to = branch_to

    @property
    def vein(self):
        """Gets the vein of this Ligament.  # noqa: E501

        Description not available  # noqa: E501

        :return: The vein of this Ligament.  # noqa: E501
        :rtype: list[object]
        """
        return self._vein

    @vein.setter
    def vein(self, vein):
        """Sets the vein of this Ligament.

        Description not available  # noqa: E501

        :param vein: The vein of this Ligament.  # noqa: E501
        :type: list[object]
        """

        self._vein = vein

    @property
    def gray_page(self):
        """Gets the gray_page of this Ligament.  # noqa: E501

        Refers to the famous 1918 edition of Gray's Anatomy.  # noqa: E501

        :return: The gray_page of this Ligament.  # noqa: E501
        :rtype: list[int]
        """
        return self._gray_page

    @gray_page.setter
    def gray_page(self, gray_page):
        """Sets the gray_page of this Ligament.

        Refers to the famous 1918 edition of Gray's Anatomy.  # noqa: E501

        :param gray_page: The gray_page of this Ligament.  # noqa: E501
        :type: list[int]
        """

        self._gray_page = gray_page

    @property
    def mesh_number(self):
        """Gets the mesh_number of this Ligament.  # noqa: E501

        Description not available  # noqa: E501

        :return: The mesh_number of this Ligament.  # noqa: E501
        :rtype: list[str]
        """
        return self._mesh_number

    @mesh_number.setter
    def mesh_number(self, mesh_number):
        """Sets the mesh_number of this Ligament.

        Description not available  # noqa: E501

        :param mesh_number: The mesh_number of this Ligament.  # noqa: E501
        :type: list[str]
        """

        self._mesh_number = mesh_number

    @property
    def organ_system(self):
        """Gets the organ_system of this Ligament.  # noqa: E501

        the organ system that a anatomical structure belongs to  # noqa: E501

        :return: The organ_system of this Ligament.  # noqa: E501
        :rtype: list[object]
        """
        return self._organ_system

    @organ_system.setter
    def organ_system(self, organ_system):
        """Sets the organ_system of this Ligament.

        the organ system that a anatomical structure belongs to  # noqa: E501

        :param organ_system: The organ_system of this Ligament.  # noqa: E501
        :type: list[object]
        """

        self._organ_system = organ_system

    @property
    def mesh_name(self):
        """Gets the mesh_name of this Ligament.  # noqa: E501

        Description not available  # noqa: E501

        :return: The mesh_name of this Ligament.  # noqa: E501
        :rtype: list[str]
        """
        return self._mesh_name

    @mesh_name.setter
    def mesh_name(self, mesh_name):
        """Sets the mesh_name of this Ligament.

        Description not available  # noqa: E501

        :param mesh_name: The mesh_name of this Ligament.  # noqa: E501
        :type: list[str]
        """

        self._mesh_name = mesh_name

    @property
    def description(self):
        """Gets the description of this Ligament.  # noqa: E501

        small description  # noqa: E501

        :return: The description of this Ligament.  # noqa: E501
        :rtype: list[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Ligament.

        small description  # noqa: E501

        :param description: The description of this Ligament.  # noqa: E501
        :type: list[str]
        """

        self._description = description

    @property
    def label(self):
        """Gets the label of this Ligament.  # noqa: E501

        short description of the resource  # noqa: E501

        :return: The label of this Ligament.  # noqa: E501
        :rtype: list[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Ligament.

        short description of the resource  # noqa: E501

        :param label: The label of this Ligament.  # noqa: E501
        :type: list[str]
        """

        self._label = label

    @property
    def drains_to(self):
        """Gets the drains_to of this Ligament.  # noqa: E501

        Description not available  # noqa: E501

        :return: The drains_to of this Ligament.  # noqa: E501
        :rtype: list[object]
        """
        return self._drains_to

    @drains_to.setter
    def drains_to(self, drains_to):
        """Sets the drains_to of this Ligament.

        Description not available  # noqa: E501

        :param drains_to: The drains_to of this Ligament.  # noqa: E501
        :type: list[object]
        """

        self._drains_to = drains_to

    @property
    def artery(self):
        """Gets the artery of this Ligament.  # noqa: E501

        Description not available  # noqa: E501

        :return: The artery of this Ligament.  # noqa: E501
        :rtype: list[object]
        """
        return self._artery

    @artery.setter
    def artery(self, artery):
        """Sets the artery of this Ligament.

        Description not available  # noqa: E501

        :param artery: The artery of this Ligament.  # noqa: E501
        :type: list[object]
        """

        self._artery = artery

    @property
    def type(self):
        """Gets the type of this Ligament.  # noqa: E501

        type of the resource  # noqa: E501

        :return: The type of this Ligament.  # noqa: E501
        :rtype: list[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Ligament.

        type of the resource  # noqa: E501

        :param type: The type of this Ligament.  # noqa: E501
        :type: list[str]
        """

        self._type = type

    @property
    def branch_from(self):
        """Gets the branch_from of this Ligament.  # noqa: E501

        Description not available  # noqa: E501

        :return: The branch_from of this Ligament.  # noqa: E501
        :rtype: list[object]
        """
        return self._branch_from

    @branch_from.setter
    def branch_from(self, branch_from):
        """Sets the branch_from of this Ligament.

        Description not available  # noqa: E501

        :param branch_from: The branch_from of this Ligament.  # noqa: E501
        :type: list[object]
        """

        self._branch_from = branch_from

    @property
    def drains_from(self):
        """Gets the drains_from of this Ligament.  # noqa: E501

        Description not available  # noqa: E501

        :return: The drains_from of this Ligament.  # noqa: E501
        :rtype: list[object]
        """
        return self._drains_from

    @drains_from.setter
    def drains_from(self, drains_from):
        """Sets the drains_from of this Ligament.

        Description not available  # noqa: E501

        :param drains_from: The drains_from of this Ligament.  # noqa: E501
        :type: list[object]
        """

        self._drains_from = drains_from

    @property
    def lymph(self):
        """Gets the lymph of this Ligament.  # noqa: E501

        Description not available  # noqa: E501

        :return: The lymph of this Ligament.  # noqa: E501
        :rtype: list[object]
        """
        return self._lymph

    @lymph.setter
    def lymph(self, lymph):
        """Sets the lymph of this Ligament.

        Description not available  # noqa: E501

        :param lymph: The lymph of this Ligament.  # noqa: E501
        :type: list[object]
        """

        self._lymph = lymph

    @property
    def dorlands_prefix(self):
        """Gets the dorlands_prefix of this Ligament.  # noqa: E501

        Description not available  # noqa: E501

        :return: The dorlands_prefix of this Ligament.  # noqa: E501
        :rtype: list[str]
        """
        return self._dorlands_prefix

    @dorlands_prefix.setter
    def dorlands_prefix(self, dorlands_prefix):
        """Sets the dorlands_prefix of this Ligament.

        Description not available  # noqa: E501

        :param dorlands_prefix: The dorlands_prefix of this Ligament.  # noqa: E501
        :type: list[str]
        """

        self._dorlands_prefix = dorlands_prefix

    @property
    def nerve(self):
        """Gets the nerve of this Ligament.  # noqa: E501

        Description not available  # noqa: E501

        :return: The nerve of this Ligament.  # noqa: E501
        :rtype: list[object]
        """
        return self._nerve

    @nerve.setter
    def nerve(self, nerve):
        """Sets the nerve of this Ligament.

        Description not available  # noqa: E501

        :param nerve: The nerve of this Ligament.  # noqa: E501
        :type: list[object]
        """

        self._nerve = nerve

    @property
    def dorlands_suffix(self):
        """Gets the dorlands_suffix of this Ligament.  # noqa: E501

        Description not available  # noqa: E501

        :return: The dorlands_suffix of this Ligament.  # noqa: E501
        :rtype: list[str]
        """
        return self._dorlands_suffix

    @dorlands_suffix.setter
    def dorlands_suffix(self, dorlands_suffix):
        """Sets the dorlands_suffix of this Ligament.

        Description not available  # noqa: E501

        :param dorlands_suffix: The dorlands_suffix of this Ligament.  # noqa: E501
        :type: list[str]
        """

        self._dorlands_suffix = dorlands_suffix

    @property
    def precursor(self):
        """Gets the precursor of this Ligament.  # noqa: E501

        Description not available  # noqa: E501

        :return: The precursor of this Ligament.  # noqa: E501
        :rtype: list[object]
        """
        return self._precursor

    @precursor.setter
    def precursor(self, precursor):
        """Sets the precursor of this Ligament.

        Description not available  # noqa: E501

        :param precursor: The precursor of this Ligament.  # noqa: E501
        :type: list[object]
        """

        self._precursor = precursor

    @property
    def id(self):
        """Gets the id of this Ligament.  # noqa: E501

        identifier  # noqa: E501

        :return: The id of this Ligament.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Ligament.

        identifier  # noqa: E501

        :param id: The id of this Ligament.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def gray_subject(self):
        """Gets the gray_subject of this Ligament.  # noqa: E501

        Refers to the famous 1918 edition of Gray's Anatomy.  # noqa: E501

        :return: The gray_subject of this Ligament.  # noqa: E501
        :rtype: list[int]
        """
        return self._gray_subject

    @gray_subject.setter
    def gray_subject(self, gray_subject):
        """Sets the gray_subject of this Ligament.

        Refers to the famous 1918 edition of Gray's Anatomy.  # noqa: E501

        :param gray_subject: The gray_subject of this Ligament.  # noqa: E501
        :type: list[int]
        """

        self._gray_subject = gray_subject

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Ligament):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Ligament):
            return True

        return self.to_dict() != other.to_dict()
