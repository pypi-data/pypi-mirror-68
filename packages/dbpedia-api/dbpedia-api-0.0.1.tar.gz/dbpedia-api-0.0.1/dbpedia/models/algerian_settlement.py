# coding: utf-8

"""
    DBpedia

    This is the API of the DBpedia Ontology  # noqa: E501

    The version of the OpenAPI document: v0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dbpedia.configuration import Configuration


class AlgerianSettlement(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ons': 'list[int]',
        'land_registry_code': 'list[str]',
        'settlement_attached': 'list[object]',
        'description': 'list[str]',
        'administrative_center': 'list[object]',
        'id': 'str',
        'label': 'list[str]',
        'type': 'list[str]',
        'urban_area': 'list[str]',
        'employers_celebration': 'list[str]'
    }

    attribute_map = {
        'ons': 'ons',
        'land_registry_code': 'landRegistryCode',
        'settlement_attached': 'settlementAttached',
        'description': 'description',
        'administrative_center': 'administrativeCenter',
        'id': 'id',
        'label': 'label',
        'type': 'type',
        'urban_area': 'urbanArea',
        'employers_celebration': 'employersCelebration'
    }

    def __init__(self, ons=None, land_registry_code=None, settlement_attached=None, description=None, administrative_center=None, id=None, label=None, type=None, urban_area=None, employers_celebration=None, local_vars_configuration=None):  # noqa: E501
        """AlgerianSettlement - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ons = None
        self._land_registry_code = None
        self._settlement_attached = None
        self._description = None
        self._administrative_center = None
        self._id = None
        self._label = None
        self._type = None
        self._urban_area = None
        self._employers_celebration = None
        self.discriminator = None

        self.ons = ons
        self.land_registry_code = land_registry_code
        self.settlement_attached = settlement_attached
        self.description = description
        self.administrative_center = administrative_center
        if id is not None:
            self.id = id
        self.label = label
        self.type = type
        self.urban_area = urban_area
        self.employers_celebration = employers_celebration

    @property
    def ons(self):
        """Gets the ons of this AlgerianSettlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The ons of this AlgerianSettlement.  # noqa: E501
        :rtype: list[int]
        """
        return self._ons

    @ons.setter
    def ons(self, ons):
        """Sets the ons of this AlgerianSettlement.

        Description not available  # noqa: E501

        :param ons: The ons of this AlgerianSettlement.  # noqa: E501
        :type: list[int]
        """

        self._ons = ons

    @property
    def land_registry_code(self):
        """Gets the land_registry_code of this AlgerianSettlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The land_registry_code of this AlgerianSettlement.  # noqa: E501
        :rtype: list[str]
        """
        return self._land_registry_code

    @land_registry_code.setter
    def land_registry_code(self, land_registry_code):
        """Sets the land_registry_code of this AlgerianSettlement.

        Description not available  # noqa: E501

        :param land_registry_code: The land_registry_code of this AlgerianSettlement.  # noqa: E501
        :type: list[str]
        """

        self._land_registry_code = land_registry_code

    @property
    def settlement_attached(self):
        """Gets the settlement_attached of this AlgerianSettlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The settlement_attached of this AlgerianSettlement.  # noqa: E501
        :rtype: list[object]
        """
        return self._settlement_attached

    @settlement_attached.setter
    def settlement_attached(self, settlement_attached):
        """Sets the settlement_attached of this AlgerianSettlement.

        Description not available  # noqa: E501

        :param settlement_attached: The settlement_attached of this AlgerianSettlement.  # noqa: E501
        :type: list[object]
        """

        self._settlement_attached = settlement_attached

    @property
    def description(self):
        """Gets the description of this AlgerianSettlement.  # noqa: E501

        small description  # noqa: E501

        :return: The description of this AlgerianSettlement.  # noqa: E501
        :rtype: list[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AlgerianSettlement.

        small description  # noqa: E501

        :param description: The description of this AlgerianSettlement.  # noqa: E501
        :type: list[str]
        """

        self._description = description

    @property
    def administrative_center(self):
        """Gets the administrative_center of this AlgerianSettlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The administrative_center of this AlgerianSettlement.  # noqa: E501
        :rtype: list[object]
        """
        return self._administrative_center

    @administrative_center.setter
    def administrative_center(self, administrative_center):
        """Sets the administrative_center of this AlgerianSettlement.

        Description not available  # noqa: E501

        :param administrative_center: The administrative_center of this AlgerianSettlement.  # noqa: E501
        :type: list[object]
        """

        self._administrative_center = administrative_center

    @property
    def id(self):
        """Gets the id of this AlgerianSettlement.  # noqa: E501

        identifier  # noqa: E501

        :return: The id of this AlgerianSettlement.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AlgerianSettlement.

        identifier  # noqa: E501

        :param id: The id of this AlgerianSettlement.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this AlgerianSettlement.  # noqa: E501

        short description of the resource  # noqa: E501

        :return: The label of this AlgerianSettlement.  # noqa: E501
        :rtype: list[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this AlgerianSettlement.

        short description of the resource  # noqa: E501

        :param label: The label of this AlgerianSettlement.  # noqa: E501
        :type: list[str]
        """

        self._label = label

    @property
    def type(self):
        """Gets the type of this AlgerianSettlement.  # noqa: E501

        type of the resource  # noqa: E501

        :return: The type of this AlgerianSettlement.  # noqa: E501
        :rtype: list[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AlgerianSettlement.

        type of the resource  # noqa: E501

        :param type: The type of this AlgerianSettlement.  # noqa: E501
        :type: list[str]
        """

        self._type = type

    @property
    def urban_area(self):
        """Gets the urban_area of this AlgerianSettlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The urban_area of this AlgerianSettlement.  # noqa: E501
        :rtype: list[str]
        """
        return self._urban_area

    @urban_area.setter
    def urban_area(self, urban_area):
        """Sets the urban_area of this AlgerianSettlement.

        Description not available  # noqa: E501

        :param urban_area: The urban_area of this AlgerianSettlement.  # noqa: E501
        :type: list[str]
        """

        self._urban_area = urban_area

    @property
    def employers_celebration(self):
        """Gets the employers_celebration of this AlgerianSettlement.  # noqa: E501

        Description not available  # noqa: E501

        :return: The employers_celebration of this AlgerianSettlement.  # noqa: E501
        :rtype: list[str]
        """
        return self._employers_celebration

    @employers_celebration.setter
    def employers_celebration(self, employers_celebration):
        """Sets the employers_celebration of this AlgerianSettlement.

        Description not available  # noqa: E501

        :param employers_celebration: The employers_celebration of this AlgerianSettlement.  # noqa: E501
        :type: list[str]
        """

        self._employers_celebration = employers_celebration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlgerianSettlement):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AlgerianSettlement):
            return True

        return self.to_dict() != other.to_dict()
