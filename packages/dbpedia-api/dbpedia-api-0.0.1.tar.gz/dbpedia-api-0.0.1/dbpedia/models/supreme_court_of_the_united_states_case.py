# coding: utf-8

"""
    DBpedia

    This is the API of the DBpedia Ontology  # noqa: E501

    The version of the OpenAPI document: v0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dbpedia.configuration import Configuration


class SupremeCourtOfTheUnitedStatesCase(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'attorney_general': 'list[object]',
        'description': 'list[str]',
        'legal_article': 'list[str]',
        'procedure': 'list[str]',
        'label': 'list[str]',
        'system_of_law': 'list[object]',
        'type': 'list[str]',
        'code_book': 'list[str]',
        'decide_date': 'list[str]',
        'ruling': 'list[str]',
        'solicitor_general': 'list[object]',
        'argue_date': 'list[str]',
        'developer': 'list[object]',
        'id': 'str',
        'judge': 'list[object]'
    }

    attribute_map = {
        'attorney_general': 'attorneyGeneral',
        'description': 'description',
        'legal_article': 'legalArticle',
        'procedure': 'procedure',
        'label': 'label',
        'system_of_law': 'systemOfLaw',
        'type': 'type',
        'code_book': 'codeBook',
        'decide_date': 'decideDate',
        'ruling': 'ruling',
        'solicitor_general': 'solicitorGeneral',
        'argue_date': 'argueDate',
        'developer': 'developer',
        'id': 'id',
        'judge': 'judge'
    }

    def __init__(self, attorney_general=None, description=None, legal_article=None, procedure=None, label=None, system_of_law=None, type=None, code_book=None, decide_date=None, ruling=None, solicitor_general=None, argue_date=None, developer=None, id=None, judge=None, local_vars_configuration=None):  # noqa: E501
        """SupremeCourtOfTheUnitedStatesCase - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._attorney_general = None
        self._description = None
        self._legal_article = None
        self._procedure = None
        self._label = None
        self._system_of_law = None
        self._type = None
        self._code_book = None
        self._decide_date = None
        self._ruling = None
        self._solicitor_general = None
        self._argue_date = None
        self._developer = None
        self._id = None
        self._judge = None
        self.discriminator = None

        self.attorney_general = attorney_general
        self.description = description
        self.legal_article = legal_article
        self.procedure = procedure
        self.label = label
        self.system_of_law = system_of_law
        self.type = type
        self.code_book = code_book
        self.decide_date = decide_date
        self.ruling = ruling
        self.solicitor_general = solicitor_general
        self.argue_date = argue_date
        self.developer = developer
        if id is not None:
            self.id = id
        self.judge = judge

    @property
    def attorney_general(self):
        """Gets the attorney_general of this SupremeCourtOfTheUnitedStatesCase.  # noqa: E501

        Public attorney  # noqa: E501

        :return: The attorney_general of this SupremeCourtOfTheUnitedStatesCase.  # noqa: E501
        :rtype: list[object]
        """
        return self._attorney_general

    @attorney_general.setter
    def attorney_general(self, attorney_general):
        """Sets the attorney_general of this SupremeCourtOfTheUnitedStatesCase.

        Public attorney  # noqa: E501

        :param attorney_general: The attorney_general of this SupremeCourtOfTheUnitedStatesCase.  # noqa: E501
        :type: list[object]
        """

        self._attorney_general = attorney_general

    @property
    def description(self):
        """Gets the description of this SupremeCourtOfTheUnitedStatesCase.  # noqa: E501

        small description  # noqa: E501

        :return: The description of this SupremeCourtOfTheUnitedStatesCase.  # noqa: E501
        :rtype: list[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SupremeCourtOfTheUnitedStatesCase.

        small description  # noqa: E501

        :param description: The description of this SupremeCourtOfTheUnitedStatesCase.  # noqa: E501
        :type: list[str]
        """

        self._description = description

    @property
    def legal_article(self):
        """Gets the legal_article of this SupremeCourtOfTheUnitedStatesCase.  # noqa: E501

        article in code book or statute book referred to in this legal case  # noqa: E501

        :return: The legal_article of this SupremeCourtOfTheUnitedStatesCase.  # noqa: E501
        :rtype: list[str]
        """
        return self._legal_article

    @legal_article.setter
    def legal_article(self, legal_article):
        """Sets the legal_article of this SupremeCourtOfTheUnitedStatesCase.

        article in code book or statute book referred to in this legal case  # noqa: E501

        :param legal_article: The legal_article of this SupremeCourtOfTheUnitedStatesCase.  # noqa: E501
        :type: list[str]
        """

        self._legal_article = legal_article

    @property
    def procedure(self):
        """Gets the procedure of this SupremeCourtOfTheUnitedStatesCase.  # noqa: E501

        The name designating a formal collection of steps to be taken to complete the case  # noqa: E501

        :return: The procedure of this SupremeCourtOfTheUnitedStatesCase.  # noqa: E501
        :rtype: list[str]
        """
        return self._procedure

    @procedure.setter
    def procedure(self, procedure):
        """Sets the procedure of this SupremeCourtOfTheUnitedStatesCase.

        The name designating a formal collection of steps to be taken to complete the case  # noqa: E501

        :param procedure: The procedure of this SupremeCourtOfTheUnitedStatesCase.  # noqa: E501
        :type: list[str]
        """

        self._procedure = procedure

    @property
    def label(self):
        """Gets the label of this SupremeCourtOfTheUnitedStatesCase.  # noqa: E501

        short description of the resource  # noqa: E501

        :return: The label of this SupremeCourtOfTheUnitedStatesCase.  # noqa: E501
        :rtype: list[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this SupremeCourtOfTheUnitedStatesCase.

        short description of the resource  # noqa: E501

        :param label: The label of this SupremeCourtOfTheUnitedStatesCase.  # noqa: E501
        :type: list[str]
        """

        self._label = label

    @property
    def system_of_law(self):
        """Gets the system_of_law of this SupremeCourtOfTheUnitedStatesCase.  # noqa: E501

        A referral to the relevant system of law  # noqa: E501

        :return: The system_of_law of this SupremeCourtOfTheUnitedStatesCase.  # noqa: E501
        :rtype: list[object]
        """
        return self._system_of_law

    @system_of_law.setter
    def system_of_law(self, system_of_law):
        """Sets the system_of_law of this SupremeCourtOfTheUnitedStatesCase.

        A referral to the relevant system of law  # noqa: E501

        :param system_of_law: The system_of_law of this SupremeCourtOfTheUnitedStatesCase.  # noqa: E501
        :type: list[object]
        """

        self._system_of_law = system_of_law

    @property
    def type(self):
        """Gets the type of this SupremeCourtOfTheUnitedStatesCase.  # noqa: E501

        type of the resource  # noqa: E501

        :return: The type of this SupremeCourtOfTheUnitedStatesCase.  # noqa: E501
        :rtype: list[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SupremeCourtOfTheUnitedStatesCase.

        type of the resource  # noqa: E501

        :param type: The type of this SupremeCourtOfTheUnitedStatesCase.  # noqa: E501
        :type: list[str]
        """

        self._type = type

    @property
    def code_book(self):
        """Gets the code_book of this SupremeCourtOfTheUnitedStatesCase.  # noqa: E501

        code book or statute book referred to in this legal case  # noqa: E501

        :return: The code_book of this SupremeCourtOfTheUnitedStatesCase.  # noqa: E501
        :rtype: list[str]
        """
        return self._code_book

    @code_book.setter
    def code_book(self, code_book):
        """Sets the code_book of this SupremeCourtOfTheUnitedStatesCase.

        code book or statute book referred to in this legal case  # noqa: E501

        :param code_book: The code_book of this SupremeCourtOfTheUnitedStatesCase.  # noqa: E501
        :type: list[str]
        """

        self._code_book = code_book

    @property
    def decide_date(self):
        """Gets the decide_date of this SupremeCourtOfTheUnitedStatesCase.  # noqa: E501

        Description not available  # noqa: E501

        :return: The decide_date of this SupremeCourtOfTheUnitedStatesCase.  # noqa: E501
        :rtype: list[str]
        """
        return self._decide_date

    @decide_date.setter
    def decide_date(self, decide_date):
        """Sets the decide_date of this SupremeCourtOfTheUnitedStatesCase.

        Description not available  # noqa: E501

        :param decide_date: The decide_date of this SupremeCourtOfTheUnitedStatesCase.  # noqa: E501
        :type: list[str]
        """

        self._decide_date = decide_date

    @property
    def ruling(self):
        """Gets the ruling of this SupremeCourtOfTheUnitedStatesCase.  # noqa: E501

        Ruling referred to in this legal case  # noqa: E501

        :return: The ruling of this SupremeCourtOfTheUnitedStatesCase.  # noqa: E501
        :rtype: list[str]
        """
        return self._ruling

    @ruling.setter
    def ruling(self, ruling):
        """Sets the ruling of this SupremeCourtOfTheUnitedStatesCase.

        Ruling referred to in this legal case  # noqa: E501

        :param ruling: The ruling of this SupremeCourtOfTheUnitedStatesCase.  # noqa: E501
        :type: list[str]
        """

        self._ruling = ruling

    @property
    def solicitor_general(self):
        """Gets the solicitor_general of this SupremeCourtOfTheUnitedStatesCase.  # noqa: E501

        high-ranking solicitor  # noqa: E501

        :return: The solicitor_general of this SupremeCourtOfTheUnitedStatesCase.  # noqa: E501
        :rtype: list[object]
        """
        return self._solicitor_general

    @solicitor_general.setter
    def solicitor_general(self, solicitor_general):
        """Sets the solicitor_general of this SupremeCourtOfTheUnitedStatesCase.

        high-ranking solicitor  # noqa: E501

        :param solicitor_general: The solicitor_general of this SupremeCourtOfTheUnitedStatesCase.  # noqa: E501
        :type: list[object]
        """

        self._solicitor_general = solicitor_general

    @property
    def argue_date(self):
        """Gets the argue_date of this SupremeCourtOfTheUnitedStatesCase.  # noqa: E501

        Description not available  # noqa: E501

        :return: The argue_date of this SupremeCourtOfTheUnitedStatesCase.  # noqa: E501
        :rtype: list[str]
        """
        return self._argue_date

    @argue_date.setter
    def argue_date(self, argue_date):
        """Sets the argue_date of this SupremeCourtOfTheUnitedStatesCase.

        Description not available  # noqa: E501

        :param argue_date: The argue_date of this SupremeCourtOfTheUnitedStatesCase.  # noqa: E501
        :type: list[str]
        """

        self._argue_date = argue_date

    @property
    def developer(self):
        """Gets the developer of this SupremeCourtOfTheUnitedStatesCase.  # noqa: E501

        Description not available  # noqa: E501

        :return: The developer of this SupremeCourtOfTheUnitedStatesCase.  # noqa: E501
        :rtype: list[object]
        """
        return self._developer

    @developer.setter
    def developer(self, developer):
        """Sets the developer of this SupremeCourtOfTheUnitedStatesCase.

        Description not available  # noqa: E501

        :param developer: The developer of this SupremeCourtOfTheUnitedStatesCase.  # noqa: E501
        :type: list[object]
        """

        self._developer = developer

    @property
    def id(self):
        """Gets the id of this SupremeCourtOfTheUnitedStatesCase.  # noqa: E501

        identifier  # noqa: E501

        :return: The id of this SupremeCourtOfTheUnitedStatesCase.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SupremeCourtOfTheUnitedStatesCase.

        identifier  # noqa: E501

        :param id: The id of this SupremeCourtOfTheUnitedStatesCase.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def judge(self):
        """Gets the judge of this SupremeCourtOfTheUnitedStatesCase.  # noqa: E501

        leading judge  # noqa: E501

        :return: The judge of this SupremeCourtOfTheUnitedStatesCase.  # noqa: E501
        :rtype: list[object]
        """
        return self._judge

    @judge.setter
    def judge(self, judge):
        """Sets the judge of this SupremeCourtOfTheUnitedStatesCase.

        leading judge  # noqa: E501

        :param judge: The judge of this SupremeCourtOfTheUnitedStatesCase.  # noqa: E501
        :type: list[object]
        """

        self._judge = judge

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupremeCourtOfTheUnitedStatesCase):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SupremeCourtOfTheUnitedStatesCase):
            return True

        return self.to_dict() != other.to_dict()
