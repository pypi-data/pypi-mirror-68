# coding: utf-8

"""
    DBpedia

    This is the API of the DBpedia Ontology  # noqa: E501

    The version of the OpenAPI document: v0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dbpedia.configuration import Configuration


class Broadcaster(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'broadcast_station_class': 'list[str]',
        'share_date': 'list[str]',
        'viaf_id': 'list[str]',
        'leader_function': 'list[object]',
        'art_patron': 'list[object]',
        'callsign_meaning': 'list[str]',
        'manager_season': 'list[object]',
        'secretary_general': 'list[object]',
        'number_of_locations': 'list[int]',
        'discipline': 'list[object]',
        'height_above_average_terrain': 'list[float]',
        'type': 'list[str]',
        'virtual_channel': 'list[str]',
        'revenue': 'list[float]',
        'affiliation': 'list[object]',
        'former_callsign': 'list[str]',
        'season': 'list[object]',
        'picture_format': 'list[object]',
        'id': 'str',
        'nla_id': 'list[str]',
        'chairperson': 'list[object]',
        'region_served': 'list[object]',
        'superintendent': 'list[object]',
        'formation_date': 'list[str]',
        'former_broadcast_network': 'list[object]',
        'number_of_employees': 'list[int]',
        'share_of_audience': 'list[float]',
        'extinction_date': 'list[str]',
        'effective_radiated_power': 'list[float]',
        'former_channel': 'list[str]',
        'player_season': 'list[object]',
        'endowment': 'list[float]',
        'last_air_date': 'list[str]',
        'slogan': 'list[str]',
        'regional_council': 'list[object]',
        'location_city': 'list[object]',
        'number_of_volunteers': 'list[int]',
        'ideology': 'list[object]',
        'broadcast_network': 'list[object]',
        'description': 'list[str]',
        'membership': 'list[str]',
        'share_source': 'list[str]',
        'ceo': 'list[object]',
        'network': 'list[object]',
        'formation_year': 'list[str]',
        'first_air_date': 'list[str]',
        'junior_season': 'list[object]',
        'analog_channel': 'list[str]',
        'digital_channel': 'list[str]',
        'other_channel': 'list[str]',
        'headquarter': 'list[object]',
        'sister_station': 'list[object]',
        'extinction_year': 'list[str]',
        'child_organisation': 'list[object]',
        'honours': 'list[object]',
        'parent_organisation': 'list[object]',
        'organisation_member': 'list[object]',
        'broadcast_translator': 'list[str]',
        'number_of_staff': 'list[int]',
        'product': 'list[object]',
        'hometown': 'list[object]',
        'broadcast_area': 'list[object]',
        'foundation_place': 'list[object]',
        'national_selection': 'list[object]',
        'programme_format': 'list[object]',
        'broadcast_repeater': 'list[str]',
        'label': 'list[str]',
        'legal_form': 'list[object]',
        'general_council': 'list[object]',
        'trustee': 'list[object]',
        'age': 'list[int]',
        'digital_sub_channel': 'list[str]',
        'main_organ': 'list[object]'
    }

    attribute_map = {
        'broadcast_station_class': 'broadcastStationClass',
        'share_date': 'shareDate',
        'viaf_id': 'viafId',
        'leader_function': 'leaderFunction',
        'art_patron': 'artPatron',
        'callsign_meaning': 'callsignMeaning',
        'manager_season': 'managerSeason',
        'secretary_general': 'secretaryGeneral',
        'number_of_locations': 'numberOfLocations',
        'discipline': 'discipline',
        'height_above_average_terrain': 'heightAboveAverageTerrain',
        'type': 'type',
        'virtual_channel': 'virtualChannel',
        'revenue': 'revenue',
        'affiliation': 'affiliation',
        'former_callsign': 'formerCallsign',
        'season': 'season',
        'picture_format': 'pictureFormat',
        'id': 'id',
        'nla_id': 'nlaId',
        'chairperson': 'chairperson',
        'region_served': 'regionServed',
        'superintendent': 'superintendent',
        'formation_date': 'formationDate',
        'former_broadcast_network': 'formerBroadcastNetwork',
        'number_of_employees': 'numberOfEmployees',
        'share_of_audience': 'shareOfAudience',
        'extinction_date': 'extinctionDate',
        'effective_radiated_power': 'effectiveRadiatedPower',
        'former_channel': 'formerChannel',
        'player_season': 'playerSeason',
        'endowment': 'endowment',
        'last_air_date': 'lastAirDate',
        'slogan': 'slogan',
        'regional_council': 'regionalCouncil',
        'location_city': 'locationCity',
        'number_of_volunteers': 'numberOfVolunteers',
        'ideology': 'ideology',
        'broadcast_network': 'broadcastNetwork',
        'description': 'description',
        'membership': 'membership',
        'share_source': 'shareSource',
        'ceo': 'ceo',
        'network': 'network',
        'formation_year': 'formationYear',
        'first_air_date': 'firstAirDate',
        'junior_season': 'juniorSeason',
        'analog_channel': 'analogChannel',
        'digital_channel': 'digitalChannel',
        'other_channel': 'otherChannel',
        'headquarter': 'headquarter',
        'sister_station': 'sisterStation',
        'extinction_year': 'extinctionYear',
        'child_organisation': 'childOrganisation',
        'honours': 'honours',
        'parent_organisation': 'parentOrganisation',
        'organisation_member': 'organisationMember',
        'broadcast_translator': 'broadcastTranslator',
        'number_of_staff': 'numberOfStaff',
        'product': 'product',
        'hometown': 'hometown',
        'broadcast_area': 'broadcastArea',
        'foundation_place': 'foundationPlace',
        'national_selection': 'nationalSelection',
        'programme_format': 'programmeFormat',
        'broadcast_repeater': 'broadcastRepeater',
        'label': 'label',
        'legal_form': 'legalForm',
        'general_council': 'generalCouncil',
        'trustee': 'trustee',
        'age': 'age',
        'digital_sub_channel': 'digitalSubChannel',
        'main_organ': 'mainOrgan'
    }

    def __init__(self, broadcast_station_class=None, share_date=None, viaf_id=None, leader_function=None, art_patron=None, callsign_meaning=None, manager_season=None, secretary_general=None, number_of_locations=None, discipline=None, height_above_average_terrain=None, type=None, virtual_channel=None, revenue=None, affiliation=None, former_callsign=None, season=None, picture_format=None, id=None, nla_id=None, chairperson=None, region_served=None, superintendent=None, formation_date=None, former_broadcast_network=None, number_of_employees=None, share_of_audience=None, extinction_date=None, effective_radiated_power=None, former_channel=None, player_season=None, endowment=None, last_air_date=None, slogan=None, regional_council=None, location_city=None, number_of_volunteers=None, ideology=None, broadcast_network=None, description=None, membership=None, share_source=None, ceo=None, network=None, formation_year=None, first_air_date=None, junior_season=None, analog_channel=None, digital_channel=None, other_channel=None, headquarter=None, sister_station=None, extinction_year=None, child_organisation=None, honours=None, parent_organisation=None, organisation_member=None, broadcast_translator=None, number_of_staff=None, product=None, hometown=None, broadcast_area=None, foundation_place=None, national_selection=None, programme_format=None, broadcast_repeater=None, label=None, legal_form=None, general_council=None, trustee=None, age=None, digital_sub_channel=None, main_organ=None, local_vars_configuration=None):  # noqa: E501
        """Broadcaster - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._broadcast_station_class = None
        self._share_date = None
        self._viaf_id = None
        self._leader_function = None
        self._art_patron = None
        self._callsign_meaning = None
        self._manager_season = None
        self._secretary_general = None
        self._number_of_locations = None
        self._discipline = None
        self._height_above_average_terrain = None
        self._type = None
        self._virtual_channel = None
        self._revenue = None
        self._affiliation = None
        self._former_callsign = None
        self._season = None
        self._picture_format = None
        self._id = None
        self._nla_id = None
        self._chairperson = None
        self._region_served = None
        self._superintendent = None
        self._formation_date = None
        self._former_broadcast_network = None
        self._number_of_employees = None
        self._share_of_audience = None
        self._extinction_date = None
        self._effective_radiated_power = None
        self._former_channel = None
        self._player_season = None
        self._endowment = None
        self._last_air_date = None
        self._slogan = None
        self._regional_council = None
        self._location_city = None
        self._number_of_volunteers = None
        self._ideology = None
        self._broadcast_network = None
        self._description = None
        self._membership = None
        self._share_source = None
        self._ceo = None
        self._network = None
        self._formation_year = None
        self._first_air_date = None
        self._junior_season = None
        self._analog_channel = None
        self._digital_channel = None
        self._other_channel = None
        self._headquarter = None
        self._sister_station = None
        self._extinction_year = None
        self._child_organisation = None
        self._honours = None
        self._parent_organisation = None
        self._organisation_member = None
        self._broadcast_translator = None
        self._number_of_staff = None
        self._product = None
        self._hometown = None
        self._broadcast_area = None
        self._foundation_place = None
        self._national_selection = None
        self._programme_format = None
        self._broadcast_repeater = None
        self._label = None
        self._legal_form = None
        self._general_council = None
        self._trustee = None
        self._age = None
        self._digital_sub_channel = None
        self._main_organ = None
        self.discriminator = None

        self.broadcast_station_class = broadcast_station_class
        self.share_date = share_date
        self.viaf_id = viaf_id
        self.leader_function = leader_function
        self.art_patron = art_patron
        self.callsign_meaning = callsign_meaning
        self.manager_season = manager_season
        self.secretary_general = secretary_general
        self.number_of_locations = number_of_locations
        self.discipline = discipline
        self.height_above_average_terrain = height_above_average_terrain
        self.type = type
        self.virtual_channel = virtual_channel
        self.revenue = revenue
        self.affiliation = affiliation
        self.former_callsign = former_callsign
        self.season = season
        self.picture_format = picture_format
        if id is not None:
            self.id = id
        self.nla_id = nla_id
        self.chairperson = chairperson
        self.region_served = region_served
        self.superintendent = superintendent
        self.formation_date = formation_date
        self.former_broadcast_network = former_broadcast_network
        self.number_of_employees = number_of_employees
        self.share_of_audience = share_of_audience
        self.extinction_date = extinction_date
        self.effective_radiated_power = effective_radiated_power
        self.former_channel = former_channel
        self.player_season = player_season
        self.endowment = endowment
        self.last_air_date = last_air_date
        self.slogan = slogan
        self.regional_council = regional_council
        self.location_city = location_city
        self.number_of_volunteers = number_of_volunteers
        self.ideology = ideology
        self.broadcast_network = broadcast_network
        self.description = description
        self.membership = membership
        self.share_source = share_source
        self.ceo = ceo
        self.network = network
        self.formation_year = formation_year
        self.first_air_date = first_air_date
        self.junior_season = junior_season
        self.analog_channel = analog_channel
        self.digital_channel = digital_channel
        self.other_channel = other_channel
        self.headquarter = headquarter
        self.sister_station = sister_station
        self.extinction_year = extinction_year
        self.child_organisation = child_organisation
        self.honours = honours
        self.parent_organisation = parent_organisation
        self.organisation_member = organisation_member
        self.broadcast_translator = broadcast_translator
        self.number_of_staff = number_of_staff
        self.product = product
        self.hometown = hometown
        self.broadcast_area = broadcast_area
        self.foundation_place = foundation_place
        self.national_selection = national_selection
        self.programme_format = programme_format
        self.broadcast_repeater = broadcast_repeater
        self.label = label
        self.legal_form = legal_form
        self.general_council = general_council
        self.trustee = trustee
        self.age = age
        self.digital_sub_channel = digital_sub_channel
        self.main_organ = main_organ

    @property
    def broadcast_station_class(self):
        """Gets the broadcast_station_class of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The broadcast_station_class of this Broadcaster.  # noqa: E501
        :rtype: list[str]
        """
        return self._broadcast_station_class

    @broadcast_station_class.setter
    def broadcast_station_class(self, broadcast_station_class):
        """Sets the broadcast_station_class of this Broadcaster.

        Description not available  # noqa: E501

        :param broadcast_station_class: The broadcast_station_class of this Broadcaster.  # noqa: E501
        :type: list[str]
        """

        self._broadcast_station_class = broadcast_station_class

    @property
    def share_date(self):
        """Gets the share_date of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The share_date of this Broadcaster.  # noqa: E501
        :rtype: list[str]
        """
        return self._share_date

    @share_date.setter
    def share_date(self, share_date):
        """Sets the share_date of this Broadcaster.

        Description not available  # noqa: E501

        :param share_date: The share_date of this Broadcaster.  # noqa: E501
        :type: list[str]
        """

        self._share_date = share_date

    @property
    def viaf_id(self):
        """Gets the viaf_id of this Broadcaster.  # noqa: E501

        International authority data from the Online Computer Library Center (OCLC)  # noqa: E501

        :return: The viaf_id of this Broadcaster.  # noqa: E501
        :rtype: list[str]
        """
        return self._viaf_id

    @viaf_id.setter
    def viaf_id(self, viaf_id):
        """Sets the viaf_id of this Broadcaster.

        International authority data from the Online Computer Library Center (OCLC)  # noqa: E501

        :param viaf_id: The viaf_id of this Broadcaster.  # noqa: E501
        :type: list[str]
        """

        self._viaf_id = viaf_id

    @property
    def leader_function(self):
        """Gets the leader_function of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The leader_function of this Broadcaster.  # noqa: E501
        :rtype: list[object]
        """
        return self._leader_function

    @leader_function.setter
    def leader_function(self, leader_function):
        """Sets the leader_function of this Broadcaster.

        Description not available  # noqa: E501

        :param leader_function: The leader_function of this Broadcaster.  # noqa: E501
        :type: list[object]
        """

        self._leader_function = leader_function

    @property
    def art_patron(self):
        """Gets the art_patron of this Broadcaster.  # noqa: E501

        An influential, wealthy person who supported an artist, craftsman, a scholar or a noble.. See also  # noqa: E501

        :return: The art_patron of this Broadcaster.  # noqa: E501
        :rtype: list[object]
        """
        return self._art_patron

    @art_patron.setter
    def art_patron(self, art_patron):
        """Sets the art_patron of this Broadcaster.

        An influential, wealthy person who supported an artist, craftsman, a scholar or a noble.. See also  # noqa: E501

        :param art_patron: The art_patron of this Broadcaster.  # noqa: E501
        :type: list[object]
        """

        self._art_patron = art_patron

    @property
    def callsign_meaning(self):
        """Gets the callsign_meaning of this Broadcaster.  # noqa: E501

        The out written call sign.  # noqa: E501

        :return: The callsign_meaning of this Broadcaster.  # noqa: E501
        :rtype: list[str]
        """
        return self._callsign_meaning

    @callsign_meaning.setter
    def callsign_meaning(self, callsign_meaning):
        """Sets the callsign_meaning of this Broadcaster.

        The out written call sign.  # noqa: E501

        :param callsign_meaning: The callsign_meaning of this Broadcaster.  # noqa: E501
        :type: list[str]
        """

        self._callsign_meaning = callsign_meaning

    @property
    def manager_season(self):
        """Gets the manager_season of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The manager_season of this Broadcaster.  # noqa: E501
        :rtype: list[object]
        """
        return self._manager_season

    @manager_season.setter
    def manager_season(self, manager_season):
        """Sets the manager_season of this Broadcaster.

        Description not available  # noqa: E501

        :param manager_season: The manager_season of this Broadcaster.  # noqa: E501
        :type: list[object]
        """

        self._manager_season = manager_season

    @property
    def secretary_general(self):
        """Gets the secretary_general of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The secretary_general of this Broadcaster.  # noqa: E501
        :rtype: list[object]
        """
        return self._secretary_general

    @secretary_general.setter
    def secretary_general(self, secretary_general):
        """Sets the secretary_general of this Broadcaster.

        Description not available  # noqa: E501

        :param secretary_general: The secretary_general of this Broadcaster.  # noqa: E501
        :type: list[object]
        """

        self._secretary_general = secretary_general

    @property
    def number_of_locations(self):
        """Gets the number_of_locations of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The number_of_locations of this Broadcaster.  # noqa: E501
        :rtype: list[int]
        """
        return self._number_of_locations

    @number_of_locations.setter
    def number_of_locations(self, number_of_locations):
        """Sets the number_of_locations of this Broadcaster.

        Description not available  # noqa: E501

        :param number_of_locations: The number_of_locations of this Broadcaster.  # noqa: E501
        :type: list[int]
        """

        self._number_of_locations = number_of_locations

    @property
    def discipline(self):
        """Gets the discipline of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The discipline of this Broadcaster.  # noqa: E501
        :rtype: list[object]
        """
        return self._discipline

    @discipline.setter
    def discipline(self, discipline):
        """Sets the discipline of this Broadcaster.

        Description not available  # noqa: E501

        :param discipline: The discipline of this Broadcaster.  # noqa: E501
        :type: list[object]
        """

        self._discipline = discipline

    @property
    def height_above_average_terrain(self):
        """Gets the height_above_average_terrain of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The height_above_average_terrain of this Broadcaster.  # noqa: E501
        :rtype: list[float]
        """
        return self._height_above_average_terrain

    @height_above_average_terrain.setter
    def height_above_average_terrain(self, height_above_average_terrain):
        """Sets the height_above_average_terrain of this Broadcaster.

        Description not available  # noqa: E501

        :param height_above_average_terrain: The height_above_average_terrain of this Broadcaster.  # noqa: E501
        :type: list[float]
        """

        self._height_above_average_terrain = height_above_average_terrain

    @property
    def type(self):
        """Gets the type of this Broadcaster.  # noqa: E501

        type of the resource  # noqa: E501

        :return: The type of this Broadcaster.  # noqa: E501
        :rtype: list[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Broadcaster.

        type of the resource  # noqa: E501

        :param type: The type of this Broadcaster.  # noqa: E501
        :type: list[str]
        """

        self._type = type

    @property
    def virtual_channel(self):
        """Gets the virtual_channel of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The virtual_channel of this Broadcaster.  # noqa: E501
        :rtype: list[str]
        """
        return self._virtual_channel

    @virtual_channel.setter
    def virtual_channel(self, virtual_channel):
        """Sets the virtual_channel of this Broadcaster.

        Description not available  # noqa: E501

        :param virtual_channel: The virtual_channel of this Broadcaster.  # noqa: E501
        :type: list[str]
        """

        self._virtual_channel = virtual_channel

    @property
    def revenue(self):
        """Gets the revenue of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The revenue of this Broadcaster.  # noqa: E501
        :rtype: list[float]
        """
        return self._revenue

    @revenue.setter
    def revenue(self, revenue):
        """Sets the revenue of this Broadcaster.

        Description not available  # noqa: E501

        :param revenue: The revenue of this Broadcaster.  # noqa: E501
        :type: list[float]
        """

        self._revenue = revenue

    @property
    def affiliation(self):
        """Gets the affiliation of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The affiliation of this Broadcaster.  # noqa: E501
        :rtype: list[object]
        """
        return self._affiliation

    @affiliation.setter
    def affiliation(self, affiliation):
        """Sets the affiliation of this Broadcaster.

        Description not available  # noqa: E501

        :param affiliation: The affiliation of this Broadcaster.  # noqa: E501
        :type: list[object]
        """

        self._affiliation = affiliation

    @property
    def former_callsign(self):
        """Gets the former_callsign of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The former_callsign of this Broadcaster.  # noqa: E501
        :rtype: list[str]
        """
        return self._former_callsign

    @former_callsign.setter
    def former_callsign(self, former_callsign):
        """Sets the former_callsign of this Broadcaster.

        Description not available  # noqa: E501

        :param former_callsign: The former_callsign of this Broadcaster.  # noqa: E501
        :type: list[str]
        """

        self._former_callsign = former_callsign

    @property
    def season(self):
        """Gets the season of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The season of this Broadcaster.  # noqa: E501
        :rtype: list[object]
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this Broadcaster.

        Description not available  # noqa: E501

        :param season: The season of this Broadcaster.  # noqa: E501
        :type: list[object]
        """

        self._season = season

    @property
    def picture_format(self):
        """Gets the picture_format of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The picture_format of this Broadcaster.  # noqa: E501
        :rtype: list[object]
        """
        return self._picture_format

    @picture_format.setter
    def picture_format(self, picture_format):
        """Sets the picture_format of this Broadcaster.

        Description not available  # noqa: E501

        :param picture_format: The picture_format of this Broadcaster.  # noqa: E501
        :type: list[object]
        """

        self._picture_format = picture_format

    @property
    def id(self):
        """Gets the id of this Broadcaster.  # noqa: E501

        identifier  # noqa: E501

        :return: The id of this Broadcaster.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Broadcaster.

        identifier  # noqa: E501

        :param id: The id of this Broadcaster.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def nla_id(self):
        """Gets the nla_id of this Broadcaster.  # noqa: E501

        NLA Trove’s People and Organisation view allows the discovery of biographical and other contextual information about people and organisations. Search also available via VIAF.  # noqa: E501

        :return: The nla_id of this Broadcaster.  # noqa: E501
        :rtype: list[str]
        """
        return self._nla_id

    @nla_id.setter
    def nla_id(self, nla_id):
        """Sets the nla_id of this Broadcaster.

        NLA Trove’s People and Organisation view allows the discovery of biographical and other contextual information about people and organisations. Search also available via VIAF.  # noqa: E501

        :param nla_id: The nla_id of this Broadcaster.  # noqa: E501
        :type: list[str]
        """

        self._nla_id = nla_id

    @property
    def chairperson(self):
        """Gets the chairperson of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The chairperson of this Broadcaster.  # noqa: E501
        :rtype: list[object]
        """
        return self._chairperson

    @chairperson.setter
    def chairperson(self, chairperson):
        """Sets the chairperson of this Broadcaster.

        Description not available  # noqa: E501

        :param chairperson: The chairperson of this Broadcaster.  # noqa: E501
        :type: list[object]
        """

        self._chairperson = chairperson

    @property
    def region_served(self):
        """Gets the region_served of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The region_served of this Broadcaster.  # noqa: E501
        :rtype: list[object]
        """
        return self._region_served

    @region_served.setter
    def region_served(self, region_served):
        """Sets the region_served of this Broadcaster.

        Description not available  # noqa: E501

        :param region_served: The region_served of this Broadcaster.  # noqa: E501
        :type: list[object]
        """

        self._region_served = region_served

    @property
    def superintendent(self):
        """Gets the superintendent of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The superintendent of this Broadcaster.  # noqa: E501
        :rtype: list[object]
        """
        return self._superintendent

    @superintendent.setter
    def superintendent(self, superintendent):
        """Sets the superintendent of this Broadcaster.

        Description not available  # noqa: E501

        :param superintendent: The superintendent of this Broadcaster.  # noqa: E501
        :type: list[object]
        """

        self._superintendent = superintendent

    @property
    def formation_date(self):
        """Gets the formation_date of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The formation_date of this Broadcaster.  # noqa: E501
        :rtype: list[str]
        """
        return self._formation_date

    @formation_date.setter
    def formation_date(self, formation_date):
        """Sets the formation_date of this Broadcaster.

        Description not available  # noqa: E501

        :param formation_date: The formation_date of this Broadcaster.  # noqa: E501
        :type: list[str]
        """

        self._formation_date = formation_date

    @property
    def former_broadcast_network(self):
        """Gets the former_broadcast_network of this Broadcaster.  # noqa: E501

        A former parent broadcast network to which the broadcaster once belonged.  # noqa: E501

        :return: The former_broadcast_network of this Broadcaster.  # noqa: E501
        :rtype: list[object]
        """
        return self._former_broadcast_network

    @former_broadcast_network.setter
    def former_broadcast_network(self, former_broadcast_network):
        """Sets the former_broadcast_network of this Broadcaster.

        A former parent broadcast network to which the broadcaster once belonged.  # noqa: E501

        :param former_broadcast_network: The former_broadcast_network of this Broadcaster.  # noqa: E501
        :type: list[object]
        """

        self._former_broadcast_network = former_broadcast_network

    @property
    def number_of_employees(self):
        """Gets the number_of_employees of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The number_of_employees of this Broadcaster.  # noqa: E501
        :rtype: list[int]
        """
        return self._number_of_employees

    @number_of_employees.setter
    def number_of_employees(self, number_of_employees):
        """Sets the number_of_employees of this Broadcaster.

        Description not available  # noqa: E501

        :param number_of_employees: The number_of_employees of this Broadcaster.  # noqa: E501
        :type: list[int]
        """

        self._number_of_employees = number_of_employees

    @property
    def share_of_audience(self):
        """Gets the share_of_audience of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The share_of_audience of this Broadcaster.  # noqa: E501
        :rtype: list[float]
        """
        return self._share_of_audience

    @share_of_audience.setter
    def share_of_audience(self, share_of_audience):
        """Sets the share_of_audience of this Broadcaster.

        Description not available  # noqa: E501

        :param share_of_audience: The share_of_audience of this Broadcaster.  # noqa: E501
        :type: list[float]
        """

        self._share_of_audience = share_of_audience

    @property
    def extinction_date(self):
        """Gets the extinction_date of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The extinction_date of this Broadcaster.  # noqa: E501
        :rtype: list[str]
        """
        return self._extinction_date

    @extinction_date.setter
    def extinction_date(self, extinction_date):
        """Sets the extinction_date of this Broadcaster.

        Description not available  # noqa: E501

        :param extinction_date: The extinction_date of this Broadcaster.  # noqa: E501
        :type: list[str]
        """

        self._extinction_date = extinction_date

    @property
    def effective_radiated_power(self):
        """Gets the effective_radiated_power of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The effective_radiated_power of this Broadcaster.  # noqa: E501
        :rtype: list[float]
        """
        return self._effective_radiated_power

    @effective_radiated_power.setter
    def effective_radiated_power(self, effective_radiated_power):
        """Sets the effective_radiated_power of this Broadcaster.

        Description not available  # noqa: E501

        :param effective_radiated_power: The effective_radiated_power of this Broadcaster.  # noqa: E501
        :type: list[float]
        """

        self._effective_radiated_power = effective_radiated_power

    @property
    def former_channel(self):
        """Gets the former_channel of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The former_channel of this Broadcaster.  # noqa: E501
        :rtype: list[str]
        """
        return self._former_channel

    @former_channel.setter
    def former_channel(self, former_channel):
        """Sets the former_channel of this Broadcaster.

        Description not available  # noqa: E501

        :param former_channel: The former_channel of this Broadcaster.  # noqa: E501
        :type: list[str]
        """

        self._former_channel = former_channel

    @property
    def player_season(self):
        """Gets the player_season of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The player_season of this Broadcaster.  # noqa: E501
        :rtype: list[object]
        """
        return self._player_season

    @player_season.setter
    def player_season(self, player_season):
        """Sets the player_season of this Broadcaster.

        Description not available  # noqa: E501

        :param player_season: The player_season of this Broadcaster.  # noqa: E501
        :type: list[object]
        """

        self._player_season = player_season

    @property
    def endowment(self):
        """Gets the endowment of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The endowment of this Broadcaster.  # noqa: E501
        :rtype: list[float]
        """
        return self._endowment

    @endowment.setter
    def endowment(self, endowment):
        """Sets the endowment of this Broadcaster.

        Description not available  # noqa: E501

        :param endowment: The endowment of this Broadcaster.  # noqa: E501
        :type: list[float]
        """

        self._endowment = endowment

    @property
    def last_air_date(self):
        """Gets the last_air_date of this Broadcaster.  # noqa: E501

        The date on which the broadcaster made its last broadcast.  # noqa: E501

        :return: The last_air_date of this Broadcaster.  # noqa: E501
        :rtype: list[str]
        """
        return self._last_air_date

    @last_air_date.setter
    def last_air_date(self, last_air_date):
        """Sets the last_air_date of this Broadcaster.

        The date on which the broadcaster made its last broadcast.  # noqa: E501

        :param last_air_date: The last_air_date of this Broadcaster.  # noqa: E501
        :type: list[str]
        """

        self._last_air_date = last_air_date

    @property
    def slogan(self):
        """Gets the slogan of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The slogan of this Broadcaster.  # noqa: E501
        :rtype: list[str]
        """
        return self._slogan

    @slogan.setter
    def slogan(self, slogan):
        """Sets the slogan of this Broadcaster.

        Description not available  # noqa: E501

        :param slogan: The slogan of this Broadcaster.  # noqa: E501
        :type: list[str]
        """

        self._slogan = slogan

    @property
    def regional_council(self):
        """Gets the regional_council of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The regional_council of this Broadcaster.  # noqa: E501
        :rtype: list[object]
        """
        return self._regional_council

    @regional_council.setter
    def regional_council(self, regional_council):
        """Sets the regional_council of this Broadcaster.

        Description not available  # noqa: E501

        :param regional_council: The regional_council of this Broadcaster.  # noqa: E501
        :type: list[object]
        """

        self._regional_council = regional_council

    @property
    def location_city(self):
        """Gets the location_city of this Broadcaster.  # noqa: E501

        City the thing is located.  # noqa: E501

        :return: The location_city of this Broadcaster.  # noqa: E501
        :rtype: list[object]
        """
        return self._location_city

    @location_city.setter
    def location_city(self, location_city):
        """Sets the location_city of this Broadcaster.

        City the thing is located.  # noqa: E501

        :param location_city: The location_city of this Broadcaster.  # noqa: E501
        :type: list[object]
        """

        self._location_city = location_city

    @property
    def number_of_volunteers(self):
        """Gets the number_of_volunteers of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The number_of_volunteers of this Broadcaster.  # noqa: E501
        :rtype: list[int]
        """
        return self._number_of_volunteers

    @number_of_volunteers.setter
    def number_of_volunteers(self, number_of_volunteers):
        """Sets the number_of_volunteers of this Broadcaster.

        Description not available  # noqa: E501

        :param number_of_volunteers: The number_of_volunteers of this Broadcaster.  # noqa: E501
        :type: list[int]
        """

        self._number_of_volunteers = number_of_volunteers

    @property
    def ideology(self):
        """Gets the ideology of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The ideology of this Broadcaster.  # noqa: E501
        :rtype: list[object]
        """
        return self._ideology

    @ideology.setter
    def ideology(self, ideology):
        """Sets the ideology of this Broadcaster.

        Description not available  # noqa: E501

        :param ideology: The ideology of this Broadcaster.  # noqa: E501
        :type: list[object]
        """

        self._ideology = ideology

    @property
    def broadcast_network(self):
        """Gets the broadcast_network of this Broadcaster.  # noqa: E501

        The parent broadcast network to which the broadcaster belongs.  # noqa: E501

        :return: The broadcast_network of this Broadcaster.  # noqa: E501
        :rtype: list[object]
        """
        return self._broadcast_network

    @broadcast_network.setter
    def broadcast_network(self, broadcast_network):
        """Sets the broadcast_network of this Broadcaster.

        The parent broadcast network to which the broadcaster belongs.  # noqa: E501

        :param broadcast_network: The broadcast_network of this Broadcaster.  # noqa: E501
        :type: list[object]
        """

        self._broadcast_network = broadcast_network

    @property
    def description(self):
        """Gets the description of this Broadcaster.  # noqa: E501

        small description  # noqa: E501

        :return: The description of this Broadcaster.  # noqa: E501
        :rtype: list[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Broadcaster.

        small description  # noqa: E501

        :param description: The description of this Broadcaster.  # noqa: E501
        :type: list[str]
        """

        self._description = description

    @property
    def membership(self):
        """Gets the membership of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The membership of this Broadcaster.  # noqa: E501
        :rtype: list[str]
        """
        return self._membership

    @membership.setter
    def membership(self, membership):
        """Sets the membership of this Broadcaster.

        Description not available  # noqa: E501

        :param membership: The membership of this Broadcaster.  # noqa: E501
        :type: list[str]
        """

        self._membership = membership

    @property
    def share_source(self):
        """Gets the share_source of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The share_source of this Broadcaster.  # noqa: E501
        :rtype: list[str]
        """
        return self._share_source

    @share_source.setter
    def share_source(self, share_source):
        """Sets the share_source of this Broadcaster.

        Description not available  # noqa: E501

        :param share_source: The share_source of this Broadcaster.  # noqa: E501
        :type: list[str]
        """

        self._share_source = share_source

    @property
    def ceo(self):
        """Gets the ceo of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The ceo of this Broadcaster.  # noqa: E501
        :rtype: list[object]
        """
        return self._ceo

    @ceo.setter
    def ceo(self, ceo):
        """Sets the ceo of this Broadcaster.

        Description not available  # noqa: E501

        :param ceo: The ceo of this Broadcaster.  # noqa: E501
        :type: list[object]
        """

        self._ceo = ceo

    @property
    def network(self):
        """Gets the network of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The network of this Broadcaster.  # noqa: E501
        :rtype: list[object]
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this Broadcaster.

        Description not available  # noqa: E501

        :param network: The network of this Broadcaster.  # noqa: E501
        :type: list[object]
        """

        self._network = network

    @property
    def formation_year(self):
        """Gets the formation_year of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The formation_year of this Broadcaster.  # noqa: E501
        :rtype: list[str]
        """
        return self._formation_year

    @formation_year.setter
    def formation_year(self, formation_year):
        """Sets the formation_year of this Broadcaster.

        Description not available  # noqa: E501

        :param formation_year: The formation_year of this Broadcaster.  # noqa: E501
        :type: list[str]
        """

        self._formation_year = formation_year

    @property
    def first_air_date(self):
        """Gets the first_air_date of this Broadcaster.  # noqa: E501

        The date on which regular broadcasts began.  # noqa: E501

        :return: The first_air_date of this Broadcaster.  # noqa: E501
        :rtype: list[str]
        """
        return self._first_air_date

    @first_air_date.setter
    def first_air_date(self, first_air_date):
        """Sets the first_air_date of this Broadcaster.

        The date on which regular broadcasts began.  # noqa: E501

        :param first_air_date: The first_air_date of this Broadcaster.  # noqa: E501
        :type: list[str]
        """

        self._first_air_date = first_air_date

    @property
    def junior_season(self):
        """Gets the junior_season of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The junior_season of this Broadcaster.  # noqa: E501
        :rtype: list[object]
        """
        return self._junior_season

    @junior_season.setter
    def junior_season(self, junior_season):
        """Sets the junior_season of this Broadcaster.

        Description not available  # noqa: E501

        :param junior_season: The junior_season of this Broadcaster.  # noqa: E501
        :type: list[object]
        """

        self._junior_season = junior_season

    @property
    def analog_channel(self):
        """Gets the analog_channel of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The analog_channel of this Broadcaster.  # noqa: E501
        :rtype: list[str]
        """
        return self._analog_channel

    @analog_channel.setter
    def analog_channel(self, analog_channel):
        """Sets the analog_channel of this Broadcaster.

        Description not available  # noqa: E501

        :param analog_channel: The analog_channel of this Broadcaster.  # noqa: E501
        :type: list[str]
        """

        self._analog_channel = analog_channel

    @property
    def digital_channel(self):
        """Gets the digital_channel of this Broadcaster.  # noqa: E501

        Ένα ψηφιακό κανάλι επιτρέπει την μετάδοση δεδομένων σε ψηφιακή μορφή.  # noqa: E501

        :return: The digital_channel of this Broadcaster.  # noqa: E501
        :rtype: list[str]
        """
        return self._digital_channel

    @digital_channel.setter
    def digital_channel(self, digital_channel):
        """Sets the digital_channel of this Broadcaster.

        Ένα ψηφιακό κανάλι επιτρέπει την μετάδοση δεδομένων σε ψηφιακή μορφή.  # noqa: E501

        :param digital_channel: The digital_channel of this Broadcaster.  # noqa: E501
        :type: list[str]
        """

        self._digital_channel = digital_channel

    @property
    def other_channel(self):
        """Gets the other_channel of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The other_channel of this Broadcaster.  # noqa: E501
        :rtype: list[str]
        """
        return self._other_channel

    @other_channel.setter
    def other_channel(self, other_channel):
        """Sets the other_channel of this Broadcaster.

        Description not available  # noqa: E501

        :param other_channel: The other_channel of this Broadcaster.  # noqa: E501
        :type: list[str]
        """

        self._other_channel = other_channel

    @property
    def headquarter(self):
        """Gets the headquarter of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The headquarter of this Broadcaster.  # noqa: E501
        :rtype: list[object]
        """
        return self._headquarter

    @headquarter.setter
    def headquarter(self, headquarter):
        """Sets the headquarter of this Broadcaster.

        Description not available  # noqa: E501

        :param headquarter: The headquarter of this Broadcaster.  # noqa: E501
        :type: list[object]
        """

        self._headquarter = headquarter

    @property
    def sister_station(self):
        """Gets the sister_station of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The sister_station of this Broadcaster.  # noqa: E501
        :rtype: list[object]
        """
        return self._sister_station

    @sister_station.setter
    def sister_station(self, sister_station):
        """Sets the sister_station of this Broadcaster.

        Description not available  # noqa: E501

        :param sister_station: The sister_station of this Broadcaster.  # noqa: E501
        :type: list[object]
        """

        self._sister_station = sister_station

    @property
    def extinction_year(self):
        """Gets the extinction_year of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The extinction_year of this Broadcaster.  # noqa: E501
        :rtype: list[str]
        """
        return self._extinction_year

    @extinction_year.setter
    def extinction_year(self, extinction_year):
        """Sets the extinction_year of this Broadcaster.

        Description not available  # noqa: E501

        :param extinction_year: The extinction_year of this Broadcaster.  # noqa: E501
        :type: list[str]
        """

        self._extinction_year = extinction_year

    @property
    def child_organisation(self):
        """Gets the child_organisation of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The child_organisation of this Broadcaster.  # noqa: E501
        :rtype: list[object]
        """
        return self._child_organisation

    @child_organisation.setter
    def child_organisation(self, child_organisation):
        """Sets the child_organisation of this Broadcaster.

        Description not available  # noqa: E501

        :param child_organisation: The child_organisation of this Broadcaster.  # noqa: E501
        :type: list[object]
        """

        self._child_organisation = child_organisation

    @property
    def honours(self):
        """Gets the honours of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The honours of this Broadcaster.  # noqa: E501
        :rtype: list[object]
        """
        return self._honours

    @honours.setter
    def honours(self, honours):
        """Sets the honours of this Broadcaster.

        Description not available  # noqa: E501

        :param honours: The honours of this Broadcaster.  # noqa: E501
        :type: list[object]
        """

        self._honours = honours

    @property
    def parent_organisation(self):
        """Gets the parent_organisation of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The parent_organisation of this Broadcaster.  # noqa: E501
        :rtype: list[object]
        """
        return self._parent_organisation

    @parent_organisation.setter
    def parent_organisation(self, parent_organisation):
        """Sets the parent_organisation of this Broadcaster.

        Description not available  # noqa: E501

        :param parent_organisation: The parent_organisation of this Broadcaster.  # noqa: E501
        :type: list[object]
        """

        self._parent_organisation = parent_organisation

    @property
    def organisation_member(self):
        """Gets the organisation_member of this Broadcaster.  # noqa: E501

        Identify the members of an organisation.  # noqa: E501

        :return: The organisation_member of this Broadcaster.  # noqa: E501
        :rtype: list[object]
        """
        return self._organisation_member

    @organisation_member.setter
    def organisation_member(self, organisation_member):
        """Sets the organisation_member of this Broadcaster.

        Identify the members of an organisation.  # noqa: E501

        :param organisation_member: The organisation_member of this Broadcaster.  # noqa: E501
        :type: list[object]
        """

        self._organisation_member = organisation_member

    @property
    def broadcast_translator(self):
        """Gets the broadcast_translator of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The broadcast_translator of this Broadcaster.  # noqa: E501
        :rtype: list[str]
        """
        return self._broadcast_translator

    @broadcast_translator.setter
    def broadcast_translator(self, broadcast_translator):
        """Sets the broadcast_translator of this Broadcaster.

        Description not available  # noqa: E501

        :param broadcast_translator: The broadcast_translator of this Broadcaster.  # noqa: E501
        :type: list[str]
        """

        self._broadcast_translator = broadcast_translator

    @property
    def number_of_staff(self):
        """Gets the number_of_staff of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The number_of_staff of this Broadcaster.  # noqa: E501
        :rtype: list[int]
        """
        return self._number_of_staff

    @number_of_staff.setter
    def number_of_staff(self, number_of_staff):
        """Sets the number_of_staff of this Broadcaster.

        Description not available  # noqa: E501

        :param number_of_staff: The number_of_staff of this Broadcaster.  # noqa: E501
        :type: list[int]
        """

        self._number_of_staff = number_of_staff

    @property
    def product(self):
        """Gets the product of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The product of this Broadcaster.  # noqa: E501
        :rtype: list[object]
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this Broadcaster.

        Description not available  # noqa: E501

        :param product: The product of this Broadcaster.  # noqa: E501
        :type: list[object]
        """

        self._product = product

    @property
    def hometown(self):
        """Gets the hometown of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The hometown of this Broadcaster.  # noqa: E501
        :rtype: list[object]
        """
        return self._hometown

    @hometown.setter
    def hometown(self, hometown):
        """Sets the hometown of this Broadcaster.

        Description not available  # noqa: E501

        :param hometown: The hometown of this Broadcaster.  # noqa: E501
        :type: list[object]
        """

        self._hometown = hometown

    @property
    def broadcast_area(self):
        """Gets the broadcast_area of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The broadcast_area of this Broadcaster.  # noqa: E501
        :rtype: list[object]
        """
        return self._broadcast_area

    @broadcast_area.setter
    def broadcast_area(self, broadcast_area):
        """Sets the broadcast_area of this Broadcaster.

        Description not available  # noqa: E501

        :param broadcast_area: The broadcast_area of this Broadcaster.  # noqa: E501
        :type: list[object]
        """

        self._broadcast_area = broadcast_area

    @property
    def foundation_place(self):
        """Gets the foundation_place of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The foundation_place of this Broadcaster.  # noqa: E501
        :rtype: list[object]
        """
        return self._foundation_place

    @foundation_place.setter
    def foundation_place(self, foundation_place):
        """Sets the foundation_place of this Broadcaster.

        Description not available  # noqa: E501

        :param foundation_place: The foundation_place of this Broadcaster.  # noqa: E501
        :type: list[object]
        """

        self._foundation_place = foundation_place

    @property
    def national_selection(self):
        """Gets the national_selection of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The national_selection of this Broadcaster.  # noqa: E501
        :rtype: list[object]
        """
        return self._national_selection

    @national_selection.setter
    def national_selection(self, national_selection):
        """Sets the national_selection of this Broadcaster.

        Description not available  # noqa: E501

        :param national_selection: The national_selection of this Broadcaster.  # noqa: E501
        :type: list[object]
        """

        self._national_selection = national_selection

    @property
    def programme_format(self):
        """Gets the programme_format of this Broadcaster.  # noqa: E501

        The programming format describes the overall content broadcast on a radio or television station.  # noqa: E501

        :return: The programme_format of this Broadcaster.  # noqa: E501
        :rtype: list[object]
        """
        return self._programme_format

    @programme_format.setter
    def programme_format(self, programme_format):
        """Sets the programme_format of this Broadcaster.

        The programming format describes the overall content broadcast on a radio or television station.  # noqa: E501

        :param programme_format: The programme_format of this Broadcaster.  # noqa: E501
        :type: list[object]
        """

        self._programme_format = programme_format

    @property
    def broadcast_repeater(self):
        """Gets the broadcast_repeater of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The broadcast_repeater of this Broadcaster.  # noqa: E501
        :rtype: list[str]
        """
        return self._broadcast_repeater

    @broadcast_repeater.setter
    def broadcast_repeater(self, broadcast_repeater):
        """Sets the broadcast_repeater of this Broadcaster.

        Description not available  # noqa: E501

        :param broadcast_repeater: The broadcast_repeater of this Broadcaster.  # noqa: E501
        :type: list[str]
        """

        self._broadcast_repeater = broadcast_repeater

    @property
    def label(self):
        """Gets the label of this Broadcaster.  # noqa: E501

        short description of the resource  # noqa: E501

        :return: The label of this Broadcaster.  # noqa: E501
        :rtype: list[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Broadcaster.

        short description of the resource  # noqa: E501

        :param label: The label of this Broadcaster.  # noqa: E501
        :type: list[str]
        """

        self._label = label

    @property
    def legal_form(self):
        """Gets the legal_form of this Broadcaster.  # noqa: E501

        There are many types of business entity defined in the legal systems of various countries. These include corporations, cooperatives, partnerships, sole traders, limited liability company and other specialized types of organization.  # noqa: E501

        :return: The legal_form of this Broadcaster.  # noqa: E501
        :rtype: list[object]
        """
        return self._legal_form

    @legal_form.setter
    def legal_form(self, legal_form):
        """Sets the legal_form of this Broadcaster.

        There are many types of business entity defined in the legal systems of various countries. These include corporations, cooperatives, partnerships, sole traders, limited liability company and other specialized types of organization.  # noqa: E501

        :param legal_form: The legal_form of this Broadcaster.  # noqa: E501
        :type: list[object]
        """

        self._legal_form = legal_form

    @property
    def general_council(self):
        """Gets the general_council of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The general_council of this Broadcaster.  # noqa: E501
        :rtype: list[object]
        """
        return self._general_council

    @general_council.setter
    def general_council(self, general_council):
        """Sets the general_council of this Broadcaster.

        Description not available  # noqa: E501

        :param general_council: The general_council of this Broadcaster.  # noqa: E501
        :type: list[object]
        """

        self._general_council = general_council

    @property
    def trustee(self):
        """Gets the trustee of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The trustee of this Broadcaster.  # noqa: E501
        :rtype: list[object]
        """
        return self._trustee

    @trustee.setter
    def trustee(self, trustee):
        """Sets the trustee of this Broadcaster.

        Description not available  # noqa: E501

        :param trustee: The trustee of this Broadcaster.  # noqa: E501
        :type: list[object]
        """

        self._trustee = trustee

    @property
    def age(self):
        """Gets the age of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The age of this Broadcaster.  # noqa: E501
        :rtype: list[int]
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this Broadcaster.

        Description not available  # noqa: E501

        :param age: The age of this Broadcaster.  # noqa: E501
        :type: list[int]
        """

        self._age = age

    @property
    def digital_sub_channel(self):
        """Gets the digital_sub_channel of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The digital_sub_channel of this Broadcaster.  # noqa: E501
        :rtype: list[str]
        """
        return self._digital_sub_channel

    @digital_sub_channel.setter
    def digital_sub_channel(self, digital_sub_channel):
        """Sets the digital_sub_channel of this Broadcaster.

        Description not available  # noqa: E501

        :param digital_sub_channel: The digital_sub_channel of this Broadcaster.  # noqa: E501
        :type: list[str]
        """

        self._digital_sub_channel = digital_sub_channel

    @property
    def main_organ(self):
        """Gets the main_organ of this Broadcaster.  # noqa: E501

        Description not available  # noqa: E501

        :return: The main_organ of this Broadcaster.  # noqa: E501
        :rtype: list[object]
        """
        return self._main_organ

    @main_organ.setter
    def main_organ(self, main_organ):
        """Sets the main_organ of this Broadcaster.

        Description not available  # noqa: E501

        :param main_organ: The main_organ of this Broadcaster.  # noqa: E501
        :type: list[object]
        """

        self._main_organ = main_organ

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Broadcaster):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Broadcaster):
            return True

        return self.to_dict() != other.to_dict()
