# coding: utf-8

"""
    DBpedia

    This is the API of the DBpedia Ontology  # noqa: E501

    The version of the OpenAPI document: v0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dbpedia.configuration import Configuration


class OlympicResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'other_appearances': 'list[object]',
        'number_of_officials': 'list[int]',
        'description': 'list[str]',
        'competition': 'list[object]',
        'summer_appearances': 'list[object]',
        'label': 'list[str]',
        'type': 'list[str]',
        'winter_appearances': 'list[object]',
        'number_of_gold_medals_won': 'list[int]',
        'number_of_competitors': 'list[int]',
        'number_of_bronze_medals_won': 'list[int]',
        'games': 'list[str]',
        'number_of_silver_medals_won': 'list[int]',
        'oldcode': 'list[str]',
        'id': 'str',
        'national_olympic_committee': 'list[object]',
        'rank_in_final_medal_count': 'list[int]',
        'flag_bearer': 'list[object]'
    }

    attribute_map = {
        'other_appearances': 'otherAppearances',
        'number_of_officials': 'numberOfOfficials',
        'description': 'description',
        'competition': 'competition',
        'summer_appearances': 'summerAppearances',
        'label': 'label',
        'type': 'type',
        'winter_appearances': 'winterAppearances',
        'number_of_gold_medals_won': 'numberOfGoldMedalsWon',
        'number_of_competitors': 'numberOfCompetitors',
        'number_of_bronze_medals_won': 'numberOfBronzeMedalsWon',
        'games': 'games',
        'number_of_silver_medals_won': 'numberOfSilverMedalsWon',
        'oldcode': 'oldcode',
        'id': 'id',
        'national_olympic_committee': 'nationalOlympicCommittee',
        'rank_in_final_medal_count': 'rankInFinalMedalCount',
        'flag_bearer': 'flagBearer'
    }

    def __init__(self, other_appearances=None, number_of_officials=None, description=None, competition=None, summer_appearances=None, label=None, type=None, winter_appearances=None, number_of_gold_medals_won=None, number_of_competitors=None, number_of_bronze_medals_won=None, games=None, number_of_silver_medals_won=None, oldcode=None, id=None, national_olympic_committee=None, rank_in_final_medal_count=None, flag_bearer=None, local_vars_configuration=None):  # noqa: E501
        """OlympicResult - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._other_appearances = None
        self._number_of_officials = None
        self._description = None
        self._competition = None
        self._summer_appearances = None
        self._label = None
        self._type = None
        self._winter_appearances = None
        self._number_of_gold_medals_won = None
        self._number_of_competitors = None
        self._number_of_bronze_medals_won = None
        self._games = None
        self._number_of_silver_medals_won = None
        self._oldcode = None
        self._id = None
        self._national_olympic_committee = None
        self._rank_in_final_medal_count = None
        self._flag_bearer = None
        self.discriminator = None

        self.other_appearances = other_appearances
        self.number_of_officials = number_of_officials
        self.description = description
        self.competition = competition
        self.summer_appearances = summer_appearances
        self.label = label
        self.type = type
        self.winter_appearances = winter_appearances
        self.number_of_gold_medals_won = number_of_gold_medals_won
        self.number_of_competitors = number_of_competitors
        self.number_of_bronze_medals_won = number_of_bronze_medals_won
        self.games = games
        self.number_of_silver_medals_won = number_of_silver_medals_won
        self.oldcode = oldcode
        if id is not None:
            self.id = id
        self.national_olympic_committee = national_olympic_committee
        self.rank_in_final_medal_count = rank_in_final_medal_count
        self.flag_bearer = flag_bearer

    @property
    def other_appearances(self):
        """Gets the other_appearances of this OlympicResult.  # noqa: E501

        Description not available  # noqa: E501

        :return: The other_appearances of this OlympicResult.  # noqa: E501
        :rtype: list[object]
        """
        return self._other_appearances

    @other_appearances.setter
    def other_appearances(self, other_appearances):
        """Sets the other_appearances of this OlympicResult.

        Description not available  # noqa: E501

        :param other_appearances: The other_appearances of this OlympicResult.  # noqa: E501
        :type: list[object]
        """

        self._other_appearances = other_appearances

    @property
    def number_of_officials(self):
        """Gets the number_of_officials of this OlympicResult.  # noqa: E501

        Description not available  # noqa: E501

        :return: The number_of_officials of this OlympicResult.  # noqa: E501
        :rtype: list[int]
        """
        return self._number_of_officials

    @number_of_officials.setter
    def number_of_officials(self, number_of_officials):
        """Sets the number_of_officials of this OlympicResult.

        Description not available  # noqa: E501

        :param number_of_officials: The number_of_officials of this OlympicResult.  # noqa: E501
        :type: list[int]
        """

        self._number_of_officials = number_of_officials

    @property
    def description(self):
        """Gets the description of this OlympicResult.  # noqa: E501

        small description  # noqa: E501

        :return: The description of this OlympicResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OlympicResult.

        small description  # noqa: E501

        :param description: The description of this OlympicResult.  # noqa: E501
        :type: list[str]
        """

        self._description = description

    @property
    def competition(self):
        """Gets the competition of this OlympicResult.  # noqa: E501

        Description not available  # noqa: E501

        :return: The competition of this OlympicResult.  # noqa: E501
        :rtype: list[object]
        """
        return self._competition

    @competition.setter
    def competition(self, competition):
        """Sets the competition of this OlympicResult.

        Description not available  # noqa: E501

        :param competition: The competition of this OlympicResult.  # noqa: E501
        :type: list[object]
        """

        self._competition = competition

    @property
    def summer_appearances(self):
        """Gets the summer_appearances of this OlympicResult.  # noqa: E501

        Description not available  # noqa: E501

        :return: The summer_appearances of this OlympicResult.  # noqa: E501
        :rtype: list[object]
        """
        return self._summer_appearances

    @summer_appearances.setter
    def summer_appearances(self, summer_appearances):
        """Sets the summer_appearances of this OlympicResult.

        Description not available  # noqa: E501

        :param summer_appearances: The summer_appearances of this OlympicResult.  # noqa: E501
        :type: list[object]
        """

        self._summer_appearances = summer_appearances

    @property
    def label(self):
        """Gets the label of this OlympicResult.  # noqa: E501

        short description of the resource  # noqa: E501

        :return: The label of this OlympicResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this OlympicResult.

        short description of the resource  # noqa: E501

        :param label: The label of this OlympicResult.  # noqa: E501
        :type: list[str]
        """

        self._label = label

    @property
    def type(self):
        """Gets the type of this OlympicResult.  # noqa: E501

        type of the resource  # noqa: E501

        :return: The type of this OlympicResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OlympicResult.

        type of the resource  # noqa: E501

        :param type: The type of this OlympicResult.  # noqa: E501
        :type: list[str]
        """

        self._type = type

    @property
    def winter_appearances(self):
        """Gets the winter_appearances of this OlympicResult.  # noqa: E501

        Description not available  # noqa: E501

        :return: The winter_appearances of this OlympicResult.  # noqa: E501
        :rtype: list[object]
        """
        return self._winter_appearances

    @winter_appearances.setter
    def winter_appearances(self, winter_appearances):
        """Sets the winter_appearances of this OlympicResult.

        Description not available  # noqa: E501

        :param winter_appearances: The winter_appearances of this OlympicResult.  # noqa: E501
        :type: list[object]
        """

        self._winter_appearances = winter_appearances

    @property
    def number_of_gold_medals_won(self):
        """Gets the number_of_gold_medals_won of this OlympicResult.  # noqa: E501

        Description not available  # noqa: E501

        :return: The number_of_gold_medals_won of this OlympicResult.  # noqa: E501
        :rtype: list[int]
        """
        return self._number_of_gold_medals_won

    @number_of_gold_medals_won.setter
    def number_of_gold_medals_won(self, number_of_gold_medals_won):
        """Sets the number_of_gold_medals_won of this OlympicResult.

        Description not available  # noqa: E501

        :param number_of_gold_medals_won: The number_of_gold_medals_won of this OlympicResult.  # noqa: E501
        :type: list[int]
        """

        self._number_of_gold_medals_won = number_of_gold_medals_won

    @property
    def number_of_competitors(self):
        """Gets the number_of_competitors of this OlympicResult.  # noqa: E501

        Description not available  # noqa: E501

        :return: The number_of_competitors of this OlympicResult.  # noqa: E501
        :rtype: list[int]
        """
        return self._number_of_competitors

    @number_of_competitors.setter
    def number_of_competitors(self, number_of_competitors):
        """Sets the number_of_competitors of this OlympicResult.

        Description not available  # noqa: E501

        :param number_of_competitors: The number_of_competitors of this OlympicResult.  # noqa: E501
        :type: list[int]
        """

        self._number_of_competitors = number_of_competitors

    @property
    def number_of_bronze_medals_won(self):
        """Gets the number_of_bronze_medals_won of this OlympicResult.  # noqa: E501

        Description not available  # noqa: E501

        :return: The number_of_bronze_medals_won of this OlympicResult.  # noqa: E501
        :rtype: list[int]
        """
        return self._number_of_bronze_medals_won

    @number_of_bronze_medals_won.setter
    def number_of_bronze_medals_won(self, number_of_bronze_medals_won):
        """Sets the number_of_bronze_medals_won of this OlympicResult.

        Description not available  # noqa: E501

        :param number_of_bronze_medals_won: The number_of_bronze_medals_won of this OlympicResult.  # noqa: E501
        :type: list[int]
        """

        self._number_of_bronze_medals_won = number_of_bronze_medals_won

    @property
    def games(self):
        """Gets the games of this OlympicResult.  # noqa: E501

        Description not available  # noqa: E501

        :return: The games of this OlympicResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._games

    @games.setter
    def games(self, games):
        """Sets the games of this OlympicResult.

        Description not available  # noqa: E501

        :param games: The games of this OlympicResult.  # noqa: E501
        :type: list[str]
        """

        self._games = games

    @property
    def number_of_silver_medals_won(self):
        """Gets the number_of_silver_medals_won of this OlympicResult.  # noqa: E501

        Description not available  # noqa: E501

        :return: The number_of_silver_medals_won of this OlympicResult.  # noqa: E501
        :rtype: list[int]
        """
        return self._number_of_silver_medals_won

    @number_of_silver_medals_won.setter
    def number_of_silver_medals_won(self, number_of_silver_medals_won):
        """Sets the number_of_silver_medals_won of this OlympicResult.

        Description not available  # noqa: E501

        :param number_of_silver_medals_won: The number_of_silver_medals_won of this OlympicResult.  # noqa: E501
        :type: list[int]
        """

        self._number_of_silver_medals_won = number_of_silver_medals_won

    @property
    def oldcode(self):
        """Gets the oldcode of this OlympicResult.  # noqa: E501

        Description not available  # noqa: E501

        :return: The oldcode of this OlympicResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._oldcode

    @oldcode.setter
    def oldcode(self, oldcode):
        """Sets the oldcode of this OlympicResult.

        Description not available  # noqa: E501

        :param oldcode: The oldcode of this OlympicResult.  # noqa: E501
        :type: list[str]
        """

        self._oldcode = oldcode

    @property
    def id(self):
        """Gets the id of this OlympicResult.  # noqa: E501

        identifier  # noqa: E501

        :return: The id of this OlympicResult.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OlympicResult.

        identifier  # noqa: E501

        :param id: The id of this OlympicResult.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def national_olympic_committee(self):
        """Gets the national_olympic_committee of this OlympicResult.  # noqa: E501

        Description not available  # noqa: E501

        :return: The national_olympic_committee of this OlympicResult.  # noqa: E501
        :rtype: list[object]
        """
        return self._national_olympic_committee

    @national_olympic_committee.setter
    def national_olympic_committee(self, national_olympic_committee):
        """Sets the national_olympic_committee of this OlympicResult.

        Description not available  # noqa: E501

        :param national_olympic_committee: The national_olympic_committee of this OlympicResult.  # noqa: E501
        :type: list[object]
        """

        self._national_olympic_committee = national_olympic_committee

    @property
    def rank_in_final_medal_count(self):
        """Gets the rank_in_final_medal_count of this OlympicResult.  # noqa: E501

        Description not available  # noqa: E501

        :return: The rank_in_final_medal_count of this OlympicResult.  # noqa: E501
        :rtype: list[int]
        """
        return self._rank_in_final_medal_count

    @rank_in_final_medal_count.setter
    def rank_in_final_medal_count(self, rank_in_final_medal_count):
        """Sets the rank_in_final_medal_count of this OlympicResult.

        Description not available  # noqa: E501

        :param rank_in_final_medal_count: The rank_in_final_medal_count of this OlympicResult.  # noqa: E501
        :type: list[int]
        """

        self._rank_in_final_medal_count = rank_in_final_medal_count

    @property
    def flag_bearer(self):
        """Gets the flag_bearer of this OlympicResult.  # noqa: E501

        Description not available  # noqa: E501

        :return: The flag_bearer of this OlympicResult.  # noqa: E501
        :rtype: list[object]
        """
        return self._flag_bearer

    @flag_bearer.setter
    def flag_bearer(self, flag_bearer):
        """Sets the flag_bearer of this OlympicResult.

        Description not available  # noqa: E501

        :param flag_bearer: The flag_bearer of this OlympicResult.  # noqa: E501
        :type: list[object]
        """

        self._flag_bearer = flag_bearer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OlympicResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OlympicResult):
            return True

        return self.to_dict() != other.to_dict()
