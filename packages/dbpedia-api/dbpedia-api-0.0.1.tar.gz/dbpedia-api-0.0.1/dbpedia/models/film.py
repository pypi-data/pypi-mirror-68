# coding: utf-8

"""
    DBpedia

    This is the API of the DBpedia Ontology  # noqa: E501

    The version of the OpenAPI document: v0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dbpedia.configuration import Configuration


class Film(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'imdb_id': 'list[str]',
        'music_composer': 'list[object]',
        'afdb_id': 'list[str]',
        'type': 'list[str]',
        'quebecer_title': 'list[str]',
        'produced_by': 'list[object]',
        'film_runtime': 'list[float]',
        'eurobabe_index_id': 'list[str]',
        'id': 'str',
        'amgid': 'list[str]',
        'iafd_id': 'list[str]',
        'gross': 'list[float]',
        'author': 'list[object]',
        'director': 'list[object]',
        'runtime': 'list[object]',
        'production_company': 'list[object]',
        'license': 'list[object]',
        'subject_term': 'list[str]',
        'makeup_artist': 'list[object]',
        'producer': 'list[object]',
        'film_polski_id': 'list[str]',
        'previous_work': 'list[object]',
        'translator': 'list[object]',
        'alternative_title': 'list[str]',
        'description': 'list[str]',
        'subsequent_work': 'list[object]',
        'chief_editor': 'list[object]',
        'cinematography': 'list[object]',
        'main_character': 'list[object]',
        'title_language': 'list[str]',
        'bgafd_id': 'list[str]',
        'first_broadcast': 'list[str]',
        'based_on': 'list[object]',
        'release_date': 'list[str]',
        'composer': 'list[object]',
        'egafd_id': 'list[str]',
        'label': 'list[str]',
        'e_teatr_id': 'list[str]',
        'original_language': 'list[object]',
        'costume_designer': 'list[object]',
        'editing': 'list[object]',
        'film_colour_type': 'list[str]',
        'allcinema_id': 'list[str]',
        'narrator': 'list[object]',
        'original_title': 'list[str]',
        'film_audio_type': 'list[str]',
        'special_effects': 'list[object]',
        'starring': 'list[object]',
        'completion_date': 'list[str]',
        'writer': 'list[object]',
        'set_designer': 'list[object]'
    }

    attribute_map = {
        'imdb_id': 'imdbId',
        'music_composer': 'musicComposer',
        'afdb_id': 'afdbId',
        'type': 'type',
        'quebecer_title': 'quebecerTitle',
        'produced_by': 'producedBy',
        'film_runtime': 'filmRuntime',
        'eurobabe_index_id': 'eurobabeIndexId',
        'id': 'id',
        'amgid': 'amgid',
        'iafd_id': 'iafdId',
        'gross': 'gross',
        'author': 'author',
        'director': 'director',
        'runtime': 'runtime',
        'production_company': 'productionCompany',
        'license': 'license',
        'subject_term': 'subjectTerm',
        'makeup_artist': 'makeupArtist',
        'producer': 'producer',
        'film_polski_id': 'filmPolskiId',
        'previous_work': 'previousWork',
        'translator': 'translator',
        'alternative_title': 'alternativeTitle',
        'description': 'description',
        'subsequent_work': 'subsequentWork',
        'chief_editor': 'chiefEditor',
        'cinematography': 'cinematography',
        'main_character': 'mainCharacter',
        'title_language': 'titleLanguage',
        'bgafd_id': 'bgafdId',
        'first_broadcast': 'firstBroadcast',
        'based_on': 'basedOn',
        'release_date': 'releaseDate',
        'composer': 'composer',
        'egafd_id': 'egafdId',
        'label': 'label',
        'e_teatr_id': 'eTeatrId',
        'original_language': 'originalLanguage',
        'costume_designer': 'costumeDesigner',
        'editing': 'editing',
        'film_colour_type': 'filmColourType',
        'allcinema_id': 'allcinemaId',
        'narrator': 'narrator',
        'original_title': 'originalTitle',
        'film_audio_type': 'filmAudioType',
        'special_effects': 'specialEffects',
        'starring': 'starring',
        'completion_date': 'completionDate',
        'writer': 'writer',
        'set_designer': 'setDesigner'
    }

    def __init__(self, imdb_id=None, music_composer=None, afdb_id=None, type=None, quebecer_title=None, produced_by=None, film_runtime=None, eurobabe_index_id=None, id=None, amgid=None, iafd_id=None, gross=None, author=None, director=None, runtime=None, production_company=None, license=None, subject_term=None, makeup_artist=None, producer=None, film_polski_id=None, previous_work=None, translator=None, alternative_title=None, description=None, subsequent_work=None, chief_editor=None, cinematography=None, main_character=None, title_language=None, bgafd_id=None, first_broadcast=None, based_on=None, release_date=None, composer=None, egafd_id=None, label=None, e_teatr_id=None, original_language=None, costume_designer=None, editing=None, film_colour_type=None, allcinema_id=None, narrator=None, original_title=None, film_audio_type=None, special_effects=None, starring=None, completion_date=None, writer=None, set_designer=None, local_vars_configuration=None):  # noqa: E501
        """Film - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._imdb_id = None
        self._music_composer = None
        self._afdb_id = None
        self._type = None
        self._quebecer_title = None
        self._produced_by = None
        self._film_runtime = None
        self._eurobabe_index_id = None
        self._id = None
        self._amgid = None
        self._iafd_id = None
        self._gross = None
        self._author = None
        self._director = None
        self._runtime = None
        self._production_company = None
        self._license = None
        self._subject_term = None
        self._makeup_artist = None
        self._producer = None
        self._film_polski_id = None
        self._previous_work = None
        self._translator = None
        self._alternative_title = None
        self._description = None
        self._subsequent_work = None
        self._chief_editor = None
        self._cinematography = None
        self._main_character = None
        self._title_language = None
        self._bgafd_id = None
        self._first_broadcast = None
        self._based_on = None
        self._release_date = None
        self._composer = None
        self._egafd_id = None
        self._label = None
        self._e_teatr_id = None
        self._original_language = None
        self._costume_designer = None
        self._editing = None
        self._film_colour_type = None
        self._allcinema_id = None
        self._narrator = None
        self._original_title = None
        self._film_audio_type = None
        self._special_effects = None
        self._starring = None
        self._completion_date = None
        self._writer = None
        self._set_designer = None
        self.discriminator = None

        self.imdb_id = imdb_id
        self.music_composer = music_composer
        self.afdb_id = afdb_id
        self.type = type
        self.quebecer_title = quebecer_title
        self.produced_by = produced_by
        self.film_runtime = film_runtime
        self.eurobabe_index_id = eurobabe_index_id
        if id is not None:
            self.id = id
        self.amgid = amgid
        self.iafd_id = iafd_id
        self.gross = gross
        self.author = author
        self.director = director
        self.runtime = runtime
        self.production_company = production_company
        self.license = license
        self.subject_term = subject_term
        self.makeup_artist = makeup_artist
        self.producer = producer
        self.film_polski_id = film_polski_id
        self.previous_work = previous_work
        self.translator = translator
        self.alternative_title = alternative_title
        self.description = description
        self.subsequent_work = subsequent_work
        self.chief_editor = chief_editor
        self.cinematography = cinematography
        self.main_character = main_character
        self.title_language = title_language
        self.bgafd_id = bgafd_id
        self.first_broadcast = first_broadcast
        self.based_on = based_on
        self.release_date = release_date
        self.composer = composer
        self.egafd_id = egafd_id
        self.label = label
        self.e_teatr_id = e_teatr_id
        self.original_language = original_language
        self.costume_designer = costume_designer
        self.editing = editing
        self.film_colour_type = film_colour_type
        self.allcinema_id = allcinema_id
        self.narrator = narrator
        self.original_title = original_title
        self.film_audio_type = film_audio_type
        self.special_effects = special_effects
        self.starring = starring
        self.completion_date = completion_date
        self.writer = writer
        self.set_designer = set_designer

    @property
    def imdb_id(self):
        """Gets the imdb_id of this Film.  # noqa: E501

        Description not available  # noqa: E501

        :return: The imdb_id of this Film.  # noqa: E501
        :rtype: list[str]
        """
        return self._imdb_id

    @imdb_id.setter
    def imdb_id(self, imdb_id):
        """Sets the imdb_id of this Film.

        Description not available  # noqa: E501

        :param imdb_id: The imdb_id of this Film.  # noqa: E501
        :type: list[str]
        """

        self._imdb_id = imdb_id

    @property
    def music_composer(self):
        """Gets the music_composer of this Film.  # noqa: E501

        Description not available  # noqa: E501

        :return: The music_composer of this Film.  # noqa: E501
        :rtype: list[object]
        """
        return self._music_composer

    @music_composer.setter
    def music_composer(self, music_composer):
        """Sets the music_composer of this Film.

        Description not available  # noqa: E501

        :param music_composer: The music_composer of this Film.  # noqa: E501
        :type: list[object]
        """

        self._music_composer = music_composer

    @property
    def afdb_id(self):
        """Gets the afdb_id of this Film.  # noqa: E501

        Description not available  # noqa: E501

        :return: The afdb_id of this Film.  # noqa: E501
        :rtype: list[str]
        """
        return self._afdb_id

    @afdb_id.setter
    def afdb_id(self, afdb_id):
        """Sets the afdb_id of this Film.

        Description not available  # noqa: E501

        :param afdb_id: The afdb_id of this Film.  # noqa: E501
        :type: list[str]
        """

        self._afdb_id = afdb_id

    @property
    def type(self):
        """Gets the type of this Film.  # noqa: E501

        type of the resource  # noqa: E501

        :return: The type of this Film.  # noqa: E501
        :rtype: list[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Film.

        type of the resource  # noqa: E501

        :param type: The type of this Film.  # noqa: E501
        :type: list[str]
        """

        self._type = type

    @property
    def quebecer_title(self):
        """Gets the quebecer_title of this Film.  # noqa: E501

        Description not available  # noqa: E501

        :return: The quebecer_title of this Film.  # noqa: E501
        :rtype: list[str]
        """
        return self._quebecer_title

    @quebecer_title.setter
    def quebecer_title(self, quebecer_title):
        """Sets the quebecer_title of this Film.

        Description not available  # noqa: E501

        :param quebecer_title: The quebecer_title of this Film.  # noqa: E501
        :type: list[str]
        """

        self._quebecer_title = quebecer_title

    @property
    def produced_by(self):
        """Gets the produced_by of this Film.  # noqa: E501

        Description not available  # noqa: E501

        :return: The produced_by of this Film.  # noqa: E501
        :rtype: list[object]
        """
        return self._produced_by

    @produced_by.setter
    def produced_by(self, produced_by):
        """Sets the produced_by of this Film.

        Description not available  # noqa: E501

        :param produced_by: The produced_by of this Film.  # noqa: E501
        :type: list[object]
        """

        self._produced_by = produced_by

    @property
    def film_runtime(self):
        """Gets the film_runtime of this Film.  # noqa: E501

        Description not available  # noqa: E501

        :return: The film_runtime of this Film.  # noqa: E501
        :rtype: list[float]
        """
        return self._film_runtime

    @film_runtime.setter
    def film_runtime(self, film_runtime):
        """Sets the film_runtime of this Film.

        Description not available  # noqa: E501

        :param film_runtime: The film_runtime of this Film.  # noqa: E501
        :type: list[float]
        """

        self._film_runtime = film_runtime

    @property
    def eurobabe_index_id(self):
        """Gets the eurobabe_index_id of this Film.  # noqa: E501

        Description not available  # noqa: E501

        :return: The eurobabe_index_id of this Film.  # noqa: E501
        :rtype: list[str]
        """
        return self._eurobabe_index_id

    @eurobabe_index_id.setter
    def eurobabe_index_id(self, eurobabe_index_id):
        """Sets the eurobabe_index_id of this Film.

        Description not available  # noqa: E501

        :param eurobabe_index_id: The eurobabe_index_id of this Film.  # noqa: E501
        :type: list[str]
        """

        self._eurobabe_index_id = eurobabe_index_id

    @property
    def id(self):
        """Gets the id of this Film.  # noqa: E501

        identifier  # noqa: E501

        :return: The id of this Film.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Film.

        identifier  # noqa: E501

        :param id: The id of this Film.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def amgid(self):
        """Gets the amgid of this Film.  # noqa: E501

        Description not available  # noqa: E501

        :return: The amgid of this Film.  # noqa: E501
        :rtype: list[str]
        """
        return self._amgid

    @amgid.setter
    def amgid(self, amgid):
        """Sets the amgid of this Film.

        Description not available  # noqa: E501

        :param amgid: The amgid of this Film.  # noqa: E501
        :type: list[str]
        """

        self._amgid = amgid

    @property
    def iafd_id(self):
        """Gets the iafd_id of this Film.  # noqa: E501

        Description not available  # noqa: E501

        :return: The iafd_id of this Film.  # noqa: E501
        :rtype: list[str]
        """
        return self._iafd_id

    @iafd_id.setter
    def iafd_id(self, iafd_id):
        """Sets the iafd_id of this Film.

        Description not available  # noqa: E501

        :param iafd_id: The iafd_id of this Film.  # noqa: E501
        :type: list[str]
        """

        self._iafd_id = iafd_id

    @property
    def gross(self):
        """Gets the gross of this Film.  # noqa: E501

        Description not available  # noqa: E501

        :return: The gross of this Film.  # noqa: E501
        :rtype: list[float]
        """
        return self._gross

    @gross.setter
    def gross(self, gross):
        """Sets the gross of this Film.

        Description not available  # noqa: E501

        :param gross: The gross of this Film.  # noqa: E501
        :type: list[float]
        """

        self._gross = gross

    @property
    def author(self):
        """Gets the author of this Film.  # noqa: E501

        Description not available  # noqa: E501

        :return: The author of this Film.  # noqa: E501
        :rtype: list[object]
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this Film.

        Description not available  # noqa: E501

        :param author: The author of this Film.  # noqa: E501
        :type: list[object]
        """

        self._author = author

    @property
    def director(self):
        """Gets the director of this Film.  # noqa: E501

        A film director is a person who directs the making of a film.  # noqa: E501

        :return: The director of this Film.  # noqa: E501
        :rtype: list[object]
        """
        return self._director

    @director.setter
    def director(self, director):
        """Sets the director of this Film.

        A film director is a person who directs the making of a film.  # noqa: E501

        :param director: The director of this Film.  # noqa: E501
        :type: list[object]
        """

        self._director = director

    @property
    def runtime(self):
        """Gets the runtime of this Film.  # noqa: E501

        Description not available  # noqa: E501

        :return: The runtime of this Film.  # noqa: E501
        :rtype: list[object]
        """
        return self._runtime

    @runtime.setter
    def runtime(self, runtime):
        """Sets the runtime of this Film.

        Description not available  # noqa: E501

        :param runtime: The runtime of this Film.  # noqa: E501
        :type: list[object]
        """

        self._runtime = runtime

    @property
    def production_company(self):
        """Gets the production_company of this Film.  # noqa: E501

        the company that produced the work e.g. Film, MusicalWork, Software  # noqa: E501

        :return: The production_company of this Film.  # noqa: E501
        :rtype: list[object]
        """
        return self._production_company

    @production_company.setter
    def production_company(self, production_company):
        """Sets the production_company of this Film.

        the company that produced the work e.g. Film, MusicalWork, Software  # noqa: E501

        :param production_company: The production_company of this Film.  # noqa: E501
        :type: list[object]
        """

        self._production_company = production_company

    @property
    def license(self):
        """Gets the license of this Film.  # noqa: E501

        Description not available  # noqa: E501

        :return: The license of this Film.  # noqa: E501
        :rtype: list[object]
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this Film.

        Description not available  # noqa: E501

        :param license: The license of this Film.  # noqa: E501
        :type: list[object]
        """

        self._license = license

    @property
    def subject_term(self):
        """Gets the subject_term of this Film.  # noqa: E501

        The subject as a term, possibly a term from a formal classification  # noqa: E501

        :return: The subject_term of this Film.  # noqa: E501
        :rtype: list[str]
        """
        return self._subject_term

    @subject_term.setter
    def subject_term(self, subject_term):
        """Sets the subject_term of this Film.

        The subject as a term, possibly a term from a formal classification  # noqa: E501

        :param subject_term: The subject_term of this Film.  # noqa: E501
        :type: list[str]
        """

        self._subject_term = subject_term

    @property
    def makeup_artist(self):
        """Gets the makeup_artist of this Film.  # noqa: E501

        the person who is responsible for the actors makeup  # noqa: E501

        :return: The makeup_artist of this Film.  # noqa: E501
        :rtype: list[object]
        """
        return self._makeup_artist

    @makeup_artist.setter
    def makeup_artist(self, makeup_artist):
        """Sets the makeup_artist of this Film.

        the person who is responsible for the actors makeup  # noqa: E501

        :param makeup_artist: The makeup_artist of this Film.  # noqa: E501
        :type: list[object]
        """

        self._makeup_artist = makeup_artist

    @property
    def producer(self):
        """Gets the producer of this Film.  # noqa: E501

        The producer of the creative work.  # noqa: E501

        :return: The producer of this Film.  # noqa: E501
        :rtype: list[object]
        """
        return self._producer

    @producer.setter
    def producer(self, producer):
        """Sets the producer of this Film.

        The producer of the creative work.  # noqa: E501

        :param producer: The producer of this Film.  # noqa: E501
        :type: list[object]
        """

        self._producer = producer

    @property
    def film_polski_id(self):
        """Gets the film_polski_id of this Film.  # noqa: E501

        Description not available  # noqa: E501

        :return: The film_polski_id of this Film.  # noqa: E501
        :rtype: list[str]
        """
        return self._film_polski_id

    @film_polski_id.setter
    def film_polski_id(self, film_polski_id):
        """Sets the film_polski_id of this Film.

        Description not available  # noqa: E501

        :param film_polski_id: The film_polski_id of this Film.  # noqa: E501
        :type: list[str]
        """

        self._film_polski_id = film_polski_id

    @property
    def previous_work(self):
        """Gets the previous_work of this Film.  # noqa: E501

        Description not available  # noqa: E501

        :return: The previous_work of this Film.  # noqa: E501
        :rtype: list[object]
        """
        return self._previous_work

    @previous_work.setter
    def previous_work(self, previous_work):
        """Sets the previous_work of this Film.

        Description not available  # noqa: E501

        :param previous_work: The previous_work of this Film.  # noqa: E501
        :type: list[object]
        """

        self._previous_work = previous_work

    @property
    def translator(self):
        """Gets the translator of this Film.  # noqa: E501

        Translator(s), if original not in English  # noqa: E501

        :return: The translator of this Film.  # noqa: E501
        :rtype: list[object]
        """
        return self._translator

    @translator.setter
    def translator(self, translator):
        """Sets the translator of this Film.

        Translator(s), if original not in English  # noqa: E501

        :param translator: The translator of this Film.  # noqa: E501
        :type: list[object]
        """

        self._translator = translator

    @property
    def alternative_title(self):
        """Gets the alternative_title of this Film.  # noqa: E501

        The alternative title attributed to a work  # noqa: E501

        :return: The alternative_title of this Film.  # noqa: E501
        :rtype: list[str]
        """
        return self._alternative_title

    @alternative_title.setter
    def alternative_title(self, alternative_title):
        """Sets the alternative_title of this Film.

        The alternative title attributed to a work  # noqa: E501

        :param alternative_title: The alternative_title of this Film.  # noqa: E501
        :type: list[str]
        """

        self._alternative_title = alternative_title

    @property
    def description(self):
        """Gets the description of this Film.  # noqa: E501

        small description  # noqa: E501

        :return: The description of this Film.  # noqa: E501
        :rtype: list[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Film.

        small description  # noqa: E501

        :param description: The description of this Film.  # noqa: E501
        :type: list[str]
        """

        self._description = description

    @property
    def subsequent_work(self):
        """Gets the subsequent_work of this Film.  # noqa: E501

        Description not available  # noqa: E501

        :return: The subsequent_work of this Film.  # noqa: E501
        :rtype: list[object]
        """
        return self._subsequent_work

    @subsequent_work.setter
    def subsequent_work(self, subsequent_work):
        """Sets the subsequent_work of this Film.

        Description not available  # noqa: E501

        :param subsequent_work: The subsequent_work of this Film.  # noqa: E501
        :type: list[object]
        """

        self._subsequent_work = subsequent_work

    @property
    def chief_editor(self):
        """Gets the chief_editor of this Film.  # noqa: E501

        Description not available  # noqa: E501

        :return: The chief_editor of this Film.  # noqa: E501
        :rtype: list[object]
        """
        return self._chief_editor

    @chief_editor.setter
    def chief_editor(self, chief_editor):
        """Sets the chief_editor of this Film.

        Description not available  # noqa: E501

        :param chief_editor: The chief_editor of this Film.  # noqa: E501
        :type: list[object]
        """

        self._chief_editor = chief_editor

    @property
    def cinematography(self):
        """Gets the cinematography of this Film.  # noqa: E501

        Description not available  # noqa: E501

        :return: The cinematography of this Film.  # noqa: E501
        :rtype: list[object]
        """
        return self._cinematography

    @cinematography.setter
    def cinematography(self, cinematography):
        """Sets the cinematography of this Film.

        Description not available  # noqa: E501

        :param cinematography: The cinematography of this Film.  # noqa: E501
        :type: list[object]
        """

        self._cinematography = cinematography

    @property
    def main_character(self):
        """Gets the main_character of this Film.  # noqa: E501

        Description not available  # noqa: E501

        :return: The main_character of this Film.  # noqa: E501
        :rtype: list[object]
        """
        return self._main_character

    @main_character.setter
    def main_character(self, main_character):
        """Sets the main_character of this Film.

        Description not available  # noqa: E501

        :param main_character: The main_character of this Film.  # noqa: E501
        :type: list[object]
        """

        self._main_character = main_character

    @property
    def title_language(self):
        """Gets the title_language of this Film.  # noqa: E501

        Description not available  # noqa: E501

        :return: The title_language of this Film.  # noqa: E501
        :rtype: list[str]
        """
        return self._title_language

    @title_language.setter
    def title_language(self, title_language):
        """Sets the title_language of this Film.

        Description not available  # noqa: E501

        :param title_language: The title_language of this Film.  # noqa: E501
        :type: list[str]
        """

        self._title_language = title_language

    @property
    def bgafd_id(self):
        """Gets the bgafd_id of this Film.  # noqa: E501

        Description not available  # noqa: E501

        :return: The bgafd_id of this Film.  # noqa: E501
        :rtype: list[str]
        """
        return self._bgafd_id

    @bgafd_id.setter
    def bgafd_id(self, bgafd_id):
        """Sets the bgafd_id of this Film.

        Description not available  # noqa: E501

        :param bgafd_id: The bgafd_id of this Film.  # noqa: E501
        :type: list[str]
        """

        self._bgafd_id = bgafd_id

    @property
    def first_broadcast(self):
        """Gets the first_broadcast of this Film.  # noqa: E501

        Description not available  # noqa: E501

        :return: The first_broadcast of this Film.  # noqa: E501
        :rtype: list[str]
        """
        return self._first_broadcast

    @first_broadcast.setter
    def first_broadcast(self, first_broadcast):
        """Sets the first_broadcast of this Film.

        Description not available  # noqa: E501

        :param first_broadcast: The first_broadcast of this Film.  # noqa: E501
        :type: list[str]
        """

        self._first_broadcast = first_broadcast

    @property
    def based_on(self):
        """Gets the based_on of this Film.  # noqa: E501

        Description not available  # noqa: E501

        :return: The based_on of this Film.  # noqa: E501
        :rtype: list[object]
        """
        return self._based_on

    @based_on.setter
    def based_on(self, based_on):
        """Sets the based_on of this Film.

        Description not available  # noqa: E501

        :param based_on: The based_on of this Film.  # noqa: E501
        :type: list[object]
        """

        self._based_on = based_on

    @property
    def release_date(self):
        """Gets the release_date of this Film.  # noqa: E501

        Description not available  # noqa: E501

        :return: The release_date of this Film.  # noqa: E501
        :rtype: list[str]
        """
        return self._release_date

    @release_date.setter
    def release_date(self, release_date):
        """Sets the release_date of this Film.

        Description not available  # noqa: E501

        :param release_date: The release_date of this Film.  # noqa: E501
        :type: list[str]
        """

        self._release_date = release_date

    @property
    def composer(self):
        """Gets the composer of this Film.  # noqa: E501

        Description not available  # noqa: E501

        :return: The composer of this Film.  # noqa: E501
        :rtype: list[object]
        """
        return self._composer

    @composer.setter
    def composer(self, composer):
        """Sets the composer of this Film.

        Description not available  # noqa: E501

        :param composer: The composer of this Film.  # noqa: E501
        :type: list[object]
        """

        self._composer = composer

    @property
    def egafd_id(self):
        """Gets the egafd_id of this Film.  # noqa: E501

        Description not available  # noqa: E501

        :return: The egafd_id of this Film.  # noqa: E501
        :rtype: list[str]
        """
        return self._egafd_id

    @egafd_id.setter
    def egafd_id(self, egafd_id):
        """Sets the egafd_id of this Film.

        Description not available  # noqa: E501

        :param egafd_id: The egafd_id of this Film.  # noqa: E501
        :type: list[str]
        """

        self._egafd_id = egafd_id

    @property
    def label(self):
        """Gets the label of this Film.  # noqa: E501

        short description of the resource  # noqa: E501

        :return: The label of this Film.  # noqa: E501
        :rtype: list[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Film.

        short description of the resource  # noqa: E501

        :param label: The label of this Film.  # noqa: E501
        :type: list[str]
        """

        self._label = label

    @property
    def e_teatr_id(self):
        """Gets the e_teatr_id of this Film.  # noqa: E501

        Description not available  # noqa: E501

        :return: The e_teatr_id of this Film.  # noqa: E501
        :rtype: list[str]
        """
        return self._e_teatr_id

    @e_teatr_id.setter
    def e_teatr_id(self, e_teatr_id):
        """Sets the e_teatr_id of this Film.

        Description not available  # noqa: E501

        :param e_teatr_id: The e_teatr_id of this Film.  # noqa: E501
        :type: list[str]
        """

        self._e_teatr_id = e_teatr_id

    @property
    def original_language(self):
        """Gets the original_language of this Film.  # noqa: E501

        The original language of the work.  # noqa: E501

        :return: The original_language of this Film.  # noqa: E501
        :rtype: list[object]
        """
        return self._original_language

    @original_language.setter
    def original_language(self, original_language):
        """Sets the original_language of this Film.

        The original language of the work.  # noqa: E501

        :param original_language: The original_language of this Film.  # noqa: E501
        :type: list[object]
        """

        self._original_language = original_language

    @property
    def costume_designer(self):
        """Gets the costume_designer of this Film.  # noqa: E501

        the person who is responsible for the film costume design  # noqa: E501

        :return: The costume_designer of this Film.  # noqa: E501
        :rtype: list[object]
        """
        return self._costume_designer

    @costume_designer.setter
    def costume_designer(self, costume_designer):
        """Sets the costume_designer of this Film.

        the person who is responsible for the film costume design  # noqa: E501

        :param costume_designer: The costume_designer of this Film.  # noqa: E501
        :type: list[object]
        """

        self._costume_designer = costume_designer

    @property
    def editing(self):
        """Gets the editing of this Film.  # noqa: E501

        Description not available  # noqa: E501

        :return: The editing of this Film.  # noqa: E501
        :rtype: list[object]
        """
        return self._editing

    @editing.setter
    def editing(self, editing):
        """Sets the editing of this Film.

        Description not available  # noqa: E501

        :param editing: The editing of this Film.  # noqa: E501
        :type: list[object]
        """

        self._editing = editing

    @property
    def film_colour_type(self):
        """Gets the film_colour_type of this Film.  # noqa: E501

        specifies the colour type of the film i.e. 'colour' or 'b/w'  # noqa: E501

        :return: The film_colour_type of this Film.  # noqa: E501
        :rtype: list[str]
        """
        return self._film_colour_type

    @film_colour_type.setter
    def film_colour_type(self, film_colour_type):
        """Sets the film_colour_type of this Film.

        specifies the colour type of the film i.e. 'colour' or 'b/w'  # noqa: E501

        :param film_colour_type: The film_colour_type of this Film.  # noqa: E501
        :type: list[str]
        """

        self._film_colour_type = film_colour_type

    @property
    def allcinema_id(self):
        """Gets the allcinema_id of this Film.  # noqa: E501

        Description not available  # noqa: E501

        :return: The allcinema_id of this Film.  # noqa: E501
        :rtype: list[str]
        """
        return self._allcinema_id

    @allcinema_id.setter
    def allcinema_id(self, allcinema_id):
        """Sets the allcinema_id of this Film.

        Description not available  # noqa: E501

        :param allcinema_id: The allcinema_id of this Film.  # noqa: E501
        :type: list[str]
        """

        self._allcinema_id = allcinema_id

    @property
    def narrator(self):
        """Gets the narrator of this Film.  # noqa: E501

        Description not available  # noqa: E501

        :return: The narrator of this Film.  # noqa: E501
        :rtype: list[object]
        """
        return self._narrator

    @narrator.setter
    def narrator(self, narrator):
        """Sets the narrator of this Film.

        Description not available  # noqa: E501

        :param narrator: The narrator of this Film.  # noqa: E501
        :type: list[object]
        """

        self._narrator = narrator

    @property
    def original_title(self):
        """Gets the original_title of this Film.  # noqa: E501

        The original title of the work, most of the time in the original language as well  # noqa: E501

        :return: The original_title of this Film.  # noqa: E501
        :rtype: list[str]
        """
        return self._original_title

    @original_title.setter
    def original_title(self, original_title):
        """Sets the original_title of this Film.

        The original title of the work, most of the time in the original language as well  # noqa: E501

        :param original_title: The original_title of this Film.  # noqa: E501
        :type: list[str]
        """

        self._original_title = original_title

    @property
    def film_audio_type(self):
        """Gets the film_audio_type of this Film.  # noqa: E501

        specifies the audio type of the film i.e. 'sound' or 'silent'  # noqa: E501

        :return: The film_audio_type of this Film.  # noqa: E501
        :rtype: list[str]
        """
        return self._film_audio_type

    @film_audio_type.setter
    def film_audio_type(self, film_audio_type):
        """Sets the film_audio_type of this Film.

        specifies the audio type of the film i.e. 'sound' or 'silent'  # noqa: E501

        :param film_audio_type: The film_audio_type of this Film.  # noqa: E501
        :type: list[str]
        """

        self._film_audio_type = film_audio_type

    @property
    def special_effects(self):
        """Gets the special_effects of this Film.  # noqa: E501

        the person who is responsible for the film special effects  # noqa: E501

        :return: The special_effects of this Film.  # noqa: E501
        :rtype: list[object]
        """
        return self._special_effects

    @special_effects.setter
    def special_effects(self, special_effects):
        """Sets the special_effects of this Film.

        the person who is responsible for the film special effects  # noqa: E501

        :param special_effects: The special_effects of this Film.  # noqa: E501
        :type: list[object]
        """

        self._special_effects = special_effects

    @property
    def starring(self):
        """Gets the starring of this Film.  # noqa: E501

        Description not available  # noqa: E501

        :return: The starring of this Film.  # noqa: E501
        :rtype: list[object]
        """
        return self._starring

    @starring.setter
    def starring(self, starring):
        """Sets the starring of this Film.

        Description not available  # noqa: E501

        :param starring: The starring of this Film.  # noqa: E501
        :type: list[object]
        """

        self._starring = starring

    @property
    def completion_date(self):
        """Gets the completion_date of this Film.  # noqa: E501

        Description not available  # noqa: E501

        :return: The completion_date of this Film.  # noqa: E501
        :rtype: list[str]
        """
        return self._completion_date

    @completion_date.setter
    def completion_date(self, completion_date):
        """Sets the completion_date of this Film.

        Description not available  # noqa: E501

        :param completion_date: The completion_date of this Film.  # noqa: E501
        :type: list[str]
        """

        self._completion_date = completion_date

    @property
    def writer(self):
        """Gets the writer of this Film.  # noqa: E501

        Description not available  # noqa: E501

        :return: The writer of this Film.  # noqa: E501
        :rtype: list[object]
        """
        return self._writer

    @writer.setter
    def writer(self, writer):
        """Sets the writer of this Film.

        Description not available  # noqa: E501

        :param writer: The writer of this Film.  # noqa: E501
        :type: list[object]
        """

        self._writer = writer

    @property
    def set_designer(self):
        """Gets the set_designer of this Film.  # noqa: E501

        the person who is responsible for the film set design  # noqa: E501

        :return: The set_designer of this Film.  # noqa: E501
        :rtype: list[object]
        """
        return self._set_designer

    @set_designer.setter
    def set_designer(self, set_designer):
        """Sets the set_designer of this Film.

        the person who is responsible for the film set design  # noqa: E501

        :param set_designer: The set_designer of this Film.  # noqa: E501
        :type: list[object]
        """

        self._set_designer = set_designer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Film):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Film):
            return True

        return self.to_dict() != other.to_dict()
