# coding: utf-8

"""
    DBpedia

    This is the API of the DBpedia Ontology  # noqa: E501

    The version of the OpenAPI document: v0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dbpedia.configuration import Configuration


class AustrianAdministrativeRegion(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'description': 'list[str]',
        'landtag_mandate': 'list[str]',
        'landtag': 'list[str]',
        'id': 'str',
        'label': 'list[str]',
        'landeshauptmann': 'list[object]',
        'type': 'list[str]',
        'seat_number': 'list[int]'
    }

    attribute_map = {
        'description': 'description',
        'landtag_mandate': 'landtagMandate',
        'landtag': 'landtag',
        'id': 'id',
        'label': 'label',
        'landeshauptmann': 'landeshauptmann',
        'type': 'type',
        'seat_number': 'seatNumber'
    }

    def __init__(self, description=None, landtag_mandate=None, landtag=None, id=None, label=None, landeshauptmann=None, type=None, seat_number=None, local_vars_configuration=None):  # noqa: E501
        """AustrianAdministrativeRegion - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._description = None
        self._landtag_mandate = None
        self._landtag = None
        self._id = None
        self._label = None
        self._landeshauptmann = None
        self._type = None
        self._seat_number = None
        self.discriminator = None

        self.description = description
        self.landtag_mandate = landtag_mandate
        self.landtag = landtag
        if id is not None:
            self.id = id
        self.label = label
        self.landeshauptmann = landeshauptmann
        self.type = type
        self.seat_number = seat_number

    @property
    def description(self):
        """Gets the description of this AustrianAdministrativeRegion.  # noqa: E501

        small description  # noqa: E501

        :return: The description of this AustrianAdministrativeRegion.  # noqa: E501
        :rtype: list[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AustrianAdministrativeRegion.

        small description  # noqa: E501

        :param description: The description of this AustrianAdministrativeRegion.  # noqa: E501
        :type: list[str]
        """

        self._description = description

    @property
    def landtag_mandate(self):
        """Gets the landtag_mandate of this AustrianAdministrativeRegion.  # noqa: E501

        Description not available  # noqa: E501

        :return: The landtag_mandate of this AustrianAdministrativeRegion.  # noqa: E501
        :rtype: list[str]
        """
        return self._landtag_mandate

    @landtag_mandate.setter
    def landtag_mandate(self, landtag_mandate):
        """Sets the landtag_mandate of this AustrianAdministrativeRegion.

        Description not available  # noqa: E501

        :param landtag_mandate: The landtag_mandate of this AustrianAdministrativeRegion.  # noqa: E501
        :type: list[str]
        """

        self._landtag_mandate = landtag_mandate

    @property
    def landtag(self):
        """Gets the landtag of this AustrianAdministrativeRegion.  # noqa: E501

        Description not available  # noqa: E501

        :return: The landtag of this AustrianAdministrativeRegion.  # noqa: E501
        :rtype: list[str]
        """
        return self._landtag

    @landtag.setter
    def landtag(self, landtag):
        """Sets the landtag of this AustrianAdministrativeRegion.

        Description not available  # noqa: E501

        :param landtag: The landtag of this AustrianAdministrativeRegion.  # noqa: E501
        :type: list[str]
        """

        self._landtag = landtag

    @property
    def id(self):
        """Gets the id of this AustrianAdministrativeRegion.  # noqa: E501

        identifier  # noqa: E501

        :return: The id of this AustrianAdministrativeRegion.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AustrianAdministrativeRegion.

        identifier  # noqa: E501

        :param id: The id of this AustrianAdministrativeRegion.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this AustrianAdministrativeRegion.  # noqa: E501

        short description of the resource  # noqa: E501

        :return: The label of this AustrianAdministrativeRegion.  # noqa: E501
        :rtype: list[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this AustrianAdministrativeRegion.

        short description of the resource  # noqa: E501

        :param label: The label of this AustrianAdministrativeRegion.  # noqa: E501
        :type: list[str]
        """

        self._label = label

    @property
    def landeshauptmann(self):
        """Gets the landeshauptmann of this AustrianAdministrativeRegion.  # noqa: E501

        Description not available  # noqa: E501

        :return: The landeshauptmann of this AustrianAdministrativeRegion.  # noqa: E501
        :rtype: list[object]
        """
        return self._landeshauptmann

    @landeshauptmann.setter
    def landeshauptmann(self, landeshauptmann):
        """Sets the landeshauptmann of this AustrianAdministrativeRegion.

        Description not available  # noqa: E501

        :param landeshauptmann: The landeshauptmann of this AustrianAdministrativeRegion.  # noqa: E501
        :type: list[object]
        """

        self._landeshauptmann = landeshauptmann

    @property
    def type(self):
        """Gets the type of this AustrianAdministrativeRegion.  # noqa: E501

        type of the resource  # noqa: E501

        :return: The type of this AustrianAdministrativeRegion.  # noqa: E501
        :rtype: list[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AustrianAdministrativeRegion.

        type of the resource  # noqa: E501

        :param type: The type of this AustrianAdministrativeRegion.  # noqa: E501
        :type: list[str]
        """

        self._type = type

    @property
    def seat_number(self):
        """Gets the seat_number of this AustrianAdministrativeRegion.  # noqa: E501

        Description not available  # noqa: E501

        :return: The seat_number of this AustrianAdministrativeRegion.  # noqa: E501
        :rtype: list[int]
        """
        return self._seat_number

    @seat_number.setter
    def seat_number(self, seat_number):
        """Sets the seat_number of this AustrianAdministrativeRegion.

        Description not available  # noqa: E501

        :param seat_number: The seat_number of this AustrianAdministrativeRegion.  # noqa: E501
        :type: list[int]
        """

        self._seat_number = seat_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AustrianAdministrativeRegion):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AustrianAdministrativeRegion):
            return True

        return self.to_dict() != other.to_dict()
