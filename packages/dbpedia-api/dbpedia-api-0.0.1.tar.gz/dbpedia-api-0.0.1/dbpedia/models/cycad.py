# coding: utf-8

"""
    DBpedia

    This is the API of the DBpedia Ontology  # noqa: E501

    The version of the OpenAPI document: v0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dbpedia.configuration import Configuration


class Cycad(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'classis': 'list[object]',
        'sub_family': 'list[object]',
        'scientific_name': 'list[str]',
        'description': 'list[str]',
        'binomial_authority': 'list[object]',
        'cultivated_variety': 'list[object]',
        'type': 'list[str]',
        'sub_tribus': 'list[object]',
        'sub_classis': 'list[object]',
        'taxon': 'list[object]',
        'id': 'str',
        'tribus': 'list[object]',
        'order': 'list[object]',
        'conservation_status': 'list[str]',
        'super_family': 'list[object]',
        'binomial': 'list[object]',
        'label': 'list[str]',
        'conservation_status_system': 'list[str]',
        'kingdom': 'list[object]',
        'hybrid': 'list[object]',
        'phylum': 'list[object]',
        'species': 'list[object]',
        'genus': 'list[object]',
        'domain': 'list[object]',
        'super_tribus': 'list[object]',
        'family': 'list[object]'
    }

    attribute_map = {
        'classis': 'classis',
        'sub_family': 'subFamily',
        'scientific_name': 'scientificName',
        'description': 'description',
        'binomial_authority': 'binomialAuthority',
        'cultivated_variety': 'cultivatedVariety',
        'type': 'type',
        'sub_tribus': 'subTribus',
        'sub_classis': 'subClassis',
        'taxon': 'taxon',
        'id': 'id',
        'tribus': 'tribus',
        'order': 'order',
        'conservation_status': 'conservationStatus',
        'super_family': 'superFamily',
        'binomial': 'binomial',
        'label': 'label',
        'conservation_status_system': 'conservationStatusSystem',
        'kingdom': 'kingdom',
        'hybrid': 'hybrid',
        'phylum': 'phylum',
        'species': 'species',
        'genus': 'genus',
        'domain': 'domain',
        'super_tribus': 'superTribus',
        'family': 'family'
    }

    def __init__(self, classis=None, sub_family=None, scientific_name=None, description=None, binomial_authority=None, cultivated_variety=None, type=None, sub_tribus=None, sub_classis=None, taxon=None, id=None, tribus=None, order=None, conservation_status=None, super_family=None, binomial=None, label=None, conservation_status_system=None, kingdom=None, hybrid=None, phylum=None, species=None, genus=None, domain=None, super_tribus=None, family=None, local_vars_configuration=None):  # noqa: E501
        """Cycad - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._classis = None
        self._sub_family = None
        self._scientific_name = None
        self._description = None
        self._binomial_authority = None
        self._cultivated_variety = None
        self._type = None
        self._sub_tribus = None
        self._sub_classis = None
        self._taxon = None
        self._id = None
        self._tribus = None
        self._order = None
        self._conservation_status = None
        self._super_family = None
        self._binomial = None
        self._label = None
        self._conservation_status_system = None
        self._kingdom = None
        self._hybrid = None
        self._phylum = None
        self._species = None
        self._genus = None
        self._domain = None
        self._super_tribus = None
        self._family = None
        self.discriminator = None

        self.classis = classis
        self.sub_family = sub_family
        self.scientific_name = scientific_name
        self.description = description
        self.binomial_authority = binomial_authority
        self.cultivated_variety = cultivated_variety
        self.type = type
        self.sub_tribus = sub_tribus
        self.sub_classis = sub_classis
        self.taxon = taxon
        if id is not None:
            self.id = id
        self.tribus = tribus
        self.order = order
        self.conservation_status = conservation_status
        self.super_family = super_family
        self.binomial = binomial
        self.label = label
        self.conservation_status_system = conservation_status_system
        self.kingdom = kingdom
        self.hybrid = hybrid
        self.phylum = phylum
        self.species = species
        self.genus = genus
        self.domain = domain
        self.super_tribus = super_tribus
        self.family = family

    @property
    def classis(self):
        """Gets the classis of this Cycad.  # noqa: E501

        the living thing class (from the Latin \"classis\"), according to the biological taxonomy  # noqa: E501

        :return: The classis of this Cycad.  # noqa: E501
        :rtype: list[object]
        """
        return self._classis

    @classis.setter
    def classis(self, classis):
        """Sets the classis of this Cycad.

        the living thing class (from the Latin \"classis\"), according to the biological taxonomy  # noqa: E501

        :param classis: The classis of this Cycad.  # noqa: E501
        :type: list[object]
        """

        self._classis = classis

    @property
    def sub_family(self):
        """Gets the sub_family of this Cycad.  # noqa: E501

        Description not available  # noqa: E501

        :return: The sub_family of this Cycad.  # noqa: E501
        :rtype: list[object]
        """
        return self._sub_family

    @sub_family.setter
    def sub_family(self, sub_family):
        """Sets the sub_family of this Cycad.

        Description not available  # noqa: E501

        :param sub_family: The sub_family of this Cycad.  # noqa: E501
        :type: list[object]
        """

        self._sub_family = sub_family

    @property
    def scientific_name(self):
        """Gets the scientific_name of this Cycad.  # noqa: E501

        Description not available  # noqa: E501

        :return: The scientific_name of this Cycad.  # noqa: E501
        :rtype: list[str]
        """
        return self._scientific_name

    @scientific_name.setter
    def scientific_name(self, scientific_name):
        """Sets the scientific_name of this Cycad.

        Description not available  # noqa: E501

        :param scientific_name: The scientific_name of this Cycad.  # noqa: E501
        :type: list[str]
        """

        self._scientific_name = scientific_name

    @property
    def description(self):
        """Gets the description of this Cycad.  # noqa: E501

        small description  # noqa: E501

        :return: The description of this Cycad.  # noqa: E501
        :rtype: list[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Cycad.

        small description  # noqa: E501

        :param description: The description of this Cycad.  # noqa: E501
        :type: list[str]
        """

        self._description = description

    @property
    def binomial_authority(self):
        """Gets the binomial_authority of this Cycad.  # noqa: E501

        Description not available  # noqa: E501

        :return: The binomial_authority of this Cycad.  # noqa: E501
        :rtype: list[object]
        """
        return self._binomial_authority

    @binomial_authority.setter
    def binomial_authority(self, binomial_authority):
        """Sets the binomial_authority of this Cycad.

        Description not available  # noqa: E501

        :param binomial_authority: The binomial_authority of this Cycad.  # noqa: E501
        :type: list[object]
        """

        self._binomial_authority = binomial_authority

    @property
    def cultivated_variety(self):
        """Gets the cultivated_variety of this Cycad.  # noqa: E501

        Name of the cultivar (cultivated variety)  # noqa: E501

        :return: The cultivated_variety of this Cycad.  # noqa: E501
        :rtype: list[object]
        """
        return self._cultivated_variety

    @cultivated_variety.setter
    def cultivated_variety(self, cultivated_variety):
        """Sets the cultivated_variety of this Cycad.

        Name of the cultivar (cultivated variety)  # noqa: E501

        :param cultivated_variety: The cultivated_variety of this Cycad.  # noqa: E501
        :type: list[object]
        """

        self._cultivated_variety = cultivated_variety

    @property
    def type(self):
        """Gets the type of this Cycad.  # noqa: E501

        type of the resource  # noqa: E501

        :return: The type of this Cycad.  # noqa: E501
        :rtype: list[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Cycad.

        type of the resource  # noqa: E501

        :param type: The type of this Cycad.  # noqa: E501
        :type: list[str]
        """

        self._type = type

    @property
    def sub_tribus(self):
        """Gets the sub_tribus of this Cycad.  # noqa: E501

        Description not available  # noqa: E501

        :return: The sub_tribus of this Cycad.  # noqa: E501
        :rtype: list[object]
        """
        return self._sub_tribus

    @sub_tribus.setter
    def sub_tribus(self, sub_tribus):
        """Sets the sub_tribus of this Cycad.

        Description not available  # noqa: E501

        :param sub_tribus: The sub_tribus of this Cycad.  # noqa: E501
        :type: list[object]
        """

        self._sub_tribus = sub_tribus

    @property
    def sub_classis(self):
        """Gets the sub_classis of this Cycad.  # noqa: E501

        a subdivision within a Species classis  # noqa: E501

        :return: The sub_classis of this Cycad.  # noqa: E501
        :rtype: list[object]
        """
        return self._sub_classis

    @sub_classis.setter
    def sub_classis(self, sub_classis):
        """Sets the sub_classis of this Cycad.

        a subdivision within a Species classis  # noqa: E501

        :param sub_classis: The sub_classis of this Cycad.  # noqa: E501
        :type: list[object]
        """

        self._sub_classis = sub_classis

    @property
    def taxon(self):
        """Gets the taxon of this Cycad.  # noqa: E501

        Description not available  # noqa: E501

        :return: The taxon of this Cycad.  # noqa: E501
        :rtype: list[object]
        """
        return self._taxon

    @taxon.setter
    def taxon(self, taxon):
        """Sets the taxon of this Cycad.

        Description not available  # noqa: E501

        :param taxon: The taxon of this Cycad.  # noqa: E501
        :type: list[object]
        """

        self._taxon = taxon

    @property
    def id(self):
        """Gets the id of this Cycad.  # noqa: E501

        identifier  # noqa: E501

        :return: The id of this Cycad.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Cycad.

        identifier  # noqa: E501

        :param id: The id of this Cycad.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def tribus(self):
        """Gets the tribus of this Cycad.  # noqa: E501

        Description not available  # noqa: E501

        :return: The tribus of this Cycad.  # noqa: E501
        :rtype: list[object]
        """
        return self._tribus

    @tribus.setter
    def tribus(self, tribus):
        """Sets the tribus of this Cycad.

        Description not available  # noqa: E501

        :param tribus: The tribus of this Cycad.  # noqa: E501
        :type: list[object]
        """

        self._tribus = tribus

    @property
    def order(self):
        """Gets the order of this Cycad.  # noqa: E501

        Description not available  # noqa: E501

        :return: The order of this Cycad.  # noqa: E501
        :rtype: list[object]
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this Cycad.

        Description not available  # noqa: E501

        :param order: The order of this Cycad.  # noqa: E501
        :type: list[object]
        """

        self._order = order

    @property
    def conservation_status(self):
        """Gets the conservation_status of this Cycad.  # noqa: E501

        Description not available  # noqa: E501

        :return: The conservation_status of this Cycad.  # noqa: E501
        :rtype: list[str]
        """
        return self._conservation_status

    @conservation_status.setter
    def conservation_status(self, conservation_status):
        """Sets the conservation_status of this Cycad.

        Description not available  # noqa: E501

        :param conservation_status: The conservation_status of this Cycad.  # noqa: E501
        :type: list[str]
        """

        self._conservation_status = conservation_status

    @property
    def super_family(self):
        """Gets the super_family of this Cycad.  # noqa: E501

        Description not available  # noqa: E501

        :return: The super_family of this Cycad.  # noqa: E501
        :rtype: list[object]
        """
        return self._super_family

    @super_family.setter
    def super_family(self, super_family):
        """Sets the super_family of this Cycad.

        Description not available  # noqa: E501

        :param super_family: The super_family of this Cycad.  # noqa: E501
        :type: list[object]
        """

        self._super_family = super_family

    @property
    def binomial(self):
        """Gets the binomial of this Cycad.  # noqa: E501

        Description not available  # noqa: E501

        :return: The binomial of this Cycad.  # noqa: E501
        :rtype: list[object]
        """
        return self._binomial

    @binomial.setter
    def binomial(self, binomial):
        """Sets the binomial of this Cycad.

        Description not available  # noqa: E501

        :param binomial: The binomial of this Cycad.  # noqa: E501
        :type: list[object]
        """

        self._binomial = binomial

    @property
    def label(self):
        """Gets the label of this Cycad.  # noqa: E501

        short description of the resource  # noqa: E501

        :return: The label of this Cycad.  # noqa: E501
        :rtype: list[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Cycad.

        short description of the resource  # noqa: E501

        :param label: The label of this Cycad.  # noqa: E501
        :type: list[str]
        """

        self._label = label

    @property
    def conservation_status_system(self):
        """Gets the conservation_status_system of this Cycad.  # noqa: E501

        Description not available  # noqa: E501

        :return: The conservation_status_system of this Cycad.  # noqa: E501
        :rtype: list[str]
        """
        return self._conservation_status_system

    @conservation_status_system.setter
    def conservation_status_system(self, conservation_status_system):
        """Sets the conservation_status_system of this Cycad.

        Description not available  # noqa: E501

        :param conservation_status_system: The conservation_status_system of this Cycad.  # noqa: E501
        :type: list[str]
        """

        self._conservation_status_system = conservation_status_system

    @property
    def kingdom(self):
        """Gets the kingdom of this Cycad.  # noqa: E501

        In biology, kingdom (Latin: regnum, pl. regna) is a taxonomic rank, which is either the highest rank or in the more recent three-domain system, the rank below domain.  # noqa: E501

        :return: The kingdom of this Cycad.  # noqa: E501
        :rtype: list[object]
        """
        return self._kingdom

    @kingdom.setter
    def kingdom(self, kingdom):
        """Sets the kingdom of this Cycad.

        In biology, kingdom (Latin: regnum, pl. regna) is a taxonomic rank, which is either the highest rank or in the more recent three-domain system, the rank below domain.  # noqa: E501

        :param kingdom: The kingdom of this Cycad.  # noqa: E501
        :type: list[object]
        """

        self._kingdom = kingdom

    @property
    def hybrid(self):
        """Gets the hybrid of this Cycad.  # noqa: E501

        Plants from which another plant (or cultivar) has been developed from  # noqa: E501

        :return: The hybrid of this Cycad.  # noqa: E501
        :rtype: list[object]
        """
        return self._hybrid

    @hybrid.setter
    def hybrid(self, hybrid):
        """Sets the hybrid of this Cycad.

        Plants from which another plant (or cultivar) has been developed from  # noqa: E501

        :param hybrid: The hybrid of this Cycad.  # noqa: E501
        :type: list[object]
        """

        self._hybrid = hybrid

    @property
    def phylum(self):
        """Gets the phylum of this Cycad.  # noqa: E501

        A rank in the classification of organisms, below kingdom and above class; also called a division, especially in describing plants; a taxon at that rank.  # noqa: E501

        :return: The phylum of this Cycad.  # noqa: E501
        :rtype: list[object]
        """
        return self._phylum

    @phylum.setter
    def phylum(self, phylum):
        """Sets the phylum of this Cycad.

        A rank in the classification of organisms, below kingdom and above class; also called a division, especially in describing plants; a taxon at that rank.  # noqa: E501

        :param phylum: The phylum of this Cycad.  # noqa: E501
        :type: list[object]
        """

        self._phylum = phylum

    @property
    def species(self):
        """Gets the species of this Cycad.  # noqa: E501

        Description not available  # noqa: E501

        :return: The species of this Cycad.  # noqa: E501
        :rtype: list[object]
        """
        return self._species

    @species.setter
    def species(self, species):
        """Sets the species of this Cycad.

        Description not available  # noqa: E501

        :param species: The species of this Cycad.  # noqa: E501
        :type: list[object]
        """

        self._species = species

    @property
    def genus(self):
        """Gets the genus of this Cycad.  # noqa: E501

        A rank in the classification of organisms, below family and above species; a taxon at that rank  # noqa: E501

        :return: The genus of this Cycad.  # noqa: E501
        :rtype: list[object]
        """
        return self._genus

    @genus.setter
    def genus(self, genus):
        """Sets the genus of this Cycad.

        A rank in the classification of organisms, below family and above species; a taxon at that rank  # noqa: E501

        :param genus: The genus of this Cycad.  # noqa: E501
        :type: list[object]
        """

        self._genus = genus

    @property
    def domain(self):
        """Gets the domain of this Cycad.  # noqa: E501

        Description not available  # noqa: E501

        :return: The domain of this Cycad.  # noqa: E501
        :rtype: list[object]
        """
        return self._domain

    @domain.setter
    def domain(self, domain):
        """Sets the domain of this Cycad.

        Description not available  # noqa: E501

        :param domain: The domain of this Cycad.  # noqa: E501
        :type: list[object]
        """

        self._domain = domain

    @property
    def super_tribus(self):
        """Gets the super_tribus of this Cycad.  # noqa: E501

        Description not available  # noqa: E501

        :return: The super_tribus of this Cycad.  # noqa: E501
        :rtype: list[object]
        """
        return self._super_tribus

    @super_tribus.setter
    def super_tribus(self, super_tribus):
        """Sets the super_tribus of this Cycad.

        Description not available  # noqa: E501

        :param super_tribus: The super_tribus of this Cycad.  # noqa: E501
        :type: list[object]
        """

        self._super_tribus = super_tribus

    @property
    def family(self):
        """Gets the family of this Cycad.  # noqa: E501

        Description not available  # noqa: E501

        :return: The family of this Cycad.  # noqa: E501
        :rtype: list[object]
        """
        return self._family

    @family.setter
    def family(self, family):
        """Sets the family of this Cycad.

        Description not available  # noqa: E501

        :param family: The family of this Cycad.  # noqa: E501
        :type: list[object]
        """

        self._family = family

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Cycad):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Cycad):
            return True

        return self.to_dict() != other.to_dict()
