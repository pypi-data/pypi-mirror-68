# coding: utf-8

"""
    DBpedia

    This is the API of the DBpedia Ontology  # noqa: E501

    The version of the OpenAPI document: v0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dbpedia.configuration import Configuration


class Legislature(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'viaf_id': 'list[str]',
        'leader_function': 'list[object]',
        'number_of_members': 'list[int]',
        'art_patron': 'list[object]',
        'manager_season': 'list[object]',
        'secretary_general': 'list[object]',
        'number_of_locations': 'list[int]',
        'discipline': 'list[object]',
        'legislative_period_name': 'list[str]',
        'type': 'list[str]',
        'committee_in_legislature': 'list[object]',
        'revenue': 'list[float]',
        'last_election_date': 'list[str]',
        'affiliation': 'list[object]',
        'political_party_in_legislature': 'list[object]',
        'meeting_city': 'list[object]',
        'season': 'list[object]',
        'meeting_building': 'list[object]',
        'id': 'str',
        'nla_id': 'list[str]',
        'chairperson': 'list[object]',
        'region_served': 'list[object]',
        'superintendent': 'list[object]',
        'formation_date': 'list[str]',
        'number_of_employees': 'list[int]',
        'election_date_leader': 'list[str]',
        'extinction_date': 'list[str]',
        'player_season': 'list[object]',
        'endowment': 'list[float]',
        'slogan': 'list[str]',
        'regional_council': 'list[object]',
        'location_city': 'list[object]',
        'number_of_volunteers': 'list[int]',
        'ideology': 'list[object]',
        'description': 'list[str]',
        'membership': 'list[str]',
        'ceo': 'list[object]',
        'house': 'list[object]',
        'formation_year': 'list[str]',
        'junior_season': 'list[object]',
        'headquarter': 'list[object]',
        'extinction_year': 'list[str]',
        'child_organisation': 'list[object]',
        'honours': 'list[object]',
        'parent_organisation': 'list[object]',
        'organisation_member': 'list[object]',
        'number_of_staff': 'list[int]',
        'product': 'list[object]',
        'hometown': 'list[object]',
        'foundation_place': 'list[object]',
        'national_selection': 'list[object]',
        'label': 'list[str]',
        'legal_form': 'list[object]',
        'political_party_of_leader': 'list[object]',
        'general_council': 'list[object]',
        'trustee': 'list[object]',
        'age': 'list[int]',
        'main_organ': 'list[object]'
    }

    attribute_map = {
        'viaf_id': 'viafId',
        'leader_function': 'leaderFunction',
        'number_of_members': 'numberOfMembers',
        'art_patron': 'artPatron',
        'manager_season': 'managerSeason',
        'secretary_general': 'secretaryGeneral',
        'number_of_locations': 'numberOfLocations',
        'discipline': 'discipline',
        'legislative_period_name': 'legislativePeriodName',
        'type': 'type',
        'committee_in_legislature': 'committeeInLegislature',
        'revenue': 'revenue',
        'last_election_date': 'lastElectionDate',
        'affiliation': 'affiliation',
        'political_party_in_legislature': 'politicalPartyInLegislature',
        'meeting_city': 'meetingCity',
        'season': 'season',
        'meeting_building': 'meetingBuilding',
        'id': 'id',
        'nla_id': 'nlaId',
        'chairperson': 'chairperson',
        'region_served': 'regionServed',
        'superintendent': 'superintendent',
        'formation_date': 'formationDate',
        'number_of_employees': 'numberOfEmployees',
        'election_date_leader': 'electionDateLeader',
        'extinction_date': 'extinctionDate',
        'player_season': 'playerSeason',
        'endowment': 'endowment',
        'slogan': 'slogan',
        'regional_council': 'regionalCouncil',
        'location_city': 'locationCity',
        'number_of_volunteers': 'numberOfVolunteers',
        'ideology': 'ideology',
        'description': 'description',
        'membership': 'membership',
        'ceo': 'ceo',
        'house': 'house',
        'formation_year': 'formationYear',
        'junior_season': 'juniorSeason',
        'headquarter': 'headquarter',
        'extinction_year': 'extinctionYear',
        'child_organisation': 'childOrganisation',
        'honours': 'honours',
        'parent_organisation': 'parentOrganisation',
        'organisation_member': 'organisationMember',
        'number_of_staff': 'numberOfStaff',
        'product': 'product',
        'hometown': 'hometown',
        'foundation_place': 'foundationPlace',
        'national_selection': 'nationalSelection',
        'label': 'label',
        'legal_form': 'legalForm',
        'political_party_of_leader': 'politicalPartyOfLeader',
        'general_council': 'generalCouncil',
        'trustee': 'trustee',
        'age': 'age',
        'main_organ': 'mainOrgan'
    }

    def __init__(self, viaf_id=None, leader_function=None, number_of_members=None, art_patron=None, manager_season=None, secretary_general=None, number_of_locations=None, discipline=None, legislative_period_name=None, type=None, committee_in_legislature=None, revenue=None, last_election_date=None, affiliation=None, political_party_in_legislature=None, meeting_city=None, season=None, meeting_building=None, id=None, nla_id=None, chairperson=None, region_served=None, superintendent=None, formation_date=None, number_of_employees=None, election_date_leader=None, extinction_date=None, player_season=None, endowment=None, slogan=None, regional_council=None, location_city=None, number_of_volunteers=None, ideology=None, description=None, membership=None, ceo=None, house=None, formation_year=None, junior_season=None, headquarter=None, extinction_year=None, child_organisation=None, honours=None, parent_organisation=None, organisation_member=None, number_of_staff=None, product=None, hometown=None, foundation_place=None, national_selection=None, label=None, legal_form=None, political_party_of_leader=None, general_council=None, trustee=None, age=None, main_organ=None, local_vars_configuration=None):  # noqa: E501
        """Legislature - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._viaf_id = None
        self._leader_function = None
        self._number_of_members = None
        self._art_patron = None
        self._manager_season = None
        self._secretary_general = None
        self._number_of_locations = None
        self._discipline = None
        self._legislative_period_name = None
        self._type = None
        self._committee_in_legislature = None
        self._revenue = None
        self._last_election_date = None
        self._affiliation = None
        self._political_party_in_legislature = None
        self._meeting_city = None
        self._season = None
        self._meeting_building = None
        self._id = None
        self._nla_id = None
        self._chairperson = None
        self._region_served = None
        self._superintendent = None
        self._formation_date = None
        self._number_of_employees = None
        self._election_date_leader = None
        self._extinction_date = None
        self._player_season = None
        self._endowment = None
        self._slogan = None
        self._regional_council = None
        self._location_city = None
        self._number_of_volunteers = None
        self._ideology = None
        self._description = None
        self._membership = None
        self._ceo = None
        self._house = None
        self._formation_year = None
        self._junior_season = None
        self._headquarter = None
        self._extinction_year = None
        self._child_organisation = None
        self._honours = None
        self._parent_organisation = None
        self._organisation_member = None
        self._number_of_staff = None
        self._product = None
        self._hometown = None
        self._foundation_place = None
        self._national_selection = None
        self._label = None
        self._legal_form = None
        self._political_party_of_leader = None
        self._general_council = None
        self._trustee = None
        self._age = None
        self._main_organ = None
        self.discriminator = None

        self.viaf_id = viaf_id
        self.leader_function = leader_function
        self.number_of_members = number_of_members
        self.art_patron = art_patron
        self.manager_season = manager_season
        self.secretary_general = secretary_general
        self.number_of_locations = number_of_locations
        self.discipline = discipline
        self.legislative_period_name = legislative_period_name
        self.type = type
        self.committee_in_legislature = committee_in_legislature
        self.revenue = revenue
        self.last_election_date = last_election_date
        self.affiliation = affiliation
        self.political_party_in_legislature = political_party_in_legislature
        self.meeting_city = meeting_city
        self.season = season
        self.meeting_building = meeting_building
        if id is not None:
            self.id = id
        self.nla_id = nla_id
        self.chairperson = chairperson
        self.region_served = region_served
        self.superintendent = superintendent
        self.formation_date = formation_date
        self.number_of_employees = number_of_employees
        self.election_date_leader = election_date_leader
        self.extinction_date = extinction_date
        self.player_season = player_season
        self.endowment = endowment
        self.slogan = slogan
        self.regional_council = regional_council
        self.location_city = location_city
        self.number_of_volunteers = number_of_volunteers
        self.ideology = ideology
        self.description = description
        self.membership = membership
        self.ceo = ceo
        self.house = house
        self.formation_year = formation_year
        self.junior_season = junior_season
        self.headquarter = headquarter
        self.extinction_year = extinction_year
        self.child_organisation = child_organisation
        self.honours = honours
        self.parent_organisation = parent_organisation
        self.organisation_member = organisation_member
        self.number_of_staff = number_of_staff
        self.product = product
        self.hometown = hometown
        self.foundation_place = foundation_place
        self.national_selection = national_selection
        self.label = label
        self.legal_form = legal_form
        self.political_party_of_leader = political_party_of_leader
        self.general_council = general_council
        self.trustee = trustee
        self.age = age
        self.main_organ = main_organ

    @property
    def viaf_id(self):
        """Gets the viaf_id of this Legislature.  # noqa: E501

        International authority data from the Online Computer Library Center (OCLC)  # noqa: E501

        :return: The viaf_id of this Legislature.  # noqa: E501
        :rtype: list[str]
        """
        return self._viaf_id

    @viaf_id.setter
    def viaf_id(self, viaf_id):
        """Sets the viaf_id of this Legislature.

        International authority data from the Online Computer Library Center (OCLC)  # noqa: E501

        :param viaf_id: The viaf_id of this Legislature.  # noqa: E501
        :type: list[str]
        """

        self._viaf_id = viaf_id

    @property
    def leader_function(self):
        """Gets the leader_function of this Legislature.  # noqa: E501

        Description not available  # noqa: E501

        :return: The leader_function of this Legislature.  # noqa: E501
        :rtype: list[object]
        """
        return self._leader_function

    @leader_function.setter
    def leader_function(self, leader_function):
        """Sets the leader_function of this Legislature.

        Description not available  # noqa: E501

        :param leader_function: The leader_function of this Legislature.  # noqa: E501
        :type: list[object]
        """

        self._leader_function = leader_function

    @property
    def number_of_members(self):
        """Gets the number_of_members of this Legislature.  # noqa: E501

        Description not available  # noqa: E501

        :return: The number_of_members of this Legislature.  # noqa: E501
        :rtype: list[int]
        """
        return self._number_of_members

    @number_of_members.setter
    def number_of_members(self, number_of_members):
        """Sets the number_of_members of this Legislature.

        Description not available  # noqa: E501

        :param number_of_members: The number_of_members of this Legislature.  # noqa: E501
        :type: list[int]
        """

        self._number_of_members = number_of_members

    @property
    def art_patron(self):
        """Gets the art_patron of this Legislature.  # noqa: E501

        An influential, wealthy person who supported an artist, craftsman, a scholar or a noble.. See also  # noqa: E501

        :return: The art_patron of this Legislature.  # noqa: E501
        :rtype: list[object]
        """
        return self._art_patron

    @art_patron.setter
    def art_patron(self, art_patron):
        """Sets the art_patron of this Legislature.

        An influential, wealthy person who supported an artist, craftsman, a scholar or a noble.. See also  # noqa: E501

        :param art_patron: The art_patron of this Legislature.  # noqa: E501
        :type: list[object]
        """

        self._art_patron = art_patron

    @property
    def manager_season(self):
        """Gets the manager_season of this Legislature.  # noqa: E501

        Description not available  # noqa: E501

        :return: The manager_season of this Legislature.  # noqa: E501
        :rtype: list[object]
        """
        return self._manager_season

    @manager_season.setter
    def manager_season(self, manager_season):
        """Sets the manager_season of this Legislature.

        Description not available  # noqa: E501

        :param manager_season: The manager_season of this Legislature.  # noqa: E501
        :type: list[object]
        """

        self._manager_season = manager_season

    @property
    def secretary_general(self):
        """Gets the secretary_general of this Legislature.  # noqa: E501

        Description not available  # noqa: E501

        :return: The secretary_general of this Legislature.  # noqa: E501
        :rtype: list[object]
        """
        return self._secretary_general

    @secretary_general.setter
    def secretary_general(self, secretary_general):
        """Sets the secretary_general of this Legislature.

        Description not available  # noqa: E501

        :param secretary_general: The secretary_general of this Legislature.  # noqa: E501
        :type: list[object]
        """

        self._secretary_general = secretary_general

    @property
    def number_of_locations(self):
        """Gets the number_of_locations of this Legislature.  # noqa: E501

        Description not available  # noqa: E501

        :return: The number_of_locations of this Legislature.  # noqa: E501
        :rtype: list[int]
        """
        return self._number_of_locations

    @number_of_locations.setter
    def number_of_locations(self, number_of_locations):
        """Sets the number_of_locations of this Legislature.

        Description not available  # noqa: E501

        :param number_of_locations: The number_of_locations of this Legislature.  # noqa: E501
        :type: list[int]
        """

        self._number_of_locations = number_of_locations

    @property
    def discipline(self):
        """Gets the discipline of this Legislature.  # noqa: E501

        Description not available  # noqa: E501

        :return: The discipline of this Legislature.  # noqa: E501
        :rtype: list[object]
        """
        return self._discipline

    @discipline.setter
    def discipline(self, discipline):
        """Sets the discipline of this Legislature.

        Description not available  # noqa: E501

        :param discipline: The discipline of this Legislature.  # noqa: E501
        :type: list[object]
        """

        self._discipline = discipline

    @property
    def legislative_period_name(self):
        """Gets the legislative_period_name of this Legislature.  # noqa: E501

        The term of the on-going session (e.g.: \"40th Canadian Parliament\").  # noqa: E501

        :return: The legislative_period_name of this Legislature.  # noqa: E501
        :rtype: list[str]
        """
        return self._legislative_period_name

    @legislative_period_name.setter
    def legislative_period_name(self, legislative_period_name):
        """Sets the legislative_period_name of this Legislature.

        The term of the on-going session (e.g.: \"40th Canadian Parliament\").  # noqa: E501

        :param legislative_period_name: The legislative_period_name of this Legislature.  # noqa: E501
        :type: list[str]
        """

        self._legislative_period_name = legislative_period_name

    @property
    def type(self):
        """Gets the type of this Legislature.  # noqa: E501

        type of the resource  # noqa: E501

        :return: The type of this Legislature.  # noqa: E501
        :rtype: list[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Legislature.

        type of the resource  # noqa: E501

        :param type: The type of this Legislature.  # noqa: E501
        :type: list[str]
        """

        self._type = type

    @property
    def committee_in_legislature(self):
        """Gets the committee_in_legislature of this Legislature.  # noqa: E501

        Committee in the legislature (eg.: Committee on Economic and Monetary Affairs of the European Parliament).  # noqa: E501

        :return: The committee_in_legislature of this Legislature.  # noqa: E501
        :rtype: list[object]
        """
        return self._committee_in_legislature

    @committee_in_legislature.setter
    def committee_in_legislature(self, committee_in_legislature):
        """Sets the committee_in_legislature of this Legislature.

        Committee in the legislature (eg.: Committee on Economic and Monetary Affairs of the European Parliament).  # noqa: E501

        :param committee_in_legislature: The committee_in_legislature of this Legislature.  # noqa: E501
        :type: list[object]
        """

        self._committee_in_legislature = committee_in_legislature

    @property
    def revenue(self):
        """Gets the revenue of this Legislature.  # noqa: E501

        Description not available  # noqa: E501

        :return: The revenue of this Legislature.  # noqa: E501
        :rtype: list[float]
        """
        return self._revenue

    @revenue.setter
    def revenue(self, revenue):
        """Sets the revenue of this Legislature.

        Description not available  # noqa: E501

        :param revenue: The revenue of this Legislature.  # noqa: E501
        :type: list[float]
        """

        self._revenue = revenue

    @property
    def last_election_date(self):
        """Gets the last_election_date of this Legislature.  # noqa: E501

        The last election date for the house.  # noqa: E501

        :return: The last_election_date of this Legislature.  # noqa: E501
        :rtype: list[str]
        """
        return self._last_election_date

    @last_election_date.setter
    def last_election_date(self, last_election_date):
        """Sets the last_election_date of this Legislature.

        The last election date for the house.  # noqa: E501

        :param last_election_date: The last_election_date of this Legislature.  # noqa: E501
        :type: list[str]
        """

        self._last_election_date = last_election_date

    @property
    def affiliation(self):
        """Gets the affiliation of this Legislature.  # noqa: E501

        Description not available  # noqa: E501

        :return: The affiliation of this Legislature.  # noqa: E501
        :rtype: list[object]
        """
        return self._affiliation

    @affiliation.setter
    def affiliation(self, affiliation):
        """Sets the affiliation of this Legislature.

        Description not available  # noqa: E501

        :param affiliation: The affiliation of this Legislature.  # noqa: E501
        :type: list[object]
        """

        self._affiliation = affiliation

    @property
    def political_party_in_legislature(self):
        """Gets the political_party_in_legislature of this Legislature.  # noqa: E501

        Political party in the legislature (eg.: European People's Party in the European Parliament).  # noqa: E501

        :return: The political_party_in_legislature of this Legislature.  # noqa: E501
        :rtype: list[object]
        """
        return self._political_party_in_legislature

    @political_party_in_legislature.setter
    def political_party_in_legislature(self, political_party_in_legislature):
        """Sets the political_party_in_legislature of this Legislature.

        Political party in the legislature (eg.: European People's Party in the European Parliament).  # noqa: E501

        :param political_party_in_legislature: The political_party_in_legislature of this Legislature.  # noqa: E501
        :type: list[object]
        """

        self._political_party_in_legislature = political_party_in_legislature

    @property
    def meeting_city(self):
        """Gets the meeting_city of this Legislature.  # noqa: E501

        Description not available  # noqa: E501

        :return: The meeting_city of this Legislature.  # noqa: E501
        :rtype: list[object]
        """
        return self._meeting_city

    @meeting_city.setter
    def meeting_city(self, meeting_city):
        """Sets the meeting_city of this Legislature.

        Description not available  # noqa: E501

        :param meeting_city: The meeting_city of this Legislature.  # noqa: E501
        :type: list[object]
        """

        self._meeting_city = meeting_city

    @property
    def season(self):
        """Gets the season of this Legislature.  # noqa: E501

        Description not available  # noqa: E501

        :return: The season of this Legislature.  # noqa: E501
        :rtype: list[object]
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this Legislature.

        Description not available  # noqa: E501

        :param season: The season of this Legislature.  # noqa: E501
        :type: list[object]
        """

        self._season = season

    @property
    def meeting_building(self):
        """Gets the meeting_building of this Legislature.  # noqa: E501

        Description not available  # noqa: E501

        :return: The meeting_building of this Legislature.  # noqa: E501
        :rtype: list[object]
        """
        return self._meeting_building

    @meeting_building.setter
    def meeting_building(self, meeting_building):
        """Sets the meeting_building of this Legislature.

        Description not available  # noqa: E501

        :param meeting_building: The meeting_building of this Legislature.  # noqa: E501
        :type: list[object]
        """

        self._meeting_building = meeting_building

    @property
    def id(self):
        """Gets the id of this Legislature.  # noqa: E501

        identifier  # noqa: E501

        :return: The id of this Legislature.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Legislature.

        identifier  # noqa: E501

        :param id: The id of this Legislature.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def nla_id(self):
        """Gets the nla_id of this Legislature.  # noqa: E501

        NLA Trove’s People and Organisation view allows the discovery of biographical and other contextual information about people and organisations. Search also available via VIAF.  # noqa: E501

        :return: The nla_id of this Legislature.  # noqa: E501
        :rtype: list[str]
        """
        return self._nla_id

    @nla_id.setter
    def nla_id(self, nla_id):
        """Sets the nla_id of this Legislature.

        NLA Trove’s People and Organisation view allows the discovery of biographical and other contextual information about people and organisations. Search also available via VIAF.  # noqa: E501

        :param nla_id: The nla_id of this Legislature.  # noqa: E501
        :type: list[str]
        """

        self._nla_id = nla_id

    @property
    def chairperson(self):
        """Gets the chairperson of this Legislature.  # noqa: E501

        Description not available  # noqa: E501

        :return: The chairperson of this Legislature.  # noqa: E501
        :rtype: list[object]
        """
        return self._chairperson

    @chairperson.setter
    def chairperson(self, chairperson):
        """Sets the chairperson of this Legislature.

        Description not available  # noqa: E501

        :param chairperson: The chairperson of this Legislature.  # noqa: E501
        :type: list[object]
        """

        self._chairperson = chairperson

    @property
    def region_served(self):
        """Gets the region_served of this Legislature.  # noqa: E501

        Description not available  # noqa: E501

        :return: The region_served of this Legislature.  # noqa: E501
        :rtype: list[object]
        """
        return self._region_served

    @region_served.setter
    def region_served(self, region_served):
        """Sets the region_served of this Legislature.

        Description not available  # noqa: E501

        :param region_served: The region_served of this Legislature.  # noqa: E501
        :type: list[object]
        """

        self._region_served = region_served

    @property
    def superintendent(self):
        """Gets the superintendent of this Legislature.  # noqa: E501

        Description not available  # noqa: E501

        :return: The superintendent of this Legislature.  # noqa: E501
        :rtype: list[object]
        """
        return self._superintendent

    @superintendent.setter
    def superintendent(self, superintendent):
        """Sets the superintendent of this Legislature.

        Description not available  # noqa: E501

        :param superintendent: The superintendent of this Legislature.  # noqa: E501
        :type: list[object]
        """

        self._superintendent = superintendent

    @property
    def formation_date(self):
        """Gets the formation_date of this Legislature.  # noqa: E501

        Description not available  # noqa: E501

        :return: The formation_date of this Legislature.  # noqa: E501
        :rtype: list[str]
        """
        return self._formation_date

    @formation_date.setter
    def formation_date(self, formation_date):
        """Sets the formation_date of this Legislature.

        Description not available  # noqa: E501

        :param formation_date: The formation_date of this Legislature.  # noqa: E501
        :type: list[str]
        """

        self._formation_date = formation_date

    @property
    def number_of_employees(self):
        """Gets the number_of_employees of this Legislature.  # noqa: E501

        Description not available  # noqa: E501

        :return: The number_of_employees of this Legislature.  # noqa: E501
        :rtype: list[int]
        """
        return self._number_of_employees

    @number_of_employees.setter
    def number_of_employees(self, number_of_employees):
        """Sets the number_of_employees of this Legislature.

        Description not available  # noqa: E501

        :param number_of_employees: The number_of_employees of this Legislature.  # noqa: E501
        :type: list[int]
        """

        self._number_of_employees = number_of_employees

    @property
    def election_date_leader(self):
        """Gets the election_date_leader of this Legislature.  # noqa: E501

        The date that leader was elected.  # noqa: E501

        :return: The election_date_leader of this Legislature.  # noqa: E501
        :rtype: list[str]
        """
        return self._election_date_leader

    @election_date_leader.setter
    def election_date_leader(self, election_date_leader):
        """Sets the election_date_leader of this Legislature.

        The date that leader was elected.  # noqa: E501

        :param election_date_leader: The election_date_leader of this Legislature.  # noqa: E501
        :type: list[str]
        """

        self._election_date_leader = election_date_leader

    @property
    def extinction_date(self):
        """Gets the extinction_date of this Legislature.  # noqa: E501

        Description not available  # noqa: E501

        :return: The extinction_date of this Legislature.  # noqa: E501
        :rtype: list[str]
        """
        return self._extinction_date

    @extinction_date.setter
    def extinction_date(self, extinction_date):
        """Sets the extinction_date of this Legislature.

        Description not available  # noqa: E501

        :param extinction_date: The extinction_date of this Legislature.  # noqa: E501
        :type: list[str]
        """

        self._extinction_date = extinction_date

    @property
    def player_season(self):
        """Gets the player_season of this Legislature.  # noqa: E501

        Description not available  # noqa: E501

        :return: The player_season of this Legislature.  # noqa: E501
        :rtype: list[object]
        """
        return self._player_season

    @player_season.setter
    def player_season(self, player_season):
        """Sets the player_season of this Legislature.

        Description not available  # noqa: E501

        :param player_season: The player_season of this Legislature.  # noqa: E501
        :type: list[object]
        """

        self._player_season = player_season

    @property
    def endowment(self):
        """Gets the endowment of this Legislature.  # noqa: E501

        Description not available  # noqa: E501

        :return: The endowment of this Legislature.  # noqa: E501
        :rtype: list[float]
        """
        return self._endowment

    @endowment.setter
    def endowment(self, endowment):
        """Sets the endowment of this Legislature.

        Description not available  # noqa: E501

        :param endowment: The endowment of this Legislature.  # noqa: E501
        :type: list[float]
        """

        self._endowment = endowment

    @property
    def slogan(self):
        """Gets the slogan of this Legislature.  # noqa: E501

        Description not available  # noqa: E501

        :return: The slogan of this Legislature.  # noqa: E501
        :rtype: list[str]
        """
        return self._slogan

    @slogan.setter
    def slogan(self, slogan):
        """Sets the slogan of this Legislature.

        Description not available  # noqa: E501

        :param slogan: The slogan of this Legislature.  # noqa: E501
        :type: list[str]
        """

        self._slogan = slogan

    @property
    def regional_council(self):
        """Gets the regional_council of this Legislature.  # noqa: E501

        Description not available  # noqa: E501

        :return: The regional_council of this Legislature.  # noqa: E501
        :rtype: list[object]
        """
        return self._regional_council

    @regional_council.setter
    def regional_council(self, regional_council):
        """Sets the regional_council of this Legislature.

        Description not available  # noqa: E501

        :param regional_council: The regional_council of this Legislature.  # noqa: E501
        :type: list[object]
        """

        self._regional_council = regional_council

    @property
    def location_city(self):
        """Gets the location_city of this Legislature.  # noqa: E501

        City the thing is located.  # noqa: E501

        :return: The location_city of this Legislature.  # noqa: E501
        :rtype: list[object]
        """
        return self._location_city

    @location_city.setter
    def location_city(self, location_city):
        """Sets the location_city of this Legislature.

        City the thing is located.  # noqa: E501

        :param location_city: The location_city of this Legislature.  # noqa: E501
        :type: list[object]
        """

        self._location_city = location_city

    @property
    def number_of_volunteers(self):
        """Gets the number_of_volunteers of this Legislature.  # noqa: E501

        Description not available  # noqa: E501

        :return: The number_of_volunteers of this Legislature.  # noqa: E501
        :rtype: list[int]
        """
        return self._number_of_volunteers

    @number_of_volunteers.setter
    def number_of_volunteers(self, number_of_volunteers):
        """Sets the number_of_volunteers of this Legislature.

        Description not available  # noqa: E501

        :param number_of_volunteers: The number_of_volunteers of this Legislature.  # noqa: E501
        :type: list[int]
        """

        self._number_of_volunteers = number_of_volunteers

    @property
    def ideology(self):
        """Gets the ideology of this Legislature.  # noqa: E501

        Description not available  # noqa: E501

        :return: The ideology of this Legislature.  # noqa: E501
        :rtype: list[object]
        """
        return self._ideology

    @ideology.setter
    def ideology(self, ideology):
        """Sets the ideology of this Legislature.

        Description not available  # noqa: E501

        :param ideology: The ideology of this Legislature.  # noqa: E501
        :type: list[object]
        """

        self._ideology = ideology

    @property
    def description(self):
        """Gets the description of this Legislature.  # noqa: E501

        small description  # noqa: E501

        :return: The description of this Legislature.  # noqa: E501
        :rtype: list[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Legislature.

        small description  # noqa: E501

        :param description: The description of this Legislature.  # noqa: E501
        :type: list[str]
        """

        self._description = description

    @property
    def membership(self):
        """Gets the membership of this Legislature.  # noqa: E501

        Description not available  # noqa: E501

        :return: The membership of this Legislature.  # noqa: E501
        :rtype: list[str]
        """
        return self._membership

    @membership.setter
    def membership(self, membership):
        """Sets the membership of this Legislature.

        Description not available  # noqa: E501

        :param membership: The membership of this Legislature.  # noqa: E501
        :type: list[str]
        """

        self._membership = membership

    @property
    def ceo(self):
        """Gets the ceo of this Legislature.  # noqa: E501

        Description not available  # noqa: E501

        :return: The ceo of this Legislature.  # noqa: E501
        :rtype: list[object]
        """
        return self._ceo

    @ceo.setter
    def ceo(self, ceo):
        """Sets the ceo of this Legislature.

        Description not available  # noqa: E501

        :param ceo: The ceo of this Legislature.  # noqa: E501
        :type: list[object]
        """

        self._ceo = ceo

    @property
    def house(self):
        """Gets the house of this Legislature.  # noqa: E501

        Description not available  # noqa: E501

        :return: The house of this Legislature.  # noqa: E501
        :rtype: list[object]
        """
        return self._house

    @house.setter
    def house(self, house):
        """Sets the house of this Legislature.

        Description not available  # noqa: E501

        :param house: The house of this Legislature.  # noqa: E501
        :type: list[object]
        """

        self._house = house

    @property
    def formation_year(self):
        """Gets the formation_year of this Legislature.  # noqa: E501

        Description not available  # noqa: E501

        :return: The formation_year of this Legislature.  # noqa: E501
        :rtype: list[str]
        """
        return self._formation_year

    @formation_year.setter
    def formation_year(self, formation_year):
        """Sets the formation_year of this Legislature.

        Description not available  # noqa: E501

        :param formation_year: The formation_year of this Legislature.  # noqa: E501
        :type: list[str]
        """

        self._formation_year = formation_year

    @property
    def junior_season(self):
        """Gets the junior_season of this Legislature.  # noqa: E501

        Description not available  # noqa: E501

        :return: The junior_season of this Legislature.  # noqa: E501
        :rtype: list[object]
        """
        return self._junior_season

    @junior_season.setter
    def junior_season(self, junior_season):
        """Sets the junior_season of this Legislature.

        Description not available  # noqa: E501

        :param junior_season: The junior_season of this Legislature.  # noqa: E501
        :type: list[object]
        """

        self._junior_season = junior_season

    @property
    def headquarter(self):
        """Gets the headquarter of this Legislature.  # noqa: E501

        Description not available  # noqa: E501

        :return: The headquarter of this Legislature.  # noqa: E501
        :rtype: list[object]
        """
        return self._headquarter

    @headquarter.setter
    def headquarter(self, headquarter):
        """Sets the headquarter of this Legislature.

        Description not available  # noqa: E501

        :param headquarter: The headquarter of this Legislature.  # noqa: E501
        :type: list[object]
        """

        self._headquarter = headquarter

    @property
    def extinction_year(self):
        """Gets the extinction_year of this Legislature.  # noqa: E501

        Description not available  # noqa: E501

        :return: The extinction_year of this Legislature.  # noqa: E501
        :rtype: list[str]
        """
        return self._extinction_year

    @extinction_year.setter
    def extinction_year(self, extinction_year):
        """Sets the extinction_year of this Legislature.

        Description not available  # noqa: E501

        :param extinction_year: The extinction_year of this Legislature.  # noqa: E501
        :type: list[str]
        """

        self._extinction_year = extinction_year

    @property
    def child_organisation(self):
        """Gets the child_organisation of this Legislature.  # noqa: E501

        Description not available  # noqa: E501

        :return: The child_organisation of this Legislature.  # noqa: E501
        :rtype: list[object]
        """
        return self._child_organisation

    @child_organisation.setter
    def child_organisation(self, child_organisation):
        """Sets the child_organisation of this Legislature.

        Description not available  # noqa: E501

        :param child_organisation: The child_organisation of this Legislature.  # noqa: E501
        :type: list[object]
        """

        self._child_organisation = child_organisation

    @property
    def honours(self):
        """Gets the honours of this Legislature.  # noqa: E501

        Description not available  # noqa: E501

        :return: The honours of this Legislature.  # noqa: E501
        :rtype: list[object]
        """
        return self._honours

    @honours.setter
    def honours(self, honours):
        """Sets the honours of this Legislature.

        Description not available  # noqa: E501

        :param honours: The honours of this Legislature.  # noqa: E501
        :type: list[object]
        """

        self._honours = honours

    @property
    def parent_organisation(self):
        """Gets the parent_organisation of this Legislature.  # noqa: E501

        Description not available  # noqa: E501

        :return: The parent_organisation of this Legislature.  # noqa: E501
        :rtype: list[object]
        """
        return self._parent_organisation

    @parent_organisation.setter
    def parent_organisation(self, parent_organisation):
        """Sets the parent_organisation of this Legislature.

        Description not available  # noqa: E501

        :param parent_organisation: The parent_organisation of this Legislature.  # noqa: E501
        :type: list[object]
        """

        self._parent_organisation = parent_organisation

    @property
    def organisation_member(self):
        """Gets the organisation_member of this Legislature.  # noqa: E501

        Identify the members of an organisation.  # noqa: E501

        :return: The organisation_member of this Legislature.  # noqa: E501
        :rtype: list[object]
        """
        return self._organisation_member

    @organisation_member.setter
    def organisation_member(self, organisation_member):
        """Sets the organisation_member of this Legislature.

        Identify the members of an organisation.  # noqa: E501

        :param organisation_member: The organisation_member of this Legislature.  # noqa: E501
        :type: list[object]
        """

        self._organisation_member = organisation_member

    @property
    def number_of_staff(self):
        """Gets the number_of_staff of this Legislature.  # noqa: E501

        Description not available  # noqa: E501

        :return: The number_of_staff of this Legislature.  # noqa: E501
        :rtype: list[int]
        """
        return self._number_of_staff

    @number_of_staff.setter
    def number_of_staff(self, number_of_staff):
        """Sets the number_of_staff of this Legislature.

        Description not available  # noqa: E501

        :param number_of_staff: The number_of_staff of this Legislature.  # noqa: E501
        :type: list[int]
        """

        self._number_of_staff = number_of_staff

    @property
    def product(self):
        """Gets the product of this Legislature.  # noqa: E501

        Description not available  # noqa: E501

        :return: The product of this Legislature.  # noqa: E501
        :rtype: list[object]
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this Legislature.

        Description not available  # noqa: E501

        :param product: The product of this Legislature.  # noqa: E501
        :type: list[object]
        """

        self._product = product

    @property
    def hometown(self):
        """Gets the hometown of this Legislature.  # noqa: E501

        Description not available  # noqa: E501

        :return: The hometown of this Legislature.  # noqa: E501
        :rtype: list[object]
        """
        return self._hometown

    @hometown.setter
    def hometown(self, hometown):
        """Sets the hometown of this Legislature.

        Description not available  # noqa: E501

        :param hometown: The hometown of this Legislature.  # noqa: E501
        :type: list[object]
        """

        self._hometown = hometown

    @property
    def foundation_place(self):
        """Gets the foundation_place of this Legislature.  # noqa: E501

        Description not available  # noqa: E501

        :return: The foundation_place of this Legislature.  # noqa: E501
        :rtype: list[object]
        """
        return self._foundation_place

    @foundation_place.setter
    def foundation_place(self, foundation_place):
        """Sets the foundation_place of this Legislature.

        Description not available  # noqa: E501

        :param foundation_place: The foundation_place of this Legislature.  # noqa: E501
        :type: list[object]
        """

        self._foundation_place = foundation_place

    @property
    def national_selection(self):
        """Gets the national_selection of this Legislature.  # noqa: E501

        Description not available  # noqa: E501

        :return: The national_selection of this Legislature.  # noqa: E501
        :rtype: list[object]
        """
        return self._national_selection

    @national_selection.setter
    def national_selection(self, national_selection):
        """Sets the national_selection of this Legislature.

        Description not available  # noqa: E501

        :param national_selection: The national_selection of this Legislature.  # noqa: E501
        :type: list[object]
        """

        self._national_selection = national_selection

    @property
    def label(self):
        """Gets the label of this Legislature.  # noqa: E501

        short description of the resource  # noqa: E501

        :return: The label of this Legislature.  # noqa: E501
        :rtype: list[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Legislature.

        short description of the resource  # noqa: E501

        :param label: The label of this Legislature.  # noqa: E501
        :type: list[str]
        """

        self._label = label

    @property
    def legal_form(self):
        """Gets the legal_form of this Legislature.  # noqa: E501

        There are many types of business entity defined in the legal systems of various countries. These include corporations, cooperatives, partnerships, sole traders, limited liability company and other specialized types of organization.  # noqa: E501

        :return: The legal_form of this Legislature.  # noqa: E501
        :rtype: list[object]
        """
        return self._legal_form

    @legal_form.setter
    def legal_form(self, legal_form):
        """Sets the legal_form of this Legislature.

        There are many types of business entity defined in the legal systems of various countries. These include corporations, cooperatives, partnerships, sole traders, limited liability company and other specialized types of organization.  # noqa: E501

        :param legal_form: The legal_form of this Legislature.  # noqa: E501
        :type: list[object]
        """

        self._legal_form = legal_form

    @property
    def political_party_of_leader(self):
        """Gets the political_party_of_leader of this Legislature.  # noqa: E501

        The Political party of leader.  # noqa: E501

        :return: The political_party_of_leader of this Legislature.  # noqa: E501
        :rtype: list[object]
        """
        return self._political_party_of_leader

    @political_party_of_leader.setter
    def political_party_of_leader(self, political_party_of_leader):
        """Sets the political_party_of_leader of this Legislature.

        The Political party of leader.  # noqa: E501

        :param political_party_of_leader: The political_party_of_leader of this Legislature.  # noqa: E501
        :type: list[object]
        """

        self._political_party_of_leader = political_party_of_leader

    @property
    def general_council(self):
        """Gets the general_council of this Legislature.  # noqa: E501

        Description not available  # noqa: E501

        :return: The general_council of this Legislature.  # noqa: E501
        :rtype: list[object]
        """
        return self._general_council

    @general_council.setter
    def general_council(self, general_council):
        """Sets the general_council of this Legislature.

        Description not available  # noqa: E501

        :param general_council: The general_council of this Legislature.  # noqa: E501
        :type: list[object]
        """

        self._general_council = general_council

    @property
    def trustee(self):
        """Gets the trustee of this Legislature.  # noqa: E501

        Description not available  # noqa: E501

        :return: The trustee of this Legislature.  # noqa: E501
        :rtype: list[object]
        """
        return self._trustee

    @trustee.setter
    def trustee(self, trustee):
        """Sets the trustee of this Legislature.

        Description not available  # noqa: E501

        :param trustee: The trustee of this Legislature.  # noqa: E501
        :type: list[object]
        """

        self._trustee = trustee

    @property
    def age(self):
        """Gets the age of this Legislature.  # noqa: E501

        Description not available  # noqa: E501

        :return: The age of this Legislature.  # noqa: E501
        :rtype: list[int]
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this Legislature.

        Description not available  # noqa: E501

        :param age: The age of this Legislature.  # noqa: E501
        :type: list[int]
        """

        self._age = age

    @property
    def main_organ(self):
        """Gets the main_organ of this Legislature.  # noqa: E501

        Description not available  # noqa: E501

        :return: The main_organ of this Legislature.  # noqa: E501
        :rtype: list[object]
        """
        return self._main_organ

    @main_organ.setter
    def main_organ(self, main_organ):
        """Sets the main_organ of this Legislature.

        Description not available  # noqa: E501

        :param main_organ: The main_organ of this Legislature.  # noqa: E501
        :type: list[object]
        """

        self._main_organ = main_organ

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Legislature):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Legislature):
            return True

        return self.to_dict() != other.to_dict()
