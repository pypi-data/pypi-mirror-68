# coding: utf-8

"""
    DBpedia

    This is the API of the DBpedia Ontology  # noqa: E501

    The version of the OpenAPI document: v0.0.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from dbpedia.configuration import Configuration


class School(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'team_name': 'list[str]',
        'viaf_id': 'list[str]',
        'df_e': 'list[object]',
        'art_patron': 'list[object]',
        'secretary_general': 'list[object]',
        'discipline': 'list[object]',
        'type': 'list[str]',
        'oversight': 'list[str]',
        'head_label': 'list[str]',
        'season': 'list[object]',
        'id': 'str',
        'executive_headteacher': 'list[object]',
        'superintendent': 'list[object]',
        'education_system': 'list[object]',
        'act_score': 'list[object]',
        'number_of_employees': 'list[int]',
        'player_season': 'list[object]',
        'endowment': 'list[float]',
        'regional_council': 'list[object]',
        'dean': 'list[object]',
        'number_of_volunteers': 'list[int]',
        'vice_principal': 'list[object]',
        'grades': 'list[object]',
        'ceo': 'list[object]',
        'number_of_graduate_students': 'list[int]',
        'alumni': 'list[object]',
        'ceeb': 'list[str]',
        'school_board': 'list[object]',
        'headquarter': 'list[object]',
        'nobel_laureates': 'list[object]',
        'honours': 'list[object]',
        'sat_score': 'list[object]',
        'organisation_member': 'list[object]',
        'product': 'list[object]',
        'foundation_place': 'list[object]',
        'national_selection': 'list[object]',
        'number_of_classrooms': 'list[object]',
        'religious_head': 'list[object]',
        'staff': 'list[int]',
        'official_school_colour': 'list[str]',
        'u_rn': 'list[object]',
        'school_patron': 'list[object]',
        'closed': 'list[str]',
        'ranking': 'list[int]',
        'trustee': 'list[object]',
        'upper_age': 'list[int]',
        'ratio': 'list[str]',
        'age_range': 'list[int]',
        'rector': 'list[object]',
        'fees': 'list[float]',
        'reopened': 'list[str]',
        'acting_headteacher': 'list[object]',
        'leader_function': 'list[object]',
        'sixth_form_students': 'list[str]',
        'manager_season': 'list[object]',
        'number_of_locations': 'list[int]',
        'number_of_academic_staff': 'list[int]',
        'offered_classes': 'list[str]',
        'denomination': 'list[object]',
        'average_class_size': 'list[float]',
        'campus_size': 'list[object]',
        'revenue': 'list[float]',
        'national_ranking': 'list[int]',
        'affiliation': 'list[object]',
        'vice_principal_label': 'list[object]',
        'assistant_principal': 'list[object]',
        'lower_age': 'list[int]',
        'school_number': 'list[str]',
        'nla_id': 'list[str]',
        'chairperson': 'list[object]',
        'religious_head_label': 'list[object]',
        'region_served': 'list[object]',
        'formation_date': 'list[str]',
        'campus_type': 'list[str]',
        'number_of_students': 'list[int]',
        'faculty_size': 'list[int]',
        'extinction_date': 'list[str]',
        'specialist': 'list[str]',
        'teaching_staff': 'list[object]',
        'slogan': 'list[str]',
        'location_city': 'list[object]',
        'school_code': 'list[str]',
        'classes': 'list[int]',
        'ideology': 'list[object]',
        'description': 'list[str]',
        'membership': 'list[str]',
        'formation_year': 'list[str]',
        'principal': 'list[object]',
        'junior_season': 'list[object]',
        'head': 'list[object]',
        'chaplain': 'list[object]',
        'administrator': 'list[object]',
        'extinction_year': 'list[str]',
        'child_organisation': 'list[object]',
        'parent_organisation': 'list[object]',
        'number_of_undergraduate_students': 'list[int]',
        'number_of_staff': 'list[int]',
        'hometown': 'list[object]',
        'custodian': 'list[object]',
        'bar_pass_rate': 'list[float]',
        'tuition': 'list[float]',
        'label': 'list[str]',
        'legal_form': 'list[object]',
        'headteacher': 'list[object]',
        'testaverage': 'list[float]',
        'general_council': 'list[object]',
        'rival': 'list[object]',
        'age': 'list[int]',
        'main_organ': 'list[object]'
    }

    attribute_map = {
        'team_name': 'teamName',
        'viaf_id': 'viafId',
        'df_e': 'dfE',
        'art_patron': 'artPatron',
        'secretary_general': 'secretaryGeneral',
        'discipline': 'discipline',
        'type': 'type',
        'oversight': 'oversight',
        'head_label': 'headLabel',
        'season': 'season',
        'id': 'id',
        'executive_headteacher': 'executiveHeadteacher',
        'superintendent': 'superintendent',
        'education_system': 'educationSystem',
        'act_score': 'actScore',
        'number_of_employees': 'numberOfEmployees',
        'player_season': 'playerSeason',
        'endowment': 'endowment',
        'regional_council': 'regionalCouncil',
        'dean': 'dean',
        'number_of_volunteers': 'numberOfVolunteers',
        'vice_principal': 'vicePrincipal',
        'grades': 'grades',
        'ceo': 'ceo',
        'number_of_graduate_students': 'numberOfGraduateStudents',
        'alumni': 'alumni',
        'ceeb': 'ceeb',
        'school_board': 'schoolBoard',
        'headquarter': 'headquarter',
        'nobel_laureates': 'nobelLaureates',
        'honours': 'honours',
        'sat_score': 'satScore',
        'organisation_member': 'organisationMember',
        'product': 'product',
        'foundation_place': 'foundationPlace',
        'national_selection': 'nationalSelection',
        'number_of_classrooms': 'numberOfClassrooms',
        'religious_head': 'religiousHead',
        'staff': 'staff',
        'official_school_colour': 'officialSchoolColour',
        'u_rn': 'uRN',
        'school_patron': 'schoolPatron',
        'closed': 'closed',
        'ranking': 'ranking',
        'trustee': 'trustee',
        'upper_age': 'upperAge',
        'ratio': 'ratio',
        'age_range': 'ageRange',
        'rector': 'rector',
        'fees': 'fees',
        'reopened': 'reopened',
        'acting_headteacher': 'actingHeadteacher',
        'leader_function': 'leaderFunction',
        'sixth_form_students': 'sixthFormStudents',
        'manager_season': 'managerSeason',
        'number_of_locations': 'numberOfLocations',
        'number_of_academic_staff': 'numberOfAcademicStaff',
        'offered_classes': 'offeredClasses',
        'denomination': 'denomination',
        'average_class_size': 'averageClassSize',
        'campus_size': 'campusSize',
        'revenue': 'revenue',
        'national_ranking': 'nationalRanking',
        'affiliation': 'affiliation',
        'vice_principal_label': 'vicePrincipalLabel',
        'assistant_principal': 'assistantPrincipal',
        'lower_age': 'lowerAge',
        'school_number': 'schoolNumber',
        'nla_id': 'nlaId',
        'chairperson': 'chairperson',
        'religious_head_label': 'religiousHeadLabel',
        'region_served': 'regionServed',
        'formation_date': 'formationDate',
        'campus_type': 'campusType',
        'number_of_students': 'numberOfStudents',
        'faculty_size': 'facultySize',
        'extinction_date': 'extinctionDate',
        'specialist': 'specialist',
        'teaching_staff': 'teachingStaff',
        'slogan': 'slogan',
        'location_city': 'locationCity',
        'school_code': 'schoolCode',
        'classes': 'classes',
        'ideology': 'ideology',
        'description': 'description',
        'membership': 'membership',
        'formation_year': 'formationYear',
        'principal': 'principal',
        'junior_season': 'juniorSeason',
        'head': 'head',
        'chaplain': 'chaplain',
        'administrator': 'administrator',
        'extinction_year': 'extinctionYear',
        'child_organisation': 'childOrganisation',
        'parent_organisation': 'parentOrganisation',
        'number_of_undergraduate_students': 'numberOfUndergraduateStudents',
        'number_of_staff': 'numberOfStaff',
        'hometown': 'hometown',
        'custodian': 'custodian',
        'bar_pass_rate': 'barPassRate',
        'tuition': 'tuition',
        'label': 'label',
        'legal_form': 'legalForm',
        'headteacher': 'headteacher',
        'testaverage': 'testaverage',
        'general_council': 'generalCouncil',
        'rival': 'rival',
        'age': 'age',
        'main_organ': 'mainOrgan'
    }

    def __init__(self, team_name=None, viaf_id=None, df_e=None, art_patron=None, secretary_general=None, discipline=None, type=None, oversight=None, head_label=None, season=None, id=None, executive_headteacher=None, superintendent=None, education_system=None, act_score=None, number_of_employees=None, player_season=None, endowment=None, regional_council=None, dean=None, number_of_volunteers=None, vice_principal=None, grades=None, ceo=None, number_of_graduate_students=None, alumni=None, ceeb=None, school_board=None, headquarter=None, nobel_laureates=None, honours=None, sat_score=None, organisation_member=None, product=None, foundation_place=None, national_selection=None, number_of_classrooms=None, religious_head=None, staff=None, official_school_colour=None, u_rn=None, school_patron=None, closed=None, ranking=None, trustee=None, upper_age=None, ratio=None, age_range=None, rector=None, fees=None, reopened=None, acting_headteacher=None, leader_function=None, sixth_form_students=None, manager_season=None, number_of_locations=None, number_of_academic_staff=None, offered_classes=None, denomination=None, average_class_size=None, campus_size=None, revenue=None, national_ranking=None, affiliation=None, vice_principal_label=None, assistant_principal=None, lower_age=None, school_number=None, nla_id=None, chairperson=None, religious_head_label=None, region_served=None, formation_date=None, campus_type=None, number_of_students=None, faculty_size=None, extinction_date=None, specialist=None, teaching_staff=None, slogan=None, location_city=None, school_code=None, classes=None, ideology=None, description=None, membership=None, formation_year=None, principal=None, junior_season=None, head=None, chaplain=None, administrator=None, extinction_year=None, child_organisation=None, parent_organisation=None, number_of_undergraduate_students=None, number_of_staff=None, hometown=None, custodian=None, bar_pass_rate=None, tuition=None, label=None, legal_form=None, headteacher=None, testaverage=None, general_council=None, rival=None, age=None, main_organ=None, local_vars_configuration=None):  # noqa: E501
        """School - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._team_name = None
        self._viaf_id = None
        self._df_e = None
        self._art_patron = None
        self._secretary_general = None
        self._discipline = None
        self._type = None
        self._oversight = None
        self._head_label = None
        self._season = None
        self._id = None
        self._executive_headteacher = None
        self._superintendent = None
        self._education_system = None
        self._act_score = None
        self._number_of_employees = None
        self._player_season = None
        self._endowment = None
        self._regional_council = None
        self._dean = None
        self._number_of_volunteers = None
        self._vice_principal = None
        self._grades = None
        self._ceo = None
        self._number_of_graduate_students = None
        self._alumni = None
        self._ceeb = None
        self._school_board = None
        self._headquarter = None
        self._nobel_laureates = None
        self._honours = None
        self._sat_score = None
        self._organisation_member = None
        self._product = None
        self._foundation_place = None
        self._national_selection = None
        self._number_of_classrooms = None
        self._religious_head = None
        self._staff = None
        self._official_school_colour = None
        self._u_rn = None
        self._school_patron = None
        self._closed = None
        self._ranking = None
        self._trustee = None
        self._upper_age = None
        self._ratio = None
        self._age_range = None
        self._rector = None
        self._fees = None
        self._reopened = None
        self._acting_headteacher = None
        self._leader_function = None
        self._sixth_form_students = None
        self._manager_season = None
        self._number_of_locations = None
        self._number_of_academic_staff = None
        self._offered_classes = None
        self._denomination = None
        self._average_class_size = None
        self._campus_size = None
        self._revenue = None
        self._national_ranking = None
        self._affiliation = None
        self._vice_principal_label = None
        self._assistant_principal = None
        self._lower_age = None
        self._school_number = None
        self._nla_id = None
        self._chairperson = None
        self._religious_head_label = None
        self._region_served = None
        self._formation_date = None
        self._campus_type = None
        self._number_of_students = None
        self._faculty_size = None
        self._extinction_date = None
        self._specialist = None
        self._teaching_staff = None
        self._slogan = None
        self._location_city = None
        self._school_code = None
        self._classes = None
        self._ideology = None
        self._description = None
        self._membership = None
        self._formation_year = None
        self._principal = None
        self._junior_season = None
        self._head = None
        self._chaplain = None
        self._administrator = None
        self._extinction_year = None
        self._child_organisation = None
        self._parent_organisation = None
        self._number_of_undergraduate_students = None
        self._number_of_staff = None
        self._hometown = None
        self._custodian = None
        self._bar_pass_rate = None
        self._tuition = None
        self._label = None
        self._legal_form = None
        self._headteacher = None
        self._testaverage = None
        self._general_council = None
        self._rival = None
        self._age = None
        self._main_organ = None
        self.discriminator = None

        self.team_name = team_name
        self.viaf_id = viaf_id
        self.df_e = df_e
        self.art_patron = art_patron
        self.secretary_general = secretary_general
        self.discipline = discipline
        self.type = type
        self.oversight = oversight
        self.head_label = head_label
        self.season = season
        if id is not None:
            self.id = id
        self.executive_headteacher = executive_headteacher
        self.superintendent = superintendent
        self.education_system = education_system
        self.act_score = act_score
        self.number_of_employees = number_of_employees
        self.player_season = player_season
        self.endowment = endowment
        self.regional_council = regional_council
        self.dean = dean
        self.number_of_volunteers = number_of_volunteers
        self.vice_principal = vice_principal
        self.grades = grades
        self.ceo = ceo
        self.number_of_graduate_students = number_of_graduate_students
        self.alumni = alumni
        self.ceeb = ceeb
        self.school_board = school_board
        self.headquarter = headquarter
        self.nobel_laureates = nobel_laureates
        self.honours = honours
        self.sat_score = sat_score
        self.organisation_member = organisation_member
        self.product = product
        self.foundation_place = foundation_place
        self.national_selection = national_selection
        self.number_of_classrooms = number_of_classrooms
        self.religious_head = religious_head
        self.staff = staff
        self.official_school_colour = official_school_colour
        self.u_rn = u_rn
        self.school_patron = school_patron
        self.closed = closed
        self.ranking = ranking
        self.trustee = trustee
        self.upper_age = upper_age
        self.ratio = ratio
        self.age_range = age_range
        self.rector = rector
        self.fees = fees
        self.reopened = reopened
        self.acting_headteacher = acting_headteacher
        self.leader_function = leader_function
        self.sixth_form_students = sixth_form_students
        self.manager_season = manager_season
        self.number_of_locations = number_of_locations
        self.number_of_academic_staff = number_of_academic_staff
        self.offered_classes = offered_classes
        self.denomination = denomination
        self.average_class_size = average_class_size
        self.campus_size = campus_size
        self.revenue = revenue
        self.national_ranking = national_ranking
        self.affiliation = affiliation
        self.vice_principal_label = vice_principal_label
        self.assistant_principal = assistant_principal
        self.lower_age = lower_age
        self.school_number = school_number
        self.nla_id = nla_id
        self.chairperson = chairperson
        self.religious_head_label = religious_head_label
        self.region_served = region_served
        self.formation_date = formation_date
        self.campus_type = campus_type
        self.number_of_students = number_of_students
        self.faculty_size = faculty_size
        self.extinction_date = extinction_date
        self.specialist = specialist
        self.teaching_staff = teaching_staff
        self.slogan = slogan
        self.location_city = location_city
        self.school_code = school_code
        self.classes = classes
        self.ideology = ideology
        self.description = description
        self.membership = membership
        self.formation_year = formation_year
        self.principal = principal
        self.junior_season = junior_season
        self.head = head
        self.chaplain = chaplain
        self.administrator = administrator
        self.extinction_year = extinction_year
        self.child_organisation = child_organisation
        self.parent_organisation = parent_organisation
        self.number_of_undergraduate_students = number_of_undergraduate_students
        self.number_of_staff = number_of_staff
        self.hometown = hometown
        self.custodian = custodian
        self.bar_pass_rate = bar_pass_rate
        self.tuition = tuition
        self.label = label
        self.legal_form = legal_form
        self.headteacher = headteacher
        self.testaverage = testaverage
        self.general_council = general_council
        self.rival = rival
        self.age = age
        self.main_organ = main_organ

    @property
    def team_name(self):
        """Gets the team_name of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The team_name of this School.  # noqa: E501
        :rtype: list[str]
        """
        return self._team_name

    @team_name.setter
    def team_name(self, team_name):
        """Sets the team_name of this School.

        Description not available  # noqa: E501

        :param team_name: The team_name of this School.  # noqa: E501
        :type: list[str]
        """

        self._team_name = team_name

    @property
    def viaf_id(self):
        """Gets the viaf_id of this School.  # noqa: E501

        International authority data from the Online Computer Library Center (OCLC)  # noqa: E501

        :return: The viaf_id of this School.  # noqa: E501
        :rtype: list[str]
        """
        return self._viaf_id

    @viaf_id.setter
    def viaf_id(self, viaf_id):
        """Sets the viaf_id of this School.

        International authority data from the Online Computer Library Center (OCLC)  # noqa: E501

        :param viaf_id: The viaf_id of this School.  # noqa: E501
        :type: list[str]
        """

        self._viaf_id = viaf_id

    @property
    def df_e(self):
        """Gets the df_e of this School.  # noqa: E501

        Department for Education (UK) number of a school in England or Wales  # noqa: E501

        :return: The df_e of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._df_e

    @df_e.setter
    def df_e(self, df_e):
        """Sets the df_e of this School.

        Department for Education (UK) number of a school in England or Wales  # noqa: E501

        :param df_e: The df_e of this School.  # noqa: E501
        :type: list[object]
        """

        self._df_e = df_e

    @property
    def art_patron(self):
        """Gets the art_patron of this School.  # noqa: E501

        An influential, wealthy person who supported an artist, craftsman, a scholar or a noble.. See also  # noqa: E501

        :return: The art_patron of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._art_patron

    @art_patron.setter
    def art_patron(self, art_patron):
        """Sets the art_patron of this School.

        An influential, wealthy person who supported an artist, craftsman, a scholar or a noble.. See also  # noqa: E501

        :param art_patron: The art_patron of this School.  # noqa: E501
        :type: list[object]
        """

        self._art_patron = art_patron

    @property
    def secretary_general(self):
        """Gets the secretary_general of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The secretary_general of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._secretary_general

    @secretary_general.setter
    def secretary_general(self, secretary_general):
        """Sets the secretary_general of this School.

        Description not available  # noqa: E501

        :param secretary_general: The secretary_general of this School.  # noqa: E501
        :type: list[object]
        """

        self._secretary_general = secretary_general

    @property
    def discipline(self):
        """Gets the discipline of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The discipline of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._discipline

    @discipline.setter
    def discipline(self, discipline):
        """Sets the discipline of this School.

        Description not available  # noqa: E501

        :param discipline: The discipline of this School.  # noqa: E501
        :type: list[object]
        """

        self._discipline = discipline

    @property
    def type(self):
        """Gets the type of this School.  # noqa: E501

        type of the resource  # noqa: E501

        :return: The type of this School.  # noqa: E501
        :rtype: list[str]
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this School.

        type of the resource  # noqa: E501

        :param type: The type of this School.  # noqa: E501
        :type: list[str]
        """

        self._type = type

    @property
    def oversight(self):
        """Gets the oversight of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The oversight of this School.  # noqa: E501
        :rtype: list[str]
        """
        return self._oversight

    @oversight.setter
    def oversight(self, oversight):
        """Sets the oversight of this School.

        Description not available  # noqa: E501

        :param oversight: The oversight of this School.  # noqa: E501
        :type: list[str]
        """

        self._oversight = oversight

    @property
    def head_label(self):
        """Gets the head_label of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The head_label of this School.  # noqa: E501
        :rtype: list[str]
        """
        return self._head_label

    @head_label.setter
    def head_label(self, head_label):
        """Sets the head_label of this School.

        Description not available  # noqa: E501

        :param head_label: The head_label of this School.  # noqa: E501
        :type: list[str]
        """

        self._head_label = head_label

    @property
    def season(self):
        """Gets the season of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The season of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this School.

        Description not available  # noqa: E501

        :param season: The season of this School.  # noqa: E501
        :type: list[object]
        """

        self._season = season

    @property
    def id(self):
        """Gets the id of this School.  # noqa: E501

        identifier  # noqa: E501

        :return: The id of this School.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this School.

        identifier  # noqa: E501

        :param id: The id of this School.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def executive_headteacher(self):
        """Gets the executive_headteacher of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The executive_headteacher of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._executive_headteacher

    @executive_headteacher.setter
    def executive_headteacher(self, executive_headteacher):
        """Sets the executive_headteacher of this School.

        Description not available  # noqa: E501

        :param executive_headteacher: The executive_headteacher of this School.  # noqa: E501
        :type: list[object]
        """

        self._executive_headteacher = executive_headteacher

    @property
    def superintendent(self):
        """Gets the superintendent of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The superintendent of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._superintendent

    @superintendent.setter
    def superintendent(self, superintendent):
        """Sets the superintendent of this School.

        Description not available  # noqa: E501

        :param superintendent: The superintendent of this School.  # noqa: E501
        :type: list[object]
        """

        self._superintendent = superintendent

    @property
    def education_system(self):
        """Gets the education_system of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The education_system of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._education_system

    @education_system.setter
    def education_system(self, education_system):
        """Sets the education_system of this School.

        Description not available  # noqa: E501

        :param education_system: The education_system of this School.  # noqa: E501
        :type: list[object]
        """

        self._education_system = education_system

    @property
    def act_score(self):
        """Gets the act_score of this School.  # noqa: E501

        most recent average ACT scores  # noqa: E501

        :return: The act_score of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._act_score

    @act_score.setter
    def act_score(self, act_score):
        """Sets the act_score of this School.

        most recent average ACT scores  # noqa: E501

        :param act_score: The act_score of this School.  # noqa: E501
        :type: list[object]
        """

        self._act_score = act_score

    @property
    def number_of_employees(self):
        """Gets the number_of_employees of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The number_of_employees of this School.  # noqa: E501
        :rtype: list[int]
        """
        return self._number_of_employees

    @number_of_employees.setter
    def number_of_employees(self, number_of_employees):
        """Sets the number_of_employees of this School.

        Description not available  # noqa: E501

        :param number_of_employees: The number_of_employees of this School.  # noqa: E501
        :type: list[int]
        """

        self._number_of_employees = number_of_employees

    @property
    def player_season(self):
        """Gets the player_season of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The player_season of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._player_season

    @player_season.setter
    def player_season(self, player_season):
        """Sets the player_season of this School.

        Description not available  # noqa: E501

        :param player_season: The player_season of this School.  # noqa: E501
        :type: list[object]
        """

        self._player_season = player_season

    @property
    def endowment(self):
        """Gets the endowment of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The endowment of this School.  # noqa: E501
        :rtype: list[float]
        """
        return self._endowment

    @endowment.setter
    def endowment(self, endowment):
        """Sets the endowment of this School.

        Description not available  # noqa: E501

        :param endowment: The endowment of this School.  # noqa: E501
        :type: list[float]
        """

        self._endowment = endowment

    @property
    def regional_council(self):
        """Gets the regional_council of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The regional_council of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._regional_council

    @regional_council.setter
    def regional_council(self, regional_council):
        """Sets the regional_council of this School.

        Description not available  # noqa: E501

        :param regional_council: The regional_council of this School.  # noqa: E501
        :type: list[object]
        """

        self._regional_council = regional_council

    @property
    def dean(self):
        """Gets the dean of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The dean of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._dean

    @dean.setter
    def dean(self, dean):
        """Sets the dean of this School.

        Description not available  # noqa: E501

        :param dean: The dean of this School.  # noqa: E501
        :type: list[object]
        """

        self._dean = dean

    @property
    def number_of_volunteers(self):
        """Gets the number_of_volunteers of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The number_of_volunteers of this School.  # noqa: E501
        :rtype: list[int]
        """
        return self._number_of_volunteers

    @number_of_volunteers.setter
    def number_of_volunteers(self, number_of_volunteers):
        """Sets the number_of_volunteers of this School.

        Description not available  # noqa: E501

        :param number_of_volunteers: The number_of_volunteers of this School.  # noqa: E501
        :type: list[int]
        """

        self._number_of_volunteers = number_of_volunteers

    @property
    def vice_principal(self):
        """Gets the vice_principal of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The vice_principal of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._vice_principal

    @vice_principal.setter
    def vice_principal(self, vice_principal):
        """Sets the vice_principal of this School.

        Description not available  # noqa: E501

        :param vice_principal: The vice_principal of this School.  # noqa: E501
        :type: list[object]
        """

        self._vice_principal = vice_principal

    @property
    def grades(self):
        """Gets the grades of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The grades of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._grades

    @grades.setter
    def grades(self, grades):
        """Sets the grades of this School.

        Description not available  # noqa: E501

        :param grades: The grades of this School.  # noqa: E501
        :type: list[object]
        """

        self._grades = grades

    @property
    def ceo(self):
        """Gets the ceo of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The ceo of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._ceo

    @ceo.setter
    def ceo(self, ceo):
        """Sets the ceo of this School.

        Description not available  # noqa: E501

        :param ceo: The ceo of this School.  # noqa: E501
        :type: list[object]
        """

        self._ceo = ceo

    @property
    def number_of_graduate_students(self):
        """Gets the number_of_graduate_students of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The number_of_graduate_students of this School.  # noqa: E501
        :rtype: list[int]
        """
        return self._number_of_graduate_students

    @number_of_graduate_students.setter
    def number_of_graduate_students(self, number_of_graduate_students):
        """Sets the number_of_graduate_students of this School.

        Description not available  # noqa: E501

        :param number_of_graduate_students: The number_of_graduate_students of this School.  # noqa: E501
        :type: list[int]
        """

        self._number_of_graduate_students = number_of_graduate_students

    @property
    def alumni(self):
        """Gets the alumni of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The alumni of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._alumni

    @alumni.setter
    def alumni(self, alumni):
        """Sets the alumni of this School.

        Description not available  # noqa: E501

        :param alumni: The alumni of this School.  # noqa: E501
        :type: list[object]
        """

        self._alumni = alumni

    @property
    def ceeb(self):
        """Gets the ceeb of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The ceeb of this School.  # noqa: E501
        :rtype: list[str]
        """
        return self._ceeb

    @ceeb.setter
    def ceeb(self, ceeb):
        """Sets the ceeb of this School.

        Description not available  # noqa: E501

        :param ceeb: The ceeb of this School.  # noqa: E501
        :type: list[str]
        """

        self._ceeb = ceeb

    @property
    def school_board(self):
        """Gets the school_board of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The school_board of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._school_board

    @school_board.setter
    def school_board(self, school_board):
        """Sets the school_board of this School.

        Description not available  # noqa: E501

        :param school_board: The school_board of this School.  # noqa: E501
        :type: list[object]
        """

        self._school_board = school_board

    @property
    def headquarter(self):
        """Gets the headquarter of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The headquarter of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._headquarter

    @headquarter.setter
    def headquarter(self, headquarter):
        """Sets the headquarter of this School.

        Description not available  # noqa: E501

        :param headquarter: The headquarter of this School.  # noqa: E501
        :type: list[object]
        """

        self._headquarter = headquarter

    @property
    def nobel_laureates(self):
        """Gets the nobel_laureates of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The nobel_laureates of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._nobel_laureates

    @nobel_laureates.setter
    def nobel_laureates(self, nobel_laureates):
        """Sets the nobel_laureates of this School.

        Description not available  # noqa: E501

        :param nobel_laureates: The nobel_laureates of this School.  # noqa: E501
        :type: list[object]
        """

        self._nobel_laureates = nobel_laureates

    @property
    def honours(self):
        """Gets the honours of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The honours of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._honours

    @honours.setter
    def honours(self, honours):
        """Sets the honours of this School.

        Description not available  # noqa: E501

        :param honours: The honours of this School.  # noqa: E501
        :type: list[object]
        """

        self._honours = honours

    @property
    def sat_score(self):
        """Gets the sat_score of this School.  # noqa: E501

        most recent average SAT scores  # noqa: E501

        :return: The sat_score of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._sat_score

    @sat_score.setter
    def sat_score(self, sat_score):
        """Sets the sat_score of this School.

        most recent average SAT scores  # noqa: E501

        :param sat_score: The sat_score of this School.  # noqa: E501
        :type: list[object]
        """

        self._sat_score = sat_score

    @property
    def organisation_member(self):
        """Gets the organisation_member of this School.  # noqa: E501

        Identify the members of an organisation.  # noqa: E501

        :return: The organisation_member of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._organisation_member

    @organisation_member.setter
    def organisation_member(self, organisation_member):
        """Sets the organisation_member of this School.

        Identify the members of an organisation.  # noqa: E501

        :param organisation_member: The organisation_member of this School.  # noqa: E501
        :type: list[object]
        """

        self._organisation_member = organisation_member

    @property
    def product(self):
        """Gets the product of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The product of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this School.

        Description not available  # noqa: E501

        :param product: The product of this School.  # noqa: E501
        :type: list[object]
        """

        self._product = product

    @property
    def foundation_place(self):
        """Gets the foundation_place of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The foundation_place of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._foundation_place

    @foundation_place.setter
    def foundation_place(self, foundation_place):
        """Sets the foundation_place of this School.

        Description not available  # noqa: E501

        :param foundation_place: The foundation_place of this School.  # noqa: E501
        :type: list[object]
        """

        self._foundation_place = foundation_place

    @property
    def national_selection(self):
        """Gets the national_selection of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The national_selection of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._national_selection

    @national_selection.setter
    def national_selection(self, national_selection):
        """Sets the national_selection of this School.

        Description not available  # noqa: E501

        :param national_selection: The national_selection of this School.  # noqa: E501
        :type: list[object]
        """

        self._national_selection = national_selection

    @property
    def number_of_classrooms(self):
        """Gets the number_of_classrooms of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The number_of_classrooms of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._number_of_classrooms

    @number_of_classrooms.setter
    def number_of_classrooms(self, number_of_classrooms):
        """Sets the number_of_classrooms of this School.

        Description not available  # noqa: E501

        :param number_of_classrooms: The number_of_classrooms of this School.  # noqa: E501
        :type: list[object]
        """

        self._number_of_classrooms = number_of_classrooms

    @property
    def religious_head(self):
        """Gets the religious_head of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The religious_head of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._religious_head

    @religious_head.setter
    def religious_head(self, religious_head):
        """Sets the religious_head of this School.

        Description not available  # noqa: E501

        :param religious_head: The religious_head of this School.  # noqa: E501
        :type: list[object]
        """

        self._religious_head = religious_head

    @property
    def staff(self):
        """Gets the staff of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The staff of this School.  # noqa: E501
        :rtype: list[int]
        """
        return self._staff

    @staff.setter
    def staff(self, staff):
        """Sets the staff of this School.

        Description not available  # noqa: E501

        :param staff: The staff of this School.  # noqa: E501
        :type: list[int]
        """

        self._staff = staff

    @property
    def official_school_colour(self):
        """Gets the official_school_colour of this School.  # noqa: E501

        The official colour of the EducationalInstitution represented by the colour name (e.g.: red or green).  # noqa: E501

        :return: The official_school_colour of this School.  # noqa: E501
        :rtype: list[str]
        """
        return self._official_school_colour

    @official_school_colour.setter
    def official_school_colour(self, official_school_colour):
        """Sets the official_school_colour of this School.

        The official colour of the EducationalInstitution represented by the colour name (e.g.: red or green).  # noqa: E501

        :param official_school_colour: The official_school_colour of this School.  # noqa: E501
        :type: list[str]
        """

        self._official_school_colour = official_school_colour

    @property
    def u_rn(self):
        """Gets the u_rn of this School.  # noqa: E501

        DfE unique reference number of a school in England or Wales  # noqa: E501

        :return: The u_rn of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._u_rn

    @u_rn.setter
    def u_rn(self, u_rn):
        """Sets the u_rn of this School.

        DfE unique reference number of a school in England or Wales  # noqa: E501

        :param u_rn: The u_rn of this School.  # noqa: E501
        :type: list[object]
        """

        self._u_rn = u_rn

    @property
    def school_patron(self):
        """Gets the school_patron of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The school_patron of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._school_patron

    @school_patron.setter
    def school_patron(self, school_patron):
        """Sets the school_patron of this School.

        Description not available  # noqa: E501

        :param school_patron: The school_patron of this School.  # noqa: E501
        :type: list[object]
        """

        self._school_patron = school_patron

    @property
    def closed(self):
        """Gets the closed of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The closed of this School.  # noqa: E501
        :rtype: list[str]
        """
        return self._closed

    @closed.setter
    def closed(self, closed):
        """Sets the closed of this School.

        Description not available  # noqa: E501

        :param closed: The closed of this School.  # noqa: E501
        :type: list[str]
        """

        self._closed = closed

    @property
    def ranking(self):
        """Gets the ranking of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The ranking of this School.  # noqa: E501
        :rtype: list[int]
        """
        return self._ranking

    @ranking.setter
    def ranking(self, ranking):
        """Sets the ranking of this School.

        Description not available  # noqa: E501

        :param ranking: The ranking of this School.  # noqa: E501
        :type: list[int]
        """

        self._ranking = ranking

    @property
    def trustee(self):
        """Gets the trustee of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The trustee of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._trustee

    @trustee.setter
    def trustee(self, trustee):
        """Sets the trustee of this School.

        Description not available  # noqa: E501

        :param trustee: The trustee of this School.  # noqa: E501
        :type: list[object]
        """

        self._trustee = trustee

    @property
    def upper_age(self):
        """Gets the upper_age of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The upper_age of this School.  # noqa: E501
        :rtype: list[int]
        """
        return self._upper_age

    @upper_age.setter
    def upper_age(self, upper_age):
        """Sets the upper_age of this School.

        Description not available  # noqa: E501

        :param upper_age: The upper_age of this School.  # noqa: E501
        :type: list[int]
        """

        self._upper_age = upper_age

    @property
    def ratio(self):
        """Gets the ratio of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The ratio of this School.  # noqa: E501
        :rtype: list[str]
        """
        return self._ratio

    @ratio.setter
    def ratio(self, ratio):
        """Sets the ratio of this School.

        Description not available  # noqa: E501

        :param ratio: The ratio of this School.  # noqa: E501
        :type: list[str]
        """

        self._ratio = ratio

    @property
    def age_range(self):
        """Gets the age_range of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The age_range of this School.  # noqa: E501
        :rtype: list[int]
        """
        return self._age_range

    @age_range.setter
    def age_range(self, age_range):
        """Sets the age_range of this School.

        Description not available  # noqa: E501

        :param age_range: The age_range of this School.  # noqa: E501
        :type: list[int]
        """

        self._age_range = age_range

    @property
    def rector(self):
        """Gets the rector of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The rector of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._rector

    @rector.setter
    def rector(self, rector):
        """Sets the rector of this School.

        Description not available  # noqa: E501

        :param rector: The rector of this School.  # noqa: E501
        :type: list[object]
        """

        self._rector = rector

    @property
    def fees(self):
        """Gets the fees of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The fees of this School.  # noqa: E501
        :rtype: list[float]
        """
        return self._fees

    @fees.setter
    def fees(self, fees):
        """Sets the fees of this School.

        Description not available  # noqa: E501

        :param fees: The fees of this School.  # noqa: E501
        :type: list[float]
        """

        self._fees = fees

    @property
    def reopened(self):
        """Gets the reopened of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The reopened of this School.  # noqa: E501
        :rtype: list[str]
        """
        return self._reopened

    @reopened.setter
    def reopened(self, reopened):
        """Sets the reopened of this School.

        Description not available  # noqa: E501

        :param reopened: The reopened of this School.  # noqa: E501
        :type: list[str]
        """

        self._reopened = reopened

    @property
    def acting_headteacher(self):
        """Gets the acting_headteacher of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The acting_headteacher of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._acting_headteacher

    @acting_headteacher.setter
    def acting_headteacher(self, acting_headteacher):
        """Sets the acting_headteacher of this School.

        Description not available  # noqa: E501

        :param acting_headteacher: The acting_headteacher of this School.  # noqa: E501
        :type: list[object]
        """

        self._acting_headteacher = acting_headteacher

    @property
    def leader_function(self):
        """Gets the leader_function of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The leader_function of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._leader_function

    @leader_function.setter
    def leader_function(self, leader_function):
        """Sets the leader_function of this School.

        Description not available  # noqa: E501

        :param leader_function: The leader_function of this School.  # noqa: E501
        :type: list[object]
        """

        self._leader_function = leader_function

    @property
    def sixth_form_students(self):
        """Gets the sixth_form_students of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The sixth_form_students of this School.  # noqa: E501
        :rtype: list[str]
        """
        return self._sixth_form_students

    @sixth_form_students.setter
    def sixth_form_students(self, sixth_form_students):
        """Sets the sixth_form_students of this School.

        Description not available  # noqa: E501

        :param sixth_form_students: The sixth_form_students of this School.  # noqa: E501
        :type: list[str]
        """

        self._sixth_form_students = sixth_form_students

    @property
    def manager_season(self):
        """Gets the manager_season of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The manager_season of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._manager_season

    @manager_season.setter
    def manager_season(self, manager_season):
        """Sets the manager_season of this School.

        Description not available  # noqa: E501

        :param manager_season: The manager_season of this School.  # noqa: E501
        :type: list[object]
        """

        self._manager_season = manager_season

    @property
    def number_of_locations(self):
        """Gets the number_of_locations of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The number_of_locations of this School.  # noqa: E501
        :rtype: list[int]
        """
        return self._number_of_locations

    @number_of_locations.setter
    def number_of_locations(self, number_of_locations):
        """Sets the number_of_locations of this School.

        Description not available  # noqa: E501

        :param number_of_locations: The number_of_locations of this School.  # noqa: E501
        :type: list[int]
        """

        self._number_of_locations = number_of_locations

    @property
    def number_of_academic_staff(self):
        """Gets the number_of_academic_staff of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The number_of_academic_staff of this School.  # noqa: E501
        :rtype: list[int]
        """
        return self._number_of_academic_staff

    @number_of_academic_staff.setter
    def number_of_academic_staff(self, number_of_academic_staff):
        """Sets the number_of_academic_staff of this School.

        Description not available  # noqa: E501

        :param number_of_academic_staff: The number_of_academic_staff of this School.  # noqa: E501
        :type: list[int]
        """

        self._number_of_academic_staff = number_of_academic_staff

    @property
    def offered_classes(self):
        """Gets the offered_classes of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The offered_classes of this School.  # noqa: E501
        :rtype: list[str]
        """
        return self._offered_classes

    @offered_classes.setter
    def offered_classes(self, offered_classes):
        """Sets the offered_classes of this School.

        Description not available  # noqa: E501

        :param offered_classes: The offered_classes of this School.  # noqa: E501
        :type: list[str]
        """

        self._offered_classes = offered_classes

    @property
    def denomination(self):
        """Gets the denomination of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The denomination of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._denomination

    @denomination.setter
    def denomination(self, denomination):
        """Sets the denomination of this School.

        Description not available  # noqa: E501

        :param denomination: The denomination of this School.  # noqa: E501
        :type: list[object]
        """

        self._denomination = denomination

    @property
    def average_class_size(self):
        """Gets the average_class_size of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The average_class_size of this School.  # noqa: E501
        :rtype: list[float]
        """
        return self._average_class_size

    @average_class_size.setter
    def average_class_size(self, average_class_size):
        """Sets the average_class_size of this School.

        Description not available  # noqa: E501

        :param average_class_size: The average_class_size of this School.  # noqa: E501
        :type: list[float]
        """

        self._average_class_size = average_class_size

    @property
    def campus_size(self):
        """Gets the campus_size of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The campus_size of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._campus_size

    @campus_size.setter
    def campus_size(self, campus_size):
        """Sets the campus_size of this School.

        Description not available  # noqa: E501

        :param campus_size: The campus_size of this School.  # noqa: E501
        :type: list[object]
        """

        self._campus_size = campus_size

    @property
    def revenue(self):
        """Gets the revenue of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The revenue of this School.  # noqa: E501
        :rtype: list[float]
        """
        return self._revenue

    @revenue.setter
    def revenue(self, revenue):
        """Sets the revenue of this School.

        Description not available  # noqa: E501

        :param revenue: The revenue of this School.  # noqa: E501
        :type: list[float]
        """

        self._revenue = revenue

    @property
    def national_ranking(self):
        """Gets the national_ranking of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The national_ranking of this School.  # noqa: E501
        :rtype: list[int]
        """
        return self._national_ranking

    @national_ranking.setter
    def national_ranking(self, national_ranking):
        """Sets the national_ranking of this School.

        Description not available  # noqa: E501

        :param national_ranking: The national_ranking of this School.  # noqa: E501
        :type: list[int]
        """

        self._national_ranking = national_ranking

    @property
    def affiliation(self):
        """Gets the affiliation of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The affiliation of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._affiliation

    @affiliation.setter
    def affiliation(self, affiliation):
        """Sets the affiliation of this School.

        Description not available  # noqa: E501

        :param affiliation: The affiliation of this School.  # noqa: E501
        :type: list[object]
        """

        self._affiliation = affiliation

    @property
    def vice_principal_label(self):
        """Gets the vice_principal_label of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The vice_principal_label of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._vice_principal_label

    @vice_principal_label.setter
    def vice_principal_label(self, vice_principal_label):
        """Sets the vice_principal_label of this School.

        Description not available  # noqa: E501

        :param vice_principal_label: The vice_principal_label of this School.  # noqa: E501
        :type: list[object]
        """

        self._vice_principal_label = vice_principal_label

    @property
    def assistant_principal(self):
        """Gets the assistant_principal of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The assistant_principal of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._assistant_principal

    @assistant_principal.setter
    def assistant_principal(self, assistant_principal):
        """Sets the assistant_principal of this School.

        Description not available  # noqa: E501

        :param assistant_principal: The assistant_principal of this School.  # noqa: E501
        :type: list[object]
        """

        self._assistant_principal = assistant_principal

    @property
    def lower_age(self):
        """Gets the lower_age of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The lower_age of this School.  # noqa: E501
        :rtype: list[int]
        """
        return self._lower_age

    @lower_age.setter
    def lower_age(self, lower_age):
        """Sets the lower_age of this School.

        Description not available  # noqa: E501

        :param lower_age: The lower_age of this School.  # noqa: E501
        :type: list[int]
        """

        self._lower_age = lower_age

    @property
    def school_number(self):
        """Gets the school_number of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The school_number of this School.  # noqa: E501
        :rtype: list[str]
        """
        return self._school_number

    @school_number.setter
    def school_number(self, school_number):
        """Sets the school_number of this School.

        Description not available  # noqa: E501

        :param school_number: The school_number of this School.  # noqa: E501
        :type: list[str]
        """

        self._school_number = school_number

    @property
    def nla_id(self):
        """Gets the nla_id of this School.  # noqa: E501

        NLA Trove’s People and Organisation view allows the discovery of biographical and other contextual information about people and organisations. Search also available via VIAF.  # noqa: E501

        :return: The nla_id of this School.  # noqa: E501
        :rtype: list[str]
        """
        return self._nla_id

    @nla_id.setter
    def nla_id(self, nla_id):
        """Sets the nla_id of this School.

        NLA Trove’s People and Organisation view allows the discovery of biographical and other contextual information about people and organisations. Search also available via VIAF.  # noqa: E501

        :param nla_id: The nla_id of this School.  # noqa: E501
        :type: list[str]
        """

        self._nla_id = nla_id

    @property
    def chairperson(self):
        """Gets the chairperson of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The chairperson of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._chairperson

    @chairperson.setter
    def chairperson(self, chairperson):
        """Sets the chairperson of this School.

        Description not available  # noqa: E501

        :param chairperson: The chairperson of this School.  # noqa: E501
        :type: list[object]
        """

        self._chairperson = chairperson

    @property
    def religious_head_label(self):
        """Gets the religious_head_label of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The religious_head_label of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._religious_head_label

    @religious_head_label.setter
    def religious_head_label(self, religious_head_label):
        """Sets the religious_head_label of this School.

        Description not available  # noqa: E501

        :param religious_head_label: The religious_head_label of this School.  # noqa: E501
        :type: list[object]
        """

        self._religious_head_label = religious_head_label

    @property
    def region_served(self):
        """Gets the region_served of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The region_served of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._region_served

    @region_served.setter
    def region_served(self, region_served):
        """Sets the region_served of this School.

        Description not available  # noqa: E501

        :param region_served: The region_served of this School.  # noqa: E501
        :type: list[object]
        """

        self._region_served = region_served

    @property
    def formation_date(self):
        """Gets the formation_date of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The formation_date of this School.  # noqa: E501
        :rtype: list[str]
        """
        return self._formation_date

    @formation_date.setter
    def formation_date(self, formation_date):
        """Sets the formation_date of this School.

        Description not available  # noqa: E501

        :param formation_date: The formation_date of this School.  # noqa: E501
        :type: list[str]
        """

        self._formation_date = formation_date

    @property
    def campus_type(self):
        """Gets the campus_type of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The campus_type of this School.  # noqa: E501
        :rtype: list[str]
        """
        return self._campus_type

    @campus_type.setter
    def campus_type(self, campus_type):
        """Sets the campus_type of this School.

        Description not available  # noqa: E501

        :param campus_type: The campus_type of this School.  # noqa: E501
        :type: list[str]
        """

        self._campus_type = campus_type

    @property
    def number_of_students(self):
        """Gets the number_of_students of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The number_of_students of this School.  # noqa: E501
        :rtype: list[int]
        """
        return self._number_of_students

    @number_of_students.setter
    def number_of_students(self, number_of_students):
        """Sets the number_of_students of this School.

        Description not available  # noqa: E501

        :param number_of_students: The number_of_students of this School.  # noqa: E501
        :type: list[int]
        """

        self._number_of_students = number_of_students

    @property
    def faculty_size(self):
        """Gets the faculty_size of this School.  # noqa: E501

        number of faculty members  # noqa: E501

        :return: The faculty_size of this School.  # noqa: E501
        :rtype: list[int]
        """
        return self._faculty_size

    @faculty_size.setter
    def faculty_size(self, faculty_size):
        """Sets the faculty_size of this School.

        number of faculty members  # noqa: E501

        :param faculty_size: The faculty_size of this School.  # noqa: E501
        :type: list[int]
        """

        self._faculty_size = faculty_size

    @property
    def extinction_date(self):
        """Gets the extinction_date of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The extinction_date of this School.  # noqa: E501
        :rtype: list[str]
        """
        return self._extinction_date

    @extinction_date.setter
    def extinction_date(self, extinction_date):
        """Sets the extinction_date of this School.

        Description not available  # noqa: E501

        :param extinction_date: The extinction_date of this School.  # noqa: E501
        :type: list[str]
        """

        self._extinction_date = extinction_date

    @property
    def specialist(self):
        """Gets the specialist of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The specialist of this School.  # noqa: E501
        :rtype: list[str]
        """
        return self._specialist

    @specialist.setter
    def specialist(self, specialist):
        """Sets the specialist of this School.

        Description not available  # noqa: E501

        :param specialist: The specialist of this School.  # noqa: E501
        :type: list[str]
        """

        self._specialist = specialist

    @property
    def teaching_staff(self):
        """Gets the teaching_staff of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The teaching_staff of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._teaching_staff

    @teaching_staff.setter
    def teaching_staff(self, teaching_staff):
        """Sets the teaching_staff of this School.

        Description not available  # noqa: E501

        :param teaching_staff: The teaching_staff of this School.  # noqa: E501
        :type: list[object]
        """

        self._teaching_staff = teaching_staff

    @property
    def slogan(self):
        """Gets the slogan of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The slogan of this School.  # noqa: E501
        :rtype: list[str]
        """
        return self._slogan

    @slogan.setter
    def slogan(self, slogan):
        """Sets the slogan of this School.

        Description not available  # noqa: E501

        :param slogan: The slogan of this School.  # noqa: E501
        :type: list[str]
        """

        self._slogan = slogan

    @property
    def location_city(self):
        """Gets the location_city of this School.  # noqa: E501

        City the thing is located.  # noqa: E501

        :return: The location_city of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._location_city

    @location_city.setter
    def location_city(self, location_city):
        """Sets the location_city of this School.

        City the thing is located.  # noqa: E501

        :param location_city: The location_city of this School.  # noqa: E501
        :type: list[object]
        """

        self._location_city = location_city

    @property
    def school_code(self):
        """Gets the school_code of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The school_code of this School.  # noqa: E501
        :rtype: list[str]
        """
        return self._school_code

    @school_code.setter
    def school_code(self, school_code):
        """Sets the school_code of this School.

        Description not available  # noqa: E501

        :param school_code: The school_code of this School.  # noqa: E501
        :type: list[str]
        """

        self._school_code = school_code

    @property
    def classes(self):
        """Gets the classes of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The classes of this School.  # noqa: E501
        :rtype: list[int]
        """
        return self._classes

    @classes.setter
    def classes(self, classes):
        """Sets the classes of this School.

        Description not available  # noqa: E501

        :param classes: The classes of this School.  # noqa: E501
        :type: list[int]
        """

        self._classes = classes

    @property
    def ideology(self):
        """Gets the ideology of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The ideology of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._ideology

    @ideology.setter
    def ideology(self, ideology):
        """Sets the ideology of this School.

        Description not available  # noqa: E501

        :param ideology: The ideology of this School.  # noqa: E501
        :type: list[object]
        """

        self._ideology = ideology

    @property
    def description(self):
        """Gets the description of this School.  # noqa: E501

        small description  # noqa: E501

        :return: The description of this School.  # noqa: E501
        :rtype: list[str]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this School.

        small description  # noqa: E501

        :param description: The description of this School.  # noqa: E501
        :type: list[str]
        """

        self._description = description

    @property
    def membership(self):
        """Gets the membership of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The membership of this School.  # noqa: E501
        :rtype: list[str]
        """
        return self._membership

    @membership.setter
    def membership(self, membership):
        """Sets the membership of this School.

        Description not available  # noqa: E501

        :param membership: The membership of this School.  # noqa: E501
        :type: list[str]
        """

        self._membership = membership

    @property
    def formation_year(self):
        """Gets the formation_year of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The formation_year of this School.  # noqa: E501
        :rtype: list[str]
        """
        return self._formation_year

    @formation_year.setter
    def formation_year(self, formation_year):
        """Sets the formation_year of this School.

        Description not available  # noqa: E501

        :param formation_year: The formation_year of this School.  # noqa: E501
        :type: list[str]
        """

        self._formation_year = formation_year

    @property
    def principal(self):
        """Gets the principal of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The principal of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._principal

    @principal.setter
    def principal(self, principal):
        """Sets the principal of this School.

        Description not available  # noqa: E501

        :param principal: The principal of this School.  # noqa: E501
        :type: list[object]
        """

        self._principal = principal

    @property
    def junior_season(self):
        """Gets the junior_season of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The junior_season of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._junior_season

    @junior_season.setter
    def junior_season(self, junior_season):
        """Sets the junior_season of this School.

        Description not available  # noqa: E501

        :param junior_season: The junior_season of this School.  # noqa: E501
        :type: list[object]
        """

        self._junior_season = junior_season

    @property
    def head(self):
        """Gets the head of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The head of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._head

    @head.setter
    def head(self, head):
        """Sets the head of this School.

        Description not available  # noqa: E501

        :param head: The head of this School.  # noqa: E501
        :type: list[object]
        """

        self._head = head

    @property
    def chaplain(self):
        """Gets the chaplain of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The chaplain of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._chaplain

    @chaplain.setter
    def chaplain(self, chaplain):
        """Sets the chaplain of this School.

        Description not available  # noqa: E501

        :param chaplain: The chaplain of this School.  # noqa: E501
        :type: list[object]
        """

        self._chaplain = chaplain

    @property
    def administrator(self):
        """Gets the administrator of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The administrator of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._administrator

    @administrator.setter
    def administrator(self, administrator):
        """Sets the administrator of this School.

        Description not available  # noqa: E501

        :param administrator: The administrator of this School.  # noqa: E501
        :type: list[object]
        """

        self._administrator = administrator

    @property
    def extinction_year(self):
        """Gets the extinction_year of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The extinction_year of this School.  # noqa: E501
        :rtype: list[str]
        """
        return self._extinction_year

    @extinction_year.setter
    def extinction_year(self, extinction_year):
        """Sets the extinction_year of this School.

        Description not available  # noqa: E501

        :param extinction_year: The extinction_year of this School.  # noqa: E501
        :type: list[str]
        """

        self._extinction_year = extinction_year

    @property
    def child_organisation(self):
        """Gets the child_organisation of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The child_organisation of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._child_organisation

    @child_organisation.setter
    def child_organisation(self, child_organisation):
        """Sets the child_organisation of this School.

        Description not available  # noqa: E501

        :param child_organisation: The child_organisation of this School.  # noqa: E501
        :type: list[object]
        """

        self._child_organisation = child_organisation

    @property
    def parent_organisation(self):
        """Gets the parent_organisation of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The parent_organisation of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._parent_organisation

    @parent_organisation.setter
    def parent_organisation(self, parent_organisation):
        """Sets the parent_organisation of this School.

        Description not available  # noqa: E501

        :param parent_organisation: The parent_organisation of this School.  # noqa: E501
        :type: list[object]
        """

        self._parent_organisation = parent_organisation

    @property
    def number_of_undergraduate_students(self):
        """Gets the number_of_undergraduate_students of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The number_of_undergraduate_students of this School.  # noqa: E501
        :rtype: list[int]
        """
        return self._number_of_undergraduate_students

    @number_of_undergraduate_students.setter
    def number_of_undergraduate_students(self, number_of_undergraduate_students):
        """Sets the number_of_undergraduate_students of this School.

        Description not available  # noqa: E501

        :param number_of_undergraduate_students: The number_of_undergraduate_students of this School.  # noqa: E501
        :type: list[int]
        """

        self._number_of_undergraduate_students = number_of_undergraduate_students

    @property
    def number_of_staff(self):
        """Gets the number_of_staff of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The number_of_staff of this School.  # noqa: E501
        :rtype: list[int]
        """
        return self._number_of_staff

    @number_of_staff.setter
    def number_of_staff(self, number_of_staff):
        """Sets the number_of_staff of this School.

        Description not available  # noqa: E501

        :param number_of_staff: The number_of_staff of this School.  # noqa: E501
        :type: list[int]
        """

        self._number_of_staff = number_of_staff

    @property
    def hometown(self):
        """Gets the hometown of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The hometown of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._hometown

    @hometown.setter
    def hometown(self, hometown):
        """Sets the hometown of this School.

        Description not available  # noqa: E501

        :param hometown: The hometown of this School.  # noqa: E501
        :type: list[object]
        """

        self._hometown = hometown

    @property
    def custodian(self):
        """Gets the custodian of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The custodian of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._custodian

    @custodian.setter
    def custodian(self, custodian):
        """Sets the custodian of this School.

        Description not available  # noqa: E501

        :param custodian: The custodian of this School.  # noqa: E501
        :type: list[object]
        """

        self._custodian = custodian

    @property
    def bar_pass_rate(self):
        """Gets the bar_pass_rate of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The bar_pass_rate of this School.  # noqa: E501
        :rtype: list[float]
        """
        return self._bar_pass_rate

    @bar_pass_rate.setter
    def bar_pass_rate(self, bar_pass_rate):
        """Sets the bar_pass_rate of this School.

        Description not available  # noqa: E501

        :param bar_pass_rate: The bar_pass_rate of this School.  # noqa: E501
        :type: list[float]
        """

        self._bar_pass_rate = bar_pass_rate

    @property
    def tuition(self):
        """Gets the tuition of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The tuition of this School.  # noqa: E501
        :rtype: list[float]
        """
        return self._tuition

    @tuition.setter
    def tuition(self, tuition):
        """Sets the tuition of this School.

        Description not available  # noqa: E501

        :param tuition: The tuition of this School.  # noqa: E501
        :type: list[float]
        """

        self._tuition = tuition

    @property
    def label(self):
        """Gets the label of this School.  # noqa: E501

        short description of the resource  # noqa: E501

        :return: The label of this School.  # noqa: E501
        :rtype: list[str]
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this School.

        short description of the resource  # noqa: E501

        :param label: The label of this School.  # noqa: E501
        :type: list[str]
        """

        self._label = label

    @property
    def legal_form(self):
        """Gets the legal_form of this School.  # noqa: E501

        There are many types of business entity defined in the legal systems of various countries. These include corporations, cooperatives, partnerships, sole traders, limited liability company and other specialized types of organization.  # noqa: E501

        :return: The legal_form of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._legal_form

    @legal_form.setter
    def legal_form(self, legal_form):
        """Sets the legal_form of this School.

        There are many types of business entity defined in the legal systems of various countries. These include corporations, cooperatives, partnerships, sole traders, limited liability company and other specialized types of organization.  # noqa: E501

        :param legal_form: The legal_form of this School.  # noqa: E501
        :type: list[object]
        """

        self._legal_form = legal_form

    @property
    def headteacher(self):
        """Gets the headteacher of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The headteacher of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._headteacher

    @headteacher.setter
    def headteacher(self, headteacher):
        """Sets the headteacher of this School.

        Description not available  # noqa: E501

        :param headteacher: The headteacher of this School.  # noqa: E501
        :type: list[object]
        """

        self._headteacher = headteacher

    @property
    def testaverage(self):
        """Gets the testaverage of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The testaverage of this School.  # noqa: E501
        :rtype: list[float]
        """
        return self._testaverage

    @testaverage.setter
    def testaverage(self, testaverage):
        """Sets the testaverage of this School.

        Description not available  # noqa: E501

        :param testaverage: The testaverage of this School.  # noqa: E501
        :type: list[float]
        """

        self._testaverage = testaverage

    @property
    def general_council(self):
        """Gets the general_council of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The general_council of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._general_council

    @general_council.setter
    def general_council(self, general_council):
        """Sets the general_council of this School.

        Description not available  # noqa: E501

        :param general_council: The general_council of this School.  # noqa: E501
        :type: list[object]
        """

        self._general_council = general_council

    @property
    def rival(self):
        """Gets the rival of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The rival of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._rival

    @rival.setter
    def rival(self, rival):
        """Sets the rival of this School.

        Description not available  # noqa: E501

        :param rival: The rival of this School.  # noqa: E501
        :type: list[object]
        """

        self._rival = rival

    @property
    def age(self):
        """Gets the age of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The age of this School.  # noqa: E501
        :rtype: list[int]
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this School.

        Description not available  # noqa: E501

        :param age: The age of this School.  # noqa: E501
        :type: list[int]
        """

        self._age = age

    @property
    def main_organ(self):
        """Gets the main_organ of this School.  # noqa: E501

        Description not available  # noqa: E501

        :return: The main_organ of this School.  # noqa: E501
        :rtype: list[object]
        """
        return self._main_organ

    @main_organ.setter
    def main_organ(self, main_organ):
        """Sets the main_organ of this School.

        Description not available  # noqa: E501

        :param main_organ: The main_organ of this School.  # noqa: E501
        :type: list[object]
        """

        self._main_organ = main_organ

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, School):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, School):
            return True

        return self.to_dict() != other.to_dict()
