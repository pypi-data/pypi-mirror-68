# coding: utf-8

"""
    ARLAS persistence API

    persistence REST services

    OpenAPI spec version: 12.0.1
    Contact: contact@gisaia.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Data(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'doc_key': 'str',
        'creation_date': 'datetime',
        'doc_value': 'str',
        'doc_type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'doc_key': 'doc_key',
        'creation_date': 'creation_date',
        'doc_value': 'doc_value',
        'doc_type': 'doc_type'
    }

    def __init__(self, id=None, doc_key=None, creation_date=None, doc_value=None, doc_type=None):
        """
        Data - a model defined in Swagger
        """

        self._id = None
        self._doc_key = None
        self._creation_date = None
        self._doc_value = None
        self._doc_type = None

        if id is not None:
          self.id = id
        self.doc_key = doc_key
        if creation_date is not None:
          self.creation_date = creation_date
        if doc_value is not None:
          self.doc_value = doc_value
        self.doc_type = doc_type

    @property
    def id(self):
        """
        Gets the id of this Data.

        :return: The id of this Data.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Data.

        :param id: The id of this Data.
        :type: str
        """

        self._id = id

    @property
    def doc_key(self):
        """
        Gets the doc_key of this Data.

        :return: The doc_key of this Data.
        :rtype: str
        """
        return self._doc_key

    @doc_key.setter
    def doc_key(self, doc_key):
        """
        Sets the doc_key of this Data.

        :param doc_key: The doc_key of this Data.
        :type: str
        """
        if doc_key is None:
            raise ValueError("Invalid value for `doc_key`, must not be `None`")

        self._doc_key = doc_key

    @property
    def creation_date(self):
        """
        Gets the creation_date of this Data.

        :return: The creation_date of this Data.
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """
        Sets the creation_date of this Data.

        :param creation_date: The creation_date of this Data.
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def doc_value(self):
        """
        Gets the doc_value of this Data.

        :return: The doc_value of this Data.
        :rtype: str
        """
        return self._doc_value

    @doc_value.setter
    def doc_value(self, doc_value):
        """
        Sets the doc_value of this Data.

        :param doc_value: The doc_value of this Data.
        :type: str
        """

        self._doc_value = doc_value

    @property
    def doc_type(self):
        """
        Gets the doc_type of this Data.

        :return: The doc_type of this Data.
        :rtype: str
        """
        return self._doc_type

    @doc_type.setter
    def doc_type(self, doc_type):
        """
        Sets the doc_type of this Data.

        :param doc_type: The doc_type of this Data.
        :type: str
        """
        if doc_type is None:
            raise ValueError("Invalid value for `doc_type`, must not be `None`")

        self._doc_type = doc_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Data):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
