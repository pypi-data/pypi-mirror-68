{"version":3,"file":"chunk.aa241bf0173d55a0bb20.js","sources":["webpack:///./src/dialogs/generic/show-dialog-box.ts","webpack:///./src/components/ha-tab.ts","webpack:///./src/layouts/hass-tabs-subpage.ts","webpack:///src/mwc-fab-base.ts","webpack:///./src/layouts/hass-tabs-subpage-data-table.ts","webpack:///./src/panels/config/users/ha-config-users.ts"],"sourcesContent":["import { TemplateResult } from \"lit-html\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\n\ninterface BaseDialogParams {\n  confirmText?: string;\n  text?: string | TemplateResult;\n  title?: string;\n}\n\nexport interface AlertDialogParams extends BaseDialogParams {\n  confirm?: () => void;\n}\n\nexport interface ConfirmationDialogParams extends BaseDialogParams {\n  dismissText?: string;\n  confirm?: () => void;\n  cancel?: () => void;\n}\n\nexport interface PromptDialogParams extends BaseDialogParams {\n  inputLabel?: string;\n  inputType?: string;\n  defaultValue?: string;\n  confirm?: (out?: string) => void;\n}\n\nexport interface DialogParams\n  extends ConfirmationDialogParams,\n    PromptDialogParams {\n  confirm?: (out?: string) => void;\n  confirmation?: boolean;\n  prompt?: boolean;\n}\n\nexport const loadGenericDialog = () =>\n  import(/* webpackChunkName: \"confirmation\" */ \"./dialog-box\");\n\nconst showDialogHelper = (\n  element: HTMLElement,\n  dialogParams: DialogParams,\n  extra?: {\n    confirmation?: DialogParams[\"confirmation\"];\n    prompt?: DialogParams[\"prompt\"];\n  }\n) =>\n  new Promise((resolve) => {\n    const origCancel = dialogParams.cancel;\n    const origConfirm = dialogParams.confirm;\n\n    fireEvent(element, \"show-dialog\", {\n      dialogTag: \"dialog-box\",\n      dialogImport: loadGenericDialog,\n      dialogParams: {\n        ...dialogParams,\n        ...extra,\n        cancel: () => {\n          resolve(extra?.prompt ? null : false);\n          if (origCancel) {\n            origCancel();\n          }\n        },\n        confirm: (out) => {\n          resolve(extra?.prompt ? out : true);\n          if (origConfirm) {\n            origConfirm(out);\n          }\n        },\n      },\n    });\n  });\n\nexport const showAlertDialog = (\n  element: HTMLElement,\n  dialogParams: AlertDialogParams\n) => showDialogHelper(element, dialogParams);\n\nexport const showConfirmationDialog = (\n  element: HTMLElement,\n  dialogParams: ConfirmationDialogParams\n) =>\n  showDialogHelper(element, dialogParams, { confirmation: true }) as Promise<\n    boolean\n  >;\n\nexport const showPromptDialog = (\n  element: HTMLElement,\n  dialogParams: PromptDialogParams\n) =>\n  showDialogHelper(element, dialogParams, { prompt: true }) as Promise<\n    null | string\n  >;\n","import {\n  css,\n  CSSResult,\n  customElement,\n  LitElement,\n  property,\n  TemplateResult,\n  html,\n  queryAsync,\n  internalProperty,\n  eventOptions,\n} from \"lit-element\";\nimport \"@material/mwc-ripple/mwc-ripple\";\nimport type { Ripple } from \"@material/mwc-ripple\";\nimport { RippleHandlers } from \"@material/mwc-ripple/ripple-handlers\";\nimport \"./ha-icon\";\nimport \"./ha-svg-icon\";\nimport { ifDefined } from \"lit-html/directives/if-defined\";\n\n@customElement(\"ha-tab\")\nexport class HaTab extends LitElement {\n  @property({ type: Boolean, reflect: true }) public active = false;\n\n  @property({ type: Boolean, reflect: true }) public narrow = false;\n\n  @property() public name?: string;\n\n  @queryAsync(\"mwc-ripple\") private _ripple!: Promise<Ripple | null>;\n\n  @internalProperty() private _shouldRenderRipple = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <div\n        tabindex=\"0\"\n        role=\"tab\"\n        aria-selected=${this.active}\n        aria-label=${ifDefined(this.name)}\n        @focus=${this.handleRippleFocus}\n        @blur=${this.handleRippleBlur}\n        @mousedown=${this.handleRippleActivate}\n        @mouseup=${this.handleRippleDeactivate}\n        @mouseenter=${this.handleRippleMouseEnter}\n        @mouseleave=${this.handleRippleMouseLeave}\n        @touchstart=${this.handleRippleActivate}\n        @touchend=${this.handleRippleDeactivate}\n        @touchcancel=${this.handleRippleDeactivate}\n        @keydown=${this._handleKeyDown}\n      >\n        ${this.narrow ? html`<slot name=\"icon\"></slot>` : \"\"}\n        ${!this.narrow || this.active\n          ? html`<span class=\"name\">${this.name}</span>`\n          : \"\"}\n        ${this._shouldRenderRipple ? html`<mwc-ripple></mwc-ripple>` : \"\"}\n      </div>\n    `;\n  }\n\n  private _rippleHandlers: RippleHandlers = new RippleHandlers(() => {\n    this._shouldRenderRipple = true;\n    return this._ripple;\n  });\n\n  private _handleKeyDown(ev: KeyboardEvent): void {\n    if (ev.keyCode === 13) {\n      (ev.target as HTMLElement).click();\n    }\n  }\n\n  @eventOptions({ passive: true })\n  private handleRippleActivate(evt?: Event) {\n    this._rippleHandlers.startPress(evt);\n  }\n\n  private handleRippleDeactivate() {\n    this._rippleHandlers.endPress();\n  }\n\n  private handleRippleMouseEnter() {\n    this._rippleHandlers.startHover();\n  }\n\n  private handleRippleMouseLeave() {\n    this._rippleHandlers.endHover();\n  }\n\n  private handleRippleFocus() {\n    this._rippleHandlers.startFocus();\n  }\n\n  private handleRippleBlur() {\n    this._rippleHandlers.endFocus();\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      div {\n        padding: 0 32px;\n        display: flex;\n        flex-direction: column;\n        text-align: center;\n        align-items: center;\n        justify-content: center;\n        height: 64px;\n        cursor: pointer;\n        position: relative;\n        outline: none;\n        box-sizing: border-box;\n      }\n\n      .name {\n        white-space: nowrap;\n      }\n\n      :host([active]) {\n        color: var(--primary-color);\n      }\n\n      :host(:not([narrow])[active]) div {\n        border-bottom: 2px solid var(--primary-color);\n      }\n\n      :host([narrow]) {\n        padding: 0 16px;\n        width: 20%;\n        min-width: 0;\n      }\n    `;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-tab\": HaTab;\n  }\n}\n","import \"@material/mwc-ripple\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  PropertyValues,\n  TemplateResult,\n} from \"lit-element\";\nimport { classMap } from \"lit-html/directives/class-map\";\nimport memoizeOne from \"memoize-one\";\nimport { isComponentLoaded } from \"../common/config/is_component_loaded\";\nimport { navigate } from \"../common/navigate\";\nimport \"../components/ha-menu-button\";\nimport \"../components/ha-icon-button-arrow-prev\";\nimport { HomeAssistant, Route } from \"../types\";\nimport \"../components/ha-svg-icon\";\nimport \"../components/ha-icon\";\nimport \"../components/ha-tab\";\n\nexport interface PageNavigation {\n  path: string;\n  translationKey?: string;\n  component?: string;\n  name?: string;\n  core?: boolean;\n  advancedOnly?: boolean;\n  icon?: string;\n  iconPath?: string;\n  info?: any;\n}\n\n@customElement(\"hass-tabs-subpage\")\nclass HassTabsSubpage extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public hassio = false;\n\n  @property({ type: String, attribute: \"back-path\" }) public backPath?: string;\n\n  @property() public backCallback?: () => void;\n\n  @property({ type: Boolean, attribute: \"main-page\" }) public mainPage = false;\n\n  @property() public route!: Route;\n\n  @property() public tabs!: PageNavigation[];\n\n  @property({ type: Boolean, reflect: true }) public narrow = false;\n\n  @property() private _activeTab?: PageNavigation;\n\n  private _getTabs = memoizeOne(\n    (\n      tabs: PageNavigation[],\n      activeTab: PageNavigation | undefined,\n      showAdvanced: boolean | undefined,\n      _components,\n      _language,\n      _narrow\n    ) => {\n      const shownTabs = tabs.filter(\n        (page) =>\n          (!page.component ||\n            page.core ||\n            isComponentLoaded(this.hass, page.component)) &&\n          (!page.advancedOnly || showAdvanced)\n      );\n\n      return shownTabs.map(\n        (page) =>\n          html`\n            <ha-tab\n              .hass=${this.hass}\n              @click=${this._tabTapped}\n              .path=${page.path}\n              .active=${page === activeTab}\n              .narrow=${this.narrow}\n              .name=${page.translationKey\n                ? this.hass.localize(page.translationKey)\n                : page.name}\n            >\n              ${page.iconPath\n                ? html`<ha-svg-icon\n                    slot=\"icon\"\n                    .path=${page.iconPath}\n                  ></ha-svg-icon>`\n                : html`<ha-icon slot=\"icon\" .icon=${page.icon}></ha-icon>`}\n            </ha-tab>\n          `\n      );\n    }\n  );\n\n  protected updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (changedProperties.has(\"route\")) {\n      this._activeTab = this.tabs.find((tab) =>\n        `${this.route.prefix}${this.route.path}`.includes(tab.path)\n      );\n    }\n  }\n\n  protected render(): TemplateResult {\n    const tabs = this._getTabs(\n      this.tabs,\n      this._activeTab,\n      this.hass.userData?.showAdvanced,\n      this.hass.config.components,\n      this.hass.language,\n      this.narrow\n    );\n\n    return html`\n      <div class=\"toolbar\">\n        ${this.mainPage\n          ? html`\n              <ha-menu-button\n                .hassio=${this.hassio}\n                .hass=${this.hass}\n                .narrow=${this.narrow}\n              ></ha-menu-button>\n            `\n          : html`\n              <ha-icon-button-arrow-prev\n                aria-label=\"Back\"\n                @click=${this._backTapped}\n              ></ha-icon-button-arrow-prev>\n            `}\n        ${this.narrow\n          ? html` <div class=\"main-title\"><slot name=\"header\"></slot></div> `\n          : \"\"}\n        ${tabs.length > 1 || !this.narrow\n          ? html`\n              <div id=\"tabbar\" class=${classMap({ \"bottom-bar\": this.narrow })}>\n                ${tabs}\n              </div>\n            `\n          : \"\"}\n        <div id=\"toolbar-icon\">\n          <slot name=\"toolbar-icon\"></slot>\n        </div>\n      </div>\n      <div class=\"content\">\n        <slot></slot>\n      </div>\n    `;\n  }\n\n  private _tabTapped(ev: Event): void {\n    navigate(this, (ev.currentTarget as any).path, true);\n  }\n\n  private _backTapped(): void {\n    if (this.backPath) {\n      navigate(this, this.backPath);\n      return;\n    }\n    if (this.backCallback) {\n      this.backCallback();\n      return;\n    }\n    history.back();\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        display: block;\n        height: 100%;\n        background-color: var(--primary-background-color);\n      }\n\n      ha-menu-button {\n        margin-right: 24px;\n      }\n\n      .toolbar {\n        display: flex;\n        align-items: center;\n        font-size: 20px;\n        height: 65px;\n        background-color: var(--sidebar-background-color);\n        font-weight: 400;\n        color: var(--sidebar-text-color);\n        border-bottom: 1px solid var(--divider-color);\n        padding: 0 16px;\n        box-sizing: border-box;\n      }\n\n      #tabbar {\n        display: flex;\n        font-size: 14px;\n      }\n\n      #tabbar.bottom-bar {\n        position: absolute;\n        bottom: 0;\n        left: 0;\n        padding: 0 16px;\n        box-sizing: border-box;\n        background-color: var(--sidebar-background-color);\n        border-top: 1px solid var(--divider-color);\n        justify-content: space-between;\n        z-index: 1;\n        font-size: 12px;\n        width: 100%;\n      }\n\n      #tabbar:not(.bottom-bar) {\n        flex: 1;\n        justify-content: center;\n      }\n\n      :host(:not([narrow])) #toolbar-icon {\n        min-width: 40px;\n      }\n\n      ha-menu-button,\n      ha-icon-button-arrow-prev,\n      ::slotted([slot=\"toolbar-icon\"]) {\n        flex-shrink: 0;\n        pointer-events: auto;\n        color: var(--sidebar-icon-color);\n      }\n\n      .main-title {\n        flex: 1;\n        overflow: hidden;\n        text-overflow: ellipsis;\n        max-height: 40px;\n        line-height: 20px;\n      }\n\n      .content {\n        position: relative;\n        width: 100%;\n        height: calc(100% - 65px);\n        overflow-y: auto;\n        overflow: auto;\n        -webkit-overflow-scrolling: touch;\n      }\n\n      :host([narrow]) .content {\n        height: calc(100% - 128px);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hass-tabs-subpage\": HassTabsSubpage;\n  }\n}\n","/**\n@license\nCopyright 2018 Google Inc. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport {ripple} from '@material/mwc-ripple/ripple-directive.js';\nimport {html, LitElement, property, TemplateResult} from 'lit-element';\nimport {classMap} from 'lit-html/directives/class-map.js';\n\nexport class FabBase extends LitElement {\n  @property({type: Boolean}) mini = false;\n\n  @property({type: Boolean}) exited = false;\n\n  @property({type: Boolean}) disabled = false;\n\n  @property({type: Boolean}) extended = false;\n\n  @property({type: Boolean}) showIconAtEnd = false;\n\n  @property() icon = '';\n\n  @property() label = '';\n\n  protected createRenderRoot() {\n    return this.attachShadow({mode: 'open', delegatesFocus: true});\n  }\n\n  protected render() {\n    const classes = {\n      'mdc-fab--mini': this.mini,\n      'mdc-fab--exited': this.exited,\n      'mdc-fab--extended': this.extended,\n      'icon-end': this.showIconAtEnd,\n    };\n    const showLabel = this.label !== '' && this.extended;\n\n    let iconTemplate: TemplateResult|string = '';\n\n    if (this.icon) {\n      iconTemplate = html`\n        <span class=\"material-icons mdc-fab__icon\">${this.icon}</span>`;\n    }\n\n    let label = html``;\n\n    if (showLabel) {\n      label = html`<span class=\"mdc-fab__label\">${this.label}</span>`;\n    }\n\n    return html`\n      <button\n          class=\"mdc-fab ${classMap(classes)}\"\n          ?disabled=\"${this.disabled}\"\n          aria-label=\"${this.label || this.icon}\"\n          .ripple=\"${ripple()}\">\n        <div class=\"mdc-fab__ripple\"></div>\n        ${this.showIconAtEnd ? label : ''}\n        <slot name=\"icon\">\n          ${iconTemplate}\n        </slot>\n        ${!this.showIconAtEnd ? label : ''}\n      </button>`;\n  }\n}\n","import \"@material/mwc-button/mwc-button\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  query,\n  TemplateResult,\n} from \"lit-element\";\nimport { navigate } from \"../common/navigate\";\nimport \"../components/data-table/ha-data-table\";\nimport type {\n  DataTableColumnContainer,\n  DataTableRowData,\n  HaDataTable,\n} from \"../components/data-table/ha-data-table\";\nimport type { HomeAssistant, Route } from \"../types\";\nimport \"./hass-tabs-subpage\";\nimport type { PageNavigation } from \"./hass-tabs-subpage\";\n\n@customElement(\"hass-tabs-subpage-data-table\")\nexport class HaTabsSubpageDataTable extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public isWide!: boolean;\n\n  @property({ type: Boolean, reflect: true }) public narrow!: boolean;\n\n  /**\n   * Object with the columns.\n   * @type {Object}\n   */\n  @property({ type: Object }) public columns: DataTableColumnContainer = {};\n\n  /**\n   * Data to show in the table.\n   * @type {Array}\n   */\n  @property({ type: Array }) public data: DataTableRowData[] = [];\n\n  /**\n   * Should rows be selectable.\n   * @type {Boolean}\n   */\n  @property({ type: Boolean }) public selectable = false;\n\n  /**\n   * Do we need to add padding for a fab.\n   * @type {Boolean}\n   */\n  @property({ type: Boolean }) public hasFab = false;\n\n  /**\n   * Field with a unique id per entry in data.\n   * @type {String}\n   */\n  @property({ type: String }) public id = \"id\";\n\n  /**\n   * String to filter the data in the data table on.\n   * @type {String}\n   */\n  @property({ type: String }) public filter = \"\";\n\n  /**\n   * List of strings that show what the data is currently filtered by.\n   * @type {Array}\n   */\n  @property({ type: Array }) public activeFilters?;\n\n  /**\n   * What path to use when the back button is pressed.\n   * @type {String}\n   * @attr back-path\n   */\n  @property({ type: String, attribute: \"back-path\" }) public backPath?: string;\n\n  /**\n   * Function to call when the back button is pressed.\n   * @type {() => void}\n   */\n  @property() public backCallback?: () => void;\n\n  /**\n   * String to show when there are no records in the data table.\n   * @type {String}\n   */\n  @property({ type: String }) public noDataText?: string;\n\n  @property() public route!: Route;\n\n  /**\n   * Array of tabs to show on the page.\n   * @type {Array}\n   */\n  @property() public tabs!: PageNavigation[];\n\n  @query(\"ha-data-table\") private _dataTable!: HaDataTable;\n\n  public clearSelection() {\n    this._dataTable.clearSelection();\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-tabs-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .backPath=${this.backPath}\n        .backCallback=${this.backCallback}\n        .route=${this.route}\n        .tabs=${this.tabs}\n      >\n        <div slot=\"toolbar-icon\"><slot name=\"toolbar-icon\"></slot></div>\n        ${this.narrow\n          ? html`\n              <div slot=\"header\">\n                <slot name=\"header\">\n                  <div class=\"search-toolbar\">\n                    <search-input\n                      .filter=${this.filter}\n                      class=\"header\"\n                      no-label-float\n                      no-underline\n                      @value-changed=${this._handleSearchChange}\n                    ></search-input>\n                    ${this.activeFilters\n                      ? html`<div class=\"active-filters\">\n                          <div>\n                            <ha-icon icon=\"hass:filter-variant\"></ha-icon>\n                            <paper-tooltip position=\"left\">\n                              ${this.hass.localize(\n                                \"ui.panel.config.filtering.filtering_by\"\n                              )}\n                              ${this.activeFilters.join(\", \")}\n                            </paper-tooltip>\n                          </div>\n                          <mwc-button @click=${this._clearFilter}\n                            >${this.hass.localize(\n                              \"ui.panel.config.filtering.clear\"\n                            )}</mwc-button\n                          >\n                        </div>`\n                      : \"\"}\n                  </div>\n                </slot>\n              </div>\n            `\n          : \"\"}\n        <ha-data-table\n          .columns=${this.columns}\n          .data=${this.data}\n          .filter=${this.filter}\n          .selectable=${this.selectable}\n          .hasFab=${this.hasFab}\n          .id=${this.id}\n          .noDataText=${this.noDataText}\n        >\n          ${!this.narrow\n            ? html`\n                <div slot=\"header\">\n                  <slot name=\"header\">\n                    <slot name=\"header\">\n                      <div class=\"table-header\">\n                        <search-input\n                          .filter=${this.filter}\n                          no-label-float\n                          no-underline\n                          @value-changed=${this._handleSearchChange}\n                        >\n                        </search-input>\n                        ${this.activeFilters\n                          ? html`<div class=\"active-filters\">\n                              ${this.hass.localize(\n                                \"ui.panel.config.filtering.filtering_by\"\n                              )}\n                              ${this.activeFilters.join(\", \")}\n                              <mwc-button @click=${this._clearFilter}\n                                >${this.hass.localize(\n                                  \"ui.panel.config.filtering.clear\"\n                                )}</mwc-button\n                              >\n                            </div>`\n                          : \"\"}\n                      </div></slot\n                    ></slot\n                  >\n                </div>\n              `\n            : html` <div slot=\"header\"></div> `}\n        </ha-data-table>\n      </hass-tabs-subpage>\n    `;\n  }\n\n  private _handleSearchChange(ev: CustomEvent) {\n    this.filter = ev.detail.value;\n  }\n\n  private _clearFilter() {\n    navigate(this, window.location.pathname);\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      ha-data-table {\n        width: 100%;\n        height: 100%;\n        --data-table-border-width: 0;\n      }\n      :host(:not([narrow])) ha-data-table {\n        height: calc(100vh - 65px);\n        display: block;\n      }\n      .table-header {\n        border-bottom: 1px solid rgba(var(--rgb-primary-text-color), 0.12);\n        padding: 0 16px;\n        display: flex;\n        align-items: center;\n      }\n      .search-toolbar {\n        display: flex;\n        align-items: center;\n        color: var(--secondary-text-color);\n        padding: 0 16px;\n      }\n      search-input {\n        position: relative;\n        top: 2px;\n        flex-grow: 1;\n      }\n      search-input.header {\n        left: -8px;\n        top: -7px;\n      }\n      .active-filters {\n        color: var(--primary-text-color);\n        position: relative;\n        display: flex;\n        align-items: center;\n        padding: 2px 2px 2px 8px;\n        margin-left: 4px;\n        font-size: 14px;\n      }\n      .active-filters ha-icon {\n        color: var(--primary-color);\n      }\n      .active-filters mwc-button {\n        margin-left: 8px;\n      }\n      .active-filters::before {\n        background-color: var(--primary-color);\n        opacity: 0.12;\n        border-radius: 4px;\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n        content: \"\";\n      }\n      .search-toolbar .active-filters {\n        top: -8px;\n        right: -16px;\n      }\n    `;\n  }\n}\n","import {\n  css,\n  customElement,\n  LitElement,\n  property,\n  PropertyValues,\n} from \"lit-element\";\nimport { html } from \"lit-html\";\nimport memoizeOne from \"memoize-one\";\nimport { HASSDomEvent } from \"../../../common/dom/fire_event\";\nimport { computeRTL } from \"../../../common/util/compute_rtl\";\nimport {\n  DataTableColumnContainer,\n  RowClickedEvent,\n} from \"../../../components/data-table/ha-data-table\";\nimport \"@material/mwc-fab\";\nimport { deleteUser, fetchUsers, updateUser, User } from \"../../../data/user\";\nimport { showConfirmationDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport \"../../../layouts/hass-tabs-subpage-data-table\";\nimport { HomeAssistant, Route } from \"../../../types\";\nimport { configSections } from \"../ha-panel-config\";\nimport { showAddUserDialog } from \"./show-dialog-add-user\";\nimport { showUserDetailDialog } from \"./show-dialog-user-detail\";\nimport \"../../../components/ha-svg-icon\";\nimport { mdiPlus } from \"@mdi/js\";\n\n@customElement(\"ha-config-users\")\nexport class HaConfigUsers extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public _users: User[] = [];\n\n  @property() public isWide!: boolean;\n\n  @property() public narrow!: boolean;\n\n  @property() public route!: Route;\n\n  private _columns = memoizeOne(\n    (_language): DataTableColumnContainer => {\n      return {\n        name: {\n          title: this.hass.localize(\n            \"ui.panel.config.users.picker.headers.name\"\n          ),\n          sortable: true,\n          filterable: true,\n          direction: \"asc\",\n          grows: true,\n          template: (name) => html`\n            ${name ||\n            this.hass!.localize(\"ui.panel.config.users.editor.unnamed_user\")}\n          `,\n        },\n        group_ids: {\n          title: this.hass.localize(\n            \"ui.panel.config.users.picker.headers.group\"\n          ),\n          sortable: true,\n          filterable: true,\n          width: \"25%\",\n          template: (groupIds) => html`\n            ${this.hass.localize(`groups.${groupIds[0]}`)}\n          `,\n        },\n        system_generated: {\n          title: this.hass.localize(\n            \"ui.panel.config.users.picker.headers.system\"\n          ),\n          type: \"icon\",\n          sortable: true,\n          filterable: true,\n          template: (generated) => html`\n            ${generated\n              ? html` <ha-icon icon=\"hass:check-circle-outline\"></ha-icon> `\n              : \"\"}\n          `,\n        },\n      };\n    }\n  );\n\n  protected firstUpdated(changedProperties: PropertyValues) {\n    super.firstUpdated(changedProperties);\n    this._fetchUsers();\n  }\n\n  protected render() {\n    return html`\n      <hass-tabs-subpage-data-table\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .route=${this.route}\n        backPath=\"/config\"\n        .tabs=${configSections.persons}\n        .columns=${this._columns(this.hass.language)}\n        .data=${this._users}\n        @row-click=${this._editUser}\n        hasFab\n      >\n      </hass-tabs-subpage-data-table>\n      <mwc-fab\n        ?is-wide=${this.isWide}\n        ?narrow=${this.narrow}\n        .title=${this.hass.localize(\"ui.panel.config.users.picker.add_user\")}\n        @click=${this._addUser}\n        ?rtl=${computeRTL(this.hass)}\n      >\n        <ha-svg-icon slot=\"icon\" path=${mdiPlus}></ha-svg-icon>\n      </mwc-fab>\n    `;\n  }\n\n  private async _fetchUsers() {\n    this._users = await fetchUsers(this.hass);\n  }\n\n  private _editUser(ev: HASSDomEvent<RowClickedEvent>) {\n    const id = ev.detail.id;\n    const entry = this._users.find((user) => user.id === id);\n\n    if (!entry) {\n      return;\n    }\n\n    showUserDetailDialog(this, {\n      entry,\n      updateEntry: async (values) => {\n        const updated = await updateUser(this.hass!, entry!.id, values);\n        this._users = this._users!.map((ent) =>\n          ent === entry ? updated.user : ent\n        );\n      },\n      removeEntry: async () => {\n        if (\n          !(await showConfirmationDialog(this, {\n            title: this.hass!.localize(\n              \"ui.panel.config.users.editor.confirm_user_deletion\",\n              \"name\",\n              entry.name\n            ),\n            dismissText: this.hass!.localize(\"ui.common.no\"),\n            confirmText: this.hass!.localize(\"ui.common.yes\"),\n          }))\n        ) {\n          return false;\n        }\n\n        try {\n          await deleteUser(this.hass!, entry!.id);\n          this._users = this._users!.filter((ent) => ent !== entry);\n          return true;\n        } catch (err) {\n          return false;\n        }\n      },\n    });\n  }\n\n  private _addUser() {\n    showAddUserDialog(this, {\n      userAddedCallback: async (user: User) => {\n        if (user) {\n          this._users = [...this._users, user];\n        }\n      },\n    });\n  }\n\n  static get styles() {\n    return css`\n      mwc-fab {\n        position: fixed;\n        bottom: 16px;\n        right: 16px;\n        z-index: 1;\n      }\n      mwc-fab[is-wide] {\n        bottom: 24px;\n        right: 24px;\n      }\n      mwc-fab[rtl] {\n        right: auto;\n        left: 16px;\n      }\n      mwc-fab[narrow] {\n        bottom: 84px;\n      }\n      mwc-fab[rtl][is-wide] {\n        bottom: 24px;\n        right: auto;\n        left: 24px;\n      }\n    `;\n  }\n}\n"],"mappings":";AACA;;;;ACmCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAGA;;AAjCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;ACuDA;AACA;AACA;AACA;AACA;AACA;;AAIA;;AAGA;AAEA;;AAOA;;AAqBA;;AAGA;AACA;AACA;;AAGA;;;AAGA;;;AAGA;AAGA;AAEA;AACA;;AAGA;;;;;;;;AAWA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AApHA;ACiBA;;AAWA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AAnDA;;ACwFA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;;;;AAMA;;;;AAIA;;AAEA;;;;AAKA;AAGA;;;AAGA;AACA;;AAKA;;;;AAKA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;AAOA;;;AAGA;;;AAGA;AAEA;AAGA;AACA;AACA;;AAKA;;;;;;;;AAlKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AC0BA;AAIA;AAQA;AAGA;AAQA;AA9CA;;AA+DA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;;AAEA;;AAjFA;;;;;;;;;;;;;;;;;;;;;;;AAAA","sourceRoot":""}