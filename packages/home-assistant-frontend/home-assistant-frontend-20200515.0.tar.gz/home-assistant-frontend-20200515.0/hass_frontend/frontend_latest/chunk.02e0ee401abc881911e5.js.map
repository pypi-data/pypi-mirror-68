{"version":3,"file":"chunk.02e0ee401abc881911e5.js","sources":["webpack:///./src/common/const.ts","webpack:///./src/panels/config/zha/zha-groups-data-table.ts","webpack:///./src/panels/config/zha/zha-groups-dashboard.ts"],"sourcesContent":["/** Constants to be used in the frontend. */\n\n// Constants should be alphabetically sorted by name.\n// Arrays with values should be alphabetically sorted if order doesn't matter.\n// Each constant should have a description what it is supposed to be used for.\n\n/** Icon to use when no icon specified for domain. */\nexport const DEFAULT_DOMAIN_ICON = \"hass:bookmark\";\n\n/** Domains that have a state card. */\nexport const DOMAINS_WITH_CARD = [\n  \"climate\",\n  \"cover\",\n  \"configurator\",\n  \"input_select\",\n  \"input_number\",\n  \"input_text\",\n  \"lock\",\n  \"media_player\",\n  \"scene\",\n  \"script\",\n  \"timer\",\n  \"vacuum\",\n  \"water_heater\",\n  \"weblink\",\n];\n\n/** Domains with separate more info dialog. */\nexport const DOMAINS_WITH_MORE_INFO = [\n  \"alarm_control_panel\",\n  \"automation\",\n  \"camera\",\n  \"climate\",\n  \"configurator\",\n  \"counter\",\n  \"cover\",\n  \"fan\",\n  \"group\",\n  \"history_graph\",\n  \"input_datetime\",\n  \"light\",\n  \"lock\",\n  \"media_player\",\n  \"person\",\n  \"script\",\n  \"sun\",\n  \"timer\",\n  \"updater\",\n  \"vacuum\",\n  \"water_heater\",\n  \"weather\",\n];\n\n/** Domains that show no more info dialog. */\nexport const DOMAINS_HIDE_MORE_INFO = [\n  \"input_number\",\n  \"input_select\",\n  \"input_text\",\n  \"scene\",\n  \"weblink\",\n];\n\n/** Domains that should have the history hidden in the more info dialog. */\nexport const DOMAINS_MORE_INFO_NO_HISTORY = [\n  \"camera\",\n  \"configurator\",\n  \"history_graph\",\n  \"scene\",\n];\n\n/** States that we consider \"off\". */\nexport const STATES_OFF = [\"closed\", \"locked\", \"off\"];\n\n/** Domains where we allow toggle in Lovelace. */\nexport const DOMAINS_TOGGLE = new Set([\n  \"fan\",\n  \"input_boolean\",\n  \"light\",\n  \"switch\",\n  \"group\",\n  \"automation\",\n]);\n\n/** Temperature units. */\nexport const UNIT_C = \"°C\";\nexport const UNIT_F = \"°F\";\n\n/** Entity ID of the default view. */\nexport const DEFAULT_VIEW_ENTITY_ID = \"group.default_view\";\n\n/** HA Color Pallete. */\nexport const HA_COLOR_PALETTE = [\n  \"ff0029\",\n  \"66a61e\",\n  \"377eb8\",\n  \"984ea3\",\n  \"00d2d5\",\n  \"ff7f00\",\n  \"af8d00\",\n  \"7f80cd\",\n  \"b3e900\",\n  \"c42e60\",\n  \"a65628\",\n  \"f781bf\",\n  \"8dd3c7\",\n  \"bebada\",\n  \"fb8072\",\n  \"80b1d3\",\n  \"fdb462\",\n  \"fccde5\",\n  \"bc80bd\",\n  \"ffed6f\",\n  \"c4eaff\",\n  \"cf8c00\",\n  \"1b9e77\",\n  \"d95f02\",\n  \"e7298a\",\n  \"e6ab02\",\n  \"a6761d\",\n  \"0097ff\",\n  \"00d067\",\n  \"f43600\",\n  \"4ba93b\",\n  \"5779bb\",\n  \"927acc\",\n  \"97ee3f\",\n  \"bf3947\",\n  \"9f5b00\",\n  \"f48758\",\n  \"8caed6\",\n  \"f2b94f\",\n  \"eff26e\",\n  \"e43872\",\n  \"d9b100\",\n  \"9d7a00\",\n  \"698cff\",\n  \"d9d9d9\",\n  \"00d27e\",\n  \"d06800\",\n  \"009f82\",\n  \"c49200\",\n  \"cbe8ff\",\n  \"fecddf\",\n  \"c27eb6\",\n  \"8cd2ce\",\n  \"c4b8d9\",\n  \"f883b0\",\n  \"a49100\",\n  \"f48800\",\n  \"27d0df\",\n  \"a04a9b\",\n];\n","import {\n  customElement,\n  html,\n  LitElement,\n  property,\n  query,\n  TemplateResult,\n} from \"lit-element\";\nimport memoizeOne from \"memoize-one\";\nimport { navigate } from \"../../../common/navigate\";\nimport \"../../../components/data-table/ha-data-table\";\nimport type {\n  DataTableColumnContainer,\n  HaDataTable,\n} from \"../../../components/data-table/ha-data-table\";\nimport \"../../../components/entity/ha-state-icon\";\nimport type { ZHADevice, ZHAGroup } from \"../../../data/zha\";\nimport type { HomeAssistant } from \"../../../types\";\nimport { formatAsPaddedHex } from \"./functions\";\n\nexport interface GroupRowData extends ZHAGroup {\n  group?: GroupRowData;\n  id?: string;\n}\n\n@customElement(\"zha-groups-data-table\")\nexport class ZHAGroupsDataTable extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public narrow = false;\n\n  @property() public groups: ZHAGroup[] = [];\n\n  @property() public selectable = false;\n\n  @query(\"ha-data-table\") private _dataTable!: HaDataTable;\n\n  private _groups = memoizeOne((groups: ZHAGroup[]) => {\n    let outputGroups: GroupRowData[] = groups;\n\n    outputGroups = outputGroups.map((group) => {\n      return {\n        ...group,\n        id: String(group.group_id),\n      };\n    });\n\n    return outputGroups;\n  });\n\n  private _columns = memoizeOne(\n    (narrow: boolean): DataTableColumnContainer =>\n      narrow\n        ? {\n            name: {\n              title: \"Group\",\n              sortable: true,\n              filterable: true,\n              direction: \"asc\",\n              grows: true,\n              template: (name) => html`\n                <div @click=${this._handleRowClicked} style=\"cursor: pointer;\">\n                  ${name}\n                </div>\n              `,\n            },\n          }\n        : {\n            name: {\n              title: this.hass.localize(\"ui.panel.config.zha.groups.groups\"),\n              sortable: true,\n              filterable: true,\n              direction: \"asc\",\n              grows: true,\n              template: (name) => html`\n                <div @click=${this._handleRowClicked} style=\"cursor: pointer;\">\n                  ${name}\n                </div>\n              `,\n            },\n            group_id: {\n              title: this.hass.localize(\"ui.panel.config.zha.groups.group_id\"),\n              type: \"numeric\",\n              width: \"15%\",\n              template: (groupId: number) => {\n                return html` ${formatAsPaddedHex(groupId)} `;\n              },\n              sortable: true,\n            },\n            members: {\n              title: this.hass.localize(\"ui.panel.config.zha.groups.members\"),\n              type: \"numeric\",\n              width: \"15%\",\n              template: (members: ZHADevice[]) => {\n                return html` ${members.length} `;\n              },\n              sortable: true,\n            },\n          }\n  );\n\n  public clearSelection() {\n    this._dataTable.clearSelection();\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-data-table\n        .columns=${this._columns(this.narrow)}\n        .data=${this._groups(this.groups)}\n        .selectable=${this.selectable}\n        auto-height\n      ></ha-data-table>\n    `;\n  }\n\n  private _handleRowClicked(ev: CustomEvent) {\n    const groupId = ((ev.target as HTMLElement).closest(\n      \".mdc-data-table__row\"\n    ) as any).rowId;\n    navigate(this, `/config/zha/group/${groupId}`);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"zha-groups-data-table\": ZHAGroupsDataTable;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"../../../components/ha-icon-button\";\nimport \"@polymer/paper-spinner/paper-spinner\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  PropertyValues,\n  TemplateResult,\n} from \"lit-element\";\nimport { HASSDomEvent } from \"../../../common/dom/fire_event\";\nimport { navigate } from \"../../../common/navigate\";\nimport { SelectionChangedEvent } from \"../../../components/data-table/ha-data-table\";\nimport { fetchGroups, removeGroups, ZHAGroup } from \"../../../data/zha\";\nimport \"../../../layouts/hass-subpage\";\nimport { HomeAssistant } from \"../../../types\";\nimport { sortZHAGroups } from \"./functions\";\nimport \"./zha-groups-data-table\";\n\n@customElement(\"zha-groups-dashboard\")\nexport class ZHAGroupsDashboard extends LitElement {\n  @property() public hass!: HomeAssistant;\n\n  @property() public narrow = false;\n\n  @property() public _groups?: ZHAGroup[];\n\n  @property() private _processingRemove = false;\n\n  @property() private _selectedGroupsToRemove: number[] = [];\n\n  private _firstUpdatedCalled = false;\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n    if (this.hass && this._firstUpdatedCalled) {\n      this._fetchGroups();\n    }\n  }\n\n  protected firstUpdated(changedProperties: PropertyValues): void {\n    super.firstUpdated(changedProperties);\n    if (this.hass) {\n      this._fetchGroups();\n    }\n    this._firstUpdatedCalled = true;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-subpage\n        .header=${this.hass!.localize(\n          \"ui.panel.config.zha.groups.groups-header\"\n        )}\n      >\n        <ha-icon-button\n          slot=\"toolbar-icon\"\n          icon=\"hass:plus\"\n          @click=${this._addGroup}\n        ></ha-icon-button>\n\n        <div class=\"content\">\n          ${this._groups\n            ? html`\n                <zha-groups-data-table\n                  .hass=${this.hass}\n                  .narrow=${this.narrow}\n                  .groups=${this._groups}\n                  .selectable=${true}\n                  @selection-changed=${this._handleRemoveSelectionChanged}\n                  class=\"table\"\n                ></zha-groups-data-table>\n              `\n            : html`\n                <paper-spinner\n                  active\n                  alt=${this.hass!.localize(\"ui.common.loading\")}\n                ></paper-spinner>\n              `}\n        </div>\n        <div class=\"paper-dialog-buttons\">\n          <mwc-button\n            ?disabled=\"${!this._selectedGroupsToRemove.length ||\n            this._processingRemove}\"\n            @click=\"${this._removeGroup}\"\n            class=\"button\"\n          >\n            <paper-spinner\n              ?active=\"${this._processingRemove}\"\n              alt=${this.hass!.localize(\n                \"ui.panel.config.zha.groups.removing_groups\"\n              )}\n            ></paper-spinner>\n            ${this.hass!.localize(\n              \"ui.panel.config.zha.groups.remove_groups\"\n            )}</mwc-button\n          >\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  private async _fetchGroups() {\n    this._groups = (await fetchGroups(this.hass!)).sort(sortZHAGroups);\n  }\n\n  private _handleRemoveSelectionChanged(\n    ev: HASSDomEvent<SelectionChangedEvent>\n  ): void {\n    this._selectedGroupsToRemove = ev.detail.value.map((value) =>\n      Number(value)\n    );\n  }\n\n  private async _removeGroup(): Promise<void> {\n    this._processingRemove = true;\n    this._groups = await removeGroups(this.hass, this._selectedGroupsToRemove);\n    this._selectedGroupsToRemove = [];\n    this._processingRemove = false;\n  }\n\n  private async _addGroup(): Promise<void> {\n    navigate(this, `/config/zha/group-add`);\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      css`\n        .content {\n          padding: 4px;\n        }\n        zha-groups-data-table {\n          width: 100%;\n        }\n        .button {\n          float: right;\n        }\n        .table {\n          height: 200px;\n          overflow: auto;\n        }\n        mwc-button paper-spinner {\n          width: 14px;\n          height: 14px;\n          margin-right: 20px;\n        }\n        paper-spinner {\n          display: none;\n        }\n        paper-spinner[active] {\n          display: block;\n        }\n        .paper-dialog-buttons {\n          align-items: flex-end;\n          padding: 8px;\n        }\n        .paper-dialog-buttons .warning {\n          --mdc-theme-primary: var(--google-red-500);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"zha-groups-dashboard\": ZHAGroupsDashboard;\n  }\n}\n"],"mappings":"AAAA;AC6DA;AACA;;AAKA;AAQA;AACA;;AAIA;;AA4BA;AACA;AACA;;;AApFA;;AC4BA;;;;;AAOA;;;;AAIA;;AAGA;AACA;AACA;AACA;AACA;;;AAIA;;;AAGA;;;;;;AAMA;AAEA;;;;AAIA;AACA;;AAIA;;;;AAzEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA","sourceRoot":""}