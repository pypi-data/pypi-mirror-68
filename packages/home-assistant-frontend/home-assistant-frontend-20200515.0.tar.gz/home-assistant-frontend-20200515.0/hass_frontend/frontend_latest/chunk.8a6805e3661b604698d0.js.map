{"version":3,"file":"chunk.8a6805e3661b604698d0.js","sources":["webpack:///./src/resources/markdown_worker.ts","webpack:///./src/panels/lovelace/cards/hui-markdown-card.ts"],"sourcesContent":["\n\t\t\t\tvar addMethods = require(\"../../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = [\"renderMarkdown\"]\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"855c978f13443062f47d.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t","import { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  PropertyValues,\n  TemplateResult,\n} from \"lit-element\";\nimport { classMap } from \"lit-html/directives/class-map\";\nimport { applyThemesOnElement } from \"../../../common/dom/apply_themes_on_element\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-markdown\";\nimport { subscribeRenderTemplate } from \"../../../data/ws-templates\";\nimport type { HomeAssistant } from \"../../../types\";\nimport type { LovelaceCard, LovelaceCardEditor } from \"../types\";\nimport type { MarkdownCardConfig } from \"./types\";\n\n@customElement(\"hui-markdown-card\")\nexport class HuiMarkdownCard extends LitElement implements LovelaceCard {\n  public static async getConfigElement(): Promise<LovelaceCardEditor> {\n    await import(\n      /* webpackChunkName: \"hui-markdown-card-editor\" */ \"../editor/config-elements/hui-markdown-card-editor\"\n    );\n    return document.createElement(\"hui-markdown-card-editor\");\n  }\n\n  public static getStubConfig(): MarkdownCardConfig {\n    return {\n      type: \"markdown\",\n      content:\n        \"The **Markdown** card allows you to write any text. You can style it **bold**, *italicized*, ~strikethrough~ etc. You can do images, links, and more.\\n\\nFor more information see the [Markdown Cheatsheet](https://commonmark.org/help).\",\n    };\n  }\n\n  @property() public hass?: HomeAssistant;\n\n  @property() private _config?: MarkdownCardConfig;\n\n  @property() private _content = \"\";\n\n  @property() private _unsubRenderTemplate?: Promise<UnsubscribeFunc>;\n\n  public getCardSize(): number {\n    return this._config === undefined\n      ? 3\n      : this._config.card_size === undefined\n      ? this._config.content.split(\"\\n\").length + (this._config.title ? 1 : 0)\n      : this._config.card_size;\n  }\n\n  public setConfig(config: MarkdownCardConfig): void {\n    if (!config.content) {\n      throw new Error(\"Invalid Configuration: Content Required\");\n    }\n\n    if (this._config?.content !== config.content) {\n      this._tryDisconnect();\n    }\n    this._config = config;\n  }\n\n  public connectedCallback() {\n    super.connectedCallback();\n    this._tryConnect();\n  }\n\n  public disconnectedCallback() {\n    this._tryDisconnect();\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config) {\n      return html``;\n    }\n\n    return html`\n      <ha-card .header=\"${this._config.title}\">\n        <ha-markdown\n          breaks\n          class=\"markdown ${classMap({\n            \"no-header\": !this._config.title,\n          })}\"\n          .content=\"${this._content}\"\n        ></ha-markdown>\n      </ha-card>\n    `;\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n    if (!this._config || !this.hass) {\n      return;\n    }\n\n    this._tryConnect();\n\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    const oldConfig = changedProps.get(\"_config\") as\n      | MarkdownCardConfig\n      | undefined;\n\n    if (\n      !oldHass ||\n      !oldConfig ||\n      oldHass.themes !== this.hass.themes ||\n      oldConfig.theme !== this._config.theme\n    ) {\n      applyThemesOnElement(this, this.hass.themes, this._config.theme);\n    }\n  }\n\n  private async _tryConnect(): Promise<void> {\n    if (\n      this._unsubRenderTemplate !== undefined ||\n      !this.hass ||\n      !this._config\n    ) {\n      return;\n    }\n\n    this._unsubRenderTemplate = subscribeRenderTemplate(\n      this.hass.connection,\n      (result) => {\n        this._content = result;\n      },\n      {\n        template: this._config.content,\n        entity_ids: this._config.entity_id,\n        variables: {\n          config: this._config,\n          user: this.hass.user!.name,\n        },\n      }\n    );\n    this._unsubRenderTemplate.catch(() => {\n      this._content = this._config!.content;\n      this._unsubRenderTemplate = undefined;\n    });\n  }\n\n  private async _tryDisconnect(): Promise<void> {\n    if (!this._unsubRenderTemplate) {\n      return;\n    }\n\n    try {\n      const unsub = await this._unsubRenderTemplate;\n      this._unsubRenderTemplate = undefined;\n      unsub();\n    } catch (e) {\n      if (e.code === \"not_found\") {\n        // If we get here, the connection was probably already closed. Ignore.\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      ha-markdown {\n        display: block;\n        padding: 0 16px 16px;\n        -ms-user-select: initial;\n        -webkit-user-select: initial;\n        -moz-user-select: initial;\n      }\n      .markdown.no-header {\n        padding-top: 16px;\n      }\n      ha-markdown > *:first-child {\n        margin-top: 0;\n      }\n      ha-markdown > *:last-child {\n        margin-bottom: 0;\n      }\n      ha-markdown a {\n        color: var(--primary-color);\n      }\n      ha-markdown img {\n        max-width: 100%;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-markdown-card\": HuiMarkdownCard;\n  }\n}\n"],"mappings":"AACA;AC8EA;;;AAGA;AAGA;;;AAVA;;;;;;;;;;;;;;;;;;;;;;;AAtDA","sourceRoot":""}