{"version":3,"file":"chunk.22d7b47c19c39b5aeb4e.js","sources":["webpack:///../src/rpc-wrapper.js","webpack:///src/mwc-fab-base.ts","webpack:///src/mwc-checkbox-base.ts"],"sourcesContent":["export default function addMethods(worker, methods) {\n\tlet c = 0;\n\tlet callbacks = {};\n\tworker.addEventListener('message', (e) => {\n\t\tlet d = e.data;\n\t\tif (d.type!=='RPC') return;\n\t\tif (d.id) {\n\t\t\tlet f = callbacks[d.id];\n\t\t\tif (f) {\n\t\t\t\tdelete callbacks[d.id];\n\t\t\t\tif (d.error) {\n\t\t\t\t\tf[1](Object.assign(Error(d.error.message), d.error));\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tf[0](d.result);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tlet evt = document.createEvent('Event');\n\t\t\tevt.initEvent(d.method, false, false);\n\t\t\tevt.data = d.params;\n\t\t\tworker.dispatchEvent(evt);\n\t\t}\n\t});\n\tmethods.forEach( method => {\n\t\tworker[method] = (...params) => new Promise( (a, b) => {\n\t\t\tlet id = ++c;\n\t\t\tcallbacks[id] = [a, b];\n\t\t\tworker.postMessage({ type: 'RPC', id, method, params });\n\t\t});\n\t});\n}\n","/**\n@license\nCopyright 2018 Google Inc. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport {ripple} from '@material/mwc-ripple/ripple-directive.js';\nimport {html, LitElement, property, TemplateResult} from 'lit-element';\nimport {classMap} from 'lit-html/directives/class-map.js';\n\nexport class FabBase extends LitElement {\n  @property({type: Boolean}) mini = false;\n\n  @property({type: Boolean}) exited = false;\n\n  @property({type: Boolean}) disabled = false;\n\n  @property({type: Boolean}) extended = false;\n\n  @property({type: Boolean}) showIconAtEnd = false;\n\n  @property() icon = '';\n\n  @property() label = '';\n\n  protected createRenderRoot() {\n    return this.attachShadow({mode: 'open', delegatesFocus: true});\n  }\n\n  protected render() {\n    const classes = {\n      'mdc-fab--mini': this.mini,\n      'mdc-fab--exited': this.exited,\n      'mdc-fab--extended': this.extended,\n      'icon-end': this.showIconAtEnd,\n    };\n    const showLabel = this.label !== '' && this.extended;\n\n    let iconTemplate: TemplateResult|string = '';\n\n    if (this.icon) {\n      iconTemplate = html`\n        <span class=\"material-icons mdc-fab__icon\">${this.icon}</span>`;\n    }\n\n    let label = html``;\n\n    if (showLabel) {\n      label = html`<span class=\"mdc-fab__label\">${this.label}</span>`;\n    }\n\n    return html`\n      <button\n          class=\"mdc-fab ${classMap(classes)}\"\n          ?disabled=\"${this.disabled}\"\n          aria-label=\"${this.label || this.icon}\"\n          .ripple=\"${ripple()}\">\n        <div class=\"mdc-fab__ripple\"></div>\n        ${this.showIconAtEnd ? label : ''}\n        <slot name=\"icon\">\n          ${iconTemplate}\n        </slot>\n        ${!this.showIconAtEnd ? label : ''}\n      </button>`;\n  }\n}\n","/**\n@license\nCopyright 2019 Google Inc. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport '@material/mwc-ripple/mwc-ripple.js';\n\nimport {FormElement} from '@material/mwc-base/form-element.js';\nimport {Ripple} from '@material/mwc-ripple/mwc-ripple.js';\nimport {RippleHandlers} from '@material/mwc-ripple/ripple-handlers.js';\nimport {html, internalProperty, property, PropertyValues, query, queryAsync} from 'lit-element';\nimport {classMap} from 'lit-html/directives/class-map.js';\nimport {ifDefined} from 'lit-html/directives/if-defined.js';\n\n/** @soyCompatible */\nexport class CheckboxBase extends FormElement {\n  @query('.mdc-checkbox') protected mdcRoot!: HTMLElement;\n\n  @query('input') protected formElement!: HTMLInputElement;\n\n  @property({type: Boolean, reflect: true}) checked = false;\n\n  @property({type: Boolean}) indeterminate = false;\n\n  @property({type: Boolean, reflect: true}) disabled = false;\n\n  @property({type: String}) value = '';\n\n  @internalProperty() protected animationClass = '';\n\n  @internalProperty() protected shouldRenderRipple = false;\n\n  @queryAsync('mwc-ripple') ripple!: Promise<Ripple|null>;\n\n  // MDC Foundation is unused\n  protected mdcFoundationClass = undefined;\n\n  protected mdcFoundation = undefined;\n\n  protected createAdapter() {\n    return {};\n  }\n\n  protected update(changedProperties: PropertyValues) {\n    const oldIndeterminate = changedProperties.get('indeterminate');\n    const oldChecked = changedProperties.get('checked');\n    if (oldIndeterminate !== undefined || oldChecked !== undefined) {\n      const oldState =\n          this.calculateAnimationStateName(!!oldChecked, !!oldIndeterminate);\n      const newState =\n          this.calculateAnimationStateName(this.checked, this.indeterminate);\n      this.animationClass = `${oldState}-${newState}`;\n    }\n    super.update(changedProperties);\n  }\n\n  protected calculateAnimationStateName(\n      checked: boolean, indeterminate: boolean): string {\n    if (indeterminate) {\n      return 'indeterminate';\n    } else if (checked) {\n      return 'checked';\n    } else {\n      return 'unchecked';\n    }\n  }\n\n  private rippleElement: Ripple|null = null;\n\n  protected rippleHandlers: RippleHandlers = new RippleHandlers(() => {\n    this.shouldRenderRipple = true;\n    this.ripple.then((v) => this.rippleElement = v);\n    return this.ripple;\n  });\n\n  // TODO(dfreedm): Make this use selected as a param after Polymer/internal#739\n  /** @soyCompatible */\n  protected renderRipple() {\n    const selected = this.indeterminate || this.checked;\n    return html`${\n        this.shouldRenderRipple ?\n            html`<mwc-ripple .accent=\"${selected}\" .disabled=\"${\n                this.disabled}\" .unbounded=\"${true}\"></mwc-ripple>` :\n            ''}`;\n  }\n\n  /**\n   * @soyCompatible\n   * @soyAttributes checkboxAttributes: input\n   */\n  protected render() {\n    const selected = this.indeterminate || this.checked;\n    /* eslint-disable eqeqeq */\n    // tslint:disable:triple-equals\n    /** @classMap */\n    const classes = {\n      'mdc-checkbox--disabled': this.disabled,\n      'mdc-checkbox--selected': selected,\n      // transition animiation classes\n      'mdc-checkbox--anim-checked-indeterminate':\n          this.animationClass == 'checked-indeterminate',\n      'mdc-checkbox--anim-checked-unchecked':\n          this.animationClass == 'checked-unchecked',\n      'mdc-checkbox--anim-indeterminate-checked':\n          this.animationClass == 'indeterminate-checked',\n      'mdc-checkbox--anim-indeterminate-unchecked':\n          this.animationClass == 'indeterminate-unchecked',\n      'mdc-checkbox--anim-unchecked-checked':\n          this.animationClass == 'unchecked-checked',\n      'mdc-checkbox--anim-unchecked-indeterminate':\n          this.animationClass == 'unchecked-indeterminate',\n    };\n    // tslint:enable:triple-equals\n    /* eslint-enable eqeqeq */\n    const ariaChecked = this.indeterminate ? 'mixed' : undefined;\n    return html`\n      <div class=\"mdc-checkbox mdc-checkbox--upgraded ${classMap(classes)}\">\n        <input type=\"checkbox\"\n              class=\"mdc-checkbox__native-control\"\n              aria-checked=\"${ifDefined(ariaChecked)}\"\n              data-indeterminate=\"${this.indeterminate ? 'true' : 'false'}\"\n              ?disabled=\"${this.disabled}\"\n              .indeterminate=\"${this.indeterminate}\"\n              .checked=\"${this.checked}\"\n              .value=\"${this.value}\"\n              @change=\"${this._changeHandler}\"\n              @focus=\"${this._handleFocus}\"\n              @blur=\"${this._handleBlur}\"\n              @mousedown=\"${this._activateRipple}\"\n              @mouseup=\"${this._deactivateRipple}\"\n              @mouseenter=\"${this._handleMouseEnter}\"\n              @mouseleave=\"${this._handleMouseLeave}\"\n              @touchstart=\"${this._activateRipple}\"\n              @touchend=\"${this._deactivateRipple}\"\n              @touchcancel=\"${this._deactivateRipple}\">\n        <div class=\"mdc-checkbox__background\">\n          <svg class=\"mdc-checkbox__checkmark\"\n              viewBox=\"0 0 24 24\">\n            <path class=\"mdc-checkbox__checkmark-path\"\n                  fill=\"none\"\n                  d=\"M1.73,12.91 8.1,19.28 22.79,4.59\"></path>\n          </svg>\n          <div class=\"mdc-checkbox__mixedmark\"></div>\n        </div>\n        ${this.renderRipple()}\n      </div>`;\n  }\n\n  private _handleFocus() {\n    this.rippleHandlers.startFocus();\n  }\n\n  private _handleBlur() {\n    this.rippleHandlers.endFocus();\n  }\n\n  private _activateRipple() {\n    this.rippleHandlers.startPress();\n  }\n\n  private _deactivateRipple() {\n    this.rippleHandlers.endPress();\n  }\n\n  private _handleMouseEnter() {\n    this.rippleHandlers.startHover();\n  }\n\n  private _handleMouseLeave() {\n    this.rippleHandlers.endHover();\n  }\n\n  private _changeHandler() {\n    this.checked = this.formElement.checked;\n    this.indeterminate = this.formElement.indeterminate;\n  }\n\n  get isRippleActive() {\n    return this.rippleElement?.isActive || false;\n  }\n}\n"],"mappings":";AAAA;ACoDA;;AAWA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AAnDA;AC0GA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AAUA;AAIA","sourceRoot":""}