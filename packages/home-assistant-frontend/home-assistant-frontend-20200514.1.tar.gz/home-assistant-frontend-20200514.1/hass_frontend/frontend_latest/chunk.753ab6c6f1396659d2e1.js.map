{"version":3,"file":"chunk.753ab6c6f1396659d2e1.js","sources":["webpack:///./src/common/const.ts","webpack:///./src/panels/config/ha-config-section.ts","webpack:///./src/panels/config/zha/zha-device-endpoint-data-table.ts","webpack:///./src/panels/config/zha/zha-add-group-page.ts"],"sourcesContent":["/** Constants to be used in the frontend. */\n\n// Constants should be alphabetically sorted by name.\n// Arrays with values should be alphabetically sorted if order doesn't matter.\n// Each constant should have a description what it is supposed to be used for.\n\n/** Icon to use when no icon specified for domain. */\nexport const DEFAULT_DOMAIN_ICON = \"hass:bookmark\";\n\n/** Domains that have a state card. */\nexport const DOMAINS_WITH_CARD = [\n  \"climate\",\n  \"cover\",\n  \"configurator\",\n  \"input_select\",\n  \"input_number\",\n  \"input_text\",\n  \"lock\",\n  \"media_player\",\n  \"scene\",\n  \"script\",\n  \"timer\",\n  \"vacuum\",\n  \"water_heater\",\n  \"weblink\",\n];\n\n/** Domains with separate more info dialog. */\nexport const DOMAINS_WITH_MORE_INFO = [\n  \"alarm_control_panel\",\n  \"automation\",\n  \"camera\",\n  \"climate\",\n  \"configurator\",\n  \"counter\",\n  \"cover\",\n  \"fan\",\n  \"group\",\n  \"history_graph\",\n  \"input_datetime\",\n  \"light\",\n  \"lock\",\n  \"media_player\",\n  \"person\",\n  \"script\",\n  \"sun\",\n  \"timer\",\n  \"updater\",\n  \"vacuum\",\n  \"water_heater\",\n  \"weather\",\n];\n\n/** Domains that show no more info dialog. */\nexport const DOMAINS_HIDE_MORE_INFO = [\n  \"input_number\",\n  \"input_select\",\n  \"input_text\",\n  \"scene\",\n  \"weblink\",\n];\n\n/** Domains that should have the history hidden in the more info dialog. */\nexport const DOMAINS_MORE_INFO_NO_HISTORY = [\n  \"camera\",\n  \"configurator\",\n  \"history_graph\",\n  \"scene\",\n];\n\n/** States that we consider \"off\". */\nexport const STATES_OFF = [\"closed\", \"locked\", \"off\"];\n\n/** Domains where we allow toggle in Lovelace. */\nexport const DOMAINS_TOGGLE = new Set([\n  \"fan\",\n  \"input_boolean\",\n  \"light\",\n  \"switch\",\n  \"group\",\n  \"automation\",\n]);\n\n/** Temperature units. */\nexport const UNIT_C = \"°C\";\nexport const UNIT_F = \"°F\";\n\n/** Entity ID of the default view. */\nexport const DEFAULT_VIEW_ENTITY_ID = \"group.default_view\";\n\n/** HA Color Pallete. */\nexport const HA_COLOR_PALETTE = [\n  \"ff0029\",\n  \"66a61e\",\n  \"377eb8\",\n  \"984ea3\",\n  \"00d2d5\",\n  \"ff7f00\",\n  \"af8d00\",\n  \"7f80cd\",\n  \"b3e900\",\n  \"c42e60\",\n  \"a65628\",\n  \"f781bf\",\n  \"8dd3c7\",\n  \"bebada\",\n  \"fb8072\",\n  \"80b1d3\",\n  \"fdb462\",\n  \"fccde5\",\n  \"bc80bd\",\n  \"ffed6f\",\n  \"c4eaff\",\n  \"cf8c00\",\n  \"1b9e77\",\n  \"d95f02\",\n  \"e7298a\",\n  \"e6ab02\",\n  \"a6761d\",\n  \"0097ff\",\n  \"00d067\",\n  \"f43600\",\n  \"4ba93b\",\n  \"5779bb\",\n  \"927acc\",\n  \"97ee3f\",\n  \"bf3947\",\n  \"9f5b00\",\n  \"f48758\",\n  \"8caed6\",\n  \"f2b94f\",\n  \"eff26e\",\n  \"e43872\",\n  \"d9b100\",\n  \"9d7a00\",\n  \"698cff\",\n  \"d9d9d9\",\n  \"00d27e\",\n  \"d06800\",\n  \"009f82\",\n  \"c49200\",\n  \"cbe8ff\",\n  \"fecddf\",\n  \"c27eb6\",\n  \"8cd2ce\",\n  \"c4b8d9\",\n  \"f883b0\",\n  \"a49100\",\n  \"f48800\",\n  \"27d0df\",\n  \"a04a9b\",\n];\n","import { css, customElement, html, LitElement, property } from \"lit-element\";\nimport { classMap } from \"lit-html/directives/class-map\";\n\n@customElement(\"ha-config-section\")\nexport class HaConfigSection extends LitElement {\n  @property() public isWide = false;\n\n  protected render() {\n    return html`\n      <div\n        class=\"content ${classMap({\n          narrow: !this.isWide,\n        })}\"\n      >\n        <div class=\"header\"><slot name=\"header\"></slot></div>\n        <div\n          class=\"together layout ${classMap({\n            narrow: !this.isWide,\n            vertical: !this.isWide,\n            horizontal: this.isWide,\n          })}\"\n        >\n          <div class=\"intro\"><slot name=\"introduction\"></slot></div>\n          <div class=\"panel flex-auto\"><slot></slot></div>\n        </div>\n      </div>\n    `;\n  }\n\n  static get styles() {\n    return css`\n      :host {\n        display: block;\n      }\n      .content {\n        padding: 28px 20px 0;\n        max-width: 1040px;\n        margin: 0 auto;\n      }\n\n      .layout {\n        display: flex;\n      }\n\n      .horizontal {\n        flex-direction: row;\n      }\n\n      .vertical {\n        flex-direction: column;\n      }\n\n      .flex-auto {\n        flex: 1 1 auto;\n      }\n\n      .header {\n        font-family: var(--paper-font-headline_-_font-family);\n        -webkit-font-smoothing: var(\n          --paper-font-headline_-_-webkit-font-smoothing\n        );\n        font-size: var(--paper-font-headline_-_font-size);\n        font-weight: var(--paper-font-headline_-_font-weight);\n        letter-spacing: var(--paper-font-headline_-_letter-spacing);\n        line-height: var(--paper-font-headline_-_line-height);\n        opacity: var(--dark-primary-opacity);\n      }\n\n      .together {\n        margin-top: 32px;\n      }\n\n      .intro {\n        font-family: var(--paper-font-subhead_-_font-family);\n        -webkit-font-smoothing: var(\n          --paper-font-subhead_-_-webkit-font-smoothing\n        );\n        font-weight: var(--paper-font-subhead_-_font-weight);\n        line-height: var(--paper-font-subhead_-_line-height);\n        width: 100%;\n        max-width: 400px;\n        margin-right: 40px;\n        opacity: var(--dark-primary-opacity);\n        font-size: 14px;\n        padding-bottom: 20px;\n      }\n\n      .panel {\n        margin-top: -24px;\n      }\n\n      .panel ::slotted(*) {\n        margin-top: 24px;\n        display: block;\n      }\n\n      .narrow.content {\n        max-width: 640px;\n      }\n      .narrow .together {\n        margin-top: 20px;\n      }\n      .narrow .intro {\n        padding-bottom: 20px;\n        margin-right: 0;\n        max-width: 500px;\n      }\n    `;\n  }\n}\n","import {\n  customElement,\n  html,\n  LitElement,\n  property,\n  query,\n  TemplateResult,\n  css,\n  CSSResult,\n} from \"lit-element\";\nimport memoizeOne from \"memoize-one\";\nimport \"../../../components/data-table/ha-data-table\";\nimport type {\n  DataTableColumnContainer,\n  HaDataTable,\n  DataTableRowData,\n} from \"../../../components/data-table/ha-data-table\";\nimport \"../../../components/entity/ha-state-icon\";\nimport type { ZHADeviceEndpoint, ZHAEntityReference } from \"../../../data/zha\";\nimport { showZHADeviceInfoDialog } from \"../../../dialogs/zha-device-info-dialog/show-dialog-zha-device-info\";\nimport type { HomeAssistant } from \"../../../types\";\n\nexport interface DeviceEndpointRowData extends DataTableRowData {\n  id: string;\n  name: string;\n  model: string;\n  manufacturer: string;\n  endpoint_id: number;\n  entities: ZHAEntityReference[];\n}\n\n@customElement(\"zha-device-endpoint-data-table\")\nexport class ZHADeviceEndpointDataTable extends LitElement {\n  @property({ type: Object }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @property({ type: Boolean }) public selectable = false;\n\n  @property({ type: Array }) public deviceEndpoints: ZHADeviceEndpoint[] = [];\n\n  @query(\"ha-data-table\") private _dataTable!: HaDataTable;\n\n  private _deviceEndpoints = memoizeOne(\n    (deviceEndpoints: ZHADeviceEndpoint[]) => {\n      const outputDevices: DeviceEndpointRowData[] = [];\n\n      deviceEndpoints.forEach((deviceEndpoint) => {\n        outputDevices.push({\n          name:\n            deviceEndpoint.device.user_given_name || deviceEndpoint.device.name,\n          model: deviceEndpoint.device.model,\n          manufacturer: deviceEndpoint.device.manufacturer,\n          id: deviceEndpoint.device.ieee + \"_\" + deviceEndpoint.endpoint_id,\n          ieee: deviceEndpoint.device.ieee,\n          endpoint_id: deviceEndpoint.endpoint_id,\n          entities: deviceEndpoint.entities,\n        });\n      });\n\n      return outputDevices;\n    }\n  );\n\n  private _columns = memoizeOne(\n    (narrow: boolean): DataTableColumnContainer =>\n      narrow\n        ? {\n            name: {\n              title: \"Devices\",\n              sortable: true,\n              filterable: true,\n              direction: \"asc\",\n              grows: true,\n              template: (name) => html`\n                <div\n                  class=\"mdc-data-table__cell table-cell-text\"\n                  @click=${this._handleClicked}\n                  style=\"cursor: pointer;\"\n                >\n                  ${name}\n                </div>\n              `,\n            },\n            endpoint_id: {\n              title: \"Endpoint\",\n              sortable: true,\n              filterable: true,\n            },\n          }\n        : {\n            name: {\n              title: \"Name\",\n              sortable: true,\n              filterable: true,\n              direction: \"asc\",\n              grows: true,\n              template: (name) => html`\n                <div\n                  class=\"mdc-data-table__cell table-cell-text\"\n                  @click=${this._handleClicked}\n                  style=\"cursor: pointer;\"\n                >\n                  ${name}\n                </div>\n              `,\n            },\n            endpoint_id: {\n              title: \"Endpoint\",\n              sortable: true,\n              filterable: true,\n            },\n            entities: {\n              title: \"Associated Entities\",\n              sortable: false,\n              filterable: false,\n              width: \"50%\",\n              template: (entities) => html`\n                ${entities.length\n                  ? entities.length > 3\n                    ? html`${entities.slice(0, 2).map(\n                          (entity) =>\n                            html`<div\n                              style=\"overflow: hidden; text-overflow: ellipsis;\"\n                            >\n                              ${entity.name || entity.original_name}\n                            </div>`\n                        )}\n                        <div>And ${entities.length - 2} more...</div>`\n                    : entities.map(\n                        (entity) =>\n                          html`<div\n                            style=\"overflow: hidden; text-overflow: ellipsis;\"\n                          >\n                            ${entity.name || entity.original_name}\n                          </div>`\n                      )\n                  : \"This endpoint has no associated entities\"}\n              `,\n            },\n          }\n  );\n\n  public clearSelection() {\n    this._dataTable.clearSelection();\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-data-table\n        .columns=${this._columns(this.narrow)}\n        .data=${this._deviceEndpoints(this.deviceEndpoints)}\n        .selectable=${this.selectable}\n        auto-height\n      ></ha-data-table>\n    `;\n  }\n\n  private async _handleClicked(ev: CustomEvent) {\n    const rowId = ((ev.target as HTMLElement).closest(\n      \".mdc-data-table__row\"\n    ) as any).rowId;\n    const ieee = rowId.substring(0, rowId.indexOf(\"_\"));\n    showZHADeviceInfoDialog(this, { ieee });\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      css`\n        .table-cell-text {\n          word-break: break-word;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"zha-device-endpoint-data-table\": ZHADeviceEndpointDataTable;\n  }\n}\n","import \"@material/mwc-button\";\nimport \"@polymer/paper-input/paper-input\";\nimport type { PaperInputElement } from \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-spinner/paper-spinner\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  PropertyValues,\n  query,\n} from \"lit-element\";\nimport type { HASSDomEvent } from \"../../../common/dom/fire_event\";\nimport { navigate } from \"../../../common/navigate\";\nimport type { SelectionChangedEvent } from \"../../../components/data-table/ha-data-table\";\nimport {\n  addGroup,\n  fetchGroupableDevices,\n  ZHAGroup,\n  ZHADeviceEndpoint,\n} from \"../../../data/zha\";\nimport \"../../../layouts/hass-error-screen\";\nimport \"../../../layouts/hass-subpage\";\nimport type { PolymerChangedEvent } from \"../../../polymer-types\";\nimport type { HomeAssistant } from \"../../../types\";\nimport \"../ha-config-section\";\nimport \"./zha-device-endpoint-data-table\";\nimport type { ZHADeviceEndpointDataTable } from \"./zha-device-endpoint-data-table\";\n\n@customElement(\"zha-add-group-page\")\nexport class ZHAAddGroupPage extends LitElement {\n  @property({ type: Object }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow!: boolean;\n\n  @property({ type: Array }) public deviceEndpoints: ZHADeviceEndpoint[] = [];\n\n  @property() private _processingAdd = false;\n\n  @property() private _groupName = \"\";\n\n  @query(\"zha-device-endpoint-data-table\")\n  private _zhaDevicesDataTable!: ZHADeviceEndpointDataTable;\n\n  private _firstUpdatedCalled = false;\n\n  private _selectedDevicesToAdd: string[] = [];\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n    if (this.hass && this._firstUpdatedCalled) {\n      this._fetchData();\n    }\n  }\n\n  protected firstUpdated(changedProperties: PropertyValues): void {\n    super.firstUpdated(changedProperties);\n    if (this.hass) {\n      this._fetchData();\n    }\n    this._firstUpdatedCalled = true;\n  }\n\n  protected render() {\n    return html`\n      <hass-subpage\n        .header=${this.hass.localize(\"ui.panel.config.zha.groups.create_group\")}\n      >\n        <ha-config-section .isWide=${!this.narrow}>\n          <p slot=\"introduction\">\n            ${this.hass.localize(\n              \"ui.panel.config.zha.groups.create_group_details\"\n            )}\n          </p>\n          <paper-input\n            type=\"string\"\n            .value=\"${this._groupName}\"\n            @value-changed=${this._handleNameChange}\n            placeholder=\"${this.hass!.localize(\n              \"ui.panel.config.zha.groups.group_name_placeholder\"\n            )}\"\n          ></paper-input>\n\n          <div class=\"header\">\n            ${this.hass.localize(\"ui.panel.config.zha.groups.add_members\")}\n          </div>\n\n          <zha-device-endpoint-data-table\n            .hass=${this.hass}\n            .deviceEndpoints=${this.deviceEndpoints}\n            .narrow=${this.narrow}\n            selectable\n            @selection-changed=${this._handleAddSelectionChanged}\n          >\n          </zha-device-endpoint-data-table>\n\n          <div class=\"paper-dialog-buttons\">\n            <mwc-button\n              .disabled=\"${!this._groupName ||\n              this._groupName === \"\" ||\n              this._processingAdd}\"\n              @click=\"${this._createGroup}\"\n              class=\"button\"\n            >\n              <paper-spinner\n                ?active=\"${this._processingAdd}\"\n                alt=\"${this.hass!.localize(\n                  \"ui.panel.config.zha.groups.creating_group\"\n                )}\"\n              ></paper-spinner>\n              ${this.hass!.localize(\n                \"ui.panel.config.zha.groups.create\"\n              )}</mwc-button\n            >\n          </div>\n        </ha-config-section>\n      </hass-subpage>\n    `;\n  }\n\n  private async _fetchData() {\n    this.deviceEndpoints = await fetchGroupableDevices(this.hass!);\n  }\n\n  private _handleAddSelectionChanged(\n    ev: HASSDomEvent<SelectionChangedEvent>\n  ): void {\n    this._selectedDevicesToAdd = ev.detail.value;\n  }\n\n  private async _createGroup(): Promise<void> {\n    this._processingAdd = true;\n    const members = this._selectedDevicesToAdd.map((member) => {\n      const memberParts = member.split(\"_\");\n      return { ieee: memberParts[0], endpoint_id: memberParts[1] };\n    });\n    const group: ZHAGroup = await addGroup(this.hass, this._groupName, members);\n    this._selectedDevicesToAdd = [];\n    this._processingAdd = false;\n    this._groupName = \"\";\n    this._zhaDevicesDataTable.clearSelection();\n    navigate(this, `/config/zha/group/${group.group_id}`, true);\n  }\n\n  private _handleNameChange(ev: PolymerChangedEvent<string>) {\n    const target = ev.currentTarget as PaperInputElement;\n    this._groupName = target.value || \"\";\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      css`\n        .header {\n          font-family: var(--paper-font-display1_-_font-family);\n          -webkit-font-smoothing: var(\n            --paper-font-display1_-_-webkit-font-smoothing\n          );\n          font-size: var(--paper-font-display1_-_font-size);\n          font-weight: var(--paper-font-display1_-_font-weight);\n          letter-spacing: var(--paper-font-display1_-_letter-spacing);\n          line-height: var(--paper-font-display1_-_line-height);\n          opacity: var(--dark-primary-opacity);\n        }\n\n        .button {\n          float: right;\n        }\n\n        ha-config-section *:last-child {\n          padding-bottom: 24px;\n        }\n        mwc-button paper-spinner {\n          width: 14px;\n          height: 14px;\n          margin-right: 20px;\n        }\n        paper-spinner {\n          display: none;\n        }\n        paper-spinner[active] {\n          display: block;\n        }\n        .paper-dialog-buttons {\n          align-items: flex-end;\n          padding: 8px;\n        }\n        .paper-dialog-buttons .warning {\n          --mdc-theme-primary: var(--google-red-500);\n        }\n      `,\n    ];\n  }\n}\n"],"mappings":"AAAA;;ACUA;;;;AAMA;;;;;;AAZA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;ACyEA;;;AAGA;;AAIA;;;AAgBA;;;AAGA;;AAIA;AAWA;;;AAOA;;AAGA;;;AAMA;AAGA;AAzGA;;AAsHA;AACA;AACA;;;AAxHA;;;;AAAA;;ACoCA;;AAEA;;AAEA;;;;AAMA;AACA;AACA;;;;AAMA;;;;AAIA;AACA;AACA;;AAEA;;;;;;AAMA;AAGA;;;;AAIA;AACA;;AAIA;;;;;AAhFA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA","sourceRoot":""}