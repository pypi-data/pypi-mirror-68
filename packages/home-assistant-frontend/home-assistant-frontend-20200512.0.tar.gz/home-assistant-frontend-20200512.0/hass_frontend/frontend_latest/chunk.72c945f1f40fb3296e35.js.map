{"version":3,"sources":["webpack:///./src/panels/lovelace/common/structs/struct.ts","webpack:///./src/panels/lovelace/common/structs/is-entity-id.ts","webpack:///./src/panels/lovelace/common/structs/is-icon.ts","webpack:///./src/common/search/search-input.ts","webpack:///./src/panels/lovelace/common/compute-unused-entities.ts","webpack:///./src/panels/lovelace/editor/card-editor/hui-card-picker.ts","webpack:///./src/panels/lovelace/editor/get-card-stub-config.ts","webpack:///./src/panels/lovelace/editor/config-elements/hui-stack-card-editor.ts"],"names":["__webpack_require__","d","__webpack_exports__","struct","superstruct","types","entity-id","value","includes","icon","customElement","_LitElement","[object Object]","args","super","_initialize","this","property","type","Boolean","attribute","shadowRoot","querySelector","focus","html","classMap","no-underline","noUnderline","autofocus","filter","_filterInputChanged","noLabelFloat","mdiMagnify","_clearSearch","mdiClose","async","fireEvent","String","e","_filterChanged","target","css","LitElement","computeUsedEntities","calcUnusedEntities","computeUnusedEntities","EXCLUDED_DOMAINS","addFromAction","entities","actionConfig","action","service_data","entity_id","entityIds","Array","isArray","entityId","add","addEntityId","entity","camera_image","tap_action","hold_action","addEntities","obj","forEach","card","cards","elements","badges","badge","config","Set","views","view","hass","usedEntities","unusedEntities","Object","keys","states","has","split","previewCards","nonPreviewCards","_decorate","F","kind","decorators","key","memoizeOne","cardElements","map","cardElement","fuse","Fuse","caseSensitive","minMatchCharLength","threshold","search","lovelace","_unusedEntities","_usedEntities","_filter","_handleSearchChange","_filterCards","_cards","element","_cardPicked","localize","changedProps","oldHass","get","language","eid","UNAVAILABLE_STATES","state","_loadCards","name","description","concat","noElement","customCards","length","ccard","isCustom","until","_renderCardElement","ev","detail","requestUpdate","static","currentTarget","cardConfig","createCardElement","addEventListener","stopPropagation","parentElement","replaceChild","_createCardElement","once","customCard","getCustomCardEntry","undefined","CUSTOM_TYPE_PREFIX","entitiesFallback","elClass","getCardElementClass","getStubConfig","classStubConfig","assign","getCardStubConfig","preview","tagName","cardConfigStruct","title","HuiStackCardEditor","query","_config","selected","_selectedCard","numcards","_handleSelectedCard","_card","i","_toggleMode","_guiModeAvailable","_cardEditorEl","_GUImode","_handleMove","_handleDeleteCard","_handleConfigChanged","_handleGUIModeChanged","_handleCardPicked","id","_setMode","parseInt","guiModeAvailable","push","splice","Math","max","source","guiMode","_this$_cardEditorEl","toggleMode","GUImode"],"mappings":"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","file":"chunk.72c945f1f40fb3296e35.js","sourcesContent":["import { superstruct } from \"superstruct\";\nimport { isEntityId } from \"./is-entity-id\";\nimport { isIcon } from \"./is-icon\";\n\nexport const struct = superstruct({\n  types: {\n    \"entity-id\": isEntityId,\n    icon: isIcon,\n  },\n});\n","export function isEntityId(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"entity id should be a string\";\n  }\n  if (!value.includes(\".\")) {\n    return \"entity id should be in the format 'domain.entity'\";\n  }\n  return true;\n}\n","export function isIcon(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"icon should be a string\";\n  }\n  if (!value.includes(\":\")) {\n    return \"icon should be in the format 'mdi:icon'\";\n  }\n  return true;\n}\n","import \"@polymer/paper-input/paper-input\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  LitElement,\n  property,\n} from \"lit-element\";\nimport { html, TemplateResult } from \"lit-html\";\nimport { classMap } from \"lit-html/directives/class-map\";\nimport \"../../components/ha-svg-icon\";\nimport { fireEvent } from \"../dom/fire_event\";\nimport { mdiMagnify, mdiClose } from \"@mdi/js\";\nimport \"@material/mwc-icon-button/mwc-icon-button\";\n\n@customElement(\"search-input\")\nclass SearchInput extends LitElement {\n  @property() public filter?: string;\n\n  @property({ type: Boolean, attribute: \"no-label-float\" })\n  public noLabelFloat? = false;\n\n  @property({ type: Boolean, attribute: \"no-underline\" })\n  public noUnderline = false;\n\n  @property({ type: Boolean })\n  public autofocus = false;\n\n  public focus() {\n    this.shadowRoot!.querySelector(\"paper-input\")!.focus();\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <style>\n        .no-underline:not(.focused) {\n          --paper-input-container-underline: {\n            display: none;\n            height: 0;\n          }\n        }\n      </style>\n      <paper-input\n        class=${classMap({ \"no-underline\": this.noUnderline })}\n        .autofocus=${this.autofocus}\n        label=\"Search\"\n        .value=${this.filter}\n        @value-changed=${this._filterInputChanged}\n        .noLabelFloat=${this.noLabelFloat}\n      >\n        <ha-svg-icon\n          path=${mdiMagnify}\n          slot=\"prefix\"\n          class=\"prefix\"\n        ></ha-svg-icon>\n        ${this.filter &&\n        html`\n          <mwc-icon-button\n            slot=\"suffix\"\n            class=\"suffix\"\n            @click=${this._clearSearch}\n            alt=\"Clear\"\n            title=\"Clear\"\n          >\n            <ha-svg-icon path=${mdiClose}></ha-svg-icon>\n          </mwc-icon-button>\n        `}\n      </paper-input>\n    `;\n  }\n\n  private async _filterChanged(value: string) {\n    fireEvent(this, \"value-changed\", { value: String(value) });\n  }\n\n  private async _filterInputChanged(e) {\n    this._filterChanged(e.target.value);\n  }\n\n  private async _clearSearch() {\n    this._filterChanged(\"\");\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      ha-svg-icon,\n      mwc-icon-button {\n        color: var(--primary-text-color);\n      }\n      mwc-icon-button {\n        --mdc-icon-button-size: 24px;\n      }\n      ha-svg-icon.prefix {\n        margin: 8px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"search-input\": SearchInput;\n  }\n}\n","import { ActionConfig, LovelaceConfig } from \"../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../types\";\n\nexport const EXCLUDED_DOMAINS = [\"zone\", \"persistent_notification\"];\n\nconst addFromAction = (entities: Set<string>, actionConfig: ActionConfig) => {\n  if (\n    actionConfig.action !== \"call-service\" ||\n    !actionConfig.service_data ||\n    !actionConfig.service_data.entity_id\n  ) {\n    return;\n  }\n  let entityIds = actionConfig.service_data.entity_id;\n  if (!Array.isArray(entityIds)) {\n    entityIds = [entityIds];\n  }\n  for (const entityId of entityIds) {\n    entities.add(entityId);\n  }\n};\n\nconst addEntityId = (entities: Set<string>, entity) => {\n  if (typeof entity === \"string\") {\n    entities.add(entity);\n    return;\n  }\n\n  if (entity.entity) {\n    entities.add(entity.entity);\n  }\n  if (entity.camera_image) {\n    entities.add(entity.camera_image);\n  }\n  if (entity.tap_action) {\n    addFromAction(entities, entity.tap_action);\n  }\n  if (entity.hold_action) {\n    addFromAction(entities, entity.hold_action);\n  }\n};\n\nconst addEntities = (entities: Set<string>, obj) => {\n  if (obj.entity) {\n    addEntityId(entities, obj.entity);\n  }\n  if (obj.entities && Array.isArray(obj.entities)) {\n    obj.entities.forEach((entity) => addEntityId(entities, entity));\n  }\n  if (obj.card) {\n    addEntities(entities, obj.card);\n  }\n  if (obj.cards && Array.isArray(obj.cards)) {\n    obj.cards.forEach((card) => addEntities(entities, card));\n  }\n  if (obj.elements && Array.isArray(obj.elements)) {\n    obj.elements.forEach((card) => addEntities(entities, card));\n  }\n  if (obj.badges && Array.isArray(obj.badges)) {\n    obj.badges.forEach((badge) => addEntityId(entities, badge));\n  }\n};\n\nexport const computeUsedEntities = (config: LovelaceConfig): Set<string> => {\n  const entities = new Set<string>();\n  config.views.forEach((view) => addEntities(entities, view));\n  return entities;\n};\n\nexport const calcUnusedEntities = (\n  hass: HomeAssistant,\n  usedEntities: Set<string>\n): Set<string> => {\n  const unusedEntities: Set<string> = new Set();\n\n  for (const entity of Object.keys(hass.states)) {\n    if (\n      !usedEntities.has(entity) &&\n      !EXCLUDED_DOMAINS.includes(entity.split(\".\", 1)[0])\n    ) {\n      unusedEntities.add(entity);\n    }\n  }\n\n  return unusedEntities;\n};\n\nexport const computeUnusedEntities = (\n  hass: HomeAssistant,\n  config: LovelaceConfig\n): Set<string> => {\n  const usedEntities = computeUsedEntities(config);\n  const unusedEntities = calcUnusedEntities(hass, usedEntities);\n  return unusedEntities;\n};\n","import * as Fuse from \"fuse.js\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  PropertyValues,\n  TemplateResult,\n} from \"lit-element\";\nimport { classMap } from \"lit-html/directives/class-map\";\nimport { until } from \"lit-html/directives/until\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../common/search/search-input\";\nimport { UNAVAILABLE_STATES } from \"../../../../data/entity\";\nimport { LovelaceCardConfig, LovelaceConfig } from \"../../../../data/lovelace\";\nimport {\n  CustomCardEntry,\n  customCards,\n  CUSTOM_TYPE_PREFIX,\n  getCustomCardEntry,\n} from \"../../../../data/lovelace_custom_cards\";\nimport { HomeAssistant } from \"../../../../types\";\nimport {\n  calcUnusedEntities,\n  computeUsedEntities,\n} from \"../../common/compute-unused-entities\";\nimport { createCardElement } from \"../../create-element/create-card-element\";\nimport { LovelaceCard } from \"../../types\";\nimport { getCardStubConfig } from \"../get-card-stub-config\";\nimport { CardPickTarget } from \"../types\";\n\ninterface Card {\n  type: string;\n  name?: string;\n  description?: string;\n  noElement?: boolean;\n  isCustom?: boolean;\n}\n\ninterface CardElement {\n  card: Card;\n  element: TemplateResult;\n}\n\nconst previewCards: string[] = [\n  \"alarm-panel\",\n  \"button\",\n  \"entities\",\n  \"entity\",\n  \"gauge\",\n  \"glance\",\n  \"history-graph\",\n  \"light\",\n  \"map\",\n  \"markdown\",\n  \"media-control\",\n  \"picture\",\n  \"picture-elements\",\n  \"picture-entity\",\n  \"picture-glance\",\n  \"plant-status\",\n  \"sensor\",\n  \"thermostat\",\n  \"weather-forecast\",\n];\n\nconst nonPreviewCards: string[] = [\n  \"conditional\",\n  \"entity-filter\",\n  \"horizontal-stack\",\n  \"iframe\",\n  \"vertical-stack\",\n  \"shopping-list\",\n];\n\n@customElement(\"hui-card-picker\")\nexport class HuiCardPicker extends LitElement {\n  @property() public hass?: HomeAssistant;\n\n  @property() private _cards: CardElement[] = [];\n\n  public lovelace?: LovelaceConfig;\n\n  public cardPicked?: (cardConf: LovelaceCardConfig) => void;\n\n  private _filter?: string;\n\n  private _unusedEntities?: string[];\n\n  private _usedEntities?: string[];\n\n  private _filterCards = memoizeOne(\n    (cardElements: CardElement[], filter?: string): CardElement[] => {\n      if (filter) {\n        let cards = cardElements.map(\n          (cardElement: CardElement) => cardElement.card\n        );\n        const options: Fuse.FuseOptions<Card> = {\n          keys: [\"type\", \"name\", \"description\"],\n          caseSensitive: false,\n          minMatchCharLength: 2,\n          threshold: 0.2,\n        };\n        const fuse = new Fuse(cards, options);\n        cards = fuse.search(filter);\n        cardElements = cardElements.filter((cardElement: CardElement) =>\n          cards.includes(cardElement.card)\n        );\n      }\n      return cardElements;\n    }\n  );\n\n  protected render(): TemplateResult {\n    if (\n      !this.hass ||\n      !this.lovelace ||\n      !this._unusedEntities ||\n      !this._usedEntities\n    ) {\n      return html``;\n    }\n\n    return html`\n      <search-input\n        .filter=${this._filter}\n        no-label-float\n        @value-changed=${this._handleSearchChange}\n      ></search-input>\n      <div class=\"cards-container\">\n        ${this._filterCards(this._cards, this._filter).map(\n          (cardElement: CardElement) => cardElement.element\n        )}\n      </div>\n      <div class=\"cards-container\">\n        <div\n          class=\"card\"\n          @click=\"${this._cardPicked}\"\n          .config=\"${{ type: \"\" }}\"\n        >\n          <div class=\"preview description\">\n            ${this.hass!.localize(\n              `ui.panel.lovelace.editor.card.generic.manual_description`\n            )}\n          </div>\n          <div class=\"card-header\">\n            ${this.hass!.localize(\n              `ui.panel.lovelace.editor.card.generic.manual`\n            )}\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    if (!oldHass) {\n      return true;\n    }\n\n    if (oldHass.language !== this.hass!.language) {\n      return true;\n    }\n\n    return false;\n  }\n\n  protected firstUpdated(): void {\n    if (!this.hass || !this.lovelace) {\n      return;\n    }\n\n    const usedEntities = computeUsedEntities(this.lovelace);\n    const unusedEntities = calcUnusedEntities(this.hass, usedEntities);\n\n    this._usedEntities = [...usedEntities].filter(\n      (eid) =>\n        this.hass!.states[eid] &&\n        !UNAVAILABLE_STATES.includes(this.hass!.states[eid].state)\n    );\n    this._unusedEntities = [...unusedEntities].filter(\n      (eid) =>\n        this.hass!.states[eid] &&\n        !UNAVAILABLE_STATES.includes(this.hass!.states[eid].state)\n    );\n\n    this._loadCards();\n  }\n\n  private _loadCards() {\n    let cards: Card[] = previewCards\n      .map((type: string) => ({\n        type,\n        name: this.hass!.localize(`ui.panel.lovelace.editor.card.${type}.name`),\n        description: this.hass!.localize(\n          `ui.panel.lovelace.editor.card.${type}.description`\n        ),\n      }))\n      .concat(\n        nonPreviewCards.map((type: string) => ({\n          type,\n          name: this.hass!.localize(\n            `ui.panel.lovelace.editor.card.${type}.name`\n          ),\n          description: this.hass!.localize(\n            `ui.panel.lovelace.editor.card.${type}.description`\n          ),\n          noElement: true,\n        }))\n      );\n    if (customCards.length > 0) {\n      cards = cards.concat(\n        customCards.map((ccard: CustomCardEntry) => ({\n          type: ccard.type,\n          name: ccard.name,\n          description: ccard.description,\n          noElement: true,\n          isCustom: true,\n        }))\n      );\n    }\n    this._cards = cards.map((card: Card) => ({\n      card: card,\n      element: html`${until(\n        this._renderCardElement(card),\n        html`\n          <div class=\"card spinner\">\n            <paper-spinner active alt=\"Loading\"></paper-spinner>\n          </div>\n        `\n      )}`,\n    }));\n  }\n\n  private _handleSearchChange(ev: CustomEvent) {\n    this._filter = ev.detail.value;\n    this.requestUpdate();\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      css`\n        .cards-container {\n          display: grid;\n          grid-gap: 8px 8px;\n          grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n          margin-top: 20px;\n        }\n\n        .card {\n          height: 100%;\n          max-width: 500px;\n          display: flex;\n          flex-direction: column;\n          border-radius: 4px;\n          border: 1px solid var(--divider-color);\n          background: var(--primary-background-color, #fafafa);\n          cursor: pointer;\n          box-sizing: border-box;\n          position: relative;\n        }\n\n        .card-header {\n          color: var(--ha-card-header-color, --primary-text-color);\n          font-family: var(--ha-card-header-font-family, inherit);\n          font-size: 16px;\n          letter-spacing: -0.012em;\n          line-height: 20px;\n          padding: 12px 16px;\n          display: block;\n          text-align: center;\n          background: var(\n            --ha-card-background,\n            var(--paper-card-background-color, white)\n          );\n          border-radius: 0 0 4px 4px;\n          border-top: 1px solid var(--divider-color);\n        }\n\n        .preview {\n          pointer-events: none;\n          margin: 20px;\n          flex-grow: 1;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n        }\n\n        .preview > :first-child {\n          zoom: 0.6;\n          display: block;\n          width: 100%;\n        }\n\n        .description {\n          text-align: center;\n        }\n\n        .spinner {\n          align-items: center;\n          justify-content: center;\n        }\n\n        .overlay {\n          position: absolute;\n          width: 100%;\n          height: 100%;\n          z-index: 1;\n        }\n      `,\n    ];\n  }\n\n  private _cardPicked(ev: Event): void {\n    const config: LovelaceCardConfig = (ev.currentTarget! as CardPickTarget)\n      .config;\n\n    fireEvent(this, \"config-changed\", { config });\n  }\n\n  private _createCardElement(cardConfig: LovelaceCardConfig) {\n    const element = createCardElement(cardConfig) as LovelaceCard;\n    element.hass = this.hass;\n    element.addEventListener(\n      \"ll-rebuild\",\n      (ev) => {\n        ev.stopPropagation();\n        element.parentElement!.replaceChild(\n          this._createCardElement(cardConfig),\n          element\n        );\n      },\n      { once: true }\n    );\n    return element;\n  }\n\n  private async _renderCardElement(card: Card): Promise<TemplateResult> {\n    let { type } = card;\n    const { noElement, isCustom, name, description } = card;\n    const customCard = isCustom ? getCustomCardEntry(type) : undefined;\n    if (isCustom) {\n      type = `${CUSTOM_TYPE_PREFIX}${type}`;\n    }\n\n    let element: LovelaceCard | undefined;\n    let cardConfig: LovelaceCardConfig = { type };\n\n    if (this.hass && this.lovelace) {\n      cardConfig = await getCardStubConfig(\n        this.hass,\n        type,\n        this._unusedEntities!,\n        this._usedEntities!\n      );\n\n      if (!noElement || customCard?.preview) {\n        element = this._createCardElement(cardConfig);\n      }\n    }\n\n    return html`\n      <div class=\"card\">\n        <div\n          class=\"overlay\"\n          @click=${this._cardPicked}\n          .config=${cardConfig}\n        ></div>\n        <div\n          class=\"preview ${classMap({\n            description: !element || element.tagName === \"HUI-ERROR-CARD\",\n          })}\"\n        >\n          ${element && element.tagName !== \"HUI-ERROR-CARD\"\n            ? element\n            : customCard\n            ? customCard.description ||\n              this.hass!.localize(\n                `ui.panel.lovelace.editor.cardpicker.no_description`\n              )\n            : description}\n        </div>\n        <div class=\"card-header\">\n          ${customCard\n            ? `${this.hass!.localize(\n                \"ui.panel.lovelace.editor.cardpicker.custom_card\"\n              )}: ${customCard.name || customCard.type}`\n            : name}\n        </div>\n      </div>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-card-picker\": HuiCardPicker;\n  }\n}\n","import { LovelaceCardConfig } from \"../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../types\";\nimport { getCardElementClass } from \"../create-element/create-card-element\";\n\nexport const getCardStubConfig = async (\n  hass: HomeAssistant,\n  type: string,\n  entities: string[],\n  entitiesFallback: string[]\n): Promise<LovelaceCardConfig> => {\n  let cardConfig: LovelaceCardConfig = { type };\n\n  const elClass = await getCardElementClass(type);\n\n  if (elClass && elClass.getStubConfig) {\n    const classStubConfig = elClass.getStubConfig(\n      hass,\n      entities,\n      entitiesFallback\n    );\n\n    cardConfig = { ...cardConfig, ...classStubConfig };\n  }\n\n  return cardConfig;\n};\n","import \"../../../../components/ha-icon-button\";\nimport \"@polymer/paper-tabs\";\nimport \"@polymer/paper-tabs/paper-tab\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  query,\n  TemplateResult,\n} from \"lit-element\";\nimport { fireEvent, HASSDomEvent } from \"../../../../common/dom/fire_event\";\nimport { LovelaceConfig } from \"../../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { StackCardConfig } from \"../../cards/types\";\nimport { struct } from \"../../common/structs/struct\";\nimport { LovelaceCardEditor } from \"../../types\";\nimport {\n  ConfigChangedEvent,\n  HuiCardEditor,\n} from \"../card-editor/hui-card-editor\";\nimport \"../card-editor/hui-card-picker\";\nimport { GUIModeChangedEvent } from \"../types\";\n\nconst cardConfigStruct = struct({\n  type: \"string\",\n  cards: [\"any\"],\n  title: \"string?\",\n});\n\n@customElement(\"hui-stack-card-editor\")\nexport class HuiStackCardEditor extends LitElement\n  implements LovelaceCardEditor {\n  @property() public hass?: HomeAssistant;\n\n  @property() public lovelace?: LovelaceConfig;\n\n  @property() private _config?: StackCardConfig;\n\n  @property() private _selectedCard = 0;\n\n  @property() private _GUImode = true;\n\n  @property() private _guiModeAvailable? = true;\n\n  @query(\"hui-card-editor\") private _cardEditorEl?: HuiCardEditor;\n\n  public setConfig(config: StackCardConfig): void {\n    this._config = cardConfigStruct(config);\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n    const selected = this._selectedCard!;\n    const numcards = this._config.cards.length;\n\n    return html`\n      <div class=\"card-config\">\n        <div class=\"toolbar\">\n          <paper-tabs\n            .selected=${selected}\n            scrollable\n            @iron-activate=${this._handleSelectedCard}\n          >\n            ${this._config.cards.map((_card, i) => {\n              return html`\n                <paper-tab>\n                  ${i + 1}\n                </paper-tab>\n              `;\n            })}\n          </paper-tabs>\n          <paper-tabs\n            id=\"add-card\"\n            .selected=${selected === numcards ? \"0\" : undefined}\n            @iron-activate=${this._handleSelectedCard}\n          >\n            <paper-tab>\n              <ha-icon icon=\"hass:plus\"></ha-icon>\n            </paper-tab>\n          </paper-tabs>\n        </div>\n\n        <div id=\"editor\">\n          ${selected < numcards\n            ? html`\n                <div id=\"card-options\">\n                  <mwc-button\n                    @click=${this._toggleMode}\n                    .disabled=${!this._guiModeAvailable}\n                    class=\"gui-mode-button\"\n                  >\n                    ${this.hass!.localize(\n                      !this._cardEditorEl || this._GUImode\n                        ? \"ui.panel.lovelace.editor.edit_card.show_code_editor\"\n                        : \"ui.panel.lovelace.editor.edit_card.show_visual_editor\"\n                    )}\n                  </mwc-button>\n                  <ha-icon-button\n                    id=\"move-before\"\n                    title=\"Move card before\"\n                    icon=\"hass:arrow-left\"\n                    .disabled=${selected === 0}\n                    @click=${this._handleMove}\n                  ></ha-icon-button>\n\n                  <ha-icon-button\n                    id=\"move-after\"\n                    title=\"Move card after\"\n                    icon=\"hass:arrow-right\"\n                    .disabled=${selected === numcards - 1}\n                    @click=${this._handleMove}\n                  ></ha-icon-button>\n\n                  <ha-icon-button\n                    icon=\"hass:delete\"\n                    @click=${this._handleDeleteCard}\n                  ></ha-icon-button>\n                </div>\n\n                <hui-card-editor\n                  .hass=${this.hass}\n                  .value=${this._config.cards[selected]}\n                  .lovelace=${this.lovelace}\n                  @config-changed=${this._handleConfigChanged}\n                  @GUImode-changed=${this._handleGUIModeChanged}\n                ></hui-card-editor>\n              `\n            : html`\n                <hui-card-picker\n                  .hass=${this.hass}\n                  .lovelace=${this.lovelace}\n                  @config-changed=\"${this._handleCardPicked}\"\n                ></hui-card-picker>\n              `}\n        </div>\n      </div>\n    `;\n  }\n\n  private _handleSelectedCard(ev) {\n    if (ev.target.id === \"add-card\") {\n      this._selectedCard = this._config!.cards.length;\n      return;\n    }\n    this._setMode(true);\n    this._guiModeAvailable = true;\n    this._selectedCard = parseInt(ev.detail.selected, 10);\n  }\n\n  private _handleConfigChanged(ev: HASSDomEvent<ConfigChangedEvent>) {\n    ev.stopPropagation();\n    if (!this._config) {\n      return;\n    }\n    this._config.cards[this._selectedCard] = ev.detail.config;\n    this._guiModeAvailable = ev.detail.guiModeAvailable;\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  private _handleCardPicked(ev) {\n    ev.stopPropagation();\n    if (!this._config) {\n      return;\n    }\n    const config = ev.detail.config;\n    this._config.cards.push(config);\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  private _handleDeleteCard() {\n    if (!this._config) {\n      return;\n    }\n    this._config.cards.splice(this._selectedCard, 1);\n    this._selectedCard = Math.max(0, this._selectedCard - 1);\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  private _handleMove(ev) {\n    if (!this._config) {\n      return;\n    }\n    const source = this._selectedCard;\n    const target = ev.target.id === \"move-before\" ? source - 1 : source + 1;\n    const card = this._config.cards.splice(this._selectedCard, 1)[0];\n    this._config.cards.splice(target, 0, card);\n    this._selectedCard = target;\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  private _handleGUIModeChanged(ev: HASSDomEvent<GUIModeChangedEvent>): void {\n    ev.stopPropagation();\n    this._GUImode = ev.detail.guiMode;\n    this._guiModeAvailable = ev.detail.guiModeAvailable;\n  }\n\n  private _toggleMode(): void {\n    this._cardEditorEl?.toggleMode();\n  }\n\n  private _setMode(value: boolean): void {\n    this._GUImode = value;\n    if (this._cardEditorEl) {\n      this._cardEditorEl!.GUImode = value;\n    }\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      .toolbar {\n        display: flex;\n        --paper-tabs-selection-bar-color: var(--primary-color);\n        --paper-tab-ink: var(--primary-color);\n      }\n      paper-tabs {\n        display: flex;\n        font-size: 14px;\n        flex-grow: 1;\n      }\n      #add-card {\n        max-width: 32px;\n        padding: 0;\n      }\n\n      #card-options {\n        display: flex;\n        justify-content: flex-end;\n        width: 100%;\n      }\n\n      #editor {\n        border: 1px solid var(--divider-color);\n        padding: 12px;\n      }\n      @media (max-width: 450px) {\n        #editor {\n          margin: 0 -12px;\n        }\n      }\n\n      .gui-mode-button {\n        margin-right: auto;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-stack-card-editor\": HuiStackCardEditor;\n  }\n}\n"],"sourceRoot":""}