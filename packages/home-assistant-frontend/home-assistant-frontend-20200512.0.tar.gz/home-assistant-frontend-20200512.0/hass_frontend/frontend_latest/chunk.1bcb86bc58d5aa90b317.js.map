{"version":3,"sources":["webpack:///./src/panels/lovelace/common/evaluate-filter.ts","webpack:///./src/panels/lovelace/badges/hui-entity-filter-badge.ts"],"names":["__webpack_require__","d","__webpack_exports__","evaluateFilter","stateObj","filter","operator","value","state","attribute","attributes","Array","isArray","includes","RegExp","test","JSON","stringify","customElements","define","HTMLElement","[object Object]","args","super","_defineProperty","this","setConfig","config","entities","Error","state_filter","every","entity","_config","_configEntities","undefined","lastChild","removeChild","_elements","hass","element","haveEntitiesChanged","_hass","processConfigEntities","entitiesList","entityConf","states","length","_oldEntities","idx","badgeConfig","createBadgeElement","push","appendChild","style","display","localize"],"mappings":"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","file":"chunk.1bcb86bc58d5aa90b317.js","sourcesContent":["import { HassEntity } from \"home-assistant-js-websocket\";\n\nexport const evaluateFilter = (stateObj: HassEntity, filter: any): boolean => {\n  const operator = filter.operator || \"==\";\n  const value = filter.value || filter;\n  const state = filter.attribute\n    ? stateObj.attributes[filter.attribute]\n    : stateObj.state;\n\n  switch (operator) {\n    case \"==\":\n      return state === value;\n    case \"<=\":\n      return state <= value;\n    case \"<\":\n      return state < value;\n    case \">=\":\n      return state >= value;\n    case \">\":\n      return state > value;\n    case \"!=\":\n      return state !== value;\n    case \"in\":\n      if (Array.isArray(state) || typeof state === \"string\") {\n        return state.includes(value);\n      }\n      return false;\n    case \"not in\":\n      if (Array.isArray(state) || typeof state === \"string\") {\n        return !state.includes(value);\n      }\n      return false;\n    case \"regex\": {\n      if (state !== null && typeof state === \"object\") {\n        return RegExp(value).test(JSON.stringify(state));\n      }\n      return RegExp(value).test(state);\n    }\n    default:\n      return false;\n  }\n};\n","import { HomeAssistant } from \"../../../types\";\nimport { evaluateFilter } from \"../common/evaluate-filter\";\nimport { processConfigEntities } from \"../common/process-config-entities\";\nimport { createBadgeElement } from \"../create-element/create-badge-element\";\nimport { EntityFilterEntityConfig } from \"../entity-rows/types\";\nimport { LovelaceBadge } from \"../types\";\nimport { EntityFilterBadgeConfig } from \"./types\";\n\nclass EntityFilterBadge extends HTMLElement implements LovelaceBadge {\n  private _elements?: LovelaceBadge[];\n\n  private _config?: EntityFilterBadgeConfig;\n\n  private _configEntities?: EntityFilterEntityConfig[];\n\n  private _hass?: HomeAssistant;\n\n  private _oldEntities?: EntityFilterEntityConfig[];\n\n  public setConfig(config: EntityFilterBadgeConfig): void {\n    if (!config.entities || !Array.isArray(config.entities)) {\n      throw new Error(\"entities must be specified.\");\n    }\n\n    if (\n      !(config.state_filter && Array.isArray(config.state_filter)) &&\n      !config.entities.every(\n        (entity) =>\n          typeof entity === \"object\" &&\n          entity.state_filter &&\n          Array.isArray(entity.state_filter)\n      )\n    ) {\n      throw new Error(\"Incorrect filter config.\");\n    }\n\n    this._config = config;\n    this._configEntities = undefined;\n\n    if (this.lastChild) {\n      this.removeChild(this.lastChild);\n      this._elements = undefined;\n    }\n  }\n\n  set hass(hass: HomeAssistant) {\n    if (!hass || !this._config) {\n      return;\n    }\n\n    if (this._elements) {\n      for (const element of this._elements) {\n        element.hass = hass;\n      }\n    }\n\n    if (!this.haveEntitiesChanged(hass)) {\n      this._hass = hass;\n      return;\n    }\n\n    this._hass = hass;\n\n    if (!this._configEntities) {\n      this._configEntities = processConfigEntities(this._config.entities);\n    }\n\n    const entitiesList = this._configEntities.filter((entityConf) => {\n      const stateObj = hass.states[entityConf.entity];\n\n      if (!stateObj) {\n        return false;\n      }\n\n      if (entityConf.state_filter) {\n        for (const filter of entityConf.state_filter) {\n          if (evaluateFilter(stateObj, filter)) {\n            return true;\n          }\n        }\n      } else {\n        for (const filter of this._config!.state_filter) {\n          if (evaluateFilter(stateObj, filter)) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    });\n\n    if (entitiesList.length === 0) {\n      this.style.display = \"none\";\n      return;\n    }\n\n    const isSame =\n      this._oldEntities &&\n      entitiesList.length === this._oldEntities.length &&\n      entitiesList.every((entity, idx) => entity === this._oldEntities![idx]);\n\n    if (!isSame) {\n      this._elements = [];\n      for (const badgeConfig of entitiesList) {\n        const element = createBadgeElement(badgeConfig);\n        element.hass = hass;\n        this._elements.push(element);\n      }\n      this._oldEntities = entitiesList;\n    }\n\n    if (!this._elements) {\n      return;\n    }\n\n    while (this.lastChild) {\n      this.removeChild(this.lastChild);\n    }\n\n    for (const element of this._elements) {\n      this.appendChild(element);\n    }\n\n    this.style.display = \"inline\";\n  }\n\n  private haveEntitiesChanged(hass: HomeAssistant): boolean {\n    if (!this._hass) {\n      return true;\n    }\n\n    if (!this._configEntities || this._hass.localize !== hass.localize) {\n      return true;\n    }\n\n    for (const config of this._configEntities) {\n      if (this._hass.states[config.entity] !== hass.states[config.entity]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\ncustomElements.define(\"hui-entity-filter-badge\", EntityFilterBadge);\n"],"sourceRoot":""}