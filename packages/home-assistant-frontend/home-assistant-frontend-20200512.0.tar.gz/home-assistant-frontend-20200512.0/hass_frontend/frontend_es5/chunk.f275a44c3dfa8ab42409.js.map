{"version":3,"sources":["webpack:///./node_modules/@polymer/iron-a11y-announcer/iron-a11y-announcer.js","webpack:///./node_modules/@polymer/iron-input/iron-input.js","webpack:///./node_modules/fecha/lib/fecha.js","webpack:///./node_modules/@polymer/paper-input/paper-input.js"],"names":["IronA11yAnnouncer","Polymer","_template","html","_templateObject","is","properties","mode","type","String","value","_text","created","instance","this","document","body","addEventListener","_onIronAnnounce","bind","announce","text","async","event","detail","requestAvailability","createElement","appendChild","behaviors","IronValidatableBehavior","bindValue","computed","allowedPattern","autoValidate","Boolean","_inputElement","Object","observers","listeners","input","keypress","_previousValidInput","_patternAlreadyChecked","attached","_observer","dom","observeNodes","info","_initSlottedInput","detached","unobserveNodes","inputElement","getEffectiveChildren","fire","_patternRegExp","pattern","RegExp","_bindValueChanged","undefined","validate","_onInput","_checkPatternValidity","_announceInvalidCharacter","_isPrintable","anyNonPrintable","keyCode","mozNonPrintable","charCode","_onKeypress","regexp","metaKey","ctrlKey","altKey","thisChar","fromCharCode","test","preventDefault","i","length","invalid","valid","checkValidity","required","hasValidator","call","message","_computeValue","__webpack_require__","d","__webpack_exports__","format","token","word","literal","shorten","arr","sLen","newArr","len","push","substr","monthUpdate","arrName","v","i18n","index","map","toLowerCase","indexOf","assign","origObj","args","_i","arguments","_a","args_1","obj","key","dayNames","monthNames","monthNamesShort","defaultI18n","dayNamesShort","amPm","DoFn","dayOfMonth","globalI18n","pad","val","formatFlags","D","dateObj","getDate","DD","Do","getDay","dd","ddd","dddd","M","getMonth","MM","MMM","MMMM","YY","getFullYear","YYYY","h","getHours","hh","H","HH","m","getMinutes","mm","s","getSeconds","ss","S","Math","round","getMilliseconds","SS","SSS","a","A","toUpperCase","ZZ","offset","getTimezoneOffset","floor","abs","Z","monthParse","emptyDigits","emptyWord","timezoneOffset","parts","match","minutes","parseInt","globalMasks","default","shortDate","mediumDate","longDate","fullDate","isoDate","isoDateTime","shortTime","mediumTime","longTime","mask","Date","prototype","toString","isNaN","getTime","Error","literals","replace","$0","$1","combinedI18nSettings","shift","PaperInputBehavior","IronFormElementBehavior","_focusableElement","iron-input-ready","_onIronInputReady","$","nativeInput","$$","_typesThatHaveText","alwaysFloatLabel","container","_handleValueAndAutoValidate"],"mappings":"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","file":"chunk.f275a44c3dfa8ab42409.js","sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/**\n`iron-a11y-announcer` is a singleton element that is intended to add a11y\nto features that require on-demand announcement from screen readers. In\norder to make use of the announcer, it is best to request its availability\nin the announcing element.\n\nExample:\n\n    Polymer({\n\n      is: 'x-chatty',\n\n      attached: function() {\n        // This will create the singleton element if it has not\n        // been created yet:\n        Polymer.IronA11yAnnouncer.requestAvailability();\n      }\n    });\n\nAfter the `iron-a11y-announcer` has been made available, elements can\nmake announces by firing bubbling `iron-announce` events.\n\nExample:\n\n    this.fire('iron-announce', {\n      text: 'This is an announcement!'\n    }, { bubbles: true });\n\nNote: announcements are only audible if you have a screen reader enabled.\n\n@group Iron Elements\n@demo demo/index.html\n*/\nexport const IronA11yAnnouncer = Polymer({\n  _template: html`\n    <style>\n      :host {\n        display: inline-block;\n        position: fixed;\n        clip: rect(0px,0px,0px,0px);\n      }\n    </style>\n    <div aria-live$=\"[[mode]]\">[[_text]]</div>\n`,\n\n  is: 'iron-a11y-announcer',\n\n  properties: {\n\n    /**\n     * The value of mode is used to set the `aria-live` attribute\n     * for the element that will be announced. Valid values are: `off`,\n     * `polite` and `assertive`.\n     */\n    mode: {type: String, value: 'polite'},\n\n    _text: {type: String, value: ''}\n  },\n\n  created: function() {\n    if (!IronA11yAnnouncer.instance) {\n      IronA11yAnnouncer.instance = this;\n    }\n\n    document.body.addEventListener(\n        'iron-announce', this._onIronAnnounce.bind(this));\n  },\n\n  /**\n   * Cause a text string to be announced by screen readers.\n   *\n   * @param {string} text The text that should be announced.\n   */\n  announce: function(text) {\n    this._text = '';\n    this.async(function() {\n      this._text = text;\n    }, 100);\n  },\n\n  _onIronAnnounce: function(event) {\n    if (event.detail && event.detail.text) {\n      this.announce(event.detail.text);\n    }\n  }\n});\n\nIronA11yAnnouncer.instance = null;\n\nIronA11yAnnouncer.requestAvailability = function() {\n  if (!IronA11yAnnouncer.instance) {\n    IronA11yAnnouncer.instance = document.createElement('iron-a11y-announcer');\n  }\n\n  document.body.appendChild(IronA11yAnnouncer.instance);\n};\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {IronA11yAnnouncer} from '@polymer/iron-a11y-announcer/iron-a11y-announcer.js';\nimport {IronValidatableBehavior} from '@polymer/iron-validatable-behavior/iron-validatable-behavior.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/**\n`<iron-input>` is a wrapper to a native `<input>` element, that adds two-way\nbinding and prevention of invalid input. To use it, you must distribute a native\n`<input>` yourself. You can continue to use the native `input` as you would\nnormally:\n\n    <iron-input>\n      <input>\n    </iron-input>\n\n    <iron-input>\n      <input type=\"email\" disabled>\n    </iron-input>\n\n### Two-way binding\n\nBy default you can only get notified of changes to a native `<input>`'s `value`\ndue to user input:\n\n    <input value=\"{{myValue::input}}\">\n\nThis means that if you imperatively set the value (i.e. `someNativeInput.value =\n'foo'`), no events will be fired and this change cannot be observed.\n\n`iron-input` adds the `bind-value` property that mirrors the native `input`'s\n'`value` property; this property can be used for two-way data binding.\n`bind-value` will notify if it is changed either by user input or by script.\n\n    <iron-input bind-value=\"{{myValue}}\">\n      <input>\n    </iron-input>\n\nNote: this means that if you want to imperatively set the native `input`'s, you\n_must_ set `bind-value` instead, so that the wrapper `iron-input` can be\nnotified.\n\n### Validation\n\n`iron-input` uses the native `input`'s validation. For simplicity, `iron-input`\nhas a `validate()` method (which internally just checks the distributed\n`input`'s validity), which sets an `invalid` attribute that can also be used for\nstyling.\n\nTo validate automatically as you type, you can use the `auto-validate`\nattribute.\n\n`iron-input` also fires an `iron-input-validate` event after `validate()` is\ncalled. You can use it to implement a custom validator:\n\n    var CatsOnlyValidator = {\n      validate: function(ironInput) {\n        var valid = !ironInput.bindValue || ironInput.bindValue === 'cat';\n        ironInput.invalid = !valid;\n        return valid;\n      }\n    }\n    ironInput.addEventListener('iron-input-validate', function() {\n      CatsOnly.validate(input2);\n    });\n\nYou can also use an element implementing an\n[`IronValidatorBehavior`](/element/PolymerElements/iron-validatable-behavior).\nThis example can also be found in the demo for this element:\n\n    <iron-input validator=\"cats-only\">\n      <input>\n    </iron-input>\n\n### Preventing invalid input\n\nIt may be desirable to only allow users to enter certain characters. You can use\nthe `allowed-pattern` attribute to accomplish this. This feature is separate\nfrom validation, and `allowed-pattern` does not affect how the input is\nvalidated.\n\n    // Only allow typing digits, but a valid input has exactly 5 digits.\n    <iron-input allowed-pattern=\"[0-9]\">\n      <input pattern=\"\\d{5}\">\n    </iron-input>\n\n@demo demo/index.html\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: inline-block;\n      }\n    </style>\n    <slot id=\"content\"></slot>\n`,\n\n  is: 'iron-input',\n  behaviors: [IronValidatableBehavior],\n\n  /**\n   * Fired whenever `validate()` is called.\n   *\n   * @event iron-input-validate\n   */\n\n  properties: {\n\n    /**\n     * Use this property instead of `value` for two-way data binding, or to\n     * set a default value for the input. **Do not** use the distributed\n     * input's `value` property to set a default value.\n     */\n    bindValue: {type: String, value: ''},\n\n    /**\n     * Computed property that echoes `bindValue` (mostly used for Polymer 1.0\n     * backcompatibility, if you were one-way binding to the Polymer 1.0\n     * `input is=\"iron-input\"` value attribute).\n     */\n    value: {type: String, computed: '_computeValue(bindValue)'},\n\n    /**\n     * Regex-like list of characters allowed as input; all characters not in the\n     * list will be rejected. The recommended format should be a list of allowed\n     * characters, for example, `[a-zA-Z0-9.+-!;:]`.\n     *\n     * This pattern represents the allowed characters for the field; as the user\n     * inputs text, each individual character will be checked against the\n     * pattern (rather than checking the entire value as a whole). If a\n     * character is not a match, it will be rejected.\n     *\n     * Pasted input will have each character checked individually; if any\n     * character doesn't match `allowedPattern`, the entire pasted string will\n     * be rejected.\n     *\n     * Note: if you were using `iron-input` in 1.0, you were also required to\n     * set `prevent-invalid-input`. This is no longer needed as of Polymer 2.0,\n     * and will be set automatically for you if an `allowedPattern` is provided.\n     *\n     */\n    allowedPattern: {type: String},\n\n    /**\n     * Set to true to auto-validate the input value as you type.\n     */\n    autoValidate: {type: Boolean, value: false},\n\n    /**\n     * The native input element.\n     */\n    _inputElement: Object,\n  },\n\n  observers: ['_bindValueChanged(bindValue, _inputElement)'],\n  listeners: {'input': '_onInput', 'keypress': '_onKeypress'},\n\n  created: function() {\n    IronA11yAnnouncer.requestAvailability();\n    this._previousValidInput = '';\n    this._patternAlreadyChecked = false;\n  },\n\n  attached: function() {\n    // If the input is added at a later time, update the internal reference.\n    this._observer = dom(this).observeNodes(function(info) {\n      this._initSlottedInput();\n    }.bind(this));\n  },\n\n  detached: function() {\n    if (this._observer) {\n      dom(this).unobserveNodes(this._observer);\n      this._observer = null;\n    }\n  },\n\n  /**\n   * Returns the distributed input element.\n   */\n  get inputElement() {\n    return this._inputElement;\n  },\n\n  _initSlottedInput: function() {\n    this._inputElement = this.getEffectiveChildren()[0];\n\n    if (this.inputElement && this.inputElement.value) {\n      this.bindValue = this.inputElement.value;\n    }\n\n    this.fire('iron-input-ready');\n  },\n\n  get _patternRegExp() {\n    var pattern;\n    if (this.allowedPattern) {\n      pattern = new RegExp(this.allowedPattern);\n    } else {\n      switch (this.inputElement.type) {\n        case 'number':\n          pattern = /[0-9.,e-]/;\n          break;\n      }\n    }\n    return pattern;\n  },\n\n  /**\n   * @suppress {checkTypes}\n   */\n  _bindValueChanged: function(bindValue, inputElement) {\n    // The observer could have run before attached() when we have actually\n    // initialized this property.\n    if (!inputElement) {\n      return;\n    }\n\n    if (bindValue === undefined) {\n      inputElement.value = null;\n    } else if (bindValue !== inputElement.value) {\n      this.inputElement.value = bindValue;\n    }\n\n    if (this.autoValidate) {\n      this.validate();\n    }\n\n    // manually notify because we don't want to notify until after setting value\n    this.fire('bind-value-changed', {value: bindValue});\n  },\n\n  _onInput: function() {\n    // Need to validate each of the characters pasted if they haven't\n    // been validated inside `_onKeypress` already.\n    if (this.allowedPattern && !this._patternAlreadyChecked) {\n      var valid = this._checkPatternValidity();\n      if (!valid) {\n        this._announceInvalidCharacter(\n            'Invalid string of characters not entered.');\n        this.inputElement.value = this._previousValidInput;\n      }\n    }\n    this.bindValue = this._previousValidInput = this.inputElement.value;\n    this._patternAlreadyChecked = false;\n  },\n\n  _isPrintable: function(event) {\n    // What a control/printable character is varies wildly based on the browser.\n    // - most control characters (arrows, backspace) do not send a `keypress`\n    // event\n    //   in Chrome, but the *do* on Firefox\n    // - in Firefox, when they do send a `keypress` event, control chars have\n    //   a charCode = 0, keyCode = xx (for ex. 40 for down arrow)\n    // - printable characters always send a keypress event.\n    // - in Firefox, printable chars always have a keyCode = 0. In Chrome, the\n    // keyCode\n    //   always matches the charCode.\n    // None of this makes any sense.\n\n    // For these keys, ASCII code == browser keycode.\n    var anyNonPrintable = (event.keyCode == 8) ||  // backspace\n        (event.keyCode == 9) ||                    // tab\n        (event.keyCode == 13) ||                   // enter\n        (event.keyCode == 27);                     // escape\n\n    // For these keys, make sure it's a browser keycode and not an ASCII code.\n    var mozNonPrintable = (event.keyCode == 19) ||  // pause\n        (event.keyCode == 20) ||                    // caps lock\n        (event.keyCode == 45) ||                    // insert\n        (event.keyCode == 46) ||                    // delete\n        (event.keyCode == 144) ||                   // num lock\n        (event.keyCode == 145) ||                   // scroll lock\n        (event.keyCode > 32 &&\n         event.keyCode < 41) ||  // page up/down, end, home, arrows\n        (event.keyCode > 111 && event.keyCode < 124);  // fn keys\n\n    return !anyNonPrintable && !(event.charCode == 0 && mozNonPrintable);\n  },\n\n  _onKeypress: function(event) {\n    if (!this.allowedPattern && this.inputElement.type !== 'number') {\n      return;\n    }\n    var regexp = this._patternRegExp;\n    if (!regexp) {\n      return;\n    }\n\n    // Handle special keys and backspace\n    if (event.metaKey || event.ctrlKey || event.altKey) {\n      return;\n    }\n\n    // Check the pattern either here or in `_onInput`, but not in both.\n    this._patternAlreadyChecked = true;\n\n    var thisChar = String.fromCharCode(event.charCode);\n    if (this._isPrintable(event) && !regexp.test(thisChar)) {\n      event.preventDefault();\n      this._announceInvalidCharacter(\n          'Invalid character ' + thisChar + ' not entered.');\n    }\n  },\n\n  _checkPatternValidity: function() {\n    var regexp = this._patternRegExp;\n    if (!regexp) {\n      return true;\n    }\n    for (var i = 0; i < this.inputElement.value.length; i++) {\n      if (!regexp.test(this.inputElement.value[i])) {\n        return false;\n      }\n    }\n    return true;\n  },\n\n  /**\n   * Returns true if `value` is valid. The validator provided in `validator`\n   * will be used first, then any constraints.\n   * @return {boolean} True if the value is valid.\n   */\n  validate: function() {\n    if (!this.inputElement) {\n      this.invalid = false;\n      return true;\n    }\n\n    // Use the nested input's native validity.\n    var valid = this.inputElement.checkValidity();\n\n    // Only do extra checking if the browser thought this was valid.\n    if (valid) {\n      // Empty, required input is invalid\n      if (this.required && this.bindValue === '') {\n        valid = false;\n      } else if (this.hasValidator()) {\n        valid = IronValidatableBehavior.validate.call(this, this.bindValue);\n      }\n    }\n\n    this.invalid = !valid;\n    this.fire('iron-input-validate');\n    return valid;\n  },\n\n  _announceInvalidCharacter: function(message) {\n    this.fire('iron-announce', {text: message});\n  },\n\n  _computeValue: function(bindValue) {\n    return bindValue;\n  }\n});\n","var token = /d{1,4}|M{1,4}|YY(?:YY)?|S{1,3}|Do|ZZ|Z|([HhMsDm])\\1?|[aA]|\"[^\"]*\"|'[^']*'/g;\nvar twoDigitsOptional = \"[1-9]\\\\d?\";\nvar twoDigits = \"\\\\d\\\\d\";\nvar threeDigits = \"\\\\d{3}\";\nvar fourDigits = \"\\\\d{4}\";\nvar word = \"[^\\\\s]+\";\nvar literal = /\\[([^]*?)\\]/gm;\nfunction shorten(arr, sLen) {\n    var newArr = [];\n    for (var i = 0, len = arr.length; i < len; i++) {\n        newArr.push(arr[i].substr(0, sLen));\n    }\n    return newArr;\n}\nvar monthUpdate = function (arrName) { return function (v, i18n) {\n    var lowerCaseArr = i18n[arrName].map(function (v) { return v.toLowerCase(); });\n    var index = lowerCaseArr.indexOf(v.toLowerCase());\n    if (index > -1) {\n        return index;\n    }\n    return null;\n}; };\nfunction assign(origObj) {\n    var args = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n    }\n    for (var _a = 0, args_1 = args; _a < args_1.length; _a++) {\n        var obj = args_1[_a];\n        for (var key in obj) {\n            // @ts-ignore ex\n            origObj[key] = obj[key];\n        }\n    }\n    return origObj;\n}\nvar dayNames = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\"\n];\nvar monthNames = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\"\n];\nvar monthNamesShort = shorten(monthNames, 3);\nvar dayNamesShort = shorten(dayNames, 3);\nvar defaultI18n = {\n    dayNamesShort: dayNamesShort,\n    dayNames: dayNames,\n    monthNamesShort: monthNamesShort,\n    monthNames: monthNames,\n    amPm: [\"am\", \"pm\"],\n    DoFn: function (dayOfMonth) {\n        return (dayOfMonth +\n            [\"th\", \"st\", \"nd\", \"rd\"][dayOfMonth % 10 > 3\n                ? 0\n                : ((dayOfMonth - (dayOfMonth % 10) !== 10 ? 1 : 0) * dayOfMonth) % 10]);\n    }\n};\nvar globalI18n = assign({}, defaultI18n);\nvar setGlobalDateI18n = function (i18n) {\n    return (globalI18n = assign(globalI18n, i18n));\n};\nvar regexEscape = function (str) {\n    return str.replace(/[|\\\\{()[^$+*?.-]/g, \"\\\\$&\");\n};\nvar pad = function (val, len) {\n    if (len === void 0) { len = 2; }\n    val = String(val);\n    while (val.length < len) {\n        val = \"0\" + val;\n    }\n    return val;\n};\nvar formatFlags = {\n    D: function (dateObj) { return String(dateObj.getDate()); },\n    DD: function (dateObj) { return pad(dateObj.getDate()); },\n    Do: function (dateObj, i18n) {\n        return i18n.DoFn(dateObj.getDate());\n    },\n    d: function (dateObj) { return String(dateObj.getDay()); },\n    dd: function (dateObj) { return pad(dateObj.getDay()); },\n    ddd: function (dateObj, i18n) {\n        return i18n.dayNamesShort[dateObj.getDay()];\n    },\n    dddd: function (dateObj, i18n) {\n        return i18n.dayNames[dateObj.getDay()];\n    },\n    M: function (dateObj) { return String(dateObj.getMonth() + 1); },\n    MM: function (dateObj) { return pad(dateObj.getMonth() + 1); },\n    MMM: function (dateObj, i18n) {\n        return i18n.monthNamesShort[dateObj.getMonth()];\n    },\n    MMMM: function (dateObj, i18n) {\n        return i18n.monthNames[dateObj.getMonth()];\n    },\n    YY: function (dateObj) {\n        return pad(String(dateObj.getFullYear()), 4).substr(2);\n    },\n    YYYY: function (dateObj) { return pad(dateObj.getFullYear(), 4); },\n    h: function (dateObj) { return String(dateObj.getHours() % 12 || 12); },\n    hh: function (dateObj) { return pad(dateObj.getHours() % 12 || 12); },\n    H: function (dateObj) { return String(dateObj.getHours()); },\n    HH: function (dateObj) { return pad(dateObj.getHours()); },\n    m: function (dateObj) { return String(dateObj.getMinutes()); },\n    mm: function (dateObj) { return pad(dateObj.getMinutes()); },\n    s: function (dateObj) { return String(dateObj.getSeconds()); },\n    ss: function (dateObj) { return pad(dateObj.getSeconds()); },\n    S: function (dateObj) {\n        return String(Math.round(dateObj.getMilliseconds() / 100));\n    },\n    SS: function (dateObj) {\n        return pad(Math.round(dateObj.getMilliseconds() / 10), 2);\n    },\n    SSS: function (dateObj) { return pad(dateObj.getMilliseconds(), 3); },\n    a: function (dateObj, i18n) {\n        return dateObj.getHours() < 12 ? i18n.amPm[0] : i18n.amPm[1];\n    },\n    A: function (dateObj, i18n) {\n        return dateObj.getHours() < 12\n            ? i18n.amPm[0].toUpperCase()\n            : i18n.amPm[1].toUpperCase();\n    },\n    ZZ: function (dateObj) {\n        var offset = dateObj.getTimezoneOffset();\n        return ((offset > 0 ? \"-\" : \"+\") +\n            pad(Math.floor(Math.abs(offset) / 60) * 100 + (Math.abs(offset) % 60), 4));\n    },\n    Z: function (dateObj) {\n        var offset = dateObj.getTimezoneOffset();\n        return ((offset > 0 ? \"-\" : \"+\") +\n            pad(Math.floor(Math.abs(offset) / 60), 2) +\n            \":\" +\n            pad(Math.abs(offset) % 60, 2));\n    }\n};\nvar monthParse = function (v) { return +v - 1; };\nvar emptyDigits = [null, twoDigitsOptional];\nvar emptyWord = [null, word];\nvar amPm = [\n    \"isPm\",\n    word,\n    function (v, i18n) {\n        var val = v.toLowerCase();\n        if (val === i18n.amPm[0]) {\n            return 0;\n        }\n        else if (val === i18n.amPm[1]) {\n            return 1;\n        }\n        return null;\n    }\n];\nvar timezoneOffset = [\n    \"timezoneOffset\",\n    \"[^\\\\s]*?[\\\\+\\\\-]\\\\d\\\\d:?\\\\d\\\\d|[^\\\\s]*?Z?\",\n    function (v) {\n        var parts = (v + \"\").match(/([+-]|\\d\\d)/gi);\n        if (parts) {\n            var minutes = +parts[1] * 60 + parseInt(parts[2], 10);\n            return parts[0] === \"+\" ? minutes : -minutes;\n        }\n        return 0;\n    }\n];\nvar parseFlags = {\n    D: [\"day\", twoDigitsOptional],\n    DD: [\"day\", twoDigits],\n    Do: [\"day\", twoDigitsOptional + word, function (v) { return parseInt(v, 10); }],\n    M: [\"month\", twoDigitsOptional, monthParse],\n    MM: [\"month\", twoDigits, monthParse],\n    YY: [\n        \"year\",\n        twoDigits,\n        function (v) {\n            var now = new Date();\n            var cent = +(\"\" + now.getFullYear()).substr(0, 2);\n            return +(\"\" + (+v > 68 ? cent - 1 : cent) + v);\n        }\n    ],\n    h: [\"hour\", twoDigitsOptional, undefined, \"isPm\"],\n    hh: [\"hour\", twoDigits, undefined, \"isPm\"],\n    H: [\"hour\", twoDigitsOptional],\n    HH: [\"hour\", twoDigits],\n    m: [\"minute\", twoDigitsOptional],\n    mm: [\"minute\", twoDigits],\n    s: [\"second\", twoDigitsOptional],\n    ss: [\"second\", twoDigits],\n    YYYY: [\"year\", fourDigits],\n    S: [\"millisecond\", \"\\\\d\", function (v) { return +v * 100; }],\n    SS: [\"millisecond\", twoDigits, function (v) { return +v * 10; }],\n    SSS: [\"millisecond\", threeDigits],\n    d: emptyDigits,\n    dd: emptyDigits,\n    ddd: emptyWord,\n    dddd: emptyWord,\n    MMM: [\"month\", word, monthUpdate(\"monthNamesShort\")],\n    MMMM: [\"month\", word, monthUpdate(\"monthNames\")],\n    a: amPm,\n    A: amPm,\n    ZZ: timezoneOffset,\n    Z: timezoneOffset\n};\n// Some common format strings\nvar globalMasks = {\n    default: \"ddd MMM DD YYYY HH:mm:ss\",\n    shortDate: \"M/D/YY\",\n    mediumDate: \"MMM D, YYYY\",\n    longDate: \"MMMM D, YYYY\",\n    fullDate: \"dddd, MMMM D, YYYY\",\n    isoDate: \"YYYY-MM-DD\",\n    isoDateTime: \"YYYY-MM-DDTHH:mm:ssZ\",\n    shortTime: \"HH:mm\",\n    mediumTime: \"HH:mm:ss\",\n    longTime: \"HH:mm:ss.SSS\"\n};\nvar setGlobalDateMasks = function (masks) { return assign(globalMasks, masks); };\n/***\n * Format a date\n * @method format\n * @param {Date|number} dateObj\n * @param {string} mask Format of the date, i.e. 'mm-dd-yy' or 'shortDate'\n * @returns {string} Formatted date string\n */\nvar format = function (dateObj, mask, i18n) {\n    if (mask === void 0) { mask = globalMasks[\"default\"]; }\n    if (i18n === void 0) { i18n = {}; }\n    if (typeof dateObj === \"number\") {\n        dateObj = new Date(dateObj);\n    }\n    if (Object.prototype.toString.call(dateObj) !== \"[object Date]\" ||\n        isNaN(dateObj.getTime())) {\n        throw new Error(\"Invalid Date pass to format\");\n    }\n    mask = globalMasks[mask] || mask;\n    var literals = [];\n    // Make literals inactive by replacing them with @@@\n    mask = mask.replace(literal, function ($0, $1) {\n        literals.push($1);\n        return \"@@@\";\n    });\n    var combinedI18nSettings = assign(assign({}, globalI18n), i18n);\n    // Apply formatting rules\n    mask = mask.replace(token, function ($0) {\n        return formatFlags[$0](dateObj, combinedI18nSettings);\n    });\n    // Inline literal values back into the formatted value\n    return mask.replace(/@@@/g, function () { return literals.shift(); });\n};\n/**\n * Parse a date string into a Javascript Date object /\n * @method parse\n * @param {string} dateStr Date string\n * @param {string} format Date parse format\n * @param {i18n} I18nSettingsOptional Full or subset of I18N settings\n * @returns {Date|null} Returns Date object. Returns null what date string is invalid or doesn't match format\n */\nfunction parse(dateStr, format, i18n) {\n    if (i18n === void 0) { i18n = {}; }\n    if (typeof format !== \"string\") {\n        throw new Error(\"Invalid format in fecha parse\");\n    }\n    // Check to see if the format is actually a mask\n    format = globalMasks[format] || format;\n    // Avoid regular expression denial of service, fail early for really long strings\n    // https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\n    if (dateStr.length > 1000) {\n        return null;\n    }\n    // Default to the beginning of the year.\n    var today = new Date();\n    var dateInfo = {\n        year: today.getFullYear(),\n        month: 0,\n        day: 1,\n        hour: 0,\n        minute: 0,\n        second: 0,\n        millisecond: 0,\n        isPm: null,\n        timezoneOffset: null\n    };\n    var parseInfo = [];\n    var literals = [];\n    // Replace all the literals with @@@. Hopefully a string that won't exist in the format\n    var newFormat = format.replace(literal, function ($0, $1) {\n        literals.push(regexEscape($1));\n        return \"@@@\";\n    });\n    var specifiedFields = {};\n    var requiredFields = {};\n    // Change every token that we find into the correct regex\n    newFormat = regexEscape(newFormat).replace(token, function ($0) {\n        var info = parseFlags[$0];\n        var field = info[0], regex = info[1], requiredField = info[3];\n        // Check if the person has specified the same field twice. This will lead to confusing results.\n        if (specifiedFields[field]) {\n            throw new Error(\"Invalid format. \" + field + \" specified twice in format\");\n        }\n        specifiedFields[field] = true;\n        // Check if there are any required fields. For instance, 12 hour time requires AM/PM specified\n        if (requiredField) {\n            requiredFields[requiredField] = true;\n        }\n        parseInfo.push(info);\n        return \"(\" + regex + \")\";\n    });\n    // Check all the required fields are present\n    Object.keys(requiredFields).forEach(function (field) {\n        if (!specifiedFields[field]) {\n            throw new Error(\"Invalid format. \" + field + \" is required in specified format\");\n        }\n    });\n    // Add back all the literals after\n    newFormat = newFormat.replace(/@@@/g, function () { return literals.shift(); });\n    // Check if the date string matches the format. If it doesn't return null\n    var matches = dateStr.match(new RegExp(newFormat, \"i\"));\n    if (!matches) {\n        return null;\n    }\n    var combinedI18nSettings = assign(assign({}, globalI18n), i18n);\n    // For each match, call the parser function for that date part\n    for (var i = 1; i < matches.length; i++) {\n        var _a = parseInfo[i - 1], field = _a[0], parser = _a[2];\n        var value = parser\n            ? parser(matches[i], combinedI18nSettings)\n            : +matches[i];\n        // If the parser can't make sense of the value, return null\n        if (value == null) {\n            return null;\n        }\n        dateInfo[field] = value;\n    }\n    if (dateInfo.isPm === 1 && dateInfo.hour != null && +dateInfo.hour !== 12) {\n        dateInfo.hour = +dateInfo.hour + 12;\n    }\n    else if (dateInfo.isPm === 0 && +dateInfo.hour === 12) {\n        dateInfo.hour = 0;\n    }\n    var dateWithoutTZ = new Date(dateInfo.year, dateInfo.month, dateInfo.day, dateInfo.hour, dateInfo.minute, dateInfo.second, dateInfo.millisecond);\n    var validateFields = [\n        [\"month\", \"getMonth\"],\n        [\"day\", \"getDate\"],\n        [\"hour\", \"getHours\"],\n        [\"minute\", \"getMinutes\"],\n        [\"second\", \"getSeconds\"]\n    ];\n    for (var i = 0, len = validateFields.length; i < len; i++) {\n        // Check to make sure the date field is within the allowed range. Javascript dates allows values\n        // outside the allowed range. If the values don't match the value was invalid\n        if (specifiedFields[validateFields[i][0]] &&\n            dateInfo[validateFields[i][0]] !== dateWithoutTZ[validateFields[i][1]]()) {\n            return null;\n        }\n    }\n    if (dateInfo.timezoneOffset == null) {\n        return dateWithoutTZ;\n    }\n    return new Date(Date.UTC(dateInfo.year, dateInfo.month, dateInfo.day, dateInfo.hour, dateInfo.minute - dateInfo.timezoneOffset, dateInfo.second, dateInfo.millisecond));\n}\nvar fecha = {\n    format: format,\n    parse: parse,\n    defaultI18n: defaultI18n,\n    setGlobalDateI18n: setGlobalDateI18n,\n    setGlobalDateMasks: setGlobalDateMasks\n};\n\nexport default fecha;\nexport { assign, format, parse, defaultI18n, setGlobalDateI18n, setGlobalDateMasks };\n//# sourceMappingURL=fecha.js.map\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-input/iron-input.js';\nimport './paper-input-char-counter.js';\nimport './paper-input-container.js';\nimport './paper-input-error.js';\n\nimport {IronFormElementBehavior} from '@polymer/iron-form-element-behavior/iron-form-element-behavior.js';\nimport {DomModule} from '@polymer/polymer/lib/elements/dom-module.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\nimport {PaperInputBehavior} from './paper-input-behavior.js';\n\n/**\nMaterial design: [Text\nfields](https://www.google.com/design/spec/components/text-fields.html)\n\n`<paper-input>` is a single-line text field with Material Design styling.\n\n    <paper-input label=\"Input label\"></paper-input>\n\nIt may include an optional error message or character counter.\n\n    <paper-input error-message=\"Invalid input!\" label=\"Input\n    label\"></paper-input> <paper-input char-counter label=\"Input\n    label\"></paper-input>\n\nIt can also include custom prefix or suffix elements, which are displayed\nbefore or after the text input itself. In order for an element to be\nconsidered as a prefix, it must have the `prefix` attribute (and similarly\nfor `suffix`).\n\n    <paper-input label=\"total\">\n      <div prefix>$</div>\n      <paper-icon-button slot=\"suffix\" icon=\"clear\"></paper-icon-button>\n    </paper-input>\n\nA `paper-input` can use the native `type=search` or `type=file` features.\nHowever, since we can't control the native styling of the input (search icon,\nfile button, date placeholder, etc.), in these cases the label will be\nautomatically floated. The `placeholder` attribute can still be used for\nadditional informational text.\n\n    <paper-input label=\"search!\" type=\"search\"\n        placeholder=\"search for cats\" autosave=\"test\" results=\"5\">\n    </paper-input>\n\nSee `Polymer.PaperInputBehavior` for more API docs.\n\n### Focus\n\nTo focus a paper-input, you can call the native `focus()` method as long as the\npaper input has a tab index. Similarly, `blur()` will blur the element.\n\n### Styling\n\nSee `Polymer.PaperInputContainer` for a list of custom properties used to\nstyle this element.\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-input-container-ms-clear` | Mixin applied to the Internet Explorer reveal button (the eyeball) | {}\n\n@group Paper Elements\n@element paper-input\n@hero hero.svg\n@demo demo/index.html\n*/\nPolymer({\n  is: 'paper-input',\n\n  _template: html`\n    <style>\n      :host {\n        display: block;\n      }\n\n      :host([focused]) {\n        outline: none;\n      }\n\n      :host([hidden]) {\n        display: none !important;\n      }\n\n      input {\n        /* Firefox sets a min-width on the input, which can cause layout issues */\n        min-width: 0;\n      }\n\n      /* In 1.x, the <input> is distributed to paper-input-container, which styles it.\n      In 2.x the <iron-input> is distributed to paper-input-container, which styles\n      it, but in order for this to work correctly, we need to reset some\n      of the native input's properties to inherit (from the iron-input) */\n      iron-input > input {\n        @apply --paper-input-container-shared-input-style;\n        font-family: inherit;\n        font-weight: inherit;\n        font-size: inherit;\n        letter-spacing: inherit;\n        word-spacing: inherit;\n        line-height: inherit;\n        text-shadow: inherit;\n        color: inherit;\n        cursor: inherit;\n      }\n\n      input:disabled {\n        @apply --paper-input-container-input-disabled;\n      }\n\n      input::-webkit-outer-spin-button,\n      input::-webkit-inner-spin-button {\n        @apply --paper-input-container-input-webkit-spinner;\n      }\n\n      input::-webkit-clear-button {\n        @apply --paper-input-container-input-webkit-clear;\n      }\n\n      input::-webkit-calendar-picker-indicator {\n        @apply --paper-input-container-input-webkit-calendar-picker-indicator;\n      }\n\n      input::-webkit-input-placeholder {\n        color: var(--paper-input-container-color, var(--secondary-text-color));\n      }\n\n      input:-moz-placeholder {\n        color: var(--paper-input-container-color, var(--secondary-text-color));\n      }\n\n      input::-moz-placeholder {\n        color: var(--paper-input-container-color, var(--secondary-text-color));\n      }\n\n      input::-ms-clear {\n        @apply --paper-input-container-ms-clear;\n      }\n\n      input::-ms-reveal {\n        @apply --paper-input-container-ms-reveal;\n      }\n\n      input:-ms-input-placeholder {\n        color: var(--paper-input-container-color, var(--secondary-text-color));\n      }\n\n      label {\n        pointer-events: none;\n      }\n    </style>\n\n    <paper-input-container id=\"container\" no-label-float=\"[[noLabelFloat]]\" always-float-label=\"[[_computeAlwaysFloatLabel(alwaysFloatLabel,placeholder)]]\" auto-validate$=\"[[autoValidate]]\" disabled$=\"[[disabled]]\" invalid=\"[[invalid]]\">\n\n      <slot name=\"prefix\" slot=\"prefix\"></slot>\n\n      <label hidden$=\"[[!label]]\" aria-hidden=\"true\" for$=\"[[_inputId]]\" slot=\"label\">[[label]]</label>\n\n      <!-- Need to bind maxlength so that the paper-input-char-counter works correctly -->\n      <iron-input bind-value=\"{{value}}\" slot=\"input\" class=\"input-element\" id$=\"[[_inputId]]\" maxlength$=\"[[maxlength]]\" allowed-pattern=\"[[allowedPattern]]\" invalid=\"{{invalid}}\" validator=\"[[validator]]\">\n        <input aria-labelledby$=\"[[_ariaLabelledBy]]\" aria-describedby$=\"[[_ariaDescribedBy]]\" disabled$=\"[[disabled]]\" title$=\"[[title]]\" type$=\"[[type]]\" pattern$=\"[[pattern]]\" required$=\"[[required]]\" autocomplete$=\"[[autocomplete]]\" autofocus$=\"[[autofocus]]\" inputmode$=\"[[inputmode]]\" minlength$=\"[[minlength]]\" maxlength$=\"[[maxlength]]\" min$=\"[[min]]\" max$=\"[[max]]\" step$=\"[[step]]\" name$=\"[[name]]\" placeholder$=\"[[placeholder]]\" readonly$=\"[[readonly]]\" list$=\"[[list]]\" size$=\"[[size]]\" autocapitalize$=\"[[autocapitalize]]\" autocorrect$=\"[[autocorrect]]\" on-change=\"_onChange\" tabindex$=\"[[tabIndex]]\" autosave$=\"[[autosave]]\" results$=\"[[results]]\" accept$=\"[[accept]]\" multiple$=\"[[multiple]]\">\n      </iron-input>\n\n      <slot name=\"suffix\" slot=\"suffix\"></slot>\n\n      <template is=\"dom-if\" if=\"[[errorMessage]]\">\n        <paper-input-error aria-live=\"assertive\" slot=\"add-on\">[[errorMessage]]</paper-input-error>\n      </template>\n\n      <template is=\"dom-if\" if=\"[[charCounter]]\">\n        <paper-input-char-counter slot=\"add-on\"></paper-input-char-counter>\n      </template>\n\n    </paper-input-container>\n  `,\n\n  behaviors: [PaperInputBehavior, IronFormElementBehavior],\n\n  properties: {\n    value: {\n      // Required for the correct TypeScript type-generation\n      type: String\n    }\n  },\n\n  /**\n   * Returns a reference to the focusable element. Overridden from\n   * PaperInputBehavior to correctly focus the native input.\n   *\n   * @return {!HTMLElement}\n   */\n  get _focusableElement() {\n    return this.inputElement._inputElement;\n  },\n\n  // Note: This event is only available in the 1.0 version of this element.\n  // In 2.0, the functionality of `_onIronInputReady` is done in\n  // PaperInputBehavior::attached.\n  listeners: {'iron-input-ready': '_onIronInputReady'},\n\n  _onIronInputReady: function() {\n    // Even though this is only used in the next line, save this for\n    // backwards compatibility, since the native input had this ID until 2.0.5.\n    if (!this.$.nativeInput) {\n      this.$.nativeInput = this.$$('input');\n    }\n    if (this.inputElement &&\n        this._typesThatHaveText.indexOf(this.$.nativeInput.type) !== -1) {\n      this.alwaysFloatLabel = true;\n    }\n\n    // Only validate when attached if the input already has a value.\n    if (!!this.inputElement.bindValue) {\n      this.$.container._handleValueAndAutoValidate(this.inputElement);\n    }\n  },\n});\n"],"sourceRoot":""}