{"version":3,"sources":["webpack:///./node_modules/@polymer/paper-dropdown-menu/paper-dropdown-menu.js","webpack:///./node_modules/@polymer/iron-iconset-svg/iron-iconset-svg.js","webpack:///./node_modules/@polymer/paper-dropdown-menu/paper-dropdown-menu-icons.js","webpack:///./node_modules/@polymer/paper-dropdown-menu/paper-dropdown-menu-shared-styles.js","webpack:///./node_modules/@polymer/iron-autogrow-textarea/iron-autogrow-textarea.js","webpack:///./node_modules/@polymer/paper-input/paper-textarea.js"],"names":["Polymer","_template","html","_templateObject","is","behaviors","IronButtonState","IronControlState","IronFormElementBehavior","IronValidatableBehavior","properties","selectedItemLabel","type","String","notify","readOnly","selectedItem","Object","value","label","placeholder","errorMessage","opened","Boolean","observer","allowOutsideScroll","noLabelFloat","reflectToAttribute","alwaysFloatLabel","noAnimations","horizontalAlign","verticalAlign","verticalOffset","Number","dynamicAlign","restoreFocusOnClose","listeners","tap","keyBindings","up down","esc","hostAttributes","role","aria-autocomplete","aria-haspopup","observers","attached","contentElement","this","_setSelectedItem","nodes","dom","$","content","getDistributedNodes","i","l","length","nodeType","Node","ELEMENT_NODE","open","menuButton","close","_onIronSelect","event","detail","item","_onIronDeselect","_onTap","gestures","_selectedItemChanged","getAttribute","textContent","trim","_setSelectedItemLabel","_computeMenuVerticalOffset","opt_verticalOffset","_getValidity","_value","disabled","required","_openedChanged","openState","e","setAttribute","__webpack_require__","_polymer_iron_meta_iron_meta_js__WEBPACK_IMPORTED_MODULE_1__","_polymer_polymer_lib_legacy_polymer_fn_js__WEBPACK_IMPORTED_MODULE_2__","_polymer_polymer_lib_legacy_polymer_dom_js__WEBPACK_IMPORTED_MODULE_3__","name","size","rtlMirroring","useGlobalRtlAttribute","created","_meta","IronMeta","key","style","display","getIconNames","_icons","_createIconMap","keys","map","n","applyIcon","element","iconName","removeIcon","svg","_cloneIcon","_targetIsRTL","pde","root","insertBefore","childNodes","_svgIcon","removeChild","target","__targetIsRTL","globalElement","document","body","hasAttribute","documentElement","host","window","getComputedStyle","_nameChanged","async","fire","node","icons","create","querySelectorAll","forEach","icon","id","mirrorAllowed","_prepareSvgClone","sourceSvg","cloneNode","createElementNS","viewBox","cssText","appendChild","removeAttribute","$_documentContainer","createElement","innerHTML","head","bindValue","rows","maxRows","autocomplete","autofocus","inputmode","readonly","minlength","maxlength","input","textarea","selectionStart","selectionEnd","navigator","userAgent","match","marginLeft","validate","valid","validity","hasValidator","call","invalid","_bindValueChanged","_valueChanged","mirror","_valueForMirror","_onInput","eventPath","path","_constrain","tokens","_tokens","slice","push","join","replace","split","_updateCached","paper_textarea_templateObject","PaperInputBehavior","_ariaLabelledBy","_ariaDescribedBy","start","end","_ariaLabelledByChanged","ariaLabelledBy","_focusableElement","_ariaDescribedByChanged","ariaDescribedBy","inputElement"],"mappings":";m7DAsFAA,YAAQ,CACNC,UAAWC,YAAFC,KAmBTC,GAAI,sBAEJC,UAAW,CACTC,IACAC,IACAC,IACAC,KAGFC,WAAY,CAMVC,kBAAmB,CAACC,KAAMC,OAAQC,QAAQ,EAAMC,UAAU,GAS1DC,aAAc,CAACJ,KAAMK,OAAQH,QAAQ,EAAMC,UAAU,GAOrDG,MAAO,CACLN,KAAMC,OACNC,QAAQ,GAMVK,MAAO,CAACP,KAAMC,QAKdO,YAAa,CAACR,KAAMC,QAKpBQ,aAAc,CAACT,KAAMC,QAKrBS,OACI,CAACV,KAAMW,QAAST,QAAQ,EAAMI,OAAO,EAAOM,SAAU,kBAQ1DC,mBAAoB,CAACb,KAAMW,QAASL,OAAO,GAM3CQ,aAAc,CAACd,KAAMW,QAASL,OAAO,EAAOS,oBAAoB,GAMhEC,iBAAkB,CAAChB,KAAMW,QAASL,OAAO,GAMzCW,aAAc,CAACjB,KAAMW,QAASL,OAAO,GAMrCY,gBAAiB,CAAClB,KAAMC,OAAQK,MAAO,SAMvCa,cAAe,CAACnB,KAAMC,OAAQK,MAAO,OAMrCc,eAAgBC,OAQhBC,aAAc,CAACtB,KAAMW,SAKrBY,oBAAqB,CAACvB,KAAMW,QAASL,OAAO,IAG9CkB,UAAW,CAACC,IAAO,UAKnBC,YAAa,CAACC,UAAW,OAAQC,IAAO,SAExCC,eACI,CAACC,KAAM,WAAYC,oBAAqB,OAAQC,gBAAiB,QAErEC,UAAW,CAAC,sCAEZC,SAAU,WAKR,IAAIC,EAAiBC,KAAKD,eACtBA,GAAkBA,EAAe/B,cACnCgC,KAAKC,iBAAiBF,EAAe/B,eAOzC+B,qBAGE,IADA,IAAIG,EAAQC,YAAIH,KAAKI,EAAEC,SAASC,sBACvBC,EAAI,EAAGC,EAAIN,EAAMO,OAAQF,EAAIC,EAAGD,IACvC,GAAIL,EAAMK,GAAGG,WAAaC,KAAKC,aAC7B,OAAOV,EAAMK,IAQnBM,KAAM,WACJb,KAAKI,EAAEU,WAAWD,QAMpBE,MAAO,WACLf,KAAKI,EAAEU,WAAWC,SAQpBC,cAAe,SAASC,GACtBjB,KAAKC,iBAAiBgB,EAAMC,OAAOC,OAQrCC,gBAAiB,SAASH,GACxBjB,KAAKC,iBAAiB,OAQxBoB,OAAQ,SAASJ,GACXK,IAA4BL,KAAWjB,MACzCA,KAAKa,QAUTU,qBAAsB,SAASvD,GAC7B,IAAIE,EAAQ,GAIVA,EAHGF,EAGKA,EAAaG,OAASH,EAAawD,aAAa,UACpDxD,EAAayD,YAAYC,OAHrB,GAMV1B,KAAK9B,MAAQA,EACb8B,KAAK2B,sBAAsBzD,IAW7B0D,2BAA4B,SAASlD,EAAcmD,GAEjD,OAAIA,IAQGnD,GAAgB,EAAI,IAU7BoD,aAAc,SAASC,GACrB,OAAO/B,KAAKgC,WAAahC,KAAKiC,UAAajC,KAAKiC,YAAcjC,KAAK9B,OAGrEgE,eAAgB,WACd,IAAIC,EAAYnC,KAAK1B,OAAS,OAAS,QACnC8D,EAAIpC,KAAKD,eACTqC,GACFA,EAAEC,aAAa,gBAAiBF,wCCnWtCG,EAAA,OAAAC,EAAAD,EAAA,IAAAE,EAAAF,EAAA,GAAAG,EAAAH,EAAA,GAkDAtF,YAAQ,CACNI,GAAI,mBAEJM,WAAY,CAKVgF,KAAM,CAAC9E,KAAMC,OAAQW,SAAU,gBAK/BmE,KAAM,CAAC/E,KAAMqB,OAAQf,MAAO,IAW5B0E,aAAc,CAAChF,KAAMW,QAASL,OAAO,GAOrC2E,sBAAuB,CAACjF,KAAMW,QAASL,OAAO,IAGhD4E,QAAS,WACP9C,KAAK+C,MAAQ,IAAIC,IAAS,CAACpF,KAAM,UAAWqF,IAAK,KAAM/E,MAAO,QAGhE4B,SAAU,WACRE,KAAKkD,MAAMC,QAAU,QAQvBC,aAAc,WAEZ,OADApD,KAAKqD,OAASrD,KAAKsD,iBACZrF,OAAOsF,KAAKvD,KAAKqD,QAAQG,IAAI,SAASC,GAC3C,OAAOzD,KAAK0C,KAAO,IAAMe,GACxBzD,OAoBL0D,UAAW,SAASC,EAASC,GAE3B5D,KAAK6D,WAAWF,GAEhB,IAAIG,EAAM9D,KAAK+D,WACXH,EAAU5D,KAAK4C,cAAgB5C,KAAKgE,aAAaL,IACrD,GAAIG,EAAK,CAEP,IAAIG,EAAM9D,YAAIwD,EAAQO,MAAQP,GAE9B,OADAM,EAAIE,aAAaL,EAAKG,EAAIG,WAAW,IAC9BT,EAAQU,SAAWP,EAE5B,OAAO,MASTD,WAAY,SAASF,GAEfA,EAAQU,WACVlE,YAAIwD,EAAQO,MAAQP,GAASW,YAAYX,EAAQU,UACjDV,EAAQU,SAAW,OASvBL,aAAc,SAASO,GACrB,GAA0B,MAAtBvE,KAAKwE,cACP,GAAIxE,KAAK6C,sBAAuB,CAC9B,IAAI4B,EACCC,SAASC,MAAQD,SAASC,KAAKC,aAAa,OAC7CF,SAASC,KACTD,SAASG,gBAEb7E,KAAKwE,cAAsD,QAAtCC,EAAcjD,aAAa,YAE5C+C,GAAUA,EAAO7D,WAAaC,KAAKC,eACrC2D,EAASA,EAAOO,MAGlB9E,KAAKwE,cACDD,GAA2D,QAAjDQ,OAAOC,iBAAiBT,GAAxB,UAIlB,OAAOvE,KAAKwE,eAQdS,aAAc,WACZjF,KAAK+C,MAAM7E,MAAQ,KACnB8B,KAAK+C,MAAME,IAAMjD,KAAK0C,KACtB1C,KAAK+C,MAAM7E,MAAQ8B,KAEnBA,KAAKkF,MAAM,WACTlF,KAAKmF,KAAK,qBAAsBnF,KAAM,CAACoF,KAAML,YASjDzB,eAAgB,WAId,IAAI+B,EAAQpH,OAAOqH,OAAO,MAI1B,OAHAnF,YAAIH,MAAMuF,iBAAiB,QAAQC,QAAQ,SAASC,GAClDJ,EAAMI,EAAKC,IAAMD,IAEZJ,GAUTtB,WAAY,SAAS2B,EAAIC,GAIvB,OADA3F,KAAKqD,OAASrD,KAAKqD,QAAUrD,KAAKsD,iBAC3BtD,KAAK4F,iBAAiB5F,KAAKqD,OAAOqC,GAAK1F,KAAK2C,KAAMgD,IAS3DC,iBAAkB,SAASC,EAAWlD,EAAMgD,GAC1C,GAAIE,EAAW,CACb,IAAIxF,EAAUwF,EAAUC,WAAU,GAC9BhC,EAAMY,SAASqB,gBAAgB,6BAA8B,OAC7DC,EACI3F,EAAQmB,aAAa,YAAc,OAASmB,EAAO,IAAMA,EAC7DsD,EACI,mEAgBR,OAdIN,GAAiBtF,EAAQuE,aAAa,mBACxCqB,GACI,gFAGNnC,EAAIzB,aAAa,UAAW2D,GAC5BlC,EAAIzB,aAAa,sBAAuB,iBACxCyB,EAAIzB,aAAa,YAAa,SAK9ByB,EAAIZ,MAAM+C,QAAUA,EACpBnC,EAAIoC,YAAY7F,GAAS8F,gBAAgB,MAClCrC,EAET,OAAO,0CC7PXxB,EAAA,SAWM8D,EAAsB1B,SAAS2B,cAAc,YACnDD,EAAoB/D,aAAa,QAAS,kBAE1C+D,EAAoBE,UAApB,yKAOA5B,SAAS6B,KAAKL,YAAYE,EAAoB/F,2CCrB9CiC,EAAA,QAWM8D,EAAsB1B,SAAS2B,cAAc,YACnDD,EAAoB/D,aAAa,QAAS,kBAE1C+D,EAAoBE,UAApB,88CAoEA5B,SAAS6B,KAAKL,YAAYE,EAAoB/F,w2ICzC9CrD,YAAQ,CACNC,UAAWC,YAAFC,KAmETC,GAAI,yBACJC,UAAW,CAACI,IAAyBF,KAErCG,WAAY,CAKVQ,MAAO,CAACM,SAAU,gBAAiBZ,KAAMC,OAAQC,QAAQ,GAOzD0I,UAAW,CAAChI,SAAU,oBAAqBZ,KAAMC,OAAQC,QAAQ,GASjE2I,KAAM,CAAC7I,KAAMqB,OAAQf,MAAO,EAAGM,SAAU,iBAUzCkI,QAAS,CAAC9I,KAAMqB,OAAQf,MAAO,EAAGM,SAAU,iBAK5CmI,aAAc,CAAC/I,KAAMC,OAAQK,MAAO,OAKpC0I,UAAW,CAAChJ,KAAMW,QAASL,OAAO,GAKlC2I,UAAW,CAACjJ,KAAMC,QAKlBO,YAAa,CAACR,KAAMC,QAKpBiJ,SAAU,CAAClJ,KAAMC,QAKjBoE,SAAU,CAACrE,KAAMW,SAKjBwI,UAAW,CAACnJ,KAAMqB,QAKlB+H,UAAW,CAACpJ,KAAMqB,QAKlBd,MAAO,CAACP,KAAMC,SAIhBuB,UAAW,CAAC6H,MAAS,YAMrBC,eACE,OAAOlH,KAAKI,EAAE8G,UAOhBC,qBACE,OAAOnH,KAAKI,EAAE8G,SAASC,gBAOzBC,mBACE,OAAOpH,KAAKI,EAAE8G,SAASE,cAMzBD,mBAAmBjJ,GACjB8B,KAAKI,EAAE8G,SAASC,eAAiBjJ,GAMnCkJ,iBAAiBlJ,GACf8B,KAAKI,EAAE8G,SAASE,aAAelJ,GAGjC4B,SAAU,WAMKuH,UAAUC,UAAUC,MAAM,sBAErCvH,KAAKI,EAAE8G,SAAShE,MAAMsE,WAAa,SAUvCC,SAAU,WAER,IAAIC,EAAQ1H,KAAKI,EAAE8G,SAASS,SAASD,MAcrC,OAXIA,IAEE1H,KAAKiC,UAA2B,KAAfjC,KAAK9B,MACxBwJ,GAAQ,EACC1H,KAAK4H,iBACdF,EAAQjK,IAAwBgK,SAASI,KAAK7H,KAAMA,KAAK9B,SAI7D8B,KAAK8H,SAAWJ,EAChB1H,KAAKmF,KAAK,uBACHuC,GAGTK,kBAAmB,SAASvB,GAC1BxG,KAAK9B,MAAQsI,GAGfwB,cAAe,SAAS9J,GACtB,IAAIgJ,EAAWlH,KAAKkH,SACfA,IAQDA,EAAShJ,QAAUA,IACrBgJ,EAAShJ,MAAUA,GAAmB,IAAVA,EAAoBA,EAAL,IAG7C8B,KAAKwG,UAAYtI,EACjB8B,KAAKI,EAAE6H,OAAO3B,UAAYtG,KAAKkI,kBAI/BlI,KAAKmF,KAAK,qBAAsB,CAACjH,MAAO8B,KAAKwG,cAG/C2B,SAAU,SAASlH,GACjB,IAAImH,EAAYjI,YAAIc,GAAOoH,KAC3BrI,KAAK9B,MAAQkK,EAAYA,EAAU,GAAGlK,MAAQ+C,EAAMsD,OAAOrG,OAG7DoK,WAAY,SAASC,GACnB,IAAIC,EASJ,IARAD,EAASA,GAAU,CAAC,IAIlBC,EADExI,KAAK0G,QAAU,GAAK6B,EAAO9H,OAAST,KAAK0G,QACjC6B,EAAOE,MAAM,EAAGzI,KAAK0G,SAErB6B,EAAOE,MAAM,GAElBzI,KAAKyG,KAAO,GAAK+B,EAAQ/H,OAAST,KAAKyG,MAC5C+B,EAAQE,KAAK,IAGf,OAAOF,EAAQG,KAAK,SAAW,UAGjCT,gBAAiB,WACf,IAAIjB,EAAQjH,KAAKkH,SACjB,GAAKD,EAUL,OAPAjH,KAAKuI,OAAUtB,GAASA,EAAM/I,MAAS+I,EAAM/I,MAAM0K,QAAQ,MAAO,SACtBA,QAAQ,MAAO,UACfA,QAAQ,MAAO,SACfA,QAAQ,MAAO,QACfA,QAAQ,MAAO,QACfC,MAAM,MACX,CAAC,IACjC7I,KAAKsI,WAAWtI,KAAKuI,SAG9BO,cAAe,WACb9I,KAAKI,EAAE6H,OAAO3B,UAAYtG,KAAKsI,WAAWtI,KAAKuI,utDCvSnDvL,YAAQ,CACNC,UAAWC,YAAF6L,KAgCT3L,GAAI,iBAEJC,UAAW,CACT2L,IACAxL,KAGFE,WAAY,CACVuL,gBAAiB,CACfzK,SAAU,yBACVZ,KAAMC,QAGRqL,iBAAkB,CAChB1K,SAAU,0BACVZ,KAAMC,QAGRK,MAAO,CAELN,KAAMC,QAUR4I,KAAM,CACJ7I,KAAMqB,OACNf,MAAO,GAWTwI,QAAS,CACP9I,KAAMqB,OACNf,MAAO,IAOXiJ,qBACE,OAAOnH,KAAKI,EAAE6G,MAAMC,SAASC,gBAG/BA,mBAAmBgC,GACjBnJ,KAAKI,EAAE6G,MAAMC,SAASC,eAAiBgC,GAMzC/B,mBACE,OAAOpH,KAAKI,EAAE6G,MAAMC,SAASE,cAG/BA,iBAAiBgC,GACfpJ,KAAKI,EAAE6G,MAAMC,SAASE,aAAegC,GAGvCC,uBAAwB,SAASC,GAC/BtJ,KAAKuJ,kBAAkBlH,aAAa,kBAAmBiH,IAGzDE,wBAAyB,SAASC,GAChCzJ,KAAKuJ,kBAAkBlH,aAAa,mBAAoBoH,IAG1DF,wBACE,OAAOvJ,KAAK0J,aAAaxC","file":"chunk.1e98be8f6bea0b04eae2.js","sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js';\nimport '@polymer/iron-icon/iron-icon.js';\nimport '@polymer/paper-input/paper-input.js';\nimport '@polymer/paper-menu-button/paper-menu-button.js';\nimport '@polymer/paper-ripple/paper-ripple.js';\nimport '@polymer/paper-styles/default-theme.js';\nimport './paper-dropdown-menu-icons.js';\nimport './paper-dropdown-menu-shared-styles.js';\n\nimport {IronButtonState} from '@polymer/iron-behaviors/iron-button-state.js';\nimport {IronControlState} from '@polymer/iron-behaviors/iron-control-state.js';\nimport {IronFormElementBehavior} from '@polymer/iron-form-element-behavior/iron-form-element-behavior.js';\nimport {IronValidatableBehavior} from '@polymer/iron-validatable-behavior/iron-validatable-behavior.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport * as gestures from '@polymer/polymer/lib/utils/gestures.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/**\nMaterial design: [Dropdown\nmenus](https://www.google.com/design/spec/components/buttons.html#buttons-dropdown-buttons)\n\n`paper-dropdown-menu` is similar to a native browser select element.\n`paper-dropdown-menu` works with selectable content. The currently selected\nitem is displayed in the control. If no item is selected, the `label` is\ndisplayed instead.\n\nExample:\n\n    <paper-dropdown-menu label=\"Your favourite pastry\">\n      <paper-listbox slot=\"dropdown-content\">\n        <paper-item>Croissant</paper-item>\n        <paper-item>Donut</paper-item>\n        <paper-item>Financier</paper-item>\n        <paper-item>Madeleine</paper-item>\n      </paper-listbox>\n    </paper-dropdown-menu>\n\nThis example renders a dropdown menu with 4 options.\n\nThe child element with the slot `dropdown-content` is used as the dropdown\nmenu. This can be a [`paper-listbox`](paper-listbox), or any other or\nelement that acts like an [`iron-selector`](iron-selector).\n\nSpecifically, the menu child must fire an\n[`iron-select`](iron-selector#event-iron-select) event when one of its\nchildren is selected, and an\n[`iron-deselect`](iron-selector#event-iron-deselect) event when a child is\ndeselected. The selected or deselected item must be passed as the event's\n`detail.item` property.\n\nApplications can listen for the `iron-select` and `iron-deselect` events\nto react when options are selected and deselected.\n\n### Styling\n\nThe following custom properties and mixins are also available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-dropdown-menu` | A mixin that is applied to the element host | `{}`\n`--paper-dropdown-menu-disabled` | A mixin that is applied to the element host when disabled | `{}`\n`--paper-dropdown-menu-ripple` | A mixin that is applied to the internal ripple | `{}`\n`--paper-dropdown-menu-button` | A mixin that is applied to the internal menu button | `{}`\n`--paper-dropdown-menu-input` | A mixin that is applied to the internal paper input | `{}`\n`--paper-dropdown-menu-icon` | A mixin that is applied to the internal icon | `{}`\n\nYou can also use any of the `paper-input-container` and `paper-menu-button`\nstyle mixins and custom properties to style the internal input and menu button\nrespectively.\n\n@group Paper Elements\n@element paper-dropdown-menu\n@demo demo/index.html\n*/\nPolymer({\n  _template: html`\n    <style include=\"paper-dropdown-menu-shared-styles\"></style>\n\n    <!-- this div fulfills an a11y requirement for combobox, do not remove -->\n    <span role=\"button\"></span>\n    <paper-menu-button id=\"menuButton\" vertical-align=\"[[verticalAlign]]\" horizontal-align=\"[[horizontalAlign]]\" dynamic-align=\"[[dynamicAlign]]\" vertical-offset=\"[[_computeMenuVerticalOffset(noLabelFloat, verticalOffset)]]\" disabled=\"[[disabled]]\" no-animations=\"[[noAnimations]]\" on-iron-select=\"_onIronSelect\" on-iron-deselect=\"_onIronDeselect\" opened=\"{{opened}}\" close-on-activate allow-outside-scroll=\"[[allowOutsideScroll]]\" restore-focus-on-close=\"[[restoreFocusOnClose]]\">\n      <!-- support hybrid mode: user might be using paper-menu-button 1.x which distributes via <content> -->\n      <div class=\"dropdown-trigger\" slot=\"dropdown-trigger\">\n        <paper-ripple></paper-ripple>\n        <!-- paper-input has type=\"text\" for a11y, do not remove -->\n        <paper-input type=\"text\" invalid=\"[[invalid]]\" readonly disabled=\"[[disabled]]\" value=\"[[value]]\" placeholder=\"[[placeholder]]\" error-message=\"[[errorMessage]]\" always-float-label=\"[[alwaysFloatLabel]]\" no-label-float=\"[[noLabelFloat]]\" label=\"[[label]]\">\n          <!-- support hybrid mode: user might be using paper-input 1.x which distributes via <content> -->\n          <iron-icon icon=\"paper-dropdown-menu:arrow-drop-down\" suffix slot=\"suffix\"></iron-icon>\n        </paper-input>\n      </div>\n      <slot id=\"content\" name=\"dropdown-content\" slot=\"dropdown-content\"></slot>\n    </paper-menu-button>\n`,\n\n  is: 'paper-dropdown-menu',\n\n  behaviors: [\n    IronButtonState,\n    IronControlState,\n    IronFormElementBehavior,\n    IronValidatableBehavior\n  ],\n\n  properties: {\n    /**\n     * The derived \"label\" of the currently selected item. This value\n     * is the `label` property on the selected item if set, or else the\n     * trimmed text content of the selected item.\n     */\n    selectedItemLabel: {type: String, notify: true, readOnly: true},\n\n    /**\n     * The last selected item. An item is selected if the dropdown menu has\n     * a child with slot `dropdown-content`, and that child triggers an\n     * `iron-select` event with the selected `item` in the `detail`.\n     *\n     * @type {?Object}\n     */\n    selectedItem: {type: Object, notify: true, readOnly: true},\n\n    /**\n     * The value for this element that will be used when submitting in\n     * a form. It reflects the value of `selectedItemLabel`. If set directly,\n     * it will not update the `selectedItemLabel` value.\n     */\n    value: {\n      type: String,\n      notify: true,\n    },\n\n    /**\n     * The label for the dropdown.\n     */\n    label: {type: String},\n\n    /**\n     * The placeholder for the dropdown.\n     */\n    placeholder: {type: String},\n\n    /**\n     * The error message to display when invalid.\n     */\n    errorMessage: {type: String},\n\n    /**\n     * True if the dropdown is open. Otherwise, false.\n     */\n    opened:\n        {type: Boolean, notify: true, value: false, observer: '_openedChanged'},\n\n    /**\n     * By default, the dropdown will constrain scrolling on the page\n     * to itself when opened.\n     * Set to true in order to prevent scroll from being constrained\n     * to the dropdown when it opens.\n     */\n    allowOutsideScroll: {type: Boolean, value: false},\n\n    /**\n     * Set to true to disable the floating label. Bind this to the\n     * `<paper-input-container>`'s `noLabelFloat` property.\n     */\n    noLabelFloat: {type: Boolean, value: false, reflectToAttribute: true},\n\n    /**\n     * Set to true to always float the label. Bind this to the\n     * `<paper-input-container>`'s `alwaysFloatLabel` property.\n     */\n    alwaysFloatLabel: {type: Boolean, value: false},\n\n    /**\n     * Set to true to disable animations when opening and closing the\n     * dropdown.\n     */\n    noAnimations: {type: Boolean, value: false},\n\n    /**\n     * The orientation against which to align the menu dropdown\n     * horizontally relative to the dropdown trigger.\n     */\n    horizontalAlign: {type: String, value: 'right'},\n\n    /**\n     * The orientation against which to align the menu dropdown\n     * vertically relative to the dropdown trigger.\n     */\n    verticalAlign: {type: String, value: 'top'},\n\n    /**\n     * Overrides the vertical offset computed in\n     * _computeMenuVerticalOffset.\n     */\n    verticalOffset: Number,\n\n    /**\n     * If true, the `horizontalAlign` and `verticalAlign` properties will\n     * be considered preferences instead of strict requirements when\n     * positioning the dropdown and may be changed if doing so reduces\n     * the area of the dropdown falling outside of `fitInto`.\n     */\n    dynamicAlign: {type: Boolean},\n\n    /**\n     * Whether focus should be restored to the dropdown when the menu closes.\n     */\n    restoreFocusOnClose: {type: Boolean, value: true},\n  },\n\n  listeners: {'tap': '_onTap'},\n\n  /**\n   * @type {!Object}\n   */\n  keyBindings: {'up down': 'open', 'esc': 'close'},\n\n  hostAttributes:\n      {role: 'combobox', 'aria-autocomplete': 'none', 'aria-haspopup': 'true'},\n\n  observers: ['_selectedItemChanged(selectedItem)'],\n\n  attached: function() {\n    // NOTE(cdata): Due to timing, a preselected value in a `IronSelectable`\n    // child will cause an `iron-select` event to fire while the element is\n    // still in a `DocumentFragment`. This has the effect of causing\n    // handlers not to fire. So, we double check this value on attached:\n    var contentElement = this.contentElement;\n    if (contentElement && contentElement.selectedItem) {\n      this._setSelectedItem(contentElement.selectedItem);\n    }\n  },\n\n  /**\n   * The content element that is contained by the dropdown menu, if any.\n   */\n  get contentElement() {\n    // Polymer 2.x returns slot.assignedNodes which can contain text nodes.\n    var nodes = dom(this.$.content).getDistributedNodes();\n    for (var i = 0, l = nodes.length; i < l; i++) {\n      if (nodes[i].nodeType === Node.ELEMENT_NODE) {\n        return nodes[i];\n      }\n    }\n  },\n\n  /**\n   * Show the dropdown content.\n   */\n  open: function() {\n    this.$.menuButton.open();\n  },\n\n  /**\n   * Hide the dropdown content.\n   */\n  close: function() {\n    this.$.menuButton.close();\n  },\n\n  /**\n   * A handler that is called when `iron-select` is fired.\n   *\n   * @param {CustomEvent} event An `iron-select` event.\n   */\n  _onIronSelect: function(event) {\n    this._setSelectedItem(event.detail.item);\n  },\n\n  /**\n   * A handler that is called when `iron-deselect` is fired.\n   *\n   * @param {CustomEvent} event An `iron-deselect` event.\n   */\n  _onIronDeselect: function(event) {\n    this._setSelectedItem(null);\n  },\n\n  /**\n   * A handler that is called when the dropdown is tapped.\n   *\n   * @param {CustomEvent} event A tap event.\n   */\n  _onTap: function(event) {\n    if (gestures.findOriginalTarget(event) === this) {\n      this.open();\n    }\n  },\n\n  /**\n   * Compute the label for the dropdown given a selected item.\n   *\n   * @param {Element} selectedItem A selected Element item, with an\n   * optional `label` property.\n   */\n  _selectedItemChanged: function(selectedItem) {\n    var value = '';\n    if (!selectedItem) {\n      value = '';\n    } else {\n      value = selectedItem.label || selectedItem.getAttribute('label') ||\n          selectedItem.textContent.trim();\n    }\n\n    this.value = value;\n    this._setSelectedItemLabel(value);\n  },\n\n  /**\n   * Compute the vertical offset of the menu based on the value of\n   * `noLabelFloat`.\n   *\n   * @param {boolean} noLabelFloat True if the label should not float\n   * @param {number=} opt_verticalOffset Optional offset from the user\n   * above the input, otherwise false.\n   */\n  _computeMenuVerticalOffset: function(noLabelFloat, opt_verticalOffset) {\n    // Override offset if it's passed from the user.\n    if (opt_verticalOffset) {\n      return opt_verticalOffset;\n    }\n\n    // NOTE(cdata): These numbers are somewhat magical because they are\n    // derived from the metrics of elements internal to `paper-input`'s\n    // template. The metrics will change depending on whether or not the\n    // input has a floating label.\n    return noLabelFloat ? -4 : 8;\n  },\n\n  /**\n   * Returns false if the element is required and does not have a selection,\n   * and true otherwise.\n   * @param {*=} _value Ignored.\n   * @return {boolean} true if `required` is false, or if `required` is true\n   * and the element has a valid selection.\n   */\n  _getValidity: function(_value) {\n    return this.disabled || !this.required || (this.required && !!this.value);\n  },\n\n  _openedChanged: function() {\n    var openState = this.opened ? 'true' : 'false';\n    var e = this.contentElement;\n    if (e) {\n      e.setAttribute('aria-expanded', openState);\n    }\n  }\n});\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {IronMeta} from '@polymer/iron-meta/iron-meta.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\n/**\n * The `iron-iconset-svg` element allows users to define their own icon sets\n * that contain svg icons. The svg icon elements should be children of the\n * `iron-iconset-svg` element. Multiple icons should be given distinct id's.\n *\n * Using svg elements to create icons has a few advantages over traditional\n * bitmap graphics like jpg or png. Icons that use svg are vector based so\n * they are resolution independent and should look good on any device. They\n * are stylable via css. Icons can be themed, colorized, and even animated.\n *\n * Example:\n *\n *     <iron-iconset-svg name=\"my-svg-icons\" size=\"24\">\n *       <svg>\n *         <defs>\n *           <g id=\"shape\">\n *             <rect x=\"12\" y=\"0\" width=\"12\" height=\"24\" />\n *             <circle cx=\"12\" cy=\"12\" r=\"12\" />\n *           </g>\n *         </defs>\n *       </svg>\n *     </iron-iconset-svg>\n *\n * This will automatically register the icon set \"my-svg-icons\" to the iconset\n * database.  To use these icons from within another element, make a\n * `iron-iconset` element and call the `byId` method\n * to retrieve a given iconset. To apply a particular icon inside an\n * element use the `applyIcon` method. For example:\n *\n *     iconset.applyIcon(iconNode, 'car');\n *\n * @element iron-iconset-svg\n * @demo demo/index.html\n * @implements {Polymer.Iconset}\n */\nPolymer({\n  is: 'iron-iconset-svg',\n\n  properties: {\n\n    /**\n     * The name of the iconset.\n     */\n    name: {type: String, observer: '_nameChanged'},\n\n    /**\n     * The size of an individual icon. Note that icons must be square.\n     */\n    size: {type: Number, value: 24},\n\n    /**\n     * Set to true to enable mirroring of icons where specified when they are\n     * stamped. Icons that should be mirrored should be decorated with a\n     * `mirror-in-rtl` attribute.\n     *\n     * NOTE: For performance reasons, direction will be resolved once per\n     * document per iconset, so moving icons in and out of RTL subtrees will\n     * not cause their mirrored state to change.\n     */\n    rtlMirroring: {type: Boolean, value: false},\n\n    /**\n     * Set to true to measure RTL based on the dir attribute on the body or\n     * html elements (measured on document.body or document.documentElement as\n     * available).\n     */\n    useGlobalRtlAttribute: {type: Boolean, value: false}\n  },\n\n  created: function() {\n    this._meta = new IronMeta({type: 'iconset', key: null, value: null});\n  },\n\n  attached: function() {\n    this.style.display = 'none';\n  },\n\n  /**\n   * Construct an array of all icon names in this iconset.\n   *\n   * @return {!Array} Array of icon names.\n   */\n  getIconNames: function() {\n    this._icons = this._createIconMap();\n    return Object.keys(this._icons).map(function(n) {\n      return this.name + ':' + n;\n    }, this);\n  },\n\n  /**\n   * Applies an icon to the given element.\n   *\n   * An svg icon is prepended to the element's shadowRoot if it exists,\n   * otherwise to the element itself.\n   *\n   * If RTL mirroring is enabled, and the icon is marked to be mirrored in\n   * RTL, the element will be tested (once and only once ever for each\n   * iconset) to determine the direction of the subtree the element is in.\n   * This direction will apply to all future icon applications, although only\n   * icons marked to be mirrored will be affected.\n   *\n   * @method applyIcon\n   * @param {Element} element Element to which the icon is applied.\n   * @param {string} iconName Name of the icon to apply.\n   * @return {?Element} The svg element which renders the icon.\n   */\n  applyIcon: function(element, iconName) {\n    // Remove old svg element\n    this.removeIcon(element);\n    // install new svg element\n    var svg = this._cloneIcon(\n        iconName, this.rtlMirroring && this._targetIsRTL(element));\n    if (svg) {\n      // insert svg element into shadow root, if it exists\n      var pde = dom(element.root || element);\n      pde.insertBefore(svg, pde.childNodes[0]);\n      return element._svgIcon = svg;\n    }\n    return null;\n  },\n\n  /**\n   * Remove an icon from the given element by undoing the changes effected\n   * by `applyIcon`.\n   *\n   * @param {Element} element The element from which the icon is removed.\n   */\n  removeIcon: function(element) {\n    // Remove old svg element\n    if (element._svgIcon) {\n      dom(element.root || element).removeChild(element._svgIcon);\n      element._svgIcon = null;\n    }\n  },\n\n  /**\n   * Measures and memoizes the direction of the element. Note that this\n   * measurement is only done once and the result is memoized for future\n   * invocations.\n   */\n  _targetIsRTL: function(target) {\n    if (this.__targetIsRTL == null) {\n      if (this.useGlobalRtlAttribute) {\n        var globalElement =\n            (document.body && document.body.hasAttribute('dir')) ?\n            document.body :\n            document.documentElement;\n\n        this.__targetIsRTL = globalElement.getAttribute('dir') === 'rtl';\n      } else {\n        if (target && target.nodeType !== Node.ELEMENT_NODE) {\n          target = target.host;\n        }\n\n        this.__targetIsRTL =\n            target && window.getComputedStyle(target)['direction'] === 'rtl';\n      }\n    }\n\n    return this.__targetIsRTL;\n  },\n\n  /**\n   *\n   * When name is changed, register iconset metadata\n   *\n   */\n  _nameChanged: function() {\n    this._meta.value = null;\n    this._meta.key = this.name;\n    this._meta.value = this;\n\n    this.async(function() {\n      this.fire('iron-iconset-added', this, {node: window});\n    });\n  },\n\n  /**\n   * Create a map of child SVG elements by id.\n   *\n   * @return {!Object} Map of id's to SVG elements.\n   */\n  _createIconMap: function() {\n    // Objects chained to Object.prototype (`{}`) have members. Specifically,\n    // on FF there is a `watch` method that confuses the icon map, so we\n    // need to use a null-based object here.\n    var icons = Object.create(null);\n    dom(this).querySelectorAll('[id]').forEach(function(icon) {\n      icons[icon.id] = icon;\n    });\n    return icons;\n  },\n\n  /**\n   * Produce installable clone of the SVG element matching `id` in this\n   * iconset, or `undefined` if there is no matching element.\n   *\n   * @return {Element} Returns an installable clone of the SVG element\n   * matching `id`.\n   */\n  _cloneIcon: function(id, mirrorAllowed) {\n    // create the icon map on-demand, since the iconset itself has no discrete\n    // signal to know when it's children are fully parsed\n    this._icons = this._icons || this._createIconMap();\n    return this._prepareSvgClone(this._icons[id], this.size, mirrorAllowed);\n  },\n\n  /**\n   * @param {Element} sourceSvg\n   * @param {number} size\n   * @param {Boolean} mirrorAllowed\n   * @return {Element}\n   */\n  _prepareSvgClone: function(sourceSvg, size, mirrorAllowed) {\n    if (sourceSvg) {\n      var content = sourceSvg.cloneNode(true),\n          svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg'),\n          viewBox =\n              content.getAttribute('viewBox') || '0 0 ' + size + ' ' + size,\n          cssText =\n              'pointer-events: none; display: block; width: 100%; height: 100%;';\n\n      if (mirrorAllowed && content.hasAttribute('mirror-in-rtl')) {\n        cssText +=\n            '-webkit-transform:scale(-1,1);transform:scale(-1,1);transform-origin:center;';\n      }\n\n      svg.setAttribute('viewBox', viewBox);\n      svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n      svg.setAttribute('focusable', 'false');\n      // TODO(dfreedm): `pointer-events: none` works around\n      // https://crbug.com/370136\n      // TODO(sjmiles): inline style may not be ideal, but avoids requiring a\n      // shadow-root\n      svg.style.cssText = cssText;\n      svg.appendChild(content).removeAttribute('id');\n      return svg;\n    }\n    return null;\n  }\n\n});\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/iron-iconset-svg/iron-iconset-svg.js';\nconst $_documentContainer = document.createElement('template');\n$_documentContainer.setAttribute('style', 'display: none;');\n\n$_documentContainer.innerHTML =\n    `<iron-iconset-svg name=\"paper-dropdown-menu\" size=\"24\">\n<svg><defs>\n<g id=\"arrow-drop-down\"><path d=\"M7 10l5 5 5-5z\"></path></g>\n</defs></svg>\n</iron-iconset-svg>`;\n\ndocument.head.appendChild($_documentContainer.content);\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/paper-styles/default-theme.js';\nconst $_documentContainer = document.createElement('template');\n$_documentContainer.setAttribute('style', 'display: none;');\n\n$_documentContainer.innerHTML =\n    `<dom-module id=\"paper-dropdown-menu-shared-styles\">\n  <template>\n    <style>\n      :host {\n        display: inline-block;\n        position: relative;\n        text-align: left;\n\n        /* NOTE(cdata): Both values are needed, since some phones require the\n         * value to be \\`transparent\\`.\n         */\n        -webkit-tap-highlight-color: rgba(0,0,0,0);\n        -webkit-tap-highlight-color: transparent;\n\n        --paper-input-container-input: {\n          overflow: hidden;\n          white-space: nowrap;\n          text-overflow: ellipsis;\n          max-width: 100%;\n          box-sizing: border-box;\n          cursor: pointer;\n        };\n\n        @apply --paper-dropdown-menu;\n      }\n\n      :host([disabled]) {\n        @apply --paper-dropdown-menu-disabled;\n      }\n\n      :host([noink]) paper-ripple {\n        display: none;\n      }\n\n      :host([no-label-float]) paper-ripple {\n        top: 8px;\n      }\n\n      paper-ripple {\n        top: 12px;\n        left: 0px;\n        bottom: 8px;\n        right: 0px;\n\n        @apply --paper-dropdown-menu-ripple;\n      }\n\n      paper-menu-button {\n        display: block;\n        padding: 0;\n\n        @apply --paper-dropdown-menu-button;\n      }\n\n      paper-input {\n        @apply --paper-dropdown-menu-input;\n      }\n\n      iron-icon {\n        color: var(--disabled-text-color);\n\n        @apply --paper-dropdown-menu-icon;\n      }\n    </style>\n  </template>\n</dom-module>`;\n\ndocument.head.appendChild($_documentContainer.content);\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\n\nimport {IronControlState} from '@polymer/iron-behaviors/iron-control-state.js';\nimport {IronValidatableBehavior} from '@polymer/iron-validatable-behavior/iron-validatable-behavior.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/**\n`iron-autogrow-textarea` is an element containing a textarea that grows in\nheight as more lines of input are entered. Unless an explicit height or the\n`maxRows` property is set, it will never scroll.\n\nExample:\n\n    <iron-autogrow-textarea></iron-autogrow-textarea>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--iron-autogrow-textarea` | Mixin applied to the textarea | `{}`\n`--iron-autogrow-textarea-placeholder` | Mixin applied to the textarea placeholder | `{}`\n\n@group Iron Elements\n@hero hero.svg\n@demo demo/index.html\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: inline-block;\n        position: relative;\n        width: 400px;\n        border: 1px solid;\n        padding: 2px;\n        -moz-appearance: textarea;\n        -webkit-appearance: textarea;\n        overflow: hidden;\n      }\n\n      .mirror-text {\n        visibility: hidden;\n        word-wrap: break-word;\n        @apply --iron-autogrow-textarea;\n      }\n\n      .fit {\n        @apply --layout-fit;\n      }\n\n      textarea {\n        position: relative;\n        outline: none;\n        border: none;\n        resize: none;\n        background: inherit;\n        color: inherit;\n        /* see comments in template */\n        width: 100%;\n        height: 100%;\n        font-size: inherit;\n        font-family: inherit;\n        line-height: inherit;\n        text-align: inherit;\n        @apply --iron-autogrow-textarea;\n      }\n\n      textarea::-webkit-input-placeholder {\n        @apply --iron-autogrow-textarea-placeholder;\n      }\n\n      textarea:-moz-placeholder {\n        @apply --iron-autogrow-textarea-placeholder;\n      }\n\n      textarea::-moz-placeholder {\n        @apply --iron-autogrow-textarea-placeholder;\n      }\n\n      textarea:-ms-input-placeholder {\n        @apply --iron-autogrow-textarea-placeholder;\n      }\n    </style>\n\n    <!-- the mirror sizes the input/textarea so it grows with typing -->\n    <!-- use &#160; instead &nbsp; of to allow this element to be used in XHTML -->\n    <div id=\"mirror\" class=\"mirror-text\" aria-hidden=\"true\">&nbsp;</div>\n\n    <!-- size the input/textarea with a div, because the textarea has intrinsic size in ff -->\n    <div class=\"textarea-container fit\">\n      <textarea id=\"textarea\" name\\$=\"[[name]]\" aria-label\\$=\"[[label]]\" autocomplete\\$=\"[[autocomplete]]\" autofocus\\$=\"[[autofocus]]\" inputmode\\$=\"[[inputmode]]\" placeholder\\$=\"[[placeholder]]\" readonly\\$=\"[[readonly]]\" required\\$=\"[[required]]\" disabled\\$=\"[[disabled]]\" rows\\$=\"[[rows]]\" minlength\\$=\"[[minlength]]\" maxlength\\$=\"[[maxlength]]\"></textarea>\n    </div>\n`,\n\n  is: 'iron-autogrow-textarea',\n  behaviors: [IronValidatableBehavior, IronControlState],\n\n  properties: {\n    /**\n     * Use this property instead of `bind-value` for two-way data binding.\n     * @type {string|number}\n     */\n    value: {observer: '_valueChanged', type: String, notify: true},\n\n    /**\n     * This property is deprecated, and just mirrors `value`. Use `value`\n     * instead.\n     * @type {string|number}\n     */\n    bindValue: {observer: '_bindValueChanged', type: String, notify: true},\n\n    /**\n     * The initial number of rows.\n     *\n     * @attribute rows\n     * @type number\n     * @default 1\n     */\n    rows: {type: Number, value: 1, observer: '_updateCached'},\n\n    /**\n     * The maximum number of rows this element can grow to until it\n     * scrolls. 0 means no maximum.\n     *\n     * @attribute maxRows\n     * @type number\n     * @default 0\n     */\n    maxRows: {type: Number, value: 0, observer: '_updateCached'},\n\n    /**\n     * Bound to the textarea's `autocomplete` attribute.\n     */\n    autocomplete: {type: String, value: 'off'},\n\n    /**\n     * Bound to the textarea's `autofocus` attribute.\n     */\n    autofocus: {type: Boolean, value: false},\n\n    /**\n     * Bound to the textarea's `inputmode` attribute.\n     */\n    inputmode: {type: String},\n\n    /**\n     * Bound to the textarea's `placeholder` attribute.\n     */\n    placeholder: {type: String},\n\n    /**\n     * Bound to the textarea's `readonly` attribute.\n     */\n    readonly: {type: String},\n\n    /**\n     * Set to true to mark the textarea as required.\n     */\n    required: {type: Boolean},\n\n    /**\n     * The minimum length of the input value.\n     */\n    minlength: {type: Number},\n\n    /**\n     * The maximum length of the input value.\n     */\n    maxlength: {type: Number},\n\n    /**\n     * Bound to the textarea's `aria-label` attribute.\n     */\n    label: {type: String}\n\n  },\n\n  listeners: {'input': '_onInput'},\n\n  /**\n   * Returns the underlying textarea.\n   * @return {!HTMLTextAreaElement}\n   */\n  get textarea() {\n    return this.$.textarea;\n  },\n\n  /**\n   * Returns textarea's selection start.\n   * @return {number}\n   */\n  get selectionStart() {\n    return this.$.textarea.selectionStart;\n  },\n\n  /**\n   * Returns textarea's selection end.\n   * @return {number}\n   */\n  get selectionEnd() {\n    return this.$.textarea.selectionEnd;\n  },\n\n  /**\n   * Sets the textarea's selection start.\n   */\n  set selectionStart(value) {\n    this.$.textarea.selectionStart = value;\n  },\n\n  /**\n   * Sets the textarea's selection end.\n   */\n  set selectionEnd(value) {\n    this.$.textarea.selectionEnd = value;\n  },\n\n  attached: function() {\n    /* iOS has an arbitrary left margin of 3px that isn't present\n     * in any other browser, and means that the paper-textarea's cursor\n     * overlaps the label.\n     * See https://github.com/PolymerElements/paper-input/issues/468.\n     */\n    var IS_IOS = navigator.userAgent.match(/iP(?:[oa]d|hone)/);\n    if (IS_IOS) {\n      this.$.textarea.style.marginLeft = '-3px';\n    }\n  },\n\n  /**\n   * Returns true if `value` is valid. The validator provided in `validator`\n   * will be used first, if it exists; otherwise, the `textarea`'s validity\n   * is used.\n   * @return {boolean} True if the value is valid.\n   */\n  validate: function() {\n    // Use the nested input's native validity.\n    var valid = this.$.textarea.validity.valid;\n\n    // Only do extra checking if the browser thought this was valid.\n    if (valid) {\n      // Empty, required input is invalid\n      if (this.required && this.value === '') {\n        valid = false;\n      } else if (this.hasValidator()) {\n        valid = IronValidatableBehavior.validate.call(this, this.value);\n      }\n    }\n\n    this.invalid = !valid;\n    this.fire('iron-input-validate');\n    return valid;\n  },\n\n  _bindValueChanged: function(bindValue) {\n    this.value = bindValue;\n  },\n\n  _valueChanged: function(value) {\n    var textarea = this.textarea;\n    if (!textarea) {\n      return;\n    }\n\n    // If the bindValue changed manually, then we need to also update\n    // the underlying textarea's value. Otherwise this change was probably\n    // generated from the _onInput handler, and the two values are already\n    // the same.\n    if (textarea.value !== value) {\n      textarea.value = !(value || value === 0) ? '' : value;\n    }\n\n    this.bindValue = value;\n    this.$.mirror.innerHTML = this._valueForMirror();\n\n    // Manually notify because we don't want to notify until after setting\n    // value.\n    this.fire('bind-value-changed', {value: this.bindValue});\n  },\n\n  _onInput: function(event) {\n    var eventPath = dom(event).path;\n    this.value = eventPath ? eventPath[0].value : event.target.value;\n  },\n\n  _constrain: function(tokens) {\n    var _tokens;\n    tokens = tokens || [''];\n    // Enforce the min and max heights for a multiline input to avoid\n    // measurement\n    if (this.maxRows > 0 && tokens.length > this.maxRows) {\n      _tokens = tokens.slice(0, this.maxRows);\n    } else {\n      _tokens = tokens.slice(0);\n    }\n    while (this.rows > 0 && _tokens.length < this.rows) {\n      _tokens.push('');\n    }\n    // Use &#160; instead &nbsp; of to allow this element to be used in XHTML.\n    return _tokens.join('<br/>') + '&#160;';\n  },\n\n  _valueForMirror: function() {\n    var input = this.textarea;\n    if (!input) {\n      return;\n    }\n    this.tokens = (input && input.value) ? input.value.replace(/&/gm, '&amp;')\n                                               .replace(/\"/gm, '&quot;')\n                                               .replace(/'/gm, '&#39;')\n                                               .replace(/</gm, '&lt;')\n                                               .replace(/>/gm, '&gt;')\n                                               .split('\\n') :\n                                           [''];\n    return this._constrain(this.tokens);\n  },\n\n  _updateCached: function() {\n    this.$.mirror.innerHTML = this._constrain(this.tokens);\n  }\n});\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-autogrow-textarea/iron-autogrow-textarea.js';\nimport './paper-input-char-counter.js';\nimport './paper-input-container.js';\nimport './paper-input-error.js';\n\nimport {IronFormElementBehavior} from '@polymer/iron-form-element-behavior/iron-form-element-behavior.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\nimport {PaperInputBehavior} from './paper-input-behavior.js';\n\n/*\n`<paper-textarea>` is a multi-line text field with Material Design styling.\n\n    <paper-textarea label=\"Textarea label\"></paper-textarea>\n\nSee `Polymer.PaperInputBehavior` for more API docs.\n\n### Validation\n\nCurrently only `required` and `maxlength` validation is supported.\n\n### Styling\n\nSee `Polymer.PaperInputContainer` for a list of custom properties used to\nstyle this element.\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: block;\n      }\n\n      :host([hidden]) {\n        display: none !important;\n      }\n\n      label {\n        pointer-events: none;\n      }\n    </style>\n\n    <paper-input-container no-label-float$=\"[[noLabelFloat]]\" always-float-label=\"[[_computeAlwaysFloatLabel(alwaysFloatLabel,placeholder)]]\" auto-validate$=\"[[autoValidate]]\" disabled$=\"[[disabled]]\" invalid=\"[[invalid]]\">\n\n      <label hidden$=\"[[!label]]\" aria-hidden=\"true\" for$=\"[[_inputId]]\" slot=\"label\">[[label]]</label>\n\n      <iron-autogrow-textarea class=\"paper-input-input\" slot=\"input\" id$=\"[[_inputId]]\" aria-labelledby$=\"[[_ariaLabelledBy]]\" aria-describedby$=\"[[_ariaDescribedBy]]\" bind-value=\"{{value}}\" invalid=\"{{invalid}}\" validator$=\"[[validator]]\" disabled$=\"[[disabled]]\" autocomplete$=\"[[autocomplete]]\" autofocus$=\"[[autofocus]]\" inputmode$=\"[[inputmode]]\" name$=\"[[name]]\" placeholder$=\"[[placeholder]]\" readonly$=\"[[readonly]]\" required$=\"[[required]]\" minlength$=\"[[minlength]]\" maxlength$=\"[[maxlength]]\" autocapitalize$=\"[[autocapitalize]]\" rows$=\"[[rows]]\" max-rows$=\"[[maxRows]]\" on-change=\"_onChange\"></iron-autogrow-textarea>\n\n      <template is=\"dom-if\" if=\"[[errorMessage]]\">\n        <paper-input-error aria-live=\"assertive\" slot=\"add-on\">[[errorMessage]]</paper-input-error>\n      </template>\n\n      <template is=\"dom-if\" if=\"[[charCounter]]\">\n        <paper-input-char-counter slot=\"add-on\"></paper-input-char-counter>\n      </template>\n\n    </paper-input-container>\n`,\n\n  is: 'paper-textarea',\n\n  behaviors: [\n    PaperInputBehavior,\n    IronFormElementBehavior,\n  ],\n\n  properties: {\n    _ariaLabelledBy: {\n      observer: '_ariaLabelledByChanged',\n      type: String,\n    },\n\n    _ariaDescribedBy: {\n      observer: '_ariaDescribedByChanged',\n      type: String,\n    },\n\n    value: {\n      // Required for the correct TypeScript type-generation\n      type: String,\n    },\n\n    /**\n     * The initial number of rows.\n     *\n     * @attribute rows\n     * @type {number}\n     * @default 1\n     */\n    rows: {\n      type: Number,\n      value: 1,\n    },\n\n    /**\n     * The maximum number of rows this element can grow to until it\n     * scrolls. 0 means no maximum.\n     *\n     * @attribute maxRows\n     * @type {number}\n     * @default 0\n     */\n    maxRows: {\n      type: Number,\n      value: 0,\n    },\n  },\n\n  /**\n   * @return {number}\n   */\n  get selectionStart() {\n    return this.$.input.textarea.selectionStart;\n  },\n\n  set selectionStart(start) {\n    this.$.input.textarea.selectionStart = start;\n  },\n\n  /**\n   * @return {number}\n   */\n  get selectionEnd() {\n    return this.$.input.textarea.selectionEnd;\n  },\n\n  set selectionEnd(end) {\n    this.$.input.textarea.selectionEnd = end;\n  },\n\n  _ariaLabelledByChanged: function(ariaLabelledBy) {\n    this._focusableElement.setAttribute('aria-labelledby', ariaLabelledBy);\n  },\n\n  _ariaDescribedByChanged: function(ariaDescribedBy) {\n    this._focusableElement.setAttribute('aria-describedby', ariaDescribedBy);\n  },\n\n  get _focusableElement() {\n    return this.inputElement.textarea;\n  }\n});\n"],"sourceRoot":""}