{"version":3,"sources":["webpack:///./node_modules/@polymer/paper-item/paper-item-behavior.js","webpack:///./node_modules/@polymer/paper-listbox/paper-listbox.js","webpack:///./node_modules/@polymer/paper-item/paper-item.js","webpack:///./node_modules/@polymer/paper-item/paper-item-shared-styles.js","webpack:///./node_modules/@polymer/paper-item/paper-icon-item.js","webpack:///./node_modules/@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js","webpack:///./node_modules/@polymer/iron-behaviors/iron-control-state.js","webpack:///./node_modules/@polymer/iron-behaviors/iron-button-state.js"],"names":["__webpack_require__","d","__webpack_exports__","PaperItemBehavior","_polymer_iron_behaviors_iron_button_state_js__WEBPACK_IMPORTED_MODULE_1__","_polymer_iron_behaviors_iron_control_state_js__WEBPACK_IMPORTED_MODULE_2__","IronButtonState","IronControlState","hostAttributes","role","tabindex","Polymer","_template","html","_templateObject","is","behaviors","IronMenuBehavior","$_documentContainer","document","createElement","setAttribute","innerHTML","head","appendChild","content","IronA11yKeysBehavior","KEY_IDENTIFIER","U+0008","U+0009","U+001B","U+0020","U+007F","KEY_CODE","8","9","13","27","33","34","35","36","32","37","38","39","40","46","106","MODIFIER_KEYS","shift","ctrl","alt","meta","KEY_CHAR","IDENT_CHAR","ARROW_KEY","SPACE_KEY","ESC_KEY","transformKey","key","noSpecialChars","validKey","lKey","toLowerCase","test","length","replace","normalizedKeyForEvent","keyEvent","detail","keyIdent","keyIdentifier","parseInt","String","fromCharCode","keyCode","Number","transformKeyCode","keyComboMatchesEvent","keyCombo","event","hasModifiers","shiftKey","ctrlKey","altKey","metaKey","parseEventString","eventString","trim","split","map","keyComboString","combo","reduce","parsedKeyCombo","keyComboPart","eventParts","keyName","parseKeyComboString","properties","keyEventTarget","type","Object","value","this","stopKeyboardEventPropagation","Boolean","_boundKeyHandlers","Array","_imperativeKeyBindings","observers","keyBindings","registered","_prepKeyBindings","attached","_listenKeyEventListeners","detached","_unlistenKeyEventListeners","addOwnKeyBinding","handlerName","_resetKeyEventListeners","removeOwnKeyBindings","keyboardEventMatchesKeys","keyCombos","i","_collectKeyBindings","behavior","indexOf","push","_keyBindings","forEach","_addKeyBinding","eventName","sort","kb1","kb2","b1","isAttached","keys","boundKeyHandler","_onKeyBindingEvent","bind","addEventListener","keyHandlerTuple","pop","removeEventListener","stopPropagation","defaultPrevented","_triggerKeyHandler","keyboardEvent","create","CustomEvent","cancelable","call","preventDefault","focused","notify","readOnly","reflectToAttribute","disabled","observer","_oldTabIndex","_boundFocusBlurHandler","Function","_focusBlurHandler","ready","_setFocused","_disabledChanged","old","style","pointerEvents","getAttribute","tabIndex","blur","undefined","removeAttribute","_changedControlState","_controlStateChanged","IronButtonStateImpl","_polymer_iron_a11y_keys_behavior_iron_a11y_keys_behavior_js__WEBPACK_IMPORTED_MODULE_2__","_polymer_polymer_lib_legacy_polymer_dom_js__WEBPACK_IMPORTED_MODULE_3__","pressed","toggles","active","pointerDown","receivedFocusFromKeyboard","ariaActiveAttribute","listeners","down","up","tap","enter:keydown","space:keydown","space:keyup","_mouseEventRe","_tapHandler","_userActivate","_focusChanged","_detectKeyboardFocus","_setPressed","_setReceivedFocusFromKeyboard","fire","_downHandler","_setPointerDown","_upHandler","_spaceKeyDownHandler","target","dom","localTarget","isLightDescendant","stopImmediatePropagation","_spaceKeyUpHandler","_asyncClick","async","click","_pressedChanged","_changedButtonState","_ariaActiveAttributeChanged","oldValue","hasAttribute","_activeChanged","_buttonStateChanged"],"mappings":"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","file":"chunk.b4bdf5e5c5798a76009b.js","sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {IronButtonState} from '@polymer/iron-behaviors/iron-button-state.js';\nimport {IronControlState} from '@polymer/iron-behaviors/iron-control-state.js';\n\n/*\n`PaperItemBehavior` is a convenience behavior shared by <paper-item> and\n<paper-icon-item> that manages the shared control states and attributes of\nthe items.\n*/\n/** @polymerBehavior PaperItemBehavior */\nexport const PaperItemBehaviorImpl = {\n  hostAttributes: {role: 'option', tabindex: '0'}\n};\n\n/** @polymerBehavior */\nexport const PaperItemBehavior =\n    [IronButtonState, IronControlState, PaperItemBehaviorImpl];\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/paper-styles/default-theme.js';\n\nimport {IronMenuBehavior} from '@polymer/iron-menu-behavior/iron-menu-behavior.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/**\nMaterial design:\n[Menus](https://www.google.com/design/spec/components/menus.html)\n\n`<paper-listbox>` implements an accessible listbox control with Material Design\nstyling. The focused item is highlighted, and the selected item has bolded text.\n\n    <paper-listbox>\n      <paper-item>Item 1</paper-item>\n      <paper-item>Item 2</paper-item>\n    </paper-listbox>\n\nAn initial selection can be specified with the `selected` attribute.\n\n    <paper-listbox selected=\"0\">\n      <paper-item>Item 1</paper-item>\n      <paper-item>Item 2</paper-item>\n    </paper-listbox>\n\nMake a multi-select listbox with the `multi` attribute. Items in a multi-select\nlistbox can be deselected, and multiple item can be selected.\n\n    <paper-listbox multi>\n      <paper-item>Item 1</paper-item>\n      <paper-item>Item 2</paper-item>\n    </paper-listbox>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-listbox-background-color`   | Menu background color |\n`--primary-background-color`\n`--paper-listbox-color`              | Menu foreground color |\n`--primary-text-color`\n`--paper-listbox`                    | Mixin applied to the listbox | `{}`\n\n### Accessibility\n\n`<paper-listbox>` has `role=\"listbox\"` by default. A multi-select listbox will\nalso have `aria-multiselectable` set. It implements key bindings to navigate\nthrough the listbox with the up and down arrow keys, esc to exit the listbox,\nand enter to activate a listbox item. Typing the first letter of a listbox item\nwill also focus it.\n\n@group Paper Elements\n@element paper-listbox\n@demo demo/index.html\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: block;\n        padding: 8px 0;\n\n        background: var(--paper-listbox-background-color, var(--primary-background-color));\n        color: var(--paper-listbox-color, var(--primary-text-color));\n\n        @apply --paper-listbox;\n      }\n    </style>\n\n    <slot></slot>\n`,\n\n  is: 'paper-listbox',\n  behaviors: [IronMenuBehavior],\n\n  /** @private */\n  hostAttributes: {role: 'listbox'}\n});\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport './paper-item-shared-styles.js';\n\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\nimport {PaperItemBehavior} from './paper-item-behavior.js';\n\n/**\nMaterial design:\n[Lists](https://www.google.com/design/spec/components/lists.html)\n\n`<paper-item>` is an interactive list item. By default, it is a horizontal\nflexbox.\n\n    <paper-item>Item</paper-item>\n\nUse this element with `<paper-item-body>` to make Material Design styled\ntwo-line and three-line items.\n\n    <paper-item>\n      <paper-item-body two-line>\n        <div>Show your status</div>\n        <div secondary>Your status is visible to everyone</div>\n      </paper-item-body>\n      <iron-icon icon=\"warning\"></iron-icon>\n    </paper-item>\n\nTo use `paper-item` as a link, wrap it in an anchor tag. Since `paper-item` will\nalready receive focus, you may want to prevent the anchor tag from receiving\nfocus as well by setting its tabindex to -1.\n\n    <a href=\"https://www.polymer-project.org/\" tabindex=\"-1\">\n      <paper-item raised>Polymer Project</paper-item>\n    </a>\n\nIf you are concerned about performance and want to use `paper-item` in a\n`paper-listbox` with many items, you can just use a native `button` with the\n`paper-item` class applied (provided you have correctly included the shared\nstyles):\n\n    <style is=\"custom-style\" include=\"paper-item-shared-styles\"></style>\n\n    <paper-listbox>\n      <button class=\"paper-item\" role=\"option\">Inbox</button>\n      <button class=\"paper-item\" role=\"option\">Starred</button>\n      <button class=\"paper-item\" role=\"option\">Sent mail</button>\n    </paper-listbox>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-item-min-height` | Minimum height of the item | `48px`\n`--paper-item` | Mixin applied to the item | `{}`\n`--paper-item-selected-weight` | The font weight of a selected item | `bold`\n`--paper-item-selected` | Mixin applied to selected paper-items | `{}`\n`--paper-item-disabled-color` | The color for disabled paper-items | `--disabled-text-color`\n`--paper-item-disabled` | Mixin applied to disabled paper-items | `{}`\n`--paper-item-focused` | Mixin applied to focused paper-items | `{}`\n`--paper-item-focused-before` | Mixin applied to :before focused paper-items | `{}`\n\n### Accessibility\n\nThis element has `role=\"listitem\"` by default. Depending on usage, it may be\nmore appropriate to set `role=\"menuitem\"`, `role=\"menuitemcheckbox\"` or\n`role=\"menuitemradio\"`.\n\n    <paper-item role=\"menuitemcheckbox\">\n      <paper-item-body>\n        Show your status\n      </paper-item-body>\n      <paper-checkbox></paper-checkbox>\n    </paper-item>\n\n@group Paper Elements\n@element paper-item\n@demo demo/index.html\n*/\nPolymer({\n  _template: html`\n    <style include=\"paper-item-shared-styles\">\n      :host {\n        @apply --layout-horizontal;\n        @apply --layout-center;\n        @apply --paper-font-subhead;\n\n        @apply --paper-item;\n      }\n    </style>\n    <slot></slot>\n`,\n\n  is: 'paper-item',\n  behaviors: [PaperItemBehavior]\n});\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport '@polymer/paper-styles/color.js';\nimport '@polymer/paper-styles/default-theme.js';\nimport '@polymer/paper-styles/typography.js';\nconst $_documentContainer = document.createElement('template');\n$_documentContainer.setAttribute('style', 'display: none;');\n\n$_documentContainer.innerHTML = `<dom-module id=\"paper-item-shared-styles\">\n  <template>\n    <style>\n      :host, .paper-item {\n        display: block;\n        position: relative;\n        min-height: var(--paper-item-min-height, 48px);\n        padding: 0px 16px;\n      }\n\n      .paper-item {\n        @apply --paper-font-subhead;\n        border:none;\n        outline: none;\n        background: white;\n        width: 100%;\n        text-align: left;\n      }\n\n      :host([hidden]), .paper-item[hidden] {\n        display: none !important;\n      }\n\n      :host(.iron-selected), .paper-item.iron-selected {\n        font-weight: var(--paper-item-selected-weight, bold);\n\n        @apply --paper-item-selected;\n      }\n\n      :host([disabled]), .paper-item[disabled] {\n        color: var(--paper-item-disabled-color, var(--disabled-text-color));\n\n        @apply --paper-item-disabled;\n      }\n\n      :host(:focus), .paper-item:focus {\n        position: relative;\n        outline: 0;\n\n        @apply --paper-item-focused;\n      }\n\n      :host(:focus):before, .paper-item:focus:before {\n        @apply --layout-fit;\n\n        background: currentColor;\n        content: '';\n        opacity: var(--dark-divider-opacity);\n        pointer-events: none;\n\n        @apply --paper-item-focused-before;\n      }\n    </style>\n  </template>\n</dom-module>`;\n\ndocument.head.appendChild($_documentContainer.content);\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport '@polymer/paper-styles/typography.js';\nimport './paper-item-shared-styles.js';\n\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\nimport {PaperItemBehavior} from './paper-item-behavior.js';\n\n/*\n`<paper-icon-item>` is a convenience element to make an item with icon. It is an\ninteractive list item with a fixed-width icon area, according to Material\nDesign. This is useful if the icons are of varying widths, but you want the item\nbodies to line up. Use this like a `<paper-item>`. The child node with the slot\nname `item-icon` is placed in the icon area.\n\n    <paper-icon-item>\n      <iron-icon icon=\"favorite\" slot=\"item-icon\"></iron-icon>\n      Favorite\n    </paper-icon-item>\n    <paper-icon-item>\n      <div class=\"avatar\" slot=\"item-icon\"></div>\n      Avatar\n    </paper-icon-item>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-item-icon-width` | Width of the icon area | `56px`\n`--paper-item-icon` | Mixin applied to the icon area | `{}`\n`--paper-icon-item` | Mixin applied to the item | `{}`\n`--paper-item-selected-weight` | The font weight of a selected item | `bold`\n`--paper-item-selected` | Mixin applied to selected paper-items | `{}`\n`--paper-item-disabled-color` | The color for disabled paper-items | `--disabled-text-color`\n`--paper-item-disabled` | Mixin applied to disabled paper-items | `{}`\n`--paper-item-focused` | Mixin applied to focused paper-items | `{}`\n`--paper-item-focused-before` | Mixin applied to :before focused paper-items | `{}`\n\n*/\nPolymer({\n  _template: html`\n    <style include=\"paper-item-shared-styles\"></style>\n    <style>\n      :host {\n        @apply --layout-horizontal;\n        @apply --layout-center;\n        @apply --paper-font-subhead;\n\n        @apply --paper-item;\n        @apply --paper-icon-item;\n      }\n\n      .content-icon {\n        @apply --layout-horizontal;\n        @apply --layout-center;\n\n        width: var(--paper-item-icon-width, 56px);\n        @apply --paper-item-icon;\n      }\n    </style>\n\n    <div id=\"contentIcon\" class=\"content-icon\">\n      <slot name=\"item-icon\"></slot>\n    </div>\n    <slot></slot>\n`,\n\n  is: 'paper-icon-item',\n  behaviors: [PaperItemBehavior]\n});\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\n/**\n * Chrome uses an older version of DOM Level 3 Keyboard Events\n *\n * Most keys are labeled as text, but some are Unicode codepoints.\n * Values taken from:\n * http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/keyset.html#KeySet-Set\n */\nvar KEY_IDENTIFIER = {\n  'U+0008': 'backspace',\n  'U+0009': 'tab',\n  'U+001B': 'esc',\n  'U+0020': 'space',\n  'U+007F': 'del'\n};\n\n/**\n * Special table for KeyboardEvent.keyCode.\n * KeyboardEvent.keyIdentifier is better, and KeyBoardEvent.key is even better\n * than that.\n *\n * Values from:\n * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent.keyCode#Value_of_keyCode\n */\nvar KEY_CODE = {\n  8: 'backspace',\n  9: 'tab',\n  13: 'enter',\n  27: 'esc',\n  33: 'pageup',\n  34: 'pagedown',\n  35: 'end',\n  36: 'home',\n  32: 'space',\n  37: 'left',\n  38: 'up',\n  39: 'right',\n  40: 'down',\n  46: 'del',\n  106: '*'\n};\n\n/**\n * MODIFIER_KEYS maps the short name for modifier keys used in a key\n * combo string to the property name that references those same keys\n * in a KeyboardEvent instance.\n */\nvar MODIFIER_KEYS = {\n  'shift': 'shiftKey',\n  'ctrl': 'ctrlKey',\n  'alt': 'altKey',\n  'meta': 'metaKey'\n};\n\n/**\n * KeyboardEvent.key is mostly represented by printable character made by\n * the keyboard, with unprintable keys labeled nicely.\n *\n * However, on OS X, Alt+char can make a Unicode character that follows an\n * Apple-specific mapping. In this case, we fall back to .keyCode.\n */\nvar KEY_CHAR = /[a-z0-9*]/;\n\n/**\n * Matches a keyIdentifier string.\n */\nvar IDENT_CHAR = /U\\+/;\n\n/**\n * Matches arrow keys in Gecko 27.0+\n */\nvar ARROW_KEY = /^arrow/;\n\n/**\n * Matches space keys everywhere (notably including IE10's exceptional name\n * `spacebar`).\n */\nvar SPACE_KEY = /^space(bar)?/;\n\n/**\n * Matches ESC key.\n *\n * Value from: http://w3c.github.io/uievents-key/#key-Escape\n */\nvar ESC_KEY = /^escape$/;\n\n/**\n * Transforms the key.\n * @param {string} key The KeyBoardEvent.key\n * @param {Boolean} [noSpecialChars] Limits the transformation to\n * alpha-numeric characters.\n */\nfunction transformKey(key, noSpecialChars) {\n  var validKey = '';\n  if (key) {\n    var lKey = key.toLowerCase();\n    if (lKey === ' ' || SPACE_KEY.test(lKey)) {\n      validKey = 'space';\n    } else if (ESC_KEY.test(lKey)) {\n      validKey = 'esc';\n    } else if (lKey.length == 1) {\n      if (!noSpecialChars || KEY_CHAR.test(lKey)) {\n        validKey = lKey;\n      }\n    } else if (ARROW_KEY.test(lKey)) {\n      validKey = lKey.replace('arrow', '');\n    } else if (lKey == 'multiply') {\n      // numpad '*' can map to Multiply on IE/Windows\n      validKey = '*';\n    } else {\n      validKey = lKey;\n    }\n  }\n  return validKey;\n}\n\nfunction transformKeyIdentifier(keyIdent) {\n  var validKey = '';\n  if (keyIdent) {\n    if (keyIdent in KEY_IDENTIFIER) {\n      validKey = KEY_IDENTIFIER[keyIdent];\n    } else if (IDENT_CHAR.test(keyIdent)) {\n      keyIdent = parseInt(keyIdent.replace('U+', '0x'), 16);\n      validKey = String.fromCharCode(keyIdent).toLowerCase();\n    } else {\n      validKey = keyIdent.toLowerCase();\n    }\n  }\n  return validKey;\n}\n\nfunction transformKeyCode(keyCode) {\n  var validKey = '';\n  if (Number(keyCode)) {\n    if (keyCode >= 65 && keyCode <= 90) {\n      // ascii a-z\n      // lowercase is 32 offset from uppercase\n      validKey = String.fromCharCode(32 + keyCode);\n    } else if (keyCode >= 112 && keyCode <= 123) {\n      // function keys f1-f12\n      validKey = 'f' + (keyCode - 112 + 1);\n    } else if (keyCode >= 48 && keyCode <= 57) {\n      // top 0-9 keys\n      validKey = String(keyCode - 48);\n    } else if (keyCode >= 96 && keyCode <= 105) {\n      // num pad 0-9\n      validKey = String(keyCode - 96);\n    } else {\n      validKey = KEY_CODE[keyCode];\n    }\n  }\n  return validKey;\n}\n\n/**\n * Calculates the normalized key for a KeyboardEvent.\n * @param {KeyboardEvent} keyEvent\n * @param {Boolean} [noSpecialChars] Set to true to limit keyEvent.key\n * transformation to alpha-numeric chars. This is useful with key\n * combinations like shift + 2, which on FF for MacOS produces\n * keyEvent.key = @\n * To get 2 returned, set noSpecialChars = true\n * To get @ returned, set noSpecialChars = false\n */\nfunction normalizedKeyForEvent(keyEvent, noSpecialChars) {\n  // Fall back from .key, to .detail.key for artifical keyboard events,\n  // and then to deprecated .keyIdentifier and .keyCode.\n  if (keyEvent.key) {\n    return transformKey(keyEvent.key, noSpecialChars);\n  }\n  if (keyEvent.detail && keyEvent.detail.key) {\n    return transformKey(keyEvent.detail.key, noSpecialChars);\n  }\n  return transformKeyIdentifier(keyEvent.keyIdentifier) ||\n      transformKeyCode(keyEvent.keyCode) || '';\n}\n\nfunction keyComboMatchesEvent(keyCombo, event) {\n  // For combos with modifiers we support only alpha-numeric keys\n  var keyEvent = normalizedKeyForEvent(event, keyCombo.hasModifiers);\n  return keyEvent === keyCombo.key &&\n      (!keyCombo.hasModifiers ||\n       (!!event.shiftKey === !!keyCombo.shiftKey &&\n        !!event.ctrlKey === !!keyCombo.ctrlKey &&\n        !!event.altKey === !!keyCombo.altKey &&\n        !!event.metaKey === !!keyCombo.metaKey));\n}\n\nfunction parseKeyComboString(keyComboString) {\n  if (keyComboString.length === 1) {\n    return {combo: keyComboString, key: keyComboString, event: 'keydown'};\n  }\n  return keyComboString.split('+')\n      .reduce(function(parsedKeyCombo, keyComboPart) {\n        var eventParts = keyComboPart.split(':');\n        var keyName = eventParts[0];\n        var event = eventParts[1];\n\n        if (keyName in MODIFIER_KEYS) {\n          parsedKeyCombo[MODIFIER_KEYS[keyName]] = true;\n          parsedKeyCombo.hasModifiers = true;\n        } else {\n          parsedKeyCombo.key = keyName;\n          parsedKeyCombo.event = event || 'keydown';\n        }\n\n        return parsedKeyCombo;\n      }, {combo: keyComboString.split(':').shift()});\n}\n\nfunction parseEventString(eventString) {\n  return eventString.trim().split(' ').map(function(keyComboString) {\n    return parseKeyComboString(keyComboString);\n  });\n}\n\n/**\n * `Polymer.IronA11yKeysBehavior` provides a normalized interface for processing\n * keyboard commands that pertain to [WAI-ARIA best\n * practices](http://www.w3.org/TR/wai-aria-practices/#kbd_general_binding). The\n * element takes care of browser differences with respect to Keyboard events and\n * uses an expressive syntax to filter key presses.\n *\n * Use the `keyBindings` prototype property to express what combination of keys\n * will trigger the callback. A key binding has the format\n * `\"KEY+MODIFIER:EVENT\": \"callback\"` (`\"KEY\": \"callback\"` or\n * `\"KEY:EVENT\": \"callback\"` are valid as well). Some examples:\n *\n *      keyBindings: {\n *        'space': '_onKeydown', // same as 'space:keydown'\n *        'shift+tab': '_onKeydown',\n *        'enter:keypress': '_onKeypress',\n *        'esc:keyup': '_onKeyup'\n *      }\n *\n * The callback will receive with an event containing the following information\n * in `event.detail`:\n *\n *      _onKeydown: function(event) {\n *        console.log(event.detail.combo); // KEY+MODIFIER, e.g. \"shift+tab\"\n *        console.log(event.detail.key); // KEY only, e.g. \"tab\"\n *        console.log(event.detail.event); // EVENT, e.g. \"keydown\"\n *        console.log(event.detail.keyboardEvent); // the original KeyboardEvent\n *      }\n *\n * Use the `keyEventTarget` attribute to set up event handlers on a specific\n * node.\n *\n * See the [demo source\n * code](https://github.com/PolymerElements/iron-a11y-keys-behavior/blob/master/demo/x-key-aware.html)\n * for an example.\n *\n * @demo demo/index.html\n * @polymerBehavior\n */\nexport const IronA11yKeysBehavior = {\n  properties: {\n    /**\n     * The EventTarget that will be firing relevant KeyboardEvents. Set it to\n     * `null` to disable the listeners.\n     * @type {?EventTarget}\n     */\n    keyEventTarget: {\n      type: Object,\n      value: function() {\n        return this;\n      }\n    },\n\n    /**\n     * If true, this property will cause the implementing element to\n     * automatically stop propagation on any handled KeyboardEvents.\n     */\n    stopKeyboardEventPropagation: {type: Boolean, value: false},\n\n    _boundKeyHandlers: {\n      type: Array,\n      value: function() {\n        return [];\n      }\n    },\n\n    // We use this due to a limitation in IE10 where instances will have\n    // own properties of everything on the \"prototype\".\n    _imperativeKeyBindings: {\n      type: Object,\n      value: function() {\n        return {};\n      }\n    }\n  },\n\n  observers: ['_resetKeyEventListeners(keyEventTarget, _boundKeyHandlers)'],\n\n\n  /**\n   * To be used to express what combination of keys  will trigger the relative\n   * callback. e.g. `keyBindings: { 'esc': '_onEscPressed'}`\n   * @type {!Object}\n   */\n  keyBindings: {},\n\n  registered: function() {\n    this._prepKeyBindings();\n  },\n\n  attached: function() {\n    this._listenKeyEventListeners();\n  },\n\n  detached: function() {\n    this._unlistenKeyEventListeners();\n  },\n\n  /**\n   * Can be used to imperatively add a key binding to the implementing\n   * element. This is the imperative equivalent of declaring a keybinding\n   * in the `keyBindings` prototype property.\n   *\n   * @param {string} eventString\n   * @param {string} handlerName\n   */\n  addOwnKeyBinding: function(eventString, handlerName) {\n    this._imperativeKeyBindings[eventString] = handlerName;\n    this._prepKeyBindings();\n    this._resetKeyEventListeners();\n  },\n\n  /**\n   * When called, will remove all imperatively-added key bindings.\n   */\n  removeOwnKeyBindings: function() {\n    this._imperativeKeyBindings = {};\n    this._prepKeyBindings();\n    this._resetKeyEventListeners();\n  },\n\n  /**\n   * Returns true if a keyboard event matches `eventString`.\n   *\n   * @param {KeyboardEvent} event\n   * @param {string} eventString\n   * @return {boolean}\n   */\n  keyboardEventMatchesKeys: function(event, eventString) {\n    var keyCombos = parseEventString(eventString);\n    for (var i = 0; i < keyCombos.length; ++i) {\n      if (keyComboMatchesEvent(keyCombos[i], event)) {\n        return true;\n      }\n    }\n    return false;\n  },\n\n  _collectKeyBindings: function() {\n    var keyBindings = this.behaviors.map(function(behavior) {\n      return behavior.keyBindings;\n    });\n\n    if (keyBindings.indexOf(this.keyBindings) === -1) {\n      keyBindings.push(this.keyBindings);\n    }\n\n    return keyBindings;\n  },\n\n  _prepKeyBindings: function() {\n    this._keyBindings = {};\n\n    this._collectKeyBindings().forEach(function(keyBindings) {\n      for (var eventString in keyBindings) {\n        this._addKeyBinding(eventString, keyBindings[eventString]);\n      }\n    }, this);\n\n    for (var eventString in this._imperativeKeyBindings) {\n      this._addKeyBinding(\n          eventString, this._imperativeKeyBindings[eventString]);\n    }\n\n    // Give precedence to combos with modifiers to be checked first.\n    for (var eventName in this._keyBindings) {\n      this._keyBindings[eventName].sort(function(kb1, kb2) {\n        var b1 = kb1[0].hasModifiers;\n        var b2 = kb2[0].hasModifiers;\n        return (b1 === b2) ? 0 : b1 ? -1 : 1;\n      })\n    }\n  },\n\n  _addKeyBinding: function(eventString, handlerName) {\n    parseEventString(eventString).forEach(function(keyCombo) {\n      this._keyBindings[keyCombo.event] =\n          this._keyBindings[keyCombo.event] || [];\n\n      this._keyBindings[keyCombo.event].push([keyCombo, handlerName]);\n    }, this);\n  },\n\n  _resetKeyEventListeners: function() {\n    this._unlistenKeyEventListeners();\n\n    if (this.isAttached) {\n      this._listenKeyEventListeners();\n    }\n  },\n\n  _listenKeyEventListeners: function() {\n    if (!this.keyEventTarget) {\n      return;\n    }\n    Object.keys(this._keyBindings).forEach(function(eventName) {\n      var keyBindings = this._keyBindings[eventName];\n      var boundKeyHandler = this._onKeyBindingEvent.bind(this, keyBindings);\n\n      this._boundKeyHandlers.push(\n          [this.keyEventTarget, eventName, boundKeyHandler]);\n\n      this.keyEventTarget.addEventListener(eventName, boundKeyHandler);\n    }, this);\n  },\n\n  _unlistenKeyEventListeners: function() {\n    var keyHandlerTuple;\n    var keyEventTarget;\n    var eventName;\n    var boundKeyHandler;\n\n    while (this._boundKeyHandlers.length) {\n      // My kingdom for block-scope binding and destructuring assignment..\n      keyHandlerTuple = this._boundKeyHandlers.pop();\n      keyEventTarget = keyHandlerTuple[0];\n      eventName = keyHandlerTuple[1];\n      boundKeyHandler = keyHandlerTuple[2];\n\n      keyEventTarget.removeEventListener(eventName, boundKeyHandler);\n    }\n  },\n\n  _onKeyBindingEvent: function(keyBindings, event) {\n    if (this.stopKeyboardEventPropagation) {\n      event.stopPropagation();\n    }\n\n    // if event has been already prevented, don't do anything\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    for (var i = 0; i < keyBindings.length; i++) {\n      var keyCombo = keyBindings[i][0];\n      var handlerName = keyBindings[i][1];\n      if (keyComboMatchesEvent(keyCombo, event)) {\n        this._triggerKeyHandler(keyCombo, handlerName, event);\n        // exit the loop if eventDefault was prevented\n        if (event.defaultPrevented) {\n          return;\n        }\n      }\n    }\n  },\n\n  _triggerKeyHandler: function(keyCombo, handlerName, keyboardEvent) {\n    var detail = Object.create(keyCombo);\n    detail.keyboardEvent = keyboardEvent;\n    var event =\n        new CustomEvent(keyCombo.event, {detail: detail, cancelable: true});\n    this[handlerName].call(this, event);\n    if (event.defaultPrevented) {\n      keyboardEvent.preventDefault();\n    }\n  }\n};\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\n\n/**\n * @demo demo/index.html\n * @polymerBehavior\n */\nexport const IronControlState = {\n\n  properties: {\n\n    /**\n     * If true, the element currently has focus.\n     */\n    focused: {\n      type: Boolean,\n      value: false,\n      notify: true,\n      readOnly: true,\n      reflectToAttribute: true\n    },\n\n    /**\n     * If true, the user cannot interact with this element.\n     */\n    disabled: {\n      type: Boolean,\n      value: false,\n      notify: true,\n      observer: '_disabledChanged',\n      reflectToAttribute: true\n    },\n\n    /**\n     * Value of the `tabindex` attribute before `disabled` was activated.\n     * `null` means the attribute was not present.\n     * @type {?string|undefined}\n     */\n    _oldTabIndex: {type: String},\n\n    _boundFocusBlurHandler: {\n      type: Function,\n      value: function() {\n        return this._focusBlurHandler.bind(this);\n      }\n    }\n  },\n\n  observers: ['_changedControlState(focused, disabled)'],\n\n  /**\n   * @return {void}\n   */\n  ready: function() {\n    this.addEventListener('focus', this._boundFocusBlurHandler, true);\n    this.addEventListener('blur', this._boundFocusBlurHandler, true);\n  },\n\n  _focusBlurHandler: function(event) {\n    // Polymer takes care of retargeting events.\n    this._setFocused(event.type === 'focus');\n    return;\n  },\n\n  _disabledChanged: function(disabled, old) {\n    this.setAttribute('aria-disabled', disabled ? 'true' : 'false');\n    this.style.pointerEvents = disabled ? 'none' : '';\n    if (disabled) {\n      // Read the `tabindex` attribute instead of the `tabIndex` property.\n      // The property returns `-1` if there is no `tabindex` attribute.\n      // This distinction is important when restoring the value because\n      // leaving `-1` hides shadow root children from the tab order.\n      this._oldTabIndex = this.getAttribute('tabindex');\n      this._setFocused(false);\n      this.tabIndex = -1;\n      this.blur();\n    } else if (this._oldTabIndex !== undefined) {\n      if (this._oldTabIndex === null) {\n        this.removeAttribute('tabindex');\n      } else {\n        this.setAttribute('tabindex', this._oldTabIndex);\n      }\n    }\n  },\n\n  _changedControlState: function() {\n    // _controlStateChanged is abstract, follow-on behaviors may implement it\n    if (this._controlStateChanged) {\n      this._controlStateChanged();\n    }\n  }\n\n};\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport './iron-control-state.js';\n\nimport {IronA11yKeysBehavior} from '@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js';\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\n\n/**\n * @demo demo/index.html\n * @polymerBehavior IronButtonState\n */\nexport const IronButtonStateImpl = {\n\n  properties: {\n\n    /**\n     * If true, the user is currently holding down the button.\n     */\n    pressed: {\n      type: Boolean,\n      readOnly: true,\n      value: false,\n      reflectToAttribute: true,\n      observer: '_pressedChanged'\n    },\n\n    /**\n     * If true, the button toggles the active state with each tap or press\n     * of the spacebar.\n     */\n    toggles: {type: Boolean, value: false, reflectToAttribute: true},\n\n    /**\n     * If true, the button is a toggle and is currently in the active state.\n     */\n    active:\n        {type: Boolean, value: false, notify: true, reflectToAttribute: true},\n\n    /**\n     * True if the element is currently being pressed by a \"pointer,\" which\n     * is loosely defined as mouse or touch input (but specifically excluding\n     * keyboard input).\n     */\n    pointerDown: {type: Boolean, readOnly: true, value: false},\n\n    /**\n     * True if the input device that caused the element to receive focus\n     * was a keyboard.\n     */\n    receivedFocusFromKeyboard: {type: Boolean, readOnly: true},\n\n    /**\n     * The aria attribute to be set if the button is a toggle and in the\n     * active state.\n     */\n    ariaActiveAttribute: {\n      type: String,\n      value: 'aria-pressed',\n      observer: '_ariaActiveAttributeChanged'\n    }\n  },\n\n  listeners: {down: '_downHandler', up: '_upHandler', tap: '_tapHandler'},\n\n  observers:\n      ['_focusChanged(focused)', '_activeChanged(active, ariaActiveAttribute)'],\n\n  /**\n   * @type {!Object}\n   */\n  keyBindings: {\n    'enter:keydown': '_asyncClick',\n    'space:keydown': '_spaceKeyDownHandler',\n    'space:keyup': '_spaceKeyUpHandler',\n  },\n\n  _mouseEventRe: /^mouse/,\n\n  _tapHandler: function() {\n    if (this.toggles) {\n      // a tap is needed to toggle the active state\n      this._userActivate(!this.active);\n    } else {\n      this.active = false;\n    }\n  },\n\n  _focusChanged: function(focused) {\n    this._detectKeyboardFocus(focused);\n\n    if (!focused) {\n      this._setPressed(false);\n    }\n  },\n\n  _detectKeyboardFocus: function(focused) {\n    this._setReceivedFocusFromKeyboard(!this.pointerDown && focused);\n  },\n\n  // to emulate native checkbox, (de-)activations from a user interaction fire\n  // 'change' events\n  _userActivate: function(active) {\n    if (this.active !== active) {\n      this.active = active;\n      this.fire('change');\n    }\n  },\n\n  _downHandler: function(event) {\n    this._setPointerDown(true);\n    this._setPressed(true);\n    this._setReceivedFocusFromKeyboard(false);\n  },\n\n  _upHandler: function() {\n    this._setPointerDown(false);\n    this._setPressed(false);\n  },\n\n  /**\n   * @param {!KeyboardEvent} event .\n   */\n  _spaceKeyDownHandler: function(event) {\n    var keyboardEvent = event.detail.keyboardEvent;\n    var target = dom(keyboardEvent).localTarget;\n\n    // Ignore the event if this is coming from a focused light child, since that\n    // element will deal with it.\n    if (this.isLightDescendant(/** @type {Node} */ (target)))\n      return;\n\n    keyboardEvent.preventDefault();\n    keyboardEvent.stopImmediatePropagation();\n    this._setPressed(true);\n  },\n\n  /**\n   * @param {!KeyboardEvent} event .\n   */\n  _spaceKeyUpHandler: function(event) {\n    var keyboardEvent = event.detail.keyboardEvent;\n    var target = dom(keyboardEvent).localTarget;\n\n    // Ignore the event if this is coming from a focused light child, since that\n    // element will deal with it.\n    if (this.isLightDescendant(/** @type {Node} */ (target)))\n      return;\n\n    if (this.pressed) {\n      this._asyncClick();\n    }\n    this._setPressed(false);\n  },\n\n  // trigger click asynchronously, the asynchrony is useful to allow one\n  // event handler to unwind before triggering another event\n  _asyncClick: function() {\n    this.async(function() {\n      this.click();\n    }, 1);\n  },\n\n  // any of these changes are considered a change to button state\n\n  _pressedChanged: function(pressed) {\n    this._changedButtonState();\n  },\n\n  _ariaActiveAttributeChanged: function(value, oldValue) {\n    if (oldValue && oldValue != value && this.hasAttribute(oldValue)) {\n      this.removeAttribute(oldValue);\n    }\n  },\n\n  _activeChanged: function(active, ariaActiveAttribute) {\n    if (this.toggles) {\n      this.setAttribute(this.ariaActiveAttribute, active ? 'true' : 'false');\n    } else {\n      this.removeAttribute(this.ariaActiveAttribute);\n    }\n    this._changedButtonState();\n  },\n\n  _controlStateChanged: function() {\n    if (this.disabled) {\n      this._setPressed(false);\n    } else {\n      this._changedButtonState();\n    }\n  },\n\n  // provide hook for follow-on behaviors to react to button-state\n\n  _changedButtonState: function() {\n    if (this._buttonStateChanged) {\n      this._buttonStateChanged();  // abstract\n    }\n  }\n\n};\n\n/** @polymerBehavior */\nexport const IronButtonState = [IronA11yKeysBehavior, IronButtonStateImpl];\n"],"sourceRoot":""}