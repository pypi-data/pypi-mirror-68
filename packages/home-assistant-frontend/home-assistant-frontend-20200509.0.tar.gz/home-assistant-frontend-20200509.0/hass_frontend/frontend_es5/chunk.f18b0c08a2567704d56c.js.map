{"version":3,"sources":["webpack:///./src/panels/lovelace/common/evaluate-filter.ts","webpack:///./src/panels/lovelace/cards/hui-entity-filter-card.ts"],"names":["evaluateFilter","stateObj","filter","operator","value","state","attribute","attributes","Array","isArray","includes","_typeof","RegExp","test","JSON","stringify","EntityFilterCard","HTMLElement","this","_element","getCardSize","config","entities","Error","state_filter","every","entity","_config","_configEntities","undefined","_baseCardConfig","Object","assign","type","card","lastChild","removeChild","hass","_hass","_step","_iterator","_createForOfIteratorHelper","s","n","done","states","localize","err","e","f","element","createCardElement","editMode","_editMode","_this2","haveEntitiesChanged","processConfigEntities","entitiesList","entityConf","_step2","_iterator2","_step3","_iterator3","length","show_empty","_cardElement","tagName","_oldEntities","idx","setConfig","isPanel","appendChild","style","display","customElements","define"],"mappings":"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","file":"chunk.f18b0c08a2567704d56c.js","sourcesContent":["import { HassEntity } from \"home-assistant-js-websocket\";\n\nexport const evaluateFilter = (stateObj: HassEntity, filter: any): boolean => {\n  const operator = filter.operator || \"==\";\n  const value = filter.value || filter;\n  const state = filter.attribute\n    ? stateObj.attributes[filter.attribute]\n    : stateObj.state;\n\n  switch (operator) {\n    case \"==\":\n      return state === value;\n    case \"<=\":\n      return state <= value;\n    case \"<\":\n      return state < value;\n    case \">=\":\n      return state >= value;\n    case \">\":\n      return state > value;\n    case \"!=\":\n      return state !== value;\n    case \"in\":\n      if (Array.isArray(state) || typeof state === \"string\") {\n        return state.includes(value);\n      }\n      return false;\n    case \"not in\":\n      if (Array.isArray(state) || typeof state === \"string\") {\n        return !state.includes(value);\n      }\n      return false;\n    case \"regex\": {\n      if (state !== null && typeof state === \"object\") {\n        return RegExp(value).test(JSON.stringify(state));\n      }\n      return RegExp(value).test(state);\n    }\n    default:\n      return false;\n  }\n};\n","import { LovelaceCardConfig } from \"../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../types\";\nimport { evaluateFilter } from \"../common/evaluate-filter\";\nimport { processConfigEntities } from \"../common/process-config-entities\";\nimport { createCardElement } from \"../create-element/create-card-element\";\nimport { EntityFilterEntityConfig } from \"../entity-rows/types\";\nimport { LovelaceCard } from \"../types\";\nimport { EntityFilterCardConfig } from \"./types\";\n\nclass EntityFilterCard extends HTMLElement implements LovelaceCard {\n  public isPanel?: boolean;\n\n  private _editMode = false;\n\n  private _element?: LovelaceCard;\n\n  private _config?: EntityFilterCardConfig;\n\n  private _configEntities?: EntityFilterEntityConfig[];\n\n  private _baseCardConfig?: LovelaceCardConfig;\n\n  private _hass?: HomeAssistant;\n\n  private _oldEntities?: EntityFilterEntityConfig[];\n\n  public getCardSize(): number {\n    return this._element ? this._element.getCardSize() : 1;\n  }\n\n  public setConfig(config: EntityFilterCardConfig): void {\n    if (!config.entities || !Array.isArray(config.entities)) {\n      throw new Error(\"entities must be specified.\");\n    }\n\n    if (\n      !(config.state_filter && Array.isArray(config.state_filter)) &&\n      !config.entities.every(\n        (entity) =>\n          typeof entity === \"object\" &&\n          entity.state_filter &&\n          Array.isArray(entity.state_filter)\n      )\n    ) {\n      throw new Error(\"Incorrect filter config.\");\n    }\n\n    this._config = config;\n    this._configEntities = undefined;\n    this._baseCardConfig = {\n      type: \"entities\",\n      entities: [],\n      ...this._config.card,\n    };\n\n    if (this.lastChild) {\n      this.removeChild(this.lastChild);\n      this._element = undefined;\n    }\n  }\n\n  set editMode(editMode: boolean) {\n    this._editMode = editMode;\n    if (!this._element) {\n      return;\n    }\n    this._element.editMode = editMode;\n  }\n\n  set hass(hass: HomeAssistant) {\n    if (!hass || !this._config) {\n      return;\n    }\n\n    if (!this.haveEntitiesChanged(hass)) {\n      this._hass = hass;\n      return;\n    }\n\n    this._hass = hass;\n\n    if (!this._configEntities) {\n      this._configEntities = processConfigEntities(this._config.entities);\n    }\n\n    const entitiesList = this._configEntities.filter((entityConf) => {\n      const stateObj = hass.states[entityConf.entity];\n\n      if (!stateObj) {\n        return false;\n      }\n\n      if (entityConf.state_filter) {\n        for (const filter of entityConf.state_filter) {\n          if (evaluateFilter(stateObj, filter)) {\n            return true;\n          }\n        }\n      } else {\n        for (const filter of this._config!.state_filter) {\n          if (evaluateFilter(stateObj, filter)) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    });\n\n    if (entitiesList.length === 0 && this._config.show_empty === false) {\n      this.style.display = \"none\";\n      return;\n    }\n\n    const element = this._cardElement();\n\n    if (!element) {\n      return;\n    }\n\n    if (element.tagName !== \"HUI-ERROR-CARD\") {\n      const isSame =\n        this._oldEntities &&\n        entitiesList.length === this._oldEntities.length &&\n        entitiesList.every((entity, idx) => entity === this._oldEntities![idx]);\n\n      if (!isSame) {\n        this._oldEntities = entitiesList;\n        element.setConfig({ ...this._baseCardConfig!, entities: entitiesList });\n      }\n\n      element.isPanel = this.isPanel;\n      element.editMode = this._editMode;\n      element.hass = hass;\n    }\n\n    // Attach element if it has never been attached.\n    if (!this.lastChild) {\n      this.appendChild(element);\n    }\n\n    this.style.display = \"block\";\n  }\n\n  private haveEntitiesChanged(hass: HomeAssistant): boolean {\n    if (!this._hass) {\n      return true;\n    }\n\n    if (!this._configEntities) {\n      return true;\n    }\n\n    for (const config of this._configEntities) {\n      if (\n        this._hass.states[config.entity] !== hass.states[config.entity] ||\n        this._hass.localize !== hass.localize\n      ) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private _cardElement(): LovelaceCard | undefined {\n    if (!this._element && this._config) {\n      const element = createCardElement(this._baseCardConfig!);\n      this._element = element;\n    }\n\n    return this._element;\n  }\n}\ncustomElements.define(\"hui-entity-filter-card\", EntityFilterCard);\n"],"sourceRoot":""}