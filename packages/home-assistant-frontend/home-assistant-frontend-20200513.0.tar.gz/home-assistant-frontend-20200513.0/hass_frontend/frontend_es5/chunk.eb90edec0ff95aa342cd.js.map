{"version":3,"sources":["webpack:///./src/components/paper-time-input.js","webpack:///./src/data/input_datetime.ts","webpack:///./src/components/ha-date-input.ts","webpack:///./src/panels/lovelace/entity-rows/hui-input-datetime-entity-row.ts"],"names":["PaperTimeInput","_PolymerElement","_inherits","PolymerElement","_super","_createSuper","_classCallCheck","this","apply","arguments","key","get","html","_templateObject","label","type","String","value","autoValidate","Boolean","hideLabel","floatInputLabels","alwaysFloatInputLabels","format","Number","disabled","hour","notify","min","sec","hourLabel","minLabel","secLabel","enableSecond","noHoursLimit","amPm","readOnly","computed","valid","$","validate","dropdown","str","ev","target","inputElement","select","toString","length","padStart","n1","n2","customElements","define","__webpack_require__","d","__webpack_exports__","setInputDateTimeValue","fetchInputDateTime","createInputDateTime","updateInputDateTime","deleteInputDateTime","hass","entityId","param","entity_id","time","undefined","date","callService","split","callWS","values","Object","assign","id","updates","input_datetime_id","_decorate","customElement","_initialize","_LitElement","F","_LitElement2","HaDateInput","_this","_len","args","Array","_key","call","concat","_assertThisInitialized","kind","decorators","property","static","css","_templateObject2","year","_formatYear","month","_formatMonth","day","_formatDay","yearElement","shadowRoot","getElementById","monthElement","slice","dayElement","LitElement","config","Error","_config","changedProps","hasConfigOrEntityChanged","hui_input_datetime_entity_row_templateObject","stateObj","states","entity","_templateObject3","attributes","has_date","_templateObject4","UNAVAILABLE_STATES","includes","state","_selectedValueChanged","_stopEventPropagation","has_time","_templateObject5","minute","hui_input_datetime_entity_row_templateObject2","localize","stopPropagation","querySelector","_timeInputEl","trim","_dateInputEl","blur"],"mappings":"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","file":"chunk.eb90edec0ff95aa342cd.js","sourcesContent":["/**\nAdapted from paper-time-input from\nhttps://github.com/ryanburns23/paper-time-input\nMIT Licensed. Copyright (c) 2017 Ryan Burns\n\n`<paper-time-input>` Polymer element to accept a time with paper-input & paper-dropdown-menu\nInspired by the time input in google forms\n\n### Styling\n\n`<paper-time-input>` provides the following custom properties and mixins for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-time-input-dropdown-ripple-color` | dropdown ripple color | `--primary-color`\n`--paper-time-input-cotnainer` | Mixin applied to the inputs | `{}`\n`--paper-time-dropdown-input-cotnainer` | Mixin applied to the dropdown input | `{}`\n*/\nimport \"@polymer/paper-dropdown-menu/paper-dropdown-menu\";\nimport \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\n/* eslint-plugin-disable lit */\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\n\nexport class PaperTimeInput extends PolymerElement {\n  static get template() {\n    return html`\n      <style>\n        :host {\n          display: block;\n          @apply --paper-font-common-base;\n        }\n\n        paper-input {\n          width: 30px;\n          text-align: center;\n          --paper-input-container-input: {\n            /* Damn you firefox\n             * Needed to hide spin num in firefox\n             * http://stackoverflow.com/questions/3790935/can-i-hide-the-html5-number-input-s-spin-box\n             */\n            -moz-appearance: textfield;\n            @apply --paper-time-input-cotnainer;\n          }\n          --paper-input-container-input-webkit-spinner: {\n            -webkit-appearance: none;\n            margin: 0;\n            display: none;\n          }\n          --paper-input-container-shared-input-style_-_-webkit-appearance: textfield;\n        }\n\n        paper-dropdown-menu {\n          width: 55px;\n          padding: 0;\n          /* Force ripple to use the whole container */\n          --paper-dropdown-menu-ripple: {\n            color: var(\n              --paper-time-input-dropdown-ripple-color,\n              var(--primary-color)\n            );\n          }\n          --paper-input-container-input: {\n            @apply --paper-font-button;\n            text-align: center;\n            padding-left: 5px;\n            @apply --paper-time-dropdown-input-cotnainer;\n          }\n          --paper-input-container-underline: {\n            border-color: transparent;\n          }\n          --paper-input-container-underline-focus: {\n            border-color: transparent;\n          }\n        }\n\n        paper-item {\n          cursor: pointer;\n          text-align: center;\n          font-size: 14px;\n        }\n\n        paper-listbox {\n          padding: 0;\n        }\n\n        label {\n          @apply --paper-font-caption;\n          color: var(\n            --paper-input-container-color,\n            var(--secondary-text-color)\n          );\n        }\n\n        .time-input-wrap {\n          @apply --layout-horizontal;\n          @apply --layout-no-wrap;\n        }\n\n        [hidden] {\n          display: none !important;\n        }\n      </style>\n\n      <label hidden$=\"[[hideLabel]]\">[[label]]</label>\n      <div class=\"time-input-wrap\">\n        <!-- Hour Input -->\n        <paper-input\n          id=\"hour\"\n          type=\"number\"\n          value=\"{{hour}}\"\n          label=\"[[hourLabel]]\"\n          on-change=\"_shouldFormatHour\"\n          on-focus=\"_onFocus\"\n          required\n          prevent-invalid-input\n          auto-validate=\"[[autoValidate]]\"\n          maxlength=\"2\"\n          max=\"[[_computeHourMax(format)]]\"\n          min=\"0\"\n          no-label-float$=\"[[!floatInputLabels]]\"\n          always-float-label$=\"[[alwaysFloatInputLabels]]\"\n          disabled=\"[[disabled]]\"\n        >\n          <span suffix=\"\" slot=\"suffix\">:</span>\n        </paper-input>\n\n        <!-- Min Input -->\n        <paper-input\n          id=\"min\"\n          type=\"number\"\n          value=\"{{min}}\"\n          label=\"[[minLabel]]\"\n          on-change=\"_formatMin\"\n          on-focus=\"_onFocus\"\n          required\n          auto-validate=\"[[autoValidate]]\"\n          prevent-invalid-input\n          maxlength=\"2\"\n          max=\"59\"\n          min=\"0\"\n          no-label-float$=\"[[!floatInputLabels]]\"\n          always-float-label$=\"[[alwaysFloatInputLabels]]\"\n          disabled=\"[[disabled]]\"\n        >\n          <span hidden$=\"[[!enableSecond]]\" suffix slot=\"suffix\">:</span>\n        </paper-input>\n\n        <!-- Sec Input -->\n        <paper-input\n          id=\"sec\"\n          type=\"number\"\n          value=\"{{sec}}\"\n          label=\"[[secLabel]]\"\n          on-change=\"_formatSec\"\n          on-focus=\"_onFocus\"\n          required\n          auto-validate=\"[[autoValidate]]\"\n          prevent-invalid-input\n          maxlength=\"2\"\n          max=\"59\"\n          min=\"0\"\n          no-label-float$=\"[[!floatInputLabels]]\"\n          always-float-label$=\"[[alwaysFloatInputLabels]]\"\n          disabled=\"[[disabled]]\"\n          hidden$=\"[[!enableSecond]]\"\n        >\n        </paper-input>\n\n        <!-- Dropdown Menu -->\n        <paper-dropdown-menu\n          id=\"dropdown\"\n          required=\"\"\n          hidden$=\"[[_equal(format, 24)]]\"\n          no-label-float=\"\"\n          disabled=\"[[disabled]]\"\n        >\n          <paper-listbox\n            attr-for-selected=\"name\"\n            selected=\"{{amPm}}\"\n            slot=\"dropdown-content\"\n          >\n            <paper-item name=\"AM\">AM</paper-item>\n            <paper-item name=\"PM\">PM</paper-item>\n          </paper-listbox>\n        </paper-dropdown-menu>\n      </div>\n    `;\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Label for the input\n       */\n      label: {\n        type: String,\n        value: \"Time\",\n      },\n      /**\n       * auto validate time inputs\n       */\n      autoValidate: {\n        type: Boolean,\n        value: true,\n      },\n      /**\n       * hides the label\n       */\n      hideLabel: {\n        type: Boolean,\n        value: false,\n      },\n      /**\n       * float the input labels\n       */\n      floatInputLabels: {\n        type: Boolean,\n        value: false,\n      },\n      /**\n       * always float the input labels\n       */\n      alwaysFloatInputLabels: {\n        type: Boolean,\n        value: false,\n      },\n      /**\n       * 12 or 24 hr format\n       */\n      format: {\n        type: Number,\n        value: 12,\n      },\n      /**\n       * disables the inputs\n       */\n      disabled: {\n        type: Boolean,\n        value: false,\n      },\n      /**\n       * hour\n       */\n      hour: {\n        type: String,\n        notify: true,\n      },\n      /**\n       * minute\n       */\n      min: {\n        type: String,\n        notify: true,\n      },\n      /**\n       * second\n       */\n      sec: {\n        type: String,\n        notify: true,\n      },\n      /**\n       * Suffix for the hour input\n       */\n      hourLabel: {\n        type: String,\n        value: \"\",\n      },\n      /**\n       * Suffix for the min input\n       */\n      minLabel: {\n        type: String,\n        value: \":\",\n      },\n      /**\n       * Suffix for the sec input\n       */\n      secLabel: {\n        type: String,\n        value: \"\",\n      },\n      /**\n       * show the sec field\n       */\n      enableSecond: {\n        type: Boolean,\n        value: false,\n      },\n      /**\n       * limit hours input\n       */\n      noHoursLimit: {\n        type: Boolean,\n        value: false,\n      },\n      /**\n       * AM or PM\n       */\n      amPm: {\n        type: String,\n        notify: true,\n        value: \"AM\",\n      },\n      /**\n       * Formatted time string\n       */\n      value: {\n        type: String,\n        notify: true,\n        readOnly: true,\n        computed: \"_computeTime(min, hour, sec, amPm)\",\n      },\n    };\n  }\n\n  /**\n   * Validate the inputs\n   * @return {boolean}\n   */\n  validate() {\n    var valid = true;\n    // Validate hour & min fields\n    if (!this.$.hour.validate() | !this.$.min.validate()) {\n      valid = false;\n    }\n    // Validate second field\n    if (this.enableSecond && !this.$.sec.validate()) {\n      valid = false;\n    }\n    // Validate AM PM if 12 hour time\n    if (this.format === 12 && !this.$.dropdown.validate()) {\n      valid = false;\n    }\n    return valid;\n  }\n\n  /**\n   * Create time string\n   */\n  _computeTime(min, hour, sec, amPm) {\n    let str;\n    if (hour || min || (sec && this.enableSecond)) {\n      hour = hour || \"00\";\n      min = min || \"00\";\n      sec = sec || \"00\";\n      str = hour + \":\" + min;\n      // add sec field\n      if (this.enableSecond && sec) {\n        str = str + \":\" + sec;\n      }\n      // No ampm on 24 hr time\n      if (this.format === 12) {\n        str = str + \" \" + amPm;\n      }\n    }\n\n    return str;\n  }\n\n  _onFocus(ev) {\n    ev.target.inputElement.inputElement.select();\n  }\n\n  /**\n   * Format sec\n   */\n  _formatSec() {\n    if (this.sec.toString().length === 1) {\n      this.sec = this.sec.toString().padStart(2, \"0\");\n    }\n  }\n\n  /**\n   * Format min\n   */\n  _formatMin() {\n    if (this.min.toString().length === 1) {\n      this.min = this.min.toString().padStart(2, \"0\");\n    }\n  }\n\n  /**\n   * Format hour\n   */\n  _shouldFormatHour() {\n    if (this.format === 24 && this.hour.toString().length === 1) {\n      this.hour = this.hour.toString().padStart(2, \"0\");\n    }\n  }\n\n  /**\n   * 24 hour format has a max hr of 23\n   */\n  _computeHourMax(format) {\n    if (this.noHoursLimit) {\n      return null;\n    }\n    if (format === 12) {\n      return format;\n    }\n    return 23;\n  }\n\n  _equal(n1, n2) {\n    return n1 === n2;\n  }\n}\n\ncustomElements.define(\"paper-time-input\", PaperTimeInput);\n","import { HomeAssistant } from \"../types\";\n\nexport interface InputDateTime {\n  id: string;\n  name: string;\n  icon?: string;\n  initial?: string;\n  has_time: boolean;\n  has_date: boolean;\n}\n\nexport interface InputDateTimeMutableParams {\n  name: string;\n  icon: string;\n  initial: string;\n  has_time: boolean;\n  has_date: boolean;\n}\n\nexport const setInputDateTimeValue = (\n  hass: HomeAssistant,\n  entityId: string,\n  time: string | undefined = undefined,\n  date: string | undefined = undefined\n) => {\n  const param = { entity_id: entityId, time, date };\n  hass.callService(entityId.split(\".\", 1)[0], \"set_datetime\", param);\n};\n\nexport const fetchInputDateTime = (hass: HomeAssistant) =>\n  hass.callWS<InputDateTime[]>({ type: \"input_datetime/list\" });\n\nexport const createInputDateTime = (\n  hass: HomeAssistant,\n  values: InputDateTimeMutableParams\n) =>\n  hass.callWS<InputDateTime>({\n    type: \"input_datetime/create\",\n    ...values,\n  });\n\nexport const updateInputDateTime = (\n  hass: HomeAssistant,\n  id: string,\n  updates: Partial<InputDateTimeMutableParams>\n) =>\n  hass.callWS<InputDateTime>({\n    type: \"input_datetime/update\",\n    input_datetime_id: id,\n    ...updates,\n  });\n\nexport const deleteInputDateTime = (hass: HomeAssistant, id: string) =>\n  hass.callWS({\n    type: \"input_datetime/delete\",\n    input_datetime_id: id,\n  });\n","import \"@polymer/paper-input/paper-input\";\nimport type { PaperInputElement } from \"@polymer/paper-input/paper-input\";\nimport {\n  css,\n  customElement,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n} from \"lit-element\";\n\n@customElement(\"ha-date-input\")\nexport class HaDateInput extends LitElement {\n  @property() public year?: string;\n\n  @property() public month?: string;\n\n  @property() public day?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  static get styles() {\n    return css`\n      :host {\n        display: block;\n        font-family: var(--paper-font-common-base_-_font-family);\n        -webkit-font-smoothing: var(\n          --paper-font-common-base_-_-webkit-font-smoothing\n        );\n      }\n\n      paper-input {\n        width: 30px;\n        text-align: center;\n        --paper-input-container-shared-input-style_-_-webkit-appearance: textfield;\n        --paper-input-container-input_-_-moz-appearance: textfield;\n        --paper-input-container-shared-input-style_-_appearance: textfield;\n        --paper-input-container-input-webkit-spinner_-_-webkit-appearance: none;\n        --paper-input-container-input-webkit-spinner_-_margin: 0;\n        --paper-input-container-input-webkit-spinner_-_display: none;\n      }\n\n      paper-input#year {\n        width: 50px;\n      }\n\n      .date-input-wrap {\n        display: flex;\n        flex-direction: row;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"date-input-wrap\">\n        <paper-input\n          id=\"year\"\n          type=\"number\"\n          .value=${this.year}\n          @change=${this._formatYear}\n          maxlength=\"4\"\n          max=\"9999\"\n          min=\"0\"\n          .disabled=${this.disabled}\n          no-label-float\n        >\n          <span suffix=\"\" slot=\"suffix\">-</span>\n        </paper-input>\n        <paper-input\n          id=\"month\"\n          type=\"number\"\n          .value=${this.month}\n          @change=${this._formatMonth}\n          maxlength=\"2\"\n          max=\"12\"\n          min=\"1\"\n          .disabled=${this.disabled}\n          no-label-float\n        >\n          <span suffix=\"\" slot=\"suffix\">-</span>\n        </paper-input>\n        <paper-input\n          id=\"day\"\n          type=\"number\"\n          .value=${this.day}\n          @change=${this._formatDay}\n          maxlength=\"2\"\n          max=\"31\"\n          min=\"1\"\n          .disabled=${this.disabled}\n          no-label-float\n        >\n        </paper-input>\n      </div>\n    `;\n  }\n\n  private _formatYear() {\n    const yearElement = this.shadowRoot!.getElementById(\n      \"year\"\n    ) as PaperInputElement;\n    this.year = yearElement.value!;\n  }\n\n  private _formatMonth() {\n    const monthElement = this.shadowRoot!.getElementById(\n      \"month\"\n    ) as PaperInputElement;\n    this.month = (\"0\" + monthElement.value!).slice(-2);\n  }\n\n  private _formatDay() {\n    const dayElement = this.shadowRoot!.getElementById(\n      \"day\"\n    ) as PaperInputElement;\n    this.day = (\"0\" + dayElement.value!).slice(-2);\n  }\n\n  get value() {\n    return `${this.year}-${this.month}-${this.day}`;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-date-input\": HaDateInput;\n  }\n}\n","import {\n  customElement,\n  html,\n  LitElement,\n  property,\n  PropertyValues,\n  TemplateResult,\n} from \"lit-element\";\nimport \"../../../components/ha-date-input\";\nimport type { HaDateInput } from \"../../../components/ha-date-input\";\nimport \"../../../components/paper-time-input\";\nimport type { PaperTimeInput } from \"../../../components/paper-time-input\";\nimport { UNAVAILABLE_STATES } from \"../../../data/entity\";\nimport { setInputDateTimeValue } from \"../../../data/input_datetime\";\nimport type { HomeAssistant } from \"../../../types\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\nimport \"../components/hui-generic-entity-row\";\nimport type { EntityConfig, LovelaceRow } from \"./types\";\n\n@customElement(\"hui-input-datetime-entity-row\")\nclass HuiInputDatetimeEntityRow extends LitElement implements LovelaceRow {\n  @property() public hass?: HomeAssistant;\n\n  @property() private _config?: EntityConfig;\n\n  public setConfig(config: EntityConfig): void {\n    if (!config) {\n      throw new Error(\"Configuration error\");\n    }\n    this._config = config;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    return hasConfigOrEntityChanged(this, changedProps);\n  }\n\n  protected render(): TemplateResult {\n    if (!this._config || !this.hass) {\n      return html``;\n    }\n\n    const stateObj = this.hass.states[this._config.entity];\n\n    if (!stateObj) {\n      return html`\n        <hui-warning\n          >${this.hass.localize(\n            \"ui.panel.lovelace.warning.entity_not_found\",\n            \"entity\",\n            this._config.entity\n          )}</hui-warning\n        >\n      `;\n    }\n\n    return html`\n      <hui-generic-entity-row .hass=${this.hass} .config=${this._config}>\n        ${stateObj.attributes.has_date\n          ? html`\n              <ha-date-input\n                .disabled=${UNAVAILABLE_STATES.includes(stateObj.state)}\n                .year=${stateObj.attributes.year}\n                .month=${(\"0\" + stateObj.attributes.month).slice(-2)}\n                .day=${(\"0\" + stateObj.attributes.day).slice(-2)}\n                @change=${this._selectedValueChanged}\n                @click=${this._stopEventPropagation}\n              ></ha-date-input>\n              ${stateObj.attributes.has_time ? \",\" : \"\"}\n            `\n          : ``}\n        ${stateObj.attributes.has_time\n          ? html`\n              <paper-time-input\n                .disabled=${UNAVAILABLE_STATES.includes(stateObj.state)}\n                .hour=${stateObj.state === \"unknown\"\n                  ? \"\"\n                  : (\"0\" + stateObj.attributes.hour).slice(-2)}\n                .min=${stateObj.state === \"unknown\"\n                  ? \"\"\n                  : (\"0\" + stateObj.attributes.minute).slice(-2)}\n                .amPm=${false}\n                @change=${this._selectedValueChanged}\n                @click=${this._stopEventPropagation}\n                hide-label\n                format=\"24\"\n              ></paper-time-input>\n            `\n          : ``}\n      </hui-generic-entity-row>\n    `;\n  }\n\n  private _stopEventPropagation(ev: Event): void {\n    ev.stopPropagation();\n  }\n\n  private get _timeInputEl(): PaperTimeInput {\n    return this.shadowRoot!.querySelector(\"paper-time-input\")!;\n  }\n\n  private get _dateInputEl(): HaDateInput {\n    return this.shadowRoot!.querySelector(\"ha-date-input\")!;\n  }\n\n  private _selectedValueChanged(ev): void {\n    const stateObj = this.hass!.states[this._config!.entity];\n\n    const time =\n      this._timeInputEl !== null\n        ? this._timeInputEl.value.trim() + \":00\"\n        : undefined;\n\n    const date =\n      this._dateInputEl !== null ? this._dateInputEl.value : undefined;\n\n    if (time !== stateObj.state) {\n      setInputDateTimeValue(this.hass!, stateObj.entity_id, time, date);\n    }\n\n    ev.target.blur();\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-input-datetime-entity-row\": HuiInputDatetimeEntityRow;\n  }\n}\n"],"sourceRoot":""}