{"version":3,"sources":["webpack:///./src/components/ha-paper-dropdown-menu.ts","webpack:///./src/data/input_select.ts","webpack:///./src/common/dom/stop_propagation.ts","webpack:///./src/panels/lovelace/entity-rows/hui-input-select-entity-row.ts"],"names":["paperDropdownClass","customElements","get","HaPaperDropdownClass","_paperDropdownClass","_inherits","_super","_createSuper","_classCallCheck","this","apply","arguments","key","value","_this","_get","_getPrototypeOf","prototype","call","setTimeout","window","getComputedStyle","direction","style","textAlign","define","__webpack_require__","d","__webpack_exports__","setInputSelectOption","fetchInputSelect","createInputSelect","updateInputSelect","deleteInputSelect","hass","entity","option","callService","entity_id","callWS","type","values","Object","assign","id","updates","input_select_id","stopPropagation","ev","customElement","HuiInputSelectEntityRow","property","config","Error","_config","changedProps","hasConfigOrEntityChanged","html","_templateObject","stateObj","states","_templateObject2","localize","pointer","tap_action","action","DOMAINS_HIDE_MORE_INFO","includes","computeDomain","_templateObject3","state_color","icon","image","classMap","_handleAction","actionHandler","hasHold","hasAction","hold_action","hasDoubleClick","double_tap_action","ifDefined","undefined","name","computeStateName","state","UNAVAILABLE_STATES","_selectedChanged","attributes","options","map","_templateObject4","shadowRoot","querySelector","selected","indexOf","handleAction","detail","css","_templateObject5","target","selectedItem","innerText","trim","forwardHaptic","LitElement"],"mappings":"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","file":"chunk.b1b66d052bfbfb3033b6.js","sourcesContent":["import \"@polymer/paper-dropdown-menu/paper-dropdown-menu\";\nimport { PolymerElement } from \"@polymer/polymer\";\nimport { Constructor } from \"../types\";\n\nconst paperDropdownClass = customElements.get(\n  \"paper-dropdown-menu\"\n) as Constructor<PolymerElement>;\n\n// patches paper drop down to properly support RTL - https://github.com/PolymerElements/paper-dropdown-menu/issues/183\nexport class HaPaperDropdownClass extends paperDropdownClass {\n  public ready() {\n    super.ready();\n    // wait to check for direction since otherwise direction is wrong even though top level is RTL\n    setTimeout(() => {\n      if (window.getComputedStyle(this).direction === \"rtl\") {\n        this.style.textAlign = \"right\";\n      }\n    }, 100);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-paper-dropdown-menu\": HaPaperDropdownClass;\n  }\n}\n\ncustomElements.define(\"ha-paper-dropdown-menu\", HaPaperDropdownClass);\n","import { HomeAssistant } from \"../types\";\n\nexport interface InputSelect {\n  id: string;\n  name: string;\n  options: string[];\n  icon?: string;\n  initial?: string;\n}\n\nexport interface InputSelectMutableParams {\n  name: string;\n  icon: string;\n  initial: string;\n  options: string[];\n}\n\nexport const setInputSelectOption = (\n  hass: HomeAssistant,\n  entity: string,\n  option: string\n) =>\n  hass.callService(\"input_select\", \"select_option\", {\n    option,\n    entity_id: entity,\n  });\n\nexport const fetchInputSelect = (hass: HomeAssistant) =>\n  hass.callWS<InputSelect[]>({ type: \"input_select/list\" });\n\nexport const createInputSelect = (\n  hass: HomeAssistant,\n  values: InputSelectMutableParams\n) =>\n  hass.callWS<InputSelect>({\n    type: \"input_select/create\",\n    ...values,\n  });\n\nexport const updateInputSelect = (\n  hass: HomeAssistant,\n  id: string,\n  updates: Partial<InputSelectMutableParams>\n) =>\n  hass.callWS<InputSelect>({\n    type: \"input_select/update\",\n    input_select_id: id,\n    ...updates,\n  });\n\nexport const deleteInputSelect = (hass: HomeAssistant, id: string) =>\n  hass.callWS({\n    type: \"input_select/delete\",\n    input_select_id: id,\n  });\n","export const stopPropagation = (ev) => ev.stopPropagation();\n","import \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  PropertyValues,\n  TemplateResult,\n} from \"lit-element\";\nimport { classMap } from \"lit-html/directives/class-map\";\nimport { ifDefined } from \"lit-html/directives/if-defined\";\nimport { DOMAINS_HIDE_MORE_INFO } from \"../../../common/const\";\nimport { stopPropagation } from \"../../../common/dom/stop_propagation\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport \"../../../components/entity/state-badge\";\nimport \"../../../components/ha-paper-dropdown-menu\";\nimport { UNAVAILABLE_STATES } from \"../../../data/entity\";\nimport { forwardHaptic } from \"../../../data/haptics\";\nimport { setInputSelectOption } from \"../../../data/input_select\";\nimport { ActionHandlerEvent } from \"../../../data/lovelace\";\nimport { HomeAssistant, InputSelectEntity } from \"../../../types\";\nimport { EntitiesCardEntityConfig } from \"../cards/types\";\nimport { actionHandler } from \"../common/directives/action-handler-directive\";\nimport { handleAction } from \"../common/handle-action\";\nimport { hasAction } from \"../common/has-action\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\nimport \"../components/hui-warning\";\nimport { LovelaceRow } from \"./types\";\n\n@customElement(\"hui-input-select-entity-row\")\nclass HuiInputSelectEntityRow extends LitElement implements LovelaceRow {\n  @property() public hass?: HomeAssistant;\n\n  @property() private _config?: EntitiesCardEntityConfig;\n\n  public setConfig(config: EntitiesCardEntityConfig): void {\n    if (!config || !config.entity) {\n      throw new Error(\"Invalid Configuration: 'entity' required\");\n    }\n\n    this._config = config;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    return hasConfigOrEntityChanged(this, changedProps);\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    const stateObj = this.hass.states[this._config.entity] as\n      | InputSelectEntity\n      | undefined;\n\n    if (!stateObj) {\n      return html`\n        <hui-warning\n          >${this.hass.localize(\n            \"ui.panel.lovelace.warning.entity_not_found\",\n            \"entity\",\n            this._config.entity\n          )}</hui-warning\n        >\n      `;\n    }\n\n    const pointer =\n      (this._config.tap_action && this._config.tap_action.action !== \"none\") ||\n      (this._config.entity &&\n        !DOMAINS_HIDE_MORE_INFO.includes(computeDomain(this._config.entity)));\n\n    return html`\n      <state-badge\n        .stateObj=${stateObj}\n        .stateColor=${this._config.state_color}\n        .overrideIcon=${this._config.icon}\n        .overrideImage=${this._config.image}\n        class=${classMap({\n          pointer,\n        })}\n        @action=${this._handleAction}\n        .actionHandler=${actionHandler({\n          hasHold: hasAction(this._config!.hold_action),\n          hasDoubleClick: hasAction(this._config!.double_tap_action),\n        })}\n        tabindex=${ifDefined(pointer ? \"0\" : undefined)}\n      ></state-badge>\n      <ha-paper-dropdown-menu\n        .label=${this._config.name || computeStateName(stateObj)}\n        .value=${stateObj.state}\n        .disabled=${UNAVAILABLE_STATES.includes(stateObj.state)}\n        @iron-select=${this._selectedChanged}\n        @click=${stopPropagation}\n      >\n        <paper-listbox slot=\"dropdown-content\">\n          ${stateObj.attributes.options\n            ? stateObj.attributes.options.map(\n                (option) => html` <paper-item>${option}</paper-item> `\n              )\n            : \"\"}\n        </paper-listbox>\n      </ha-paper-dropdown-menu>\n    `;\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n\n    if (!this.hass || !this._config) {\n      return;\n    }\n\n    const stateObj = this.hass.states[this._config.entity] as\n      | InputSelectEntity\n      | undefined;\n\n    if (!stateObj) {\n      return;\n    }\n\n    // Update selected after rendering the items or else it won't work in Firefox\n    if (stateObj.attributes.options) {\n      this.shadowRoot!.querySelector(\n        \"paper-listbox\"\n      )!.selected = stateObj.attributes.options.indexOf(stateObj.state);\n    }\n  }\n\n  private _handleAction(ev: ActionHandlerEvent) {\n    handleAction(this, this.hass!, this._config!, ev.detail.action!);\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        display: flex;\n        align-items: center;\n      }\n      ha-paper-dropdown-menu {\n        margin-left: 16px;\n        flex: 1;\n      }\n      paper-item {\n        cursor: pointer;\n        min-width: 200px;\n      }\n      .pointer {\n        cursor: pointer;\n      }\n      state-badge:focus {\n        outline: none;\n        background: var(--divider-color);\n        border-radius: 100%;\n      }\n    `;\n  }\n\n  private _selectedChanged(ev): void {\n    const stateObj = this.hass!.states[this._config!.entity];\n    const option = ev.target.selectedItem.innerText.trim();\n    if (option === stateObj.state) {\n      return;\n    }\n\n    forwardHaptic(\"light\");\n\n    setInputSelectOption(this.hass!, stateObj.entity_id, option);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-input-select-entity-row\": HuiInputSelectEntityRow;\n  }\n}\n"],"sourceRoot":""}