{"version":3,"sources":["webpack:///./node_modules/@polymer/iron-a11y-announcer/iron-a11y-announcer.js","webpack:///./node_modules/@polymer/iron-resizable-behavior/iron-resizable-behavior.js","webpack:///./node_modules/@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js","webpack:///./node_modules/@polymer/paper-toast/paper-toast.js"],"names":["__webpack_require__","d","__webpack_exports__","IronA11yAnnouncer","_polymer_polymer_lib_legacy_polymer_fn_js__WEBPACK_IMPORTED_MODULE_1__","_polymer_polymer_lib_utils_html_tag_js__WEBPACK_IMPORTED_MODULE_2__","Polymer","_template","html","is","properties","mode","type","String","value","_text","created","instance","this","document","body","addEventListener","_onIronAnnounce","bind","announce","text","async","event","detail","requestAvailability","createElement","appendChild","IronResizableBehavior","_polymer_polymer_lib_legacy_polymer_dom_js__WEBPACK_IMPORTED_MODULE_1__","_polymer_polymer_lib_utils_settings_js__WEBPACK_IMPORTED_MODULE_2__","ORPHANS","Set","_parentResizable","Object","observer","_notifyingDescendant","Boolean","listeners","iron-request-resize-notifications","_interestedResizables","_boundNotifyResize","notifyResize","_boundOnDescendantIronResize","_onDescendantIronResize","attached","_requestResizeNotifications","detached","stopResizeNotificationsFor","delete","window","removeEventListener","isAttached","forEach","resizable","resizerShouldNotify","_notifyDescendant","_fireResize","assignParentResizable","parentResizable","indexOf","push","_subscribeIronResize","target","index","splice","_unsubscribeIronResize","element","stopPropagation","useShadow","fire","node","bubbles","_onIronRequestResizeNotifications","dom","rootTarget","_parentResizableChanged","descendant","readyState","readystatechanged","_findParent","orphan","cancelable","add","IronA11yKeysBehavior","KEY_IDENTIFIER","U+0008","U+0009","U+001B","U+0020","U+007F","KEY_CODE","8","9","13","27","33","34","35","36","32","37","38","39","40","46","106","MODIFIER_KEYS","shift","ctrl","alt","meta","KEY_CHAR","IDENT_CHAR","ARROW_KEY","SPACE_KEY","ESC_KEY","transformKey","key","noSpecialChars","validKey","lKey","toLowerCase","test","length","replace","normalizedKeyForEvent","keyEvent","keyIdent","keyIdentifier","parseInt","fromCharCode","keyCode","Number","transformKeyCode","keyComboMatchesEvent","keyCombo","hasModifiers","shiftKey","ctrlKey","altKey","metaKey","parseEventString","eventString","trim","split","map","keyComboString","combo","reduce","parsedKeyCombo","keyComboPart","eventParts","keyName","parseKeyComboString","keyEventTarget","stopKeyboardEventPropagation","_boundKeyHandlers","Array","_imperativeKeyBindings","observers","keyBindings","registered","_prepKeyBindings","_listenKeyEventListeners","_unlistenKeyEventListeners","addOwnKeyBinding","handlerName","_resetKeyEventListeners","removeOwnKeyBindings","keyboardEventMatchesKeys","keyCombos","i","_collectKeyBindings","behaviors","behavior","_keyBindings","_addKeyBinding","eventName","sort","kb1","kb2","b1","keys","boundKeyHandler","_onKeyBindingEvent","keyHandlerTuple","pop","defaultPrevented","_triggerKeyHandler","keyboardEvent","create","CustomEvent","call","preventDefault","_polymer_iron_a11y_announcer_iron_a11y_announcer_js__WEBPACK_IMPORTED_MODULE_0__","_polymer_iron_overlay_behavior_iron_overlay_behavior_js__WEBPACK_IMPORTED_MODULE_1__","_polymer_polymer_lib_legacy_polymer_fn_js__WEBPACK_IMPORTED_MODULE_2__","_polymer_polymer_lib_utils_html_tag_js__WEBPACK_IMPORTED_MODULE_3__","_polymer_polymer_polymer_legacy_js__WEBPACK_IMPORTED_MODULE_4__","currentToast","IronOverlayBehavior","fitInto","horizontalAlign","verticalAlign","duration","noCancelOnOutsideClick","noAutoFocus","transitionend","visible","Base","_warn","opened","_canAutoClose","Infinity","_autoClose","show","property","open","hide","close","__onTransitionEnd","e","propertyName","_finishRenderOpened","_finishRenderClosed","_openedChanged","cancelAsync","IronOverlayBehaviorImpl","apply","arguments","_renderOpened","classList","_renderClosed","remove","_onFitIntoChanged","positionTarget"],"mappings":"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","file":"chunk.aa4a964618065105d3f6.js","sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/**\n`iron-a11y-announcer` is a singleton element that is intended to add a11y\nto features that require on-demand announcement from screen readers. In\norder to make use of the announcer, it is best to request its availability\nin the announcing element.\n\nExample:\n\n    Polymer({\n\n      is: 'x-chatty',\n\n      attached: function() {\n        // This will create the singleton element if it has not\n        // been created yet:\n        Polymer.IronA11yAnnouncer.requestAvailability();\n      }\n    });\n\nAfter the `iron-a11y-announcer` has been made available, elements can\nmake announces by firing bubbling `iron-announce` events.\n\nExample:\n\n    this.fire('iron-announce', {\n      text: 'This is an announcement!'\n    }, { bubbles: true });\n\nNote: announcements are only audible if you have a screen reader enabled.\n\n@group Iron Elements\n@demo demo/index.html\n*/\nexport const IronA11yAnnouncer = Polymer({\n  _template: html`\n    <style>\n      :host {\n        display: inline-block;\n        position: fixed;\n        clip: rect(0px,0px,0px,0px);\n      }\n    </style>\n    <div aria-live$=\"[[mode]]\">[[_text]]</div>\n`,\n\n  is: 'iron-a11y-announcer',\n\n  properties: {\n\n    /**\n     * The value of mode is used to set the `aria-live` attribute\n     * for the element that will be announced. Valid values are: `off`,\n     * `polite` and `assertive`.\n     */\n    mode: {type: String, value: 'polite'},\n\n    _text: {type: String, value: ''}\n  },\n\n  created: function() {\n    if (!IronA11yAnnouncer.instance) {\n      IronA11yAnnouncer.instance = this;\n    }\n\n    document.body.addEventListener(\n        'iron-announce', this._onIronAnnounce.bind(this));\n  },\n\n  /**\n   * Cause a text string to be announced by screen readers.\n   *\n   * @param {string} text The text that should be announced.\n   */\n  announce: function(text) {\n    this._text = '';\n    this.async(function() {\n      this._text = text;\n    }, 100);\n  },\n\n  _onIronAnnounce: function(event) {\n    if (event.detail && event.detail.text) {\n      this.announce(event.detail.text);\n    }\n  }\n});\n\nIronA11yAnnouncer.instance = null;\n\nIronA11yAnnouncer.requestAvailability = function() {\n  if (!IronA11yAnnouncer.instance) {\n    IronA11yAnnouncer.instance = document.createElement('iron-a11y-announcer');\n  }\n\n  document.body.appendChild(IronA11yAnnouncer.instance);\n};\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport {useShadow} from '@polymer/polymer/lib/utils/settings.js';\n\n// Contains all connected resizables that do not have a parent.\nvar ORPHANS = new Set();\n\n/**\n * `IronResizableBehavior` is a behavior that can be used in Polymer elements to\n * coordinate the flow of resize events between \"resizers\" (elements that\n *control the size or hidden state of their children) and \"resizables\" (elements\n *that need to be notified when they are resized or un-hidden by their parents\n *in order to take action on their new measurements).\n *\n * Elements that perform measurement should add the `IronResizableBehavior`\n *behavior to their element definition and listen for the `iron-resize` event on\n *themselves. This event will be fired when they become showing after having\n *been hidden, when they are resized explicitly by another resizable, or when\n *the window has been resized.\n *\n * Note, the `iron-resize` event is non-bubbling.\n *\n * @polymerBehavior\n * @demo demo/index.html\n **/\nexport const IronResizableBehavior = {\n  properties: {\n    /**\n     * The closest ancestor element that implements `IronResizableBehavior`.\n     */\n    _parentResizable: {\n      type: Object,\n      observer: '_parentResizableChanged',\n    },\n\n    /**\n     * True if this element is currently notifying its descendant elements of\n     * resize.\n     */\n    _notifyingDescendant: {\n      type: Boolean,\n      value: false,\n    }\n  },\n\n  listeners: {\n    'iron-request-resize-notifications': '_onIronRequestResizeNotifications'\n  },\n\n  created: function() {\n    // We don't really need property effects on these, and also we want them\n    // to be created before the `_parentResizable` observer fires:\n    this._interestedResizables = [];\n    this._boundNotifyResize = this.notifyResize.bind(this);\n    this._boundOnDescendantIronResize = this._onDescendantIronResize.bind(this);\n  },\n\n  attached: function() {\n    this._requestResizeNotifications();\n  },\n\n  detached: function() {\n    if (this._parentResizable) {\n      this._parentResizable.stopResizeNotificationsFor(this);\n    } else {\n      ORPHANS.delete(this);\n      window.removeEventListener('resize', this._boundNotifyResize);\n    }\n\n    this._parentResizable = null;\n  },\n\n  /**\n   * Can be called to manually notify a resizable and its descendant\n   * resizables of a resize change.\n   */\n  notifyResize: function() {\n    if (!this.isAttached) {\n      return;\n    }\n\n    this._interestedResizables.forEach(function(resizable) {\n      if (this.resizerShouldNotify(resizable)) {\n        this._notifyDescendant(resizable);\n      }\n    }, this);\n\n    this._fireResize();\n  },\n\n  /**\n   * Used to assign the closest resizable ancestor to this resizable\n   * if the ancestor detects a request for notifications.\n   */\n  assignParentResizable: function(parentResizable) {\n    if (this._parentResizable) {\n      this._parentResizable.stopResizeNotificationsFor(this);\n    }\n\n    this._parentResizable = parentResizable;\n\n    if (parentResizable &&\n        parentResizable._interestedResizables.indexOf(this) === -1) {\n      parentResizable._interestedResizables.push(this);\n      parentResizable._subscribeIronResize(this);\n    }\n  },\n\n  /**\n   * Used to remove a resizable descendant from the list of descendants\n   * that should be notified of a resize change.\n   */\n  stopResizeNotificationsFor: function(target) {\n    var index = this._interestedResizables.indexOf(target);\n\n    if (index > -1) {\n      this._interestedResizables.splice(index, 1);\n      this._unsubscribeIronResize(target);\n    }\n  },\n\n  /**\n   * Subscribe this element to listen to iron-resize events on the given target.\n   *\n   * Preferred over target.listen because the property renamer does not\n   * understand to rename when the target is not specifically \"this\"\n   *\n   * @param {!HTMLElement} target Element to listen to for iron-resize events.\n   */\n  _subscribeIronResize: function(target) {\n    target.addEventListener('iron-resize', this._boundOnDescendantIronResize);\n  },\n\n  /**\n   * Unsubscribe this element from listening to to iron-resize events on the\n   * given target.\n   *\n   * Preferred over target.unlisten because the property renamer does not\n   * understand to rename when the target is not specifically \"this\"\n   *\n   * @param {!HTMLElement} target Element to listen to for iron-resize events.\n   */\n  _unsubscribeIronResize: function(target) {\n    target.removeEventListener(\n        'iron-resize', this._boundOnDescendantIronResize);\n  },\n\n  /**\n   * This method can be overridden to filter nested elements that should or\n   * should not be notified by the current element. Return true if an element\n   * should be notified, or false if it should not be notified.\n   *\n   * @param {HTMLElement} element A candidate descendant element that\n   * implements `IronResizableBehavior`.\n   * @return {boolean} True if the `element` should be notified of resize.\n   */\n  resizerShouldNotify: function(element) {\n    return true;\n  },\n\n  _onDescendantIronResize: function(event) {\n    if (this._notifyingDescendant) {\n      event.stopPropagation();\n      return;\n    }\n\n    // no need to use this during shadow dom because of event retargeting\n    if (!useShadow) {\n      this._fireResize();\n    }\n  },\n\n  _fireResize: function() {\n    this.fire('iron-resize', null, {node: this, bubbles: false});\n  },\n\n  _onIronRequestResizeNotifications: function(event) {\n    var target = /** @type {!EventTarget} */ (dom(event).rootTarget);\n    if (target === this) {\n      return;\n    }\n\n    target.assignParentResizable(this);\n    this._notifyDescendant(target);\n\n    event.stopPropagation();\n  },\n\n  _parentResizableChanged: function(parentResizable) {\n    if (parentResizable) {\n      window.removeEventListener('resize', this._boundNotifyResize);\n    }\n  },\n\n  _notifyDescendant: function(descendant) {\n    // NOTE(cdata): In IE10, attached is fired on children first, so it's\n    // important not to notify them if the parent is not attached yet (or\n    // else they will get redundantly notified when the parent attaches).\n    if (!this.isAttached) {\n      return;\n    }\n\n    this._notifyingDescendant = true;\n    descendant.notifyResize();\n    this._notifyingDescendant = false;\n  },\n\n  _requestResizeNotifications: function() {\n    if (!this.isAttached) {\n      return;\n    }\n\n    if (document.readyState === 'loading') {\n      var _requestResizeNotifications =\n          this._requestResizeNotifications.bind(this);\n      document.addEventListener(\n          'readystatechange', function readystatechanged() {\n            document.removeEventListener('readystatechange', readystatechanged);\n            _requestResizeNotifications();\n          });\n    } else {\n      this._findParent();\n\n      if (!this._parentResizable) {\n        // If this resizable is an orphan, tell other orphans to try to find\n        // their parent again, in case it's this resizable.\n        ORPHANS.forEach(function(orphan) {\n          if (orphan !== this) {\n            orphan._findParent();\n          }\n        }, this);\n\n        window.addEventListener('resize', this._boundNotifyResize);\n        this.notifyResize();\n      } else {\n        // If this resizable has a parent, tell other child resizables of\n        // that parent to try finding their parent again, in case it's this\n        // resizable.\n        this._parentResizable._interestedResizables\n            .forEach(function(resizable) {\n              if (resizable !== this) {\n                resizable._findParent();\n              }\n            }, this);\n      }\n    }\n  },\n\n  _findParent: function() {\n    this.assignParentResizable(null);\n    this.fire(\n        'iron-request-resize-notifications',\n        null,\n        {node: this, bubbles: true, cancelable: true});\n\n    if (!this._parentResizable) {\n      ORPHANS.add(this);\n    } else {\n      ORPHANS.delete(this);\n    }\n  }\n};\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\n/**\n * Chrome uses an older version of DOM Level 3 Keyboard Events\n *\n * Most keys are labeled as text, but some are Unicode codepoints.\n * Values taken from:\n * http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/keyset.html#KeySet-Set\n */\nvar KEY_IDENTIFIER = {\n  'U+0008': 'backspace',\n  'U+0009': 'tab',\n  'U+001B': 'esc',\n  'U+0020': 'space',\n  'U+007F': 'del'\n};\n\n/**\n * Special table for KeyboardEvent.keyCode.\n * KeyboardEvent.keyIdentifier is better, and KeyBoardEvent.key is even better\n * than that.\n *\n * Values from:\n * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent.keyCode#Value_of_keyCode\n */\nvar KEY_CODE = {\n  8: 'backspace',\n  9: 'tab',\n  13: 'enter',\n  27: 'esc',\n  33: 'pageup',\n  34: 'pagedown',\n  35: 'end',\n  36: 'home',\n  32: 'space',\n  37: 'left',\n  38: 'up',\n  39: 'right',\n  40: 'down',\n  46: 'del',\n  106: '*'\n};\n\n/**\n * MODIFIER_KEYS maps the short name for modifier keys used in a key\n * combo string to the property name that references those same keys\n * in a KeyboardEvent instance.\n */\nvar MODIFIER_KEYS = {\n  'shift': 'shiftKey',\n  'ctrl': 'ctrlKey',\n  'alt': 'altKey',\n  'meta': 'metaKey'\n};\n\n/**\n * KeyboardEvent.key is mostly represented by printable character made by\n * the keyboard, with unprintable keys labeled nicely.\n *\n * However, on OS X, Alt+char can make a Unicode character that follows an\n * Apple-specific mapping. In this case, we fall back to .keyCode.\n */\nvar KEY_CHAR = /[a-z0-9*]/;\n\n/**\n * Matches a keyIdentifier string.\n */\nvar IDENT_CHAR = /U\\+/;\n\n/**\n * Matches arrow keys in Gecko 27.0+\n */\nvar ARROW_KEY = /^arrow/;\n\n/**\n * Matches space keys everywhere (notably including IE10's exceptional name\n * `spacebar`).\n */\nvar SPACE_KEY = /^space(bar)?/;\n\n/**\n * Matches ESC key.\n *\n * Value from: http://w3c.github.io/uievents-key/#key-Escape\n */\nvar ESC_KEY = /^escape$/;\n\n/**\n * Transforms the key.\n * @param {string} key The KeyBoardEvent.key\n * @param {Boolean} [noSpecialChars] Limits the transformation to\n * alpha-numeric characters.\n */\nfunction transformKey(key, noSpecialChars) {\n  var validKey = '';\n  if (key) {\n    var lKey = key.toLowerCase();\n    if (lKey === ' ' || SPACE_KEY.test(lKey)) {\n      validKey = 'space';\n    } else if (ESC_KEY.test(lKey)) {\n      validKey = 'esc';\n    } else if (lKey.length == 1) {\n      if (!noSpecialChars || KEY_CHAR.test(lKey)) {\n        validKey = lKey;\n      }\n    } else if (ARROW_KEY.test(lKey)) {\n      validKey = lKey.replace('arrow', '');\n    } else if (lKey == 'multiply') {\n      // numpad '*' can map to Multiply on IE/Windows\n      validKey = '*';\n    } else {\n      validKey = lKey;\n    }\n  }\n  return validKey;\n}\n\nfunction transformKeyIdentifier(keyIdent) {\n  var validKey = '';\n  if (keyIdent) {\n    if (keyIdent in KEY_IDENTIFIER) {\n      validKey = KEY_IDENTIFIER[keyIdent];\n    } else if (IDENT_CHAR.test(keyIdent)) {\n      keyIdent = parseInt(keyIdent.replace('U+', '0x'), 16);\n      validKey = String.fromCharCode(keyIdent).toLowerCase();\n    } else {\n      validKey = keyIdent.toLowerCase();\n    }\n  }\n  return validKey;\n}\n\nfunction transformKeyCode(keyCode) {\n  var validKey = '';\n  if (Number(keyCode)) {\n    if (keyCode >= 65 && keyCode <= 90) {\n      // ascii a-z\n      // lowercase is 32 offset from uppercase\n      validKey = String.fromCharCode(32 + keyCode);\n    } else if (keyCode >= 112 && keyCode <= 123) {\n      // function keys f1-f12\n      validKey = 'f' + (keyCode - 112 + 1);\n    } else if (keyCode >= 48 && keyCode <= 57) {\n      // top 0-9 keys\n      validKey = String(keyCode - 48);\n    } else if (keyCode >= 96 && keyCode <= 105) {\n      // num pad 0-9\n      validKey = String(keyCode - 96);\n    } else {\n      validKey = KEY_CODE[keyCode];\n    }\n  }\n  return validKey;\n}\n\n/**\n * Calculates the normalized key for a KeyboardEvent.\n * @param {KeyboardEvent} keyEvent\n * @param {Boolean} [noSpecialChars] Set to true to limit keyEvent.key\n * transformation to alpha-numeric chars. This is useful with key\n * combinations like shift + 2, which on FF for MacOS produces\n * keyEvent.key = @\n * To get 2 returned, set noSpecialChars = true\n * To get @ returned, set noSpecialChars = false\n */\nfunction normalizedKeyForEvent(keyEvent, noSpecialChars) {\n  // Fall back from .key, to .detail.key for artifical keyboard events,\n  // and then to deprecated .keyIdentifier and .keyCode.\n  if (keyEvent.key) {\n    return transformKey(keyEvent.key, noSpecialChars);\n  }\n  if (keyEvent.detail && keyEvent.detail.key) {\n    return transformKey(keyEvent.detail.key, noSpecialChars);\n  }\n  return transformKeyIdentifier(keyEvent.keyIdentifier) ||\n      transformKeyCode(keyEvent.keyCode) || '';\n}\n\nfunction keyComboMatchesEvent(keyCombo, event) {\n  // For combos with modifiers we support only alpha-numeric keys\n  var keyEvent = normalizedKeyForEvent(event, keyCombo.hasModifiers);\n  return keyEvent === keyCombo.key &&\n      (!keyCombo.hasModifiers ||\n       (!!event.shiftKey === !!keyCombo.shiftKey &&\n        !!event.ctrlKey === !!keyCombo.ctrlKey &&\n        !!event.altKey === !!keyCombo.altKey &&\n        !!event.metaKey === !!keyCombo.metaKey));\n}\n\nfunction parseKeyComboString(keyComboString) {\n  if (keyComboString.length === 1) {\n    return {combo: keyComboString, key: keyComboString, event: 'keydown'};\n  }\n  return keyComboString.split('+')\n      .reduce(function(parsedKeyCombo, keyComboPart) {\n        var eventParts = keyComboPart.split(':');\n        var keyName = eventParts[0];\n        var event = eventParts[1];\n\n        if (keyName in MODIFIER_KEYS) {\n          parsedKeyCombo[MODIFIER_KEYS[keyName]] = true;\n          parsedKeyCombo.hasModifiers = true;\n        } else {\n          parsedKeyCombo.key = keyName;\n          parsedKeyCombo.event = event || 'keydown';\n        }\n\n        return parsedKeyCombo;\n      }, {combo: keyComboString.split(':').shift()});\n}\n\nfunction parseEventString(eventString) {\n  return eventString.trim().split(' ').map(function(keyComboString) {\n    return parseKeyComboString(keyComboString);\n  });\n}\n\n/**\n * `Polymer.IronA11yKeysBehavior` provides a normalized interface for processing\n * keyboard commands that pertain to [WAI-ARIA best\n * practices](http://www.w3.org/TR/wai-aria-practices/#kbd_general_binding). The\n * element takes care of browser differences with respect to Keyboard events and\n * uses an expressive syntax to filter key presses.\n *\n * Use the `keyBindings` prototype property to express what combination of keys\n * will trigger the callback. A key binding has the format\n * `\"KEY+MODIFIER:EVENT\": \"callback\"` (`\"KEY\": \"callback\"` or\n * `\"KEY:EVENT\": \"callback\"` are valid as well). Some examples:\n *\n *      keyBindings: {\n *        'space': '_onKeydown', // same as 'space:keydown'\n *        'shift+tab': '_onKeydown',\n *        'enter:keypress': '_onKeypress',\n *        'esc:keyup': '_onKeyup'\n *      }\n *\n * The callback will receive with an event containing the following information\n * in `event.detail`:\n *\n *      _onKeydown: function(event) {\n *        console.log(event.detail.combo); // KEY+MODIFIER, e.g. \"shift+tab\"\n *        console.log(event.detail.key); // KEY only, e.g. \"tab\"\n *        console.log(event.detail.event); // EVENT, e.g. \"keydown\"\n *        console.log(event.detail.keyboardEvent); // the original KeyboardEvent\n *      }\n *\n * Use the `keyEventTarget` attribute to set up event handlers on a specific\n * node.\n *\n * See the [demo source\n * code](https://github.com/PolymerElements/iron-a11y-keys-behavior/blob/master/demo/x-key-aware.html)\n * for an example.\n *\n * @demo demo/index.html\n * @polymerBehavior\n */\nexport const IronA11yKeysBehavior = {\n  properties: {\n    /**\n     * The EventTarget that will be firing relevant KeyboardEvents. Set it to\n     * `null` to disable the listeners.\n     * @type {?EventTarget}\n     */\n    keyEventTarget: {\n      type: Object,\n      value: function() {\n        return this;\n      }\n    },\n\n    /**\n     * If true, this property will cause the implementing element to\n     * automatically stop propagation on any handled KeyboardEvents.\n     */\n    stopKeyboardEventPropagation: {type: Boolean, value: false},\n\n    _boundKeyHandlers: {\n      type: Array,\n      value: function() {\n        return [];\n      }\n    },\n\n    // We use this due to a limitation in IE10 where instances will have\n    // own properties of everything on the \"prototype\".\n    _imperativeKeyBindings: {\n      type: Object,\n      value: function() {\n        return {};\n      }\n    }\n  },\n\n  observers: ['_resetKeyEventListeners(keyEventTarget, _boundKeyHandlers)'],\n\n\n  /**\n   * To be used to express what combination of keys  will trigger the relative\n   * callback. e.g. `keyBindings: { 'esc': '_onEscPressed'}`\n   * @type {!Object}\n   */\n  keyBindings: {},\n\n  registered: function() {\n    this._prepKeyBindings();\n  },\n\n  attached: function() {\n    this._listenKeyEventListeners();\n  },\n\n  detached: function() {\n    this._unlistenKeyEventListeners();\n  },\n\n  /**\n   * Can be used to imperatively add a key binding to the implementing\n   * element. This is the imperative equivalent of declaring a keybinding\n   * in the `keyBindings` prototype property.\n   *\n   * @param {string} eventString\n   * @param {string} handlerName\n   */\n  addOwnKeyBinding: function(eventString, handlerName) {\n    this._imperativeKeyBindings[eventString] = handlerName;\n    this._prepKeyBindings();\n    this._resetKeyEventListeners();\n  },\n\n  /**\n   * When called, will remove all imperatively-added key bindings.\n   */\n  removeOwnKeyBindings: function() {\n    this._imperativeKeyBindings = {};\n    this._prepKeyBindings();\n    this._resetKeyEventListeners();\n  },\n\n  /**\n   * Returns true if a keyboard event matches `eventString`.\n   *\n   * @param {KeyboardEvent} event\n   * @param {string} eventString\n   * @return {boolean}\n   */\n  keyboardEventMatchesKeys: function(event, eventString) {\n    var keyCombos = parseEventString(eventString);\n    for (var i = 0; i < keyCombos.length; ++i) {\n      if (keyComboMatchesEvent(keyCombos[i], event)) {\n        return true;\n      }\n    }\n    return false;\n  },\n\n  _collectKeyBindings: function() {\n    var keyBindings = this.behaviors.map(function(behavior) {\n      return behavior.keyBindings;\n    });\n\n    if (keyBindings.indexOf(this.keyBindings) === -1) {\n      keyBindings.push(this.keyBindings);\n    }\n\n    return keyBindings;\n  },\n\n  _prepKeyBindings: function() {\n    this._keyBindings = {};\n\n    this._collectKeyBindings().forEach(function(keyBindings) {\n      for (var eventString in keyBindings) {\n        this._addKeyBinding(eventString, keyBindings[eventString]);\n      }\n    }, this);\n\n    for (var eventString in this._imperativeKeyBindings) {\n      this._addKeyBinding(\n          eventString, this._imperativeKeyBindings[eventString]);\n    }\n\n    // Give precedence to combos with modifiers to be checked first.\n    for (var eventName in this._keyBindings) {\n      this._keyBindings[eventName].sort(function(kb1, kb2) {\n        var b1 = kb1[0].hasModifiers;\n        var b2 = kb2[0].hasModifiers;\n        return (b1 === b2) ? 0 : b1 ? -1 : 1;\n      })\n    }\n  },\n\n  _addKeyBinding: function(eventString, handlerName) {\n    parseEventString(eventString).forEach(function(keyCombo) {\n      this._keyBindings[keyCombo.event] =\n          this._keyBindings[keyCombo.event] || [];\n\n      this._keyBindings[keyCombo.event].push([keyCombo, handlerName]);\n    }, this);\n  },\n\n  _resetKeyEventListeners: function() {\n    this._unlistenKeyEventListeners();\n\n    if (this.isAttached) {\n      this._listenKeyEventListeners();\n    }\n  },\n\n  _listenKeyEventListeners: function() {\n    if (!this.keyEventTarget) {\n      return;\n    }\n    Object.keys(this._keyBindings).forEach(function(eventName) {\n      var keyBindings = this._keyBindings[eventName];\n      var boundKeyHandler = this._onKeyBindingEvent.bind(this, keyBindings);\n\n      this._boundKeyHandlers.push(\n          [this.keyEventTarget, eventName, boundKeyHandler]);\n\n      this.keyEventTarget.addEventListener(eventName, boundKeyHandler);\n    }, this);\n  },\n\n  _unlistenKeyEventListeners: function() {\n    var keyHandlerTuple;\n    var keyEventTarget;\n    var eventName;\n    var boundKeyHandler;\n\n    while (this._boundKeyHandlers.length) {\n      // My kingdom for block-scope binding and destructuring assignment..\n      keyHandlerTuple = this._boundKeyHandlers.pop();\n      keyEventTarget = keyHandlerTuple[0];\n      eventName = keyHandlerTuple[1];\n      boundKeyHandler = keyHandlerTuple[2];\n\n      keyEventTarget.removeEventListener(eventName, boundKeyHandler);\n    }\n  },\n\n  _onKeyBindingEvent: function(keyBindings, event) {\n    if (this.stopKeyboardEventPropagation) {\n      event.stopPropagation();\n    }\n\n    // if event has been already prevented, don't do anything\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    for (var i = 0; i < keyBindings.length; i++) {\n      var keyCombo = keyBindings[i][0];\n      var handlerName = keyBindings[i][1];\n      if (keyComboMatchesEvent(keyCombo, event)) {\n        this._triggerKeyHandler(keyCombo, handlerName, event);\n        // exit the loop if eventDefault was prevented\n        if (event.defaultPrevented) {\n          return;\n        }\n      }\n    }\n  },\n\n  _triggerKeyHandler: function(keyCombo, handlerName, keyboardEvent) {\n    var detail = Object.create(keyCombo);\n    detail.keyboardEvent = keyboardEvent;\n    var event =\n        new CustomEvent(keyCombo.event, {detail: detail, cancelable: true});\n    this[handlerName].call(this, event);\n    if (event.defaultPrevented) {\n      keyboardEvent.preventDefault();\n    }\n  }\n};\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport {IronA11yAnnouncer} from '@polymer/iron-a11y-announcer/iron-a11y-announcer.js';\nimport {IronOverlayBehavior, IronOverlayBehaviorImpl} from '@polymer/iron-overlay-behavior/iron-overlay-behavior.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\nimport {Base} from '@polymer/polymer/polymer-legacy.js';\n\n// Keeps track of the toast currently opened.\nvar currentToast = null;\n\n/**\nMaterial design: [Snackbars &\ntoasts](https://www.google.com/design/spec/components/snackbars-toasts.html)\n\n`paper-toast` provides a subtle notification toast. Only one `paper-toast` will\nbe visible on screen.\n\nUse `opened` to show the toast:\n\nExample:\n\n    <paper-toast text=\"Hello world!\" opened></paper-toast>\n\nAlso `open()` or `show()` can be used to show the toast:\n\nExample:\n\n    <paper-button on-click=\"openToast\">Open Toast</paper-button>\n    <paper-toast id=\"toast\" text=\"Hello world!\"></paper-toast>\n\n    ...\n\n    openToast: function() {\n      this.$.toast.open();\n    }\n\nSet `duration` to 0, a negative number or Infinity to persist the toast on\nscreen:\n\nExample:\n\n    <paper-toast text=\"Terms and conditions\" opened duration=\"0\">\n      <a href=\"#\">Show more</a>\n    </paper-toast>\n\n\n### Styling\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-toast-background-color` | The paper-toast background-color | `#323232`\n`--paper-toast-color` | The paper-toast color | `#f1f1f1`\n\nThis element applies the mixin `--paper-font-common-base` but does not import\n`paper-styles/typography.html`. In order to apply the `Roboto` font to this\nelement, make sure you've imported `paper-styles/typography.html`.\n\n@group Paper Elements\n@element paper-toast\n@demo demo/index.html\n@hero hero.svg\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: block;\n        position: fixed;\n        background-color: var(--paper-toast-background-color, #323232);\n        color: var(--paper-toast-color, #f1f1f1);\n        min-height: 48px;\n        min-width: 288px;\n        padding: 16px 24px;\n        box-sizing: border-box;\n        box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.26);\n        border-radius: 2px;\n        margin: 12px;\n        font-size: 14px;\n        cursor: default;\n        -webkit-transition: -webkit-transform 0.3s, opacity 0.3s;\n        transition: transform 0.3s, opacity 0.3s;\n        opacity: 0;\n        -webkit-transform: translateY(100px);\n        transform: translateY(100px);\n        @apply --paper-font-common-base;\n      }\n\n      :host(.capsule) {\n        border-radius: 24px;\n      }\n\n      :host(.fit-bottom) {\n        width: 100%;\n        min-width: 0;\n        border-radius: 0;\n        margin: 0;\n      }\n\n      :host(.paper-toast-open) {\n        opacity: 1;\n        -webkit-transform: translateY(0px);\n        transform: translateY(0px);\n      }\n    </style>\n\n    <span id=\"label\">{{text}}</span>\n    <slot></slot>\n`,\n\n  is: 'paper-toast',\n  behaviors: [IronOverlayBehavior],\n\n  properties: {\n    /**\n     * The element to fit `this` into.\n     * Overridden from `Polymer.IronFitBehavior`.\n     */\n    fitInto: {type: Object, value: window, observer: '_onFitIntoChanged'},\n\n    /**\n     * The orientation against which to align the dropdown content\n     * horizontally relative to `positionTarget`.\n     * Overridden from `Polymer.IronFitBehavior`.\n     */\n    horizontalAlign: {type: String, value: 'left'},\n\n    /**\n     * The orientation against which to align the dropdown content\n     * vertically relative to `positionTarget`.\n     * Overridden from `Polymer.IronFitBehavior`.\n     */\n    verticalAlign: {type: String, value: 'bottom'},\n\n    /**\n     * The duration in milliseconds to show the toast.\n     * Set to `0`, a negative number, or `Infinity`, to disable the\n     * toast auto-closing.\n     */\n    duration: {type: Number, value: 3000},\n\n    /**\n     * The text to display in the toast.\n     */\n    text: {type: String, value: ''},\n\n    /**\n     * Overridden from `IronOverlayBehavior`.\n     * Set to false to enable closing of the toast by clicking outside it.\n     */\n    noCancelOnOutsideClick: {type: Boolean, value: true},\n\n    /**\n     * Overridden from `IronOverlayBehavior`.\n     * Set to true to disable auto-focusing the toast or child nodes with\n     * the `autofocus` attribute` when the overlay is opened.\n     */\n    noAutoFocus: {type: Boolean, value: true}\n  },\n\n  listeners: {'transitionend': '__onTransitionEnd'},\n\n  /**\n   * Read-only. Deprecated. Use `opened` from `IronOverlayBehavior`.\n   * @property visible\n   * @deprecated\n   */\n  get visible() {\n    Base._warn('`visible` is deprecated, use `opened` instead');\n    return this.opened;\n  },\n\n  /**\n   * Read-only. Can auto-close if duration is a positive finite number.\n   * @property _canAutoClose\n   */\n  get _canAutoClose() {\n    return this.duration > 0 && this.duration !== Infinity;\n  },\n\n  created: function() {\n    this._autoClose = null;\n    IronA11yAnnouncer.requestAvailability();\n  },\n\n  /**\n   * Show the toast. Without arguments, this is the same as `open()` from\n   * `IronOverlayBehavior`.\n   * @param {(Object|string)=} properties Properties to be set before opening the toast.\n   * e.g. `toast.show('hello')` or `toast.show({text: 'hello', duration: 3000})`\n   */\n  show: function(properties) {\n    if (typeof properties == 'string') {\n      properties = {text: properties};\n    }\n    for (var property in properties) {\n      if (property.indexOf('_') === 0) {\n        Base._warn(\n            'The property \"' + property + '\" is private and was not set.');\n      } else if (property in this) {\n        this[property] = properties[property];\n      } else {\n        Base._warn('The property \"' + property + '\" is not valid.');\n      }\n    }\n    this.open();\n  },\n\n  /**\n   * Hide the toast. Same as `close()` from `IronOverlayBehavior`.\n   */\n  hide: function() {\n    this.close();\n  },\n\n  /**\n   * Called on transitions of the toast, indicating a finished animation\n   * @private\n   */\n  __onTransitionEnd: function(e) {\n    // there are different transitions that are happening when opening and\n    // closing the toast. The last one so far is for `opacity`.\n    // This marks the end of the transition, so we check for this to determine\n    // if this is the correct event.\n    if (e && e.target === this && e.propertyName === 'opacity') {\n      if (this.opened) {\n        this._finishRenderOpened();\n      } else {\n        this._finishRenderClosed();\n      }\n    }\n  },\n\n  /**\n   * Overridden from `IronOverlayBehavior`.\n   * Called when the value of `opened` changes.\n   */\n  _openedChanged: function() {\n    if (this._autoClose !== null) {\n      this.cancelAsync(this._autoClose);\n      this._autoClose = null;\n    }\n    if (this.opened) {\n      if (currentToast && currentToast !== this) {\n        currentToast.close();\n      }\n      currentToast = this;\n      this.fire('iron-announce', {text: this.text});\n      if (this._canAutoClose) {\n        this._autoClose = this.async(this.close, this.duration);\n      }\n    } else if (currentToast === this) {\n      currentToast = null;\n    }\n    IronOverlayBehaviorImpl._openedChanged.apply(this, arguments);\n  },\n\n  /**\n   * Overridden from `IronOverlayBehavior`.\n   */\n  _renderOpened: function() {\n    this.classList.add('paper-toast-open');\n  },\n\n  /**\n   * Overridden from `IronOverlayBehavior`.\n   */\n  _renderClosed: function() {\n    this.classList.remove('paper-toast-open');\n  },\n\n  /**\n   * @private\n   */\n  _onFitIntoChanged: function(fitInto) {\n    this.positionTarget = fitInto;\n  }\n\n  /**\n   * Fired when `paper-toast` is opened.\n   *\n   * @event 'iron-announce'\n   * @param {{text: string}} detail Contains text that will be announced.\n   */\n});\n"],"sourceRoot":""}