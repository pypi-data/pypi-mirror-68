{"version":3,"sources":["webpack:///./src/components/ha-paper-dropdown-menu.ts","webpack:///./src/data/input_select.ts","webpack:///./src/common/dom/stop_propagation.ts","webpack:///./src/panels/lovelace/entity-rows/hui-input-select-entity-row.ts"],"names":["__webpack_require__","paperDropdownClass","customElements","get","define","ready","super","setTimeout","window","getComputedStyle","this","direction","style","textAlign","d","__webpack_exports__","setInputSelectOption","fetchInputSelect","createInputSelect","updateInputSelect","deleteInputSelect","hass","entity","option","callService","entity_id","callWS","type","values","Object","assign","id","updates","input_select_id","stopPropagation","ev","customElement","HuiInputSelectEntityRow","_LitElement","[object Object]","args","_initialize","property","config","Error","_config","changedProps","hasConfigOrEntityChanged","html","stateObj","states","localize","pointer","tap_action","action","DOMAINS_HIDE_MORE_INFO","includes","computeDomain","state_color","icon","image","classMap","_handleAction","actionHandler","hasHold","hasAction","hold_action","hasDoubleClick","double_tap_action","ifDefined","undefined","name","computeStateName","state","UNAVAILABLE_STATES","_selectedChanged","attributes","options","map","_get","_getPrototypeOf","prototype","call","shadowRoot","querySelector","selected","indexOf","handleAction","detail","css","target","selectedItem","innerText","trim","forwardHaptic","LitElement"],"mappings":"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","file":"chunk.bdb7f013fb6b436908d3.js","sourcesContent":["import \"@polymer/paper-dropdown-menu/paper-dropdown-menu\";\nimport { PolymerElement } from \"@polymer/polymer\";\nimport { Constructor } from \"../types\";\n\nconst paperDropdownClass = customElements.get(\n  \"paper-dropdown-menu\"\n) as Constructor<PolymerElement>;\n\n// patches paper drop down to properly support RTL - https://github.com/PolymerElements/paper-dropdown-menu/issues/183\nexport class HaPaperDropdownClass extends paperDropdownClass {\n  public ready() {\n    super.ready();\n    // wait to check for direction since otherwise direction is wrong even though top level is RTL\n    setTimeout(() => {\n      if (window.getComputedStyle(this).direction === \"rtl\") {\n        this.style.textAlign = \"right\";\n      }\n    }, 100);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-paper-dropdown-menu\": HaPaperDropdownClass;\n  }\n}\n\ncustomElements.define(\"ha-paper-dropdown-menu\", HaPaperDropdownClass);\n","import { HomeAssistant } from \"../types\";\n\nexport interface InputSelect {\n  id: string;\n  name: string;\n  options: string[];\n  icon?: string;\n  initial?: string;\n}\n\nexport interface InputSelectMutableParams {\n  name: string;\n  icon: string;\n  initial: string;\n  options: string[];\n}\n\nexport const setInputSelectOption = (\n  hass: HomeAssistant,\n  entity: string,\n  option: string\n) =>\n  hass.callService(\"input_select\", \"select_option\", {\n    option,\n    entity_id: entity,\n  });\n\nexport const fetchInputSelect = (hass: HomeAssistant) =>\n  hass.callWS<InputSelect[]>({ type: \"input_select/list\" });\n\nexport const createInputSelect = (\n  hass: HomeAssistant,\n  values: InputSelectMutableParams\n) =>\n  hass.callWS<InputSelect>({\n    type: \"input_select/create\",\n    ...values,\n  });\n\nexport const updateInputSelect = (\n  hass: HomeAssistant,\n  id: string,\n  updates: Partial<InputSelectMutableParams>\n) =>\n  hass.callWS<InputSelect>({\n    type: \"input_select/update\",\n    input_select_id: id,\n    ...updates,\n  });\n\nexport const deleteInputSelect = (hass: HomeAssistant, id: string) =>\n  hass.callWS({\n    type: \"input_select/delete\",\n    input_select_id: id,\n  });\n","export const stopPropagation = (ev) => ev.stopPropagation();\n","import \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-listbox/paper-listbox\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  PropertyValues,\n  TemplateResult,\n} from \"lit-element\";\nimport { classMap } from \"lit-html/directives/class-map\";\nimport { ifDefined } from \"lit-html/directives/if-defined\";\nimport { DOMAINS_HIDE_MORE_INFO } from \"../../../common/const\";\nimport { stopPropagation } from \"../../../common/dom/stop_propagation\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport \"../../../components/entity/state-badge\";\nimport \"../../../components/ha-paper-dropdown-menu\";\nimport { UNAVAILABLE_STATES } from \"../../../data/entity\";\nimport { forwardHaptic } from \"../../../data/haptics\";\nimport { setInputSelectOption } from \"../../../data/input_select\";\nimport { ActionHandlerEvent } from \"../../../data/lovelace\";\nimport { HomeAssistant, InputSelectEntity } from \"../../../types\";\nimport { EntitiesCardEntityConfig } from \"../cards/types\";\nimport { actionHandler } from \"../common/directives/action-handler-directive\";\nimport { handleAction } from \"../common/handle-action\";\nimport { hasAction } from \"../common/has-action\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\nimport \"../components/hui-warning\";\nimport { LovelaceRow } from \"./types\";\n\n@customElement(\"hui-input-select-entity-row\")\nclass HuiInputSelectEntityRow extends LitElement implements LovelaceRow {\n  @property() public hass?: HomeAssistant;\n\n  @property() private _config?: EntitiesCardEntityConfig;\n\n  public setConfig(config: EntitiesCardEntityConfig): void {\n    if (!config || !config.entity) {\n      throw new Error(\"Invalid Configuration: 'entity' required\");\n    }\n\n    this._config = config;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    return hasConfigOrEntityChanged(this, changedProps);\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    const stateObj = this.hass.states[this._config.entity] as\n      | InputSelectEntity\n      | undefined;\n\n    if (!stateObj) {\n      return html`\n        <hui-warning\n          >${this.hass.localize(\n            \"ui.panel.lovelace.warning.entity_not_found\",\n            \"entity\",\n            this._config.entity\n          )}</hui-warning\n        >\n      `;\n    }\n\n    const pointer =\n      (this._config.tap_action && this._config.tap_action.action !== \"none\") ||\n      (this._config.entity &&\n        !DOMAINS_HIDE_MORE_INFO.includes(computeDomain(this._config.entity)));\n\n    return html`\n      <state-badge\n        .stateObj=${stateObj}\n        .stateColor=${this._config.state_color}\n        .overrideIcon=${this._config.icon}\n        .overrideImage=${this._config.image}\n        class=${classMap({\n          pointer,\n        })}\n        @action=${this._handleAction}\n        .actionHandler=${actionHandler({\n          hasHold: hasAction(this._config!.hold_action),\n          hasDoubleClick: hasAction(this._config!.double_tap_action),\n        })}\n        tabindex=${ifDefined(pointer ? \"0\" : undefined)}\n      ></state-badge>\n      <ha-paper-dropdown-menu\n        .label=${this._config.name || computeStateName(stateObj)}\n        .value=${stateObj.state}\n        .disabled=${UNAVAILABLE_STATES.includes(stateObj.state)}\n        @iron-select=${this._selectedChanged}\n        @click=${stopPropagation}\n      >\n        <paper-listbox slot=\"dropdown-content\">\n          ${stateObj.attributes.options\n            ? stateObj.attributes.options.map(\n                (option) => html` <paper-item>${option}</paper-item> `\n              )\n            : \"\"}\n        </paper-listbox>\n      </ha-paper-dropdown-menu>\n    `;\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n\n    if (!this.hass || !this._config) {\n      return;\n    }\n\n    const stateObj = this.hass.states[this._config.entity] as\n      | InputSelectEntity\n      | undefined;\n\n    if (!stateObj) {\n      return;\n    }\n\n    // Update selected after rendering the items or else it won't work in Firefox\n    if (stateObj.attributes.options) {\n      this.shadowRoot!.querySelector(\n        \"paper-listbox\"\n      )!.selected = stateObj.attributes.options.indexOf(stateObj.state);\n    }\n  }\n\n  private _handleAction(ev: ActionHandlerEvent) {\n    handleAction(this, this.hass!, this._config!, ev.detail.action!);\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        display: flex;\n        align-items: center;\n      }\n      ha-paper-dropdown-menu {\n        margin-left: 16px;\n        flex: 1;\n      }\n      paper-item {\n        cursor: pointer;\n        min-width: 200px;\n      }\n      .pointer {\n        cursor: pointer;\n      }\n      state-badge:focus {\n        outline: none;\n        background: var(--divider-color);\n        border-radius: 100%;\n      }\n    `;\n  }\n\n  private _selectedChanged(ev): void {\n    const stateObj = this.hass!.states[this._config!.entity];\n    const option = ev.target.selectedItem.innerText.trim();\n    if (option === stateObj.state) {\n      return;\n    }\n\n    forwardHaptic(\"light\");\n\n    setInputSelectOption(this.hass!, stateObj.entity_id, option);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-input-select-entity-row\": HuiInputSelectEntityRow;\n  }\n}\n"],"sourceRoot":""}