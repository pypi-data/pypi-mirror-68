{"version":3,"sources":["webpack:///./src/panels/lovelace/editor/card-editor/show-suggest-card-dialog.ts","webpack:///./src/panels/lovelace/editor/add-entities-to-view.ts","webpack:///./src/panels/lovelace/editor/select-view/show-select-view-dialog.ts","webpack:///./src/panels/lovelace/common/compute-unused-entities.ts","webpack:///./src/panels/lovelace/editor/unused-entities/hui-unused-entities.ts"],"names":["importsuggestCardDialog","Promise","all","__webpack_require__","e","then","bind","showSuggestCardDialog","element","suggestCardDialogParams","fireEvent","dialogTag","dialogImport","dialogParams","d","__webpack_exports__","addEntitiesToLovelaceView","async","hass","entities","lovelaceConfig","saveConfigFunc","_ref","_panels$lovelace","panels","lovelace","config","mode","fetchConfig","connection","alert","localize","views","length","saveConfig","newConfig","selectViewDialogParams","showSelectViewDialog","viewSelectedCallback","view","path","computeUsedEntities","calcUnusedEntities","computeUnusedEntities","EXCLUDED_DOMAINS","addFromAction","actionConfig","action","service_data","entity_id","entityIds","Array","isArray","entityId","add","addEntityId","entity","camera_image","tap_action","hold_action","addEntities","obj","forEach","card","cards","elements","badges","badge","Set","usedEntities","unusedEntities","Object","keys","states","has","includes","split","HuiUnusedEntities","_decorate","customElement","_initialize","_LitElement","[object Object]","args","super","this","F","kind","decorators","property","key","value","memoizeOne","narrow","columns","icon","title","type","template","_icon","html","_handleEntityClicked","stateObj","name","sortable","filterable","grows","direction","width","domain","last_changed","lastChanged","changedProperties","_get","_getPrototypeOf","prototype","call","_getUnusedEntities","editMode","_columns","_unusedEntities","map","computeStateName","computeDomain","_handleSelectionChanged","_selectedEntities","classMap","rtl","computeRTL","_addToLovelaceView","mdiPlus","_config","sort","ev","detail","target","closest","rowId","static","css","LitElement"],"mappings":"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","file":"chunk.9a4d6937a54238cd2f59.js","sourcesContent":["import { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { LovelaceCardConfig, LovelaceConfig } from \"../../../../data/lovelace\";\n\nexport interface SuggestCardDialogParams {\n  lovelaceConfig?: LovelaceConfig;\n  saveConfig?: (config: LovelaceConfig) => void;\n  path?: [number];\n  entities: string[]; // We can pass entity id's that will be added to the config when a card is picked\n  cardConfig?: LovelaceCardConfig[]; // We can pass a suggested config\n}\n\nconst importsuggestCardDialog = () =>\n  import(\n    /* webpackChunkName: \"hui-dialog-suggest-card\" */ \"./hui-dialog-suggest-card\"\n  );\n\nexport const showSuggestCardDialog = (\n  element: HTMLElement,\n  suggestCardDialogParams: SuggestCardDialogParams\n): void => {\n  fireEvent(element, \"show-dialog\", {\n    dialogTag: \"hui-dialog-suggest-card\",\n    dialogImport: importsuggestCardDialog,\n    dialogParams: suggestCardDialogParams,\n  });\n};\n","import {\n  fetchConfig,\n  LovelaceConfig,\n  saveConfig,\n} from \"../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../types\";\nimport { showSuggestCardDialog } from \"./card-editor/show-suggest-card-dialog\";\nimport { showSelectViewDialog } from \"./select-view/show-select-view-dialog\";\n\nexport const addEntitiesToLovelaceView = async (\n  element: HTMLElement,\n  hass: HomeAssistant,\n  entities: string[],\n  lovelaceConfig?: LovelaceConfig,\n  saveConfigFunc?: (newConfig: LovelaceConfig) => void\n) => {\n  if ((hass!.panels.lovelace?.config as any)?.mode === \"yaml\") {\n    showSuggestCardDialog(element, {\n      entities,\n    });\n    return;\n  }\n  if (!lovelaceConfig) {\n    try {\n      lovelaceConfig = await fetchConfig(hass.connection, null, false);\n    } catch {\n      alert(\n        hass.localize(\n          \"ui.panel.lovelace.editor.add_entities.generated_unsupported\"\n        )\n      );\n      return;\n    }\n  }\n  if (!lovelaceConfig.views.length) {\n    alert(\n      \"You don't have any Lovelace views, first create a view in Lovelace.\"\n    );\n    return;\n  }\n  if (!saveConfigFunc) {\n    saveConfigFunc = async (newConfig: LovelaceConfig): Promise<void> => {\n      try {\n        await saveConfig(hass!, null, newConfig);\n      } catch {\n        alert(\n          hass.localize(\"ui.panel.config.devices.add_entities.saving_failed\")\n        );\n      }\n    };\n  }\n  if (lovelaceConfig.views.length === 1) {\n    showSuggestCardDialog(element, {\n      lovelaceConfig: lovelaceConfig!,\n      saveConfig: saveConfigFunc,\n      path: [0],\n      entities,\n    });\n    return;\n  }\n  showSelectViewDialog(element, {\n    lovelaceConfig,\n    viewSelectedCallback: (view) => {\n      showSuggestCardDialog(element, {\n        lovelaceConfig: lovelaceConfig!,\n        saveConfig: saveConfigFunc,\n        path: [view],\n        entities,\n      });\n    },\n  });\n};\n","import { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { LovelaceConfig } from \"../../../../data/lovelace\";\n\nexport interface SelectViewDialogParams {\n  lovelaceConfig: LovelaceConfig;\n  viewSelectedCallback: (view: number) => void;\n}\n\nexport const showSelectViewDialog = (\n  element: HTMLElement,\n  selectViewDialogParams: SelectViewDialogParams\n): void => {\n  fireEvent(element, \"show-dialog\", {\n    dialogTag: \"hui-dialog-select-view\",\n    dialogImport: () =>\n      import(\n        /* webpackChunkName: \"hui-dialog-select-view\" */ \"./hui-dialog-select-view\"\n      ),\n    dialogParams: selectViewDialogParams,\n  });\n};\n","import { ActionConfig, LovelaceConfig } from \"../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../types\";\n\nexport const EXCLUDED_DOMAINS = [\"zone\", \"persistent_notification\"];\n\nconst addFromAction = (entities: Set<string>, actionConfig: ActionConfig) => {\n  if (\n    actionConfig.action !== \"call-service\" ||\n    !actionConfig.service_data ||\n    !actionConfig.service_data.entity_id\n  ) {\n    return;\n  }\n  let entityIds = actionConfig.service_data.entity_id;\n  if (!Array.isArray(entityIds)) {\n    entityIds = [entityIds];\n  }\n  for (const entityId of entityIds) {\n    entities.add(entityId);\n  }\n};\n\nconst addEntityId = (entities: Set<string>, entity) => {\n  if (typeof entity === \"string\") {\n    entities.add(entity);\n    return;\n  }\n\n  if (entity.entity) {\n    entities.add(entity.entity);\n  }\n  if (entity.camera_image) {\n    entities.add(entity.camera_image);\n  }\n  if (entity.tap_action) {\n    addFromAction(entities, entity.tap_action);\n  }\n  if (entity.hold_action) {\n    addFromAction(entities, entity.hold_action);\n  }\n};\n\nconst addEntities = (entities: Set<string>, obj) => {\n  if (obj.entity) {\n    addEntityId(entities, obj.entity);\n  }\n  if (obj.entities && Array.isArray(obj.entities)) {\n    obj.entities.forEach((entity) => addEntityId(entities, entity));\n  }\n  if (obj.card) {\n    addEntities(entities, obj.card);\n  }\n  if (obj.cards && Array.isArray(obj.cards)) {\n    obj.cards.forEach((card) => addEntities(entities, card));\n  }\n  if (obj.elements && Array.isArray(obj.elements)) {\n    obj.elements.forEach((card) => addEntities(entities, card));\n  }\n  if (obj.badges && Array.isArray(obj.badges)) {\n    obj.badges.forEach((badge) => addEntityId(entities, badge));\n  }\n};\n\nexport const computeUsedEntities = (config: LovelaceConfig): Set<string> => {\n  const entities = new Set<string>();\n  config.views.forEach((view) => addEntities(entities, view));\n  return entities;\n};\n\nexport const calcUnusedEntities = (\n  hass: HomeAssistant,\n  usedEntities: Set<string>\n): Set<string> => {\n  const unusedEntities: Set<string> = new Set();\n\n  for (const entity of Object.keys(hass.states)) {\n    if (\n      !usedEntities.has(entity) &&\n      !EXCLUDED_DOMAINS.includes(entity.split(\".\", 1)[0])\n    ) {\n      unusedEntities.add(entity);\n    }\n  }\n\n  return unusedEntities;\n};\n\nexport const computeUnusedEntities = (\n  hass: HomeAssistant,\n  config: LovelaceConfig\n): Set<string> => {\n  const usedEntities = computeUsedEntities(config);\n  const unusedEntities = calcUnusedEntities(hass, usedEntities);\n  return unusedEntities;\n};\n","import \"@material/mwc-fab\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  html,\n  LitElement,\n  property,\n  PropertyValues,\n  TemplateResult,\n} from \"lit-element\";\nimport { classMap } from \"lit-html/directives/class-map\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent, HASSDomEvent } from \"../../../../common/dom/fire_event\";\nimport { computeDomain } from \"../../../../common/entity/compute_domain\";\nimport { computeStateName } from \"../../../../common/entity/compute_state_name\";\nimport { computeRTL } from \"../../../../common/util/compute_rtl\";\nimport \"../../../../components/data-table/ha-data-table\";\nimport type {\n  DataTableColumnContainer,\n  SelectionChangedEvent,\n} from \"../../../../components/data-table/ha-data-table\";\nimport \"../../../../components/entity/state-badge\";\nimport \"../../../../components/ha-icon\";\nimport \"../../../../components/ha-relative-time\";\nimport type { LovelaceConfig } from \"../../../../data/lovelace\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport { computeUnusedEntities } from \"../../common/compute-unused-entities\";\nimport type { Lovelace } from \"../../types\";\nimport { addEntitiesToLovelaceView } from \"../add-entities-to-view\";\nimport \"../../../../components/ha-svg-icon\";\nimport { mdiPlus } from \"@mdi/js\";\n\n@customElement(\"hui-unused-entities\")\nexport class HuiUnusedEntities extends LitElement {\n  @property() public lovelace?: Lovelace;\n\n  @property() public hass!: HomeAssistant;\n\n  @property() public narrow?: boolean;\n\n  @property() private _unusedEntities: string[] = [];\n\n  @property() private _selectedEntities: string[] = [];\n\n  private get _config(): LovelaceConfig {\n    return this.lovelace!.config;\n  }\n\n  private _columns = memoizeOne((narrow: boolean) => {\n    const columns: DataTableColumnContainer = {\n      icon: {\n        title: \"\",\n        type: \"icon\",\n        template: (_icon, entity: any) => html`\n          <state-badge\n            @click=${this._handleEntityClicked}\n            .hass=${this.hass!}\n            .stateObj=${entity.stateObj}\n          ></state-badge>\n        `,\n      },\n      name: {\n        title: this.hass!.localize(\"ui.panel.lovelace.unused_entities.entity\"),\n        sortable: true,\n        filterable: true,\n        grows: true,\n        direction: \"asc\",\n        template: (name, entity: any) => html`\n          <div @click=${this._handleEntityClicked} style=\"cursor: pointer;\">\n            ${name}\n            ${narrow\n              ? html`\n                  <div class=\"secondary\">\n                    ${entity.stateObj.entity_id}\n                  </div>\n                `\n              : \"\"}\n          </div>\n        `,\n      },\n    };\n\n    if (narrow) {\n      return columns;\n    }\n\n    columns.entity_id = {\n      title: this.hass!.localize(\"ui.panel.lovelace.unused_entities.entity_id\"),\n      sortable: true,\n      filterable: true,\n      width: \"30%\",\n    };\n    columns.domain = {\n      title: this.hass!.localize(\"ui.panel.lovelace.unused_entities.domain\"),\n      sortable: true,\n      filterable: true,\n      width: \"15%\",\n    };\n    columns.last_changed = {\n      title: this.hass!.localize(\n        \"ui.panel.lovelace.unused_entities.last_changed\"\n      ),\n      type: \"numeric\",\n      sortable: true,\n      width: \"15%\",\n      template: (lastChanged: string) => html`\n        <ha-relative-time\n          .hass=${this.hass!}\n          .datetime=${lastChanged}\n        ></ha-relative-time>\n      `,\n    };\n\n    return columns;\n  });\n\n  protected updated(changedProperties: PropertyValues): void {\n    super.updated(changedProperties);\n\n    if (changedProperties.has(\"lovelace\")) {\n      this._getUnusedEntities();\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this.lovelace) {\n      return html``;\n    }\n\n    if (this.lovelace.mode === \"storage\" && this.lovelace.editMode === false) {\n      return html``;\n    }\n\n    return html`\n      ${!this.narrow\n        ? html`\n            <ha-card\n              header=\"${this.hass.localize(\n                \"ui.panel.lovelace.unused_entities.title\"\n              )}\"\n            >\n              <div class=\"card-content\">\n                ${this.hass.localize(\n                  \"ui.panel.lovelace.unused_entities.available_entities\"\n                )}\n                ${this.lovelace.mode === \"storage\"\n                  ? html`\n                      <br />${this.hass.localize(\n                        \"ui.panel.lovelace.unused_entities.select_to_add\"\n                      )}\n                    `\n                  : \"\"}\n              </div>\n            </ha-card>\n          `\n        : \"\"}\n      <ha-data-table\n        .columns=${this._columns(this.narrow!)}\n        .data=${this._unusedEntities.map((entity) => {\n          const stateObj = this.hass!.states[entity];\n          return {\n            icon: \"\",\n            entity_id: entity,\n            stateObj,\n            name: computeStateName(stateObj),\n            domain: computeDomain(entity),\n            last_changed: stateObj!.last_changed,\n          };\n        })}\n        .id=${\"entity_id\"}\n        selectable\n        @selection-changed=${this._handleSelectionChanged}\n      ></ha-data-table>\n\n      ${this._selectedEntities.length\n        ? html`\n            <mwc-fab\n              class=\"${classMap({\n                rtl: computeRTL(this.hass),\n              })}\"\n              .label=${this.hass.localize(\n                \"ui.panel.lovelace.editor.edit_card.add\"\n              )}\n              @click=${this._addToLovelaceView}\n            >\n              <ha-svg-icon slot=\"icon\" path=${mdiPlus}></ha-svg-icon>\n            </mwc-fab>\n          `\n        : \"\"}\n    `;\n  }\n\n  private _getUnusedEntities(): void {\n    if (!this.hass || !this.lovelace) {\n      return;\n    }\n    this._selectedEntities = [];\n    const unusedEntities = computeUnusedEntities(this.hass, this._config!);\n    this._unusedEntities = [...unusedEntities].sort();\n  }\n\n  private _handleSelectionChanged(\n    ev: HASSDomEvent<SelectionChangedEvent>\n  ): void {\n    this._selectedEntities = ev.detail.value;\n  }\n\n  private _handleEntityClicked(ev: Event) {\n    const entityId = ((ev.target as HTMLElement).closest(\n      \".mdc-data-table__row\"\n    ) as any).rowId;\n    fireEvent(this, \"hass-more-info\", {\n      entityId,\n    });\n  }\n\n  private _addToLovelaceView(): void {\n    addEntitiesToLovelaceView(\n      this,\n      this.hass,\n      this._selectedEntities,\n      this.lovelace!.config,\n      this.lovelace!.saveConfig\n    );\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        background: var(--lovelace-background);\n        display: flex;\n        flex-direction: column;\n      }\n      ha-card {\n        --ha-card-box-shadow: none;\n        --ha-card-border-radius: 0;\n      }\n      ha-data-table {\n        --data-table-border-width: 0;\n        flex-grow: 1;\n        margin-top: -20px;\n      }\n      mwc-fab {\n        position: absolute;\n        right: 16px;\n        bottom: 16px;\n        z-index: 1;\n      }\n      mwc-fab.rtl {\n        left: 16px;\n        right: auto;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-unused-entities\": HuiUnusedEntities;\n  }\n}\n"],"sourceRoot":""}