# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




import os,sys,platform
WIN32=platform.system()=="Windows" or platform.system()=="win32"

# //////////////////////////////////////////////////////
def AddSysPath(value, bBegin=False):

	if not os.path.isdir(value):
		return

	if not value in sys.path:
		if bBegin:
			sys.path.insert(0,value)
		else:
			sys.path.append(value)

# this is needed for windows/python 38  
	if WIN32 and hasattr(os,'add_dll_directory'):
		os.add_dll_directory(value)

__this_dir__=os.path.abspath(os.path.dirname(os.path.abspath(__file__)))
__bin_dir__=os.path.abspath(os.path.join(__this_dir__,"bin"))

AddSysPath(__this_dir__)
AddSysPath(__bin_dir__)



# windows does not have RPAT, but I can add some path to sys and it works!
if WIN32:
	this_dir=os.path.dirname(os.path.realpath(__file__))

	if os.path.isdir(os.path.join(this_dir,"bin","qt")):
		QT5_DIR=os.path.join(this_dir,"bin","qt")
	else: 
		import PyQt5
		QT5_DIR=os.path.join(os.path.dirname(PyQt5.__file__),"qt")

	AddSysPath(os.path.join(QT5_DIR,"bin"),bBegin=True)
	os.environ["QT_PLUGIN_PATH"]= os.path.join(QT5_DIR,"plugins")



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _OpenVisusGui
else:
    import _OpenVisusGui

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _OpenVisusGui.delete_SwigPyIterator

    def value(self):
        return _OpenVisusGui.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _OpenVisusGui.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _OpenVisusGui.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _OpenVisusGui.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _OpenVisusGui.SwigPyIterator_equal(self, x)

    def copy(self):
        return _OpenVisusGui.SwigPyIterator_copy(self)

    def next(self):
        return _OpenVisusGui.SwigPyIterator_next(self)

    def __next__(self):
        return _OpenVisusGui.SwigPyIterator___next__(self)

    def previous(self):
        return _OpenVisusGui.SwigPyIterator_previous(self)

    def advance(self, n):
        return _OpenVisusGui.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _OpenVisusGui.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _OpenVisusGui.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _OpenVisusGui.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _OpenVisusGui.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _OpenVisusGui.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _OpenVisusGui.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _OpenVisusGui:
_OpenVisusGui.SwigPyIterator_swigregister(SwigPyIterator)

SHARED_PTR_DISOWN = _OpenVisusGui.SHARED_PTR_DISOWN
import VisusKernelPy
import VisusDataflowPy
import VisusDbPy
import VisusNodesPy
class GuiModule(VisusKernelPy.VisusModule):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bAttached = property(_OpenVisusGui.GuiModule_bAttached_get, _OpenVisusGui.GuiModule_bAttached_set)

    @staticmethod
    def attach():
        return _OpenVisusGui.GuiModule_attach()

    @staticmethod
    def detach():
        return _OpenVisusGui.GuiModule_detach()

    @staticmethod
    def createApplication():
        return _OpenVisusGui.GuiModule_createApplication()

    @staticmethod
    def execApplication():
        return _OpenVisusGui.GuiModule_execApplication()

    @staticmethod
    def destroyApplication():
        return _OpenVisusGui.GuiModule_destroyApplication()

    def __init__(self):
        _OpenVisusGui.GuiModule_swiginit(self, _OpenVisusGui.new_GuiModule())
    __swig_destroy__ = _OpenVisusGui.delete_GuiModule

# Register GuiModule in _OpenVisusGui:
_OpenVisusGui.GuiModule_swigregister(GuiModule)
cvar = _OpenVisusGui.cvar

def GuiModule_attach():
    return _OpenVisusGui.GuiModule_attach()

def GuiModule_detach():
    return _OpenVisusGui.GuiModule_detach()

def GuiModule_createApplication():
    return _OpenVisusGui.GuiModule_createApplication()

def GuiModule_execApplication():
    return _OpenVisusGui.GuiModule_execApplication()

def GuiModule_destroyApplication():
    return _OpenVisusGui.GuiModule_destroyApplication()

class GLObject(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _OpenVisusGui.delete_GLObject

    def glRender(self, gl):
        return _OpenVisusGui.GLObject_glRender(self, gl)

    def glGetRenderQueue(self):
        return _OpenVisusGui.GLObject_glGetRenderQueue(self)

    def glSetRenderQueue(self, value):
        return _OpenVisusGui.GLObject_glSetRenderQueue(self, value)

    def glMousePressEvent(self, map, evt):
        return _OpenVisusGui.GLObject_glMousePressEvent(self, map, evt)

    def glMouseMoveEvent(self, map, evt):
        return _OpenVisusGui.GLObject_glMouseMoveEvent(self, map, evt)

    def glMouseReleaseEvent(self, map, evt):
        return _OpenVisusGui.GLObject_glMouseReleaseEvent(self, map, evt)

    def glWheelEvent(self, map, evt):
        return _OpenVisusGui.GLObject_glWheelEvent(self, map, evt)

# Register GLObject in _OpenVisusGui:
_OpenVisusGui.GLObject_swigregister(GLObject)

class GLBatch(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    vertices = property(_OpenVisusGui.GLBatch_vertices_get, _OpenVisusGui.GLBatch_vertices_set)
    normals = property(_OpenVisusGui.GLBatch_normals_get, _OpenVisusGui.GLBatch_normals_set)
    colors = property(_OpenVisusGui.GLBatch_colors_get, _OpenVisusGui.GLBatch_colors_set)
    texcoords = property(_OpenVisusGui.GLBatch_texcoords_get, _OpenVisusGui.GLBatch_texcoords_set)

    def getNumberOfVertices(self):
        return _OpenVisusGui.GLBatch_getNumberOfVertices(self)

    def __init__(self):
        _OpenVisusGui.GLBatch_swiginit(self, _OpenVisusGui.new_GLBatch())
    __swig_destroy__ = _OpenVisusGui.delete_GLBatch

# Register GLBatch in _OpenVisusGui:
_OpenVisusGui.GLBatch_swigregister(GLBatch)

class GLMesh(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _OpenVisusGui.GLMesh_swiginit(self, _OpenVisusGui.new_GLMesh())

    def begin(self, primitive, vertices_per_batch=0):
        return _OpenVisusGui.GLMesh_begin(self, primitive, vertices_per_batch)

    def end(self):
        return _OpenVisusGui.GLMesh_end(self)

    def color(self, *args):
        return _OpenVisusGui.GLMesh_color(self, *args)

    def vertex(self, *args):
        return _OpenVisusGui.GLMesh_vertex(self, *args)

    def normal(self, *args):
        return _OpenVisusGui.GLMesh_normal(self, *args)

    def texcoord2(self, *args):
        return _OpenVisusGui.GLMesh_texcoord2(self, *args)

    def texcoord3(self, *args):
        return _OpenVisusGui.GLMesh_texcoord3(self, *args)

    def hasColorAttribute(self):
        return _OpenVisusGui.GLMesh_hasColorAttribute(self)

    @staticmethod
    def LineLoop(*args):
        return _OpenVisusGui.GLMesh_LineLoop(*args)

    @staticmethod
    def LineStrip(*args):
        return _OpenVisusGui.GLMesh_LineStrip(*args)

    @staticmethod
    def Quad(*args):
        return _OpenVisusGui.GLMesh_Quad(*args)

    @staticmethod
    def Polygon(points, bNormal=False):
        return _OpenVisusGui.GLMesh_Polygon(points, bNormal)

    @staticmethod
    def Lines(*args):
        return _OpenVisusGui.GLMesh_Lines(*args)

    @staticmethod
    def WireBox(*args):
        return _OpenVisusGui.GLMesh_WireBox(*args)

    @staticmethod
    def SolidBox(*args):
        return _OpenVisusGui.GLMesh_SolidBox(*args)

    @staticmethod
    def WireCircle(N=32):
        return _OpenVisusGui.GLMesh_WireCircle(N)

    @staticmethod
    def SolidCircle(N=32):
        return _OpenVisusGui.GLMesh_SolidCircle(N)

    @staticmethod
    def SolidSphere(N=32):
        return _OpenVisusGui.GLMesh_SolidSphere(N)

    @staticmethod
    def ColoredAxis(box):
        return _OpenVisusGui.GLMesh_ColoredAxis(box)

    @staticmethod
    def ViewDependentUnitVolume(frustum, nslices):
        return _OpenVisusGui.GLMesh_ViewDependentUnitVolume(frustum, nslices)

    @staticmethod
    def AxisAlignedUnitVolume(*args):
        return _OpenVisusGui.GLMesh_AxisAlignedUnitVolume(*args)
    __swig_destroy__ = _OpenVisusGui.delete_GLMesh

# Register GLMesh in _OpenVisusGui:
_OpenVisusGui.GLMesh_swigregister(GLMesh)

def GLMesh_LineLoop(*args):
    return _OpenVisusGui.GLMesh_LineLoop(*args)

def GLMesh_LineStrip(*args):
    return _OpenVisusGui.GLMesh_LineStrip(*args)

def GLMesh_Quad(*args):
    return _OpenVisusGui.GLMesh_Quad(*args)

def GLMesh_Polygon(points, bNormal=False):
    return _OpenVisusGui.GLMesh_Polygon(points, bNormal)

def GLMesh_Lines(*args):
    return _OpenVisusGui.GLMesh_Lines(*args)

def GLMesh_WireBox(*args):
    return _OpenVisusGui.GLMesh_WireBox(*args)

def GLMesh_SolidBox(*args):
    return _OpenVisusGui.GLMesh_SolidBox(*args)

def GLMesh_WireCircle(N=32):
    return _OpenVisusGui.GLMesh_WireCircle(N)

def GLMesh_SolidCircle(N=32):
    return _OpenVisusGui.GLMesh_SolidCircle(N)

def GLMesh_SolidSphere(N=32):
    return _OpenVisusGui.GLMesh_SolidSphere(N)

def GLMesh_ColoredAxis(box):
    return _OpenVisusGui.GLMesh_ColoredAxis(box)

def GLMesh_ViewDependentUnitVolume(frustum, nslices):
    return _OpenVisusGui.GLMesh_ViewDependentUnitVolume(frustum, nslices)

def GLMesh_AxisAlignedUnitVolume(*args):
    return _OpenVisusGui.GLMesh_AxisAlignedUnitVolume(*args)

class GLModelview(GLObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    T = property(_OpenVisusGui.GLModelview_T_get, _OpenVisusGui.GLModelview_T_set)

    def __init__(self, *args):
        _OpenVisusGui.GLModelview_swiginit(self, _OpenVisusGui.new_GLModelview(*args))
    __swig_destroy__ = _OpenVisusGui.delete_GLModelview

    def glRender(self, gl):
        return _OpenVisusGui.GLModelview_glRender(self, gl)

# Register GLModelview in _OpenVisusGui:
_OpenVisusGui.GLModelview_swigregister(GLModelview)

class GLPhongObject(GLObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    line_width = property(_OpenVisusGui.GLPhongObject_line_width_get, _OpenVisusGui.GLPhongObject_line_width_set)
    color = property(_OpenVisusGui.GLPhongObject_color_get, _OpenVisusGui.GLPhongObject_color_set)
    texture = property(_OpenVisusGui.GLPhongObject_texture_get, _OpenVisusGui.GLPhongObject_texture_set)
    mesh = property(_OpenVisusGui.GLPhongObject_mesh_get, _OpenVisusGui.GLPhongObject_mesh_set)

    def __init__(self, *args):
        _OpenVisusGui.GLPhongObject_swiginit(self, _OpenVisusGui.new_GLPhongObject(*args))
    __swig_destroy__ = _OpenVisusGui.delete_GLPhongObject

    def glRender(self, gl):
        return _OpenVisusGui.GLPhongObject_glRender(self, gl)

# Register GLPhongObject in _OpenVisusGui:
_OpenVisusGui.GLPhongObject_swigregister(GLPhongObject)

class GLSharedContext(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getSingleton():
        return _OpenVisusGui.GLSharedContext_getSingleton()

    @staticmethod
    def setSingleton(value):
        return _OpenVisusGui.GLSharedContext_setSingleton(value)

    @staticmethod
    def allocSingleton():
        return _OpenVisusGui.GLSharedContext_allocSingleton()

    @staticmethod
    def releaseSingleton():
        return _OpenVisusGui.GLSharedContext_releaseSingleton()
    __swig_destroy__ = _OpenVisusGui.delete_GLSharedContext

    def makeCurrent(self):
        return _OpenVisusGui.GLSharedContext_makeCurrent(self)

    def doneCurrent(self):
        return _OpenVisusGui.GLSharedContext_doneCurrent(self)

# Register GLSharedContext in _OpenVisusGui:
_OpenVisusGui.GLSharedContext_swigregister(GLSharedContext)

def GLSharedContext_getSingleton():
    return _OpenVisusGui.GLSharedContext_getSingleton()

def GLSharedContext_setSingleton(value):
    return _OpenVisusGui.GLSharedContext_setSingleton(value)

def GLSharedContext_allocSingleton():
    return _OpenVisusGui.GLSharedContext_allocSingleton()

def GLSharedContext_releaseSingleton():
    return _OpenVisusGui.GLSharedContext_releaseSingleton()

class GLNeedContext(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _OpenVisusGui.GLNeedContext_swiginit(self, _OpenVisusGui.new_GLNeedContext())
    __swig_destroy__ = _OpenVisusGui.delete_GLNeedContext

    def __structure_derefence_op__(self):
        return _OpenVisusGui.GLNeedContext___structure_derefence_op__(self)

# Register GLNeedContext in _OpenVisusGui:
_OpenVisusGui.GLNeedContext_swigregister(GLNeedContext)

class GLDoWithContext(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def getSingleton():
        return _OpenVisusGui.GLDoWithContext_getSingleton()

    @staticmethod
    def setSingleton(value):
        return _OpenVisusGui.GLDoWithContext_setSingleton(value)

    @staticmethod
    def allocSingleton():
        return _OpenVisusGui.GLDoWithContext_allocSingleton()

    @staticmethod
    def releaseSingleton():
        return _OpenVisusGui.GLDoWithContext_releaseSingleton()

    def push_back(self, fn):
        return _OpenVisusGui.GLDoWithContext_push_back(self, fn)
    __swig_destroy__ = _OpenVisusGui.delete_GLDoWithContext

# Register GLDoWithContext in _OpenVisusGui:
_OpenVisusGui.GLDoWithContext_swigregister(GLDoWithContext)

def GLDoWithContext_getSingleton():
    return _OpenVisusGui.GLDoWithContext_getSingleton()

def GLDoWithContext_setSingleton(value):
    return _OpenVisusGui.GLDoWithContext_setSingleton(value)

def GLDoWithContext_allocSingleton():
    return _OpenVisusGui.GLDoWithContext_allocSingleton()

def GLDoWithContext_releaseSingleton():
    return _OpenVisusGui.GLDoWithContext_releaseSingleton()

class GLCanvas(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _OpenVisusGui.GLCanvas_swiginit(self, _OpenVisusGui.new_GLCanvas())
    __swig_destroy__ = _OpenVisusGui.delete_GLCanvas

    def flushGLErrors(self, bVerbose=False):
        return _OpenVisusGui.GLCanvas_flushGLErrors(self, bVerbose)

    def glRenderEvent(self, gl):
        return _OpenVisusGui.GLCanvas_glRenderEvent(self, gl)

    def glResizeEvent(self, evt):
        return _OpenVisusGui.GLCanvas_glResizeEvent(self, evt)

    def glKeyPressEvent(self, evt):
        return _OpenVisusGui.GLCanvas_glKeyPressEvent(self, evt)

    def glMousePressEvent(self, evt):
        return _OpenVisusGui.GLCanvas_glMousePressEvent(self, evt)

    def glMouseMoveEvent(self, evt):
        return _OpenVisusGui.GLCanvas_glMouseMoveEvent(self, evt)

    def glMouseReleaseEvent(self, evt):
        return _OpenVisusGui.GLCanvas_glMouseReleaseEvent(self, evt)

    def glWheelEvent(self, evt):
        return _OpenVisusGui.GLCanvas_glWheelEvent(self, evt)

    def initializeGL(self):
        return _OpenVisusGui.GLCanvas_initializeGL(self)

    def postRedisplay(self, fps=30):
        return _OpenVisusGui.GLCanvas_postRedisplay(self, fps)

    def glClearColor(self, *args):
        return _OpenVisusGui.GLCanvas_glClearColor(self, *args)

    def getShader(self):
        return _OpenVisusGui.GLCanvas_getShader(self)

    def setShader(self, value, bForce=False):
        return _OpenVisusGui.GLCanvas_setShader(self, value, bForce)

    def setUniform(self, *args):
        return _OpenVisusGui.GLCanvas_setUniform(self, *args)

    def setUniformColor(self, uniform, color):
        return _OpenVisusGui.GLCanvas_setUniformColor(self, uniform, color)

    def setUniformPlane(self, uniform, h):
        return _OpenVisusGui.GLCanvas_setUniformPlane(self, uniform, h)

    def setUniformMatrix(self, uniform, T):
        return _OpenVisusGui.GLCanvas_setUniformMatrix(self, uniform, T)

    def pushClippingBox(self, *args):
        return _OpenVisusGui.GLCanvas_pushClippingBox(self, *args)

    def popClippingBox(self):
        return _OpenVisusGui.GLCanvas_popClippingBox(self)

    def hasClippingBox(self):
        return _OpenVisusGui.GLCanvas_hasClippingBox(self)

    def setUniformMaterial(self, shader, material):
        return _OpenVisusGui.GLCanvas_setUniformMaterial(self, shader, material)

    def setUniformLight(self, shader, light_pos):
        return _OpenVisusGui.GLCanvas_setUniformLight(self, shader, light_pos)

    def getViewport(self):
        return _OpenVisusGui.GLCanvas_getViewport(self)

    def setViewport(self, value, bForce=False):
        return _OpenVisusGui.GLCanvas_setViewport(self, value, bForce)

    def pushViewport(self):
        return _OpenVisusGui.GLCanvas_pushViewport(self)

    def popViewport(self):
        return _OpenVisusGui.GLCanvas_popViewport(self)

    def getProjection(self):
        return _OpenVisusGui.GLCanvas_getProjection(self)

    def setProjection(self, value, bForce=False):
        return _OpenVisusGui.GLCanvas_setProjection(self, value, bForce)

    def pushProjection(self):
        return _OpenVisusGui.GLCanvas_pushProjection(self)

    def popProjection(self):
        return _OpenVisusGui.GLCanvas_popProjection(self)

    def loadProjection(self, value):
        return _OpenVisusGui.GLCanvas_loadProjection(self, value)

    def multProjection(self, value):
        return _OpenVisusGui.GLCanvas_multProjection(self, value)

    def getModelview(self):
        return _OpenVisusGui.GLCanvas_getModelview(self)

    def setModelview(self, value, bForce=False):
        return _OpenVisusGui.GLCanvas_setModelview(self, value, bForce)

    def loadModelview(self, value):
        return _OpenVisusGui.GLCanvas_loadModelview(self, value)

    def multModelview(self, value):
        return _OpenVisusGui.GLCanvas_multModelview(self, value)

    def pushModelview(self):
        return _OpenVisusGui.GLCanvas_pushModelview(self)

    def popModelview(self):
        return _OpenVisusGui.GLCanvas_popModelview(self)

    def getFrustum(self):
        return _OpenVisusGui.GLCanvas_getFrustum(self)

    def setFrustum(self, value):
        return _OpenVisusGui.GLCanvas_setFrustum(self, value)

    def pushFrustum(self):
        return _OpenVisusGui.GLCanvas_pushFrustum(self)

    def popFrustum(self):
        return _OpenVisusGui.GLCanvas_popFrustum(self)

    def setHud(self):
        return _OpenVisusGui.GLCanvas_setHud(self)

    def getPointSize(self):
        return _OpenVisusGui.GLCanvas_getPointSize(self)

    def setPointSize(self, value, bForce=False):
        return _OpenVisusGui.GLCanvas_setPointSize(self, value, bForce)

    def pushPointSize(self, value):
        return _OpenVisusGui.GLCanvas_pushPointSize(self, value)

    def popPointSize(self):
        return _OpenVisusGui.GLCanvas_popPointSize(self)

    def getLineWidth(self):
        return _OpenVisusGui.GLCanvas_getLineWidth(self)

    def setLineWidth(self, value, bForce=False):
        return _OpenVisusGui.GLCanvas_setLineWidth(self, value, bForce)

    def pushLineWidth(self, value):
        return _OpenVisusGui.GLCanvas_pushLineWidth(self, value)

    def popLineWidth(self):
        return _OpenVisusGui.GLCanvas_popLineWidth(self)

    def getBlend(self):
        return _OpenVisusGui.GLCanvas_getBlend(self)

    def setBlend(self, value, bForce=False):
        return _OpenVisusGui.GLCanvas_setBlend(self, value, bForce)

    def pushBlend(self, value):
        return _OpenVisusGui.GLCanvas_pushBlend(self, value)

    def popBlend(self):
        return _OpenVisusGui.GLCanvas_popBlend(self)

    def getDepthTest(self):
        return _OpenVisusGui.GLCanvas_getDepthTest(self)

    def setDepthTest(self, value, bForce=False):
        return _OpenVisusGui.GLCanvas_setDepthTest(self, value, bForce)

    def pushDepthTest(self, value):
        return _OpenVisusGui.GLCanvas_pushDepthTest(self, value)

    def popDepthTest(self):
        return _OpenVisusGui.GLCanvas_popDepthTest(self)

    def getDepthMask(self):
        return _OpenVisusGui.GLCanvas_getDepthMask(self)

    def setDepthMask(self, value, bForce=False):
        return _OpenVisusGui.GLCanvas_setDepthMask(self, value, bForce)

    def pushDepthMask(self, value):
        return _OpenVisusGui.GLCanvas_pushDepthMask(self, value)

    def popDepthMask(self):
        return _OpenVisusGui.GLCanvas_popDepthMask(self)

    def getDepthFunc(self):
        return _OpenVisusGui.GLCanvas_getDepthFunc(self)

    def setDepthFunc(self, value, bForce=False):
        return _OpenVisusGui.GLCanvas_setDepthFunc(self, value, bForce)

    def pushDepthFunc(self, value):
        return _OpenVisusGui.GLCanvas_pushDepthFunc(self, value)

    def popDepthFunc(self):
        return _OpenVisusGui.GLCanvas_popDepthFunc(self)

    def getCullFace(self):
        return _OpenVisusGui.GLCanvas_getCullFace(self)

    def setCullFace(self, value, bForce=False):
        return _OpenVisusGui.GLCanvas_setCullFace(self, value, bForce)

    def pushCullFace(self, value):
        return _OpenVisusGui.GLCanvas_pushCullFace(self, value)

    def popCullFace(self):
        return _OpenVisusGui.GLCanvas_popCullFace(self)

    def setTextureInSlot(self, slot, sampler, texture):
        return _OpenVisusGui.GLCanvas_setTextureInSlot(self, slot, sampler, texture)

    def setTexture(self, sampler, value):
        return _OpenVisusGui.GLCanvas_setTexture(self, sampler, value)

    def glRenderMesh(self, mesh):
        return _OpenVisusGui.GLCanvas_glRenderMesh(self, mesh)

    def glRenderScreenText(self, x, y, s, color):
        return _OpenVisusGui.GLCanvas_glRenderScreenText(self, x, y, s, color)

    def paintGL(self):
        return _OpenVisusGui.GLCanvas_paintGL(self)

# Register GLCanvas in _OpenVisusGui:
_OpenVisusGui.GLCanvas_swigregister(GLCanvas)

class GLCamera(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _OpenVisusGui.delete_GLCamera

    @staticmethod
    def decode(ar):
        return _OpenVisusGui.GLCamera_decode(ar)

    def getLookAt(self, pos, center, vup):
        return _OpenVisusGui.GLCamera_getLookAt(self, pos, center, vup)

    def getTypeName(self):
        return _OpenVisusGui.GLCamera_getTypeName(self)

    def mirror(self, ref):
        return _OpenVisusGui.GLCamera_mirror(self, ref)

    def guessPosition(self, box, ref=-1):
        return _OpenVisusGui.GLCamera_guessPosition(self, box, ref)

    def splitFrustum(self, value):
        return _OpenVisusGui.GLCamera_splitFrustum(self, value)

    def glRender(self, gl):
        return _OpenVisusGui.GLCamera_glRender(self, gl)

    def glMousePressEvent(self, evt, viewport):
        return _OpenVisusGui.GLCamera_glMousePressEvent(self, evt, viewport)

    def glMouseMoveEvent(self, evt, viewport):
        return _OpenVisusGui.GLCamera_glMouseMoveEvent(self, evt, viewport)

    def glMouseReleaseEvent(self, evt, viewport):
        return _OpenVisusGui.GLCamera_glMouseReleaseEvent(self, evt, viewport)

    def glWheelEvent(self, evt, viewport):
        return _OpenVisusGui.GLCamera_glWheelEvent(self, evt, viewport)

    def glKeyPressEvent(self, evt, viewport):
        return _OpenVisusGui.GLCamera_glKeyPressEvent(self, evt, viewport)

    def getCurrentFrustum(self, viewport):
        return _OpenVisusGui.GLCamera_getCurrentFrustum(self, viewport)

    def getFinalFrustum(self, viewport):
        return _OpenVisusGui.GLCamera_getFinalFrustum(self, viewport)

    def write(self, ar):
        return _OpenVisusGui.GLCamera_write(self, ar)

    def read(self, ar):
        return _OpenVisusGui.GLCamera_read(self, ar)

# Register GLCamera in _OpenVisusGui:
_OpenVisusGui.GLCamera_swigregister(GLCamera)

def GLCamera_decode(ar):
    return _OpenVisusGui.GLCamera_decode(ar)

class GLOrthoCamera(GLCamera):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, default_scale=1.3):
        _OpenVisusGui.GLOrthoCamera_swiginit(self, _OpenVisusGui.new_GLOrthoCamera(default_scale))
    __swig_destroy__ = _OpenVisusGui.delete_GLOrthoCamera

    def getTypeName(self):
        return _OpenVisusGui.GLOrthoCamera_getTypeName(self)

    def getLookAt(self, pos, center, vup):
        return _OpenVisusGui.GLOrthoCamera_getLookAt(self, pos, center, vup)

    def setLookAt(self, pos, center, vup, rotation=0.0):
        return _OpenVisusGui.GLOrthoCamera_setLookAt(self, pos, center, vup, rotation)

    def guessPosition(self, bound, ref=-1):
        return _OpenVisusGui.GLOrthoCamera_guessPosition(self, bound, ref)

    def splitFrustum(self, r):
        return _OpenVisusGui.GLOrthoCamera_splitFrustum(self, r)

    def setDisableRotation(self, value):
        return _OpenVisusGui.GLOrthoCamera_setDisableRotation(self, value)

    def isRotationDisabled(self):
        return _OpenVisusGui.GLOrthoCamera_isRotationDisabled(self)

    def getMaxZoom(self):
        return _OpenVisusGui.GLOrthoCamera_getMaxZoom(self)

    def setMaxZoom(self, value):
        return _OpenVisusGui.GLOrthoCamera_setMaxZoom(self, value)

    def getMinZoom(self):
        return _OpenVisusGui.GLOrthoCamera_getMinZoom(self)

    def setMinZoom(self, value):
        return _OpenVisusGui.GLOrthoCamera_setMinZoom(self, value)

    def mirror(self, ref):
        return _OpenVisusGui.GLOrthoCamera_mirror(self, ref)

    def translate(self, vt):
        return _OpenVisusGui.GLOrthoCamera_translate(self, vt)

    def moveLeft(self):
        return _OpenVisusGui.GLOrthoCamera_moveLeft(self)

    def moveRight(self):
        return _OpenVisusGui.GLOrthoCamera_moveRight(self)

    def moveUp(self):
        return _OpenVisusGui.GLOrthoCamera_moveUp(self)

    def moveDown(self):
        return _OpenVisusGui.GLOrthoCamera_moveDown(self)

    def scale(self, *args):
        return _OpenVisusGui.GLOrthoCamera_scale(self, *args)

    def zoomIn(self):
        return _OpenVisusGui.GLOrthoCamera_zoomIn(self)

    def zoomOut(self):
        return _OpenVisusGui.GLOrthoCamera_zoomOut(self)

    def getOrthoParams(self):
        return _OpenVisusGui.GLOrthoCamera_getOrthoParams(self)

    def setOrthoParams(self, value, smooth=0):
        return _OpenVisusGui.GLOrthoCamera_setOrthoParams(self, value, smooth)

    def getDefaultSmooth(self):
        return _OpenVisusGui.GLOrthoCamera_getDefaultSmooth(self)

    def setDefaultSmooth(self, value):
        return _OpenVisusGui.GLOrthoCamera_setDefaultSmooth(self, value)

    def toggleDefaultSmooth(self):
        return _OpenVisusGui.GLOrthoCamera_toggleDefaultSmooth(self)

    def getCurrentFrustum(self, viewport):
        return _OpenVisusGui.GLOrthoCamera_getCurrentFrustum(self, viewport)

    def getFinalFrustum(self, viewport):
        return _OpenVisusGui.GLOrthoCamera_getFinalFrustum(self, viewport)

    def glMousePressEvent(self, evt, viewport):
        return _OpenVisusGui.GLOrthoCamera_glMousePressEvent(self, evt, viewport)

    def glMouseReleaseEvent(self, evt, viewport):
        return _OpenVisusGui.GLOrthoCamera_glMouseReleaseEvent(self, evt, viewport)

    def glMouseMoveEvent(self, evt, viewport):
        return _OpenVisusGui.GLOrthoCamera_glMouseMoveEvent(self, evt, viewport)

    def glWheelEvent(self, evt, viewport):
        return _OpenVisusGui.GLOrthoCamera_glWheelEvent(self, evt, viewport)

    def glKeyPressEvent(self, evt, viewport):
        return _OpenVisusGui.GLOrthoCamera_glKeyPressEvent(self, evt, viewport)

    def execute(self, ar):
        return _OpenVisusGui.GLOrthoCamera_execute(self, ar)

    def write(self, ar):
        return _OpenVisusGui.GLOrthoCamera_write(self, ar)

    def read(self, ar):
        return _OpenVisusGui.GLOrthoCamera_read(self, ar)

# Register GLOrthoCamera in _OpenVisusGui:
_OpenVisusGui.GLOrthoCamera_swigregister(GLOrthoCamera)

class GLLookAtCamera(GLCamera):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _OpenVisusGui.GLLookAtCamera_swiginit(self, _OpenVisusGui.new_GLLookAtCamera())
    __swig_destroy__ = _OpenVisusGui.delete_GLLookAtCamera

    def getTypeName(self):
        return _OpenVisusGui.GLLookAtCamera_getTypeName(self)

    def guessPosition(self, value, ref=-1):
        return _OpenVisusGui.GLLookAtCamera_guessPosition(self, value, ref)

    def splitFrustum(self, value):
        return _OpenVisusGui.GLLookAtCamera_splitFrustum(self, value)

    def getPosition(self):
        return _OpenVisusGui.GLLookAtCamera_getPosition(self)

    def setPosition(self, value):
        return _OpenVisusGui.GLLookAtCamera_setPosition(self, value)

    def getCenter(self):
        return _OpenVisusGui.GLLookAtCamera_getCenter(self)

    def setCenter(self, value):
        return _OpenVisusGui.GLLookAtCamera_setCenter(self, value)

    def getVup(self):
        return _OpenVisusGui.GLLookAtCamera_getVup(self)

    def setViewUp(self, value):
        return _OpenVisusGui.GLLookAtCamera_setViewUp(self, value)

    def getLookAt(self, pos, center, vup):
        return _OpenVisusGui.GLLookAtCamera_getLookAt(self, pos, center, vup)

    def setLookAt(self, pos, center, vup):
        return _OpenVisusGui.GLLookAtCamera_setLookAt(self, pos, center, vup)

    def getFov(self):
        return _OpenVisusGui.GLLookAtCamera_getFov(self)

    def setFov(self, value):
        return _OpenVisusGui.GLLookAtCamera_setFov(self, value)

    def getZNear(self):
        return _OpenVisusGui.GLLookAtCamera_getZNear(self)

    def setZNear(self, value):
        return _OpenVisusGui.GLLookAtCamera_setZNear(self, value)

    def getZFar(self):
        return _OpenVisusGui.GLLookAtCamera_getZFar(self)

    def setZFar(self, value):
        return _OpenVisusGui.GLLookAtCamera_setZFar(self, value)

    def rotate(self, angle_degree, p0, p1):
        return _OpenVisusGui.GLLookAtCamera_rotate(self, angle_degree, p0, p1)

    def getFinalFrustum(self, viewport):
        return _OpenVisusGui.GLLookAtCamera_getFinalFrustum(self, viewport)

    def getCurrentFrustum(self, viewport):
        return _OpenVisusGui.GLLookAtCamera_getCurrentFrustum(self, viewport)

    def setCameraSelection(self, value):
        return _OpenVisusGui.GLLookAtCamera_setCameraSelection(self, value)

    def glMousePressEvent(self, evt, viewport):
        return _OpenVisusGui.GLLookAtCamera_glMousePressEvent(self, evt, viewport)

    def glMouseMoveEvent(self, evt, viewport):
        return _OpenVisusGui.GLLookAtCamera_glMouseMoveEvent(self, evt, viewport)

    def glMouseReleaseEvent(self, evt, viewport):
        return _OpenVisusGui.GLLookAtCamera_glMouseReleaseEvent(self, evt, viewport)

    def glWheelEvent(self, evt, viewport):
        return _OpenVisusGui.GLLookAtCamera_glWheelEvent(self, evt, viewport)

    def glKeyPressEvent(self, evt, viewport):
        return _OpenVisusGui.GLLookAtCamera_glKeyPressEvent(self, evt, viewport)

    def execute(self, ar):
        return _OpenVisusGui.GLLookAtCamera_execute(self, ar)

    def write(self, ar):
        return _OpenVisusGui.GLLookAtCamera_write(self, ar)

    def read(self, ar):
        return _OpenVisusGui.GLLookAtCamera_read(self, ar)

# Register GLLookAtCamera in _OpenVisusGui:
_OpenVisusGui.GLLookAtCamera_swigregister(GLLookAtCamera)

class GLCameraNode(VisusDataflowPy.Node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == GLCameraNode:
            _self = None
        else:
            _self = self
        _OpenVisusGui.GLCameraNode_swiginit(self, _OpenVisusGui.new_GLCameraNode(_self, *args))
    __swig_destroy__ = _OpenVisusGui.delete_GLCameraNode

    def getGLCamera(self):
        return _OpenVisusGui.GLCameraNode_getGLCamera(self)

    def setGLCamera(self, glcamera):
        return _OpenVisusGui.GLCameraNode_setGLCamera(self, glcamera)

    def execute(self, ar):
        return _OpenVisusGui.GLCameraNode_execute(self, ar)

    def write(self, ar):
        return _OpenVisusGui.GLCameraNode_write(self, ar)

    def read(self, ar):
        return _OpenVisusGui.GLCameraNode_read(self, ar)
    def __disown__(self):
        self.this.disown()
        _OpenVisusGui.disown_GLCameraNode(self)
        return weakref.proxy(self)

    def processInput(self):
        return _OpenVisusGui.GLCameraNode_processInput(self)

# Register GLCameraNode in _OpenVisusGui:
_OpenVisusGui.GLCameraNode_swigregister(GLCameraNode)

class GLCameraNodeView(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model):
        _OpenVisusGui.GLCameraNodeView_swiginit(self, _OpenVisusGui.new_GLCameraNodeView(model))
    __swig_destroy__ = _OpenVisusGui.delete_GLCameraNodeView

    def bindModel(self, model):
        return _OpenVisusGui.GLCameraNodeView_bindModel(self, model)

# Register GLCameraNodeView in _OpenVisusGui:
_OpenVisusGui.GLCameraNodeView_swigregister(GLCameraNodeView)

class IsoContour(GLMesh):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    field = property(_OpenVisusGui.IsoContour_field_get, _OpenVisusGui.IsoContour_field_set)
    second_field = property(_OpenVisusGui.IsoContour_second_field_get, _OpenVisusGui.IsoContour_second_field_set)
    range = property(_OpenVisusGui.IsoContour_range_get, _OpenVisusGui.IsoContour_range_set)
    voxel_used = property(_OpenVisusGui.IsoContour_voxel_used_get, _OpenVisusGui.IsoContour_voxel_used_set)

    def __init__(self):
        _OpenVisusGui.IsoContour_swiginit(self, _OpenVisusGui.new_IsoContour())
    __swig_destroy__ = _OpenVisusGui.delete_IsoContour

# Register IsoContour in _OpenVisusGui:
_OpenVisusGui.IsoContour_swigregister(IsoContour)

class MarchingCube(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    data = property(_OpenVisusGui.MarchingCube_data_get, _OpenVisusGui.MarchingCube_data_set)
    isovalue = property(_OpenVisusGui.MarchingCube_isovalue_get, _OpenVisusGui.MarchingCube_isovalue_set)
    enable_vortex_used = property(_OpenVisusGui.MarchingCube_enable_vortex_used_get, _OpenVisusGui.MarchingCube_enable_vortex_used_set)
    vertices_per_batch = property(_OpenVisusGui.MarchingCube_vertices_per_batch_get, _OpenVisusGui.MarchingCube_vertices_per_batch_set)
    aborted = property(_OpenVisusGui.MarchingCube_aborted_get, _OpenVisusGui.MarchingCube_aborted_set)

    def __init__(self, *args):
        _OpenVisusGui.MarchingCube_swiginit(self, _OpenVisusGui.new_MarchingCube(*args))

    def run(self):
        return _OpenVisusGui.MarchingCube_run(self)
    __swig_destroy__ = _OpenVisusGui.delete_MarchingCube

# Register MarchingCube in _OpenVisusGui:
_OpenVisusGui.MarchingCube_swigregister(MarchingCube)

class IsoContourNode(VisusDataflowPy.Node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == IsoContourNode:
            _self = None
        else:
            _self = self
        _OpenVisusGui.IsoContourNode_swiginit(self, _OpenVisusGui.new_IsoContourNode(_self, ))
    __swig_destroy__ = _OpenVisusGui.delete_IsoContourNode

    def processInput(self):
        return _OpenVisusGui.IsoContourNode_processInput(self)

    def getLastFieldRange(self):
        return _OpenVisusGui.IsoContourNode_getLastFieldRange(self)

    def setField(self, value):
        return _OpenVisusGui.IsoContourNode_setField(self, value)

    def getIsoValue(self):
        return _OpenVisusGui.IsoContourNode_getIsoValue(self)

    def setIsoValue(self, value):
        return _OpenVisusGui.IsoContourNode_setIsoValue(self, value)

    def execute(self, ar):
        return _OpenVisusGui.IsoContourNode_execute(self, ar)

    def write(self, ar):
        return _OpenVisusGui.IsoContourNode_write(self, ar)

    def read(self, ar):
        return _OpenVisusGui.IsoContourNode_read(self, ar)
    def __disown__(self):
        self.this.disown()
        _OpenVisusGui.disown_IsoContourNode(self)
        return weakref.proxy(self)

# Register IsoContourNode in _OpenVisusGui:
_OpenVisusGui.IsoContourNode_swigregister(IsoContourNode)

class IsoContourNodeView(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    widgets = property(_OpenVisusGui.IsoContourNodeView_widgets_get, _OpenVisusGui.IsoContourNodeView_widgets_set)

    def __init__(self, model):
        _OpenVisusGui.IsoContourNodeView_swiginit(self, _OpenVisusGui.new_IsoContourNodeView(model))
    __swig_destroy__ = _OpenVisusGui.delete_IsoContourNodeView

    def bindModel(self, value):
        return _OpenVisusGui.IsoContourNodeView_bindModel(self, value)

# Register IsoContourNodeView in _OpenVisusGui:
_OpenVisusGui.IsoContourNodeView_swigregister(IsoContourNodeView)

class IsoContourRenderNode(VisusDataflowPy.Node, GLObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == IsoContourRenderNode:
            _self = None
        else:
            _self = self
        _OpenVisusGui.IsoContourRenderNode_swiginit(self, _OpenVisusGui.new_IsoContourRenderNode(_self, ))
    __swig_destroy__ = _OpenVisusGui.delete_IsoContourRenderNode

    def glRender(self, gl):
        return _OpenVisusGui.IsoContourRenderNode_glRender(self, gl)

    def getBounds(self):
        return _OpenVisusGui.IsoContourRenderNode_getBounds(self)

    def getMaterial(self):
        return _OpenVisusGui.IsoContourRenderNode_getMaterial(self)

    def setMaterial(self, new_value):
        return _OpenVisusGui.IsoContourRenderNode_setMaterial(self, new_value)

    def getPalette(self):
        return _OpenVisusGui.IsoContourRenderNode_getPalette(self)

    def setPalette(self, value):
        return _OpenVisusGui.IsoContourRenderNode_setPalette(self, value)

    def getMesh(self):
        return _OpenVisusGui.IsoContourRenderNode_getMesh(self)

    def setMesh(self, value):
        return _OpenVisusGui.IsoContourRenderNode_setMesh(self, value)

    def processInput(self):
        return _OpenVisusGui.IsoContourRenderNode_processInput(self)

    @staticmethod
    def allocShaders():
        return _OpenVisusGui.IsoContourRenderNode_allocShaders()

    @staticmethod
    def releaseShaders():
        return _OpenVisusGui.IsoContourRenderNode_releaseShaders()

    def execute(self, ar):
        return _OpenVisusGui.IsoContourRenderNode_execute(self, ar)

    def write(self, ar):
        return _OpenVisusGui.IsoContourRenderNode_write(self, ar)

    def read(self, ar):
        return _OpenVisusGui.IsoContourRenderNode_read(self, ar)
    def __disown__(self):
        self.this.disown()
        _OpenVisusGui.disown_IsoContourRenderNode(self)
        return weakref.proxy(self)

# Register IsoContourRenderNode in _OpenVisusGui:
_OpenVisusGui.IsoContourRenderNode_swigregister(IsoContourRenderNode)

def IsoContourRenderNode_allocShaders():
    return _OpenVisusGui.IsoContourRenderNode_allocShaders()

def IsoContourRenderNode_releaseShaders():
    return _OpenVisusGui.IsoContourRenderNode_releaseShaders()

class IsoContourRenderNodeView(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model):
        _OpenVisusGui.IsoContourRenderNodeView_swiginit(self, _OpenVisusGui.new_IsoContourRenderNodeView(model))
    __swig_destroy__ = _OpenVisusGui.delete_IsoContourRenderNodeView

    def bindModel(self, model):
        return _OpenVisusGui.IsoContourRenderNodeView_bindModel(self, model)

# Register IsoContourRenderNodeView in _OpenVisusGui:
_OpenVisusGui.IsoContourRenderNodeView_swigregister(IsoContourRenderNodeView)

class RenderArrayNode(VisusDataflowPy.Node, GLObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    bFastRendering = property(_OpenVisusGui.RenderArrayNode_bFastRendering_get, _OpenVisusGui.RenderArrayNode_bFastRendering_set)
    opacity = property(_OpenVisusGui.RenderArrayNode_opacity_get, _OpenVisusGui.RenderArrayNode_opacity_set)

    def __init__(self):
        if self.__class__ == RenderArrayNode:
            _self = None
        else:
            _self = self
        _OpenVisusGui.RenderArrayNode_swiginit(self, _OpenVisusGui.new_RenderArrayNode(_self, ))
    __swig_destroy__ = _OpenVisusGui.delete_RenderArrayNode

    def getData(self):
        return _OpenVisusGui.RenderArrayNode_getData(self)

    def setData(self, *args):
        return _OpenVisusGui.RenderArrayNode_setData(self, *args)

    def getDataDimension(self):
        return _OpenVisusGui.RenderArrayNode_getDataDimension(self)

    def getDataBounds(self):
        return _OpenVisusGui.RenderArrayNode_getDataBounds(self)

    def getBounds(self):
        return _OpenVisusGui.RenderArrayNode_getBounds(self)

    def getLightingMaterial(self):
        return _OpenVisusGui.RenderArrayNode_getLightingMaterial(self)

    def setLightingMaterial(self, value):
        return _OpenVisusGui.RenderArrayNode_setLightingMaterial(self, value)

    def lightingEnabled(self):
        return _OpenVisusGui.RenderArrayNode_lightingEnabled(self)

    def setLightingEnabled(self, value):
        return _OpenVisusGui.RenderArrayNode_setLightingEnabled(self, value)

    def getPalette(self):
        return _OpenVisusGui.RenderArrayNode_getPalette(self)

    def paletteEnabled(self):
        return _OpenVisusGui.RenderArrayNode_paletteEnabled(self)

    def setPaletteEnabled(self, value):
        return _OpenVisusGui.RenderArrayNode_setPaletteEnabled(self, value)

    def useViewDirection(self):
        return _OpenVisusGui.RenderArrayNode_useViewDirection(self)

    def setUseViewDirection(self, value):
        return _OpenVisusGui.RenderArrayNode_setUseViewDirection(self, value)

    def maxNumSlices(self):
        return _OpenVisusGui.RenderArrayNode_maxNumSlices(self)

    def setMaxNumSlices(self, value):
        return _OpenVisusGui.RenderArrayNode_setMaxNumSlices(self, value)

    def minifyFilter(self):
        return _OpenVisusGui.RenderArrayNode_minifyFilter(self)

    def setMinifyFilter(self, value):
        return _OpenVisusGui.RenderArrayNode_setMinifyFilter(self, value)

    def magnifyFilter(self):
        return _OpenVisusGui.RenderArrayNode_magnifyFilter(self)

    def setMagnifyFilter(self, value):
        return _OpenVisusGui.RenderArrayNode_setMagnifyFilter(self, value)

    def glRender(self, gl):
        return _OpenVisusGui.RenderArrayNode_glRender(self, gl)

    def processInput(self):
        return _OpenVisusGui.RenderArrayNode_processInput(self)

    @staticmethod
    def allocShaders():
        return _OpenVisusGui.RenderArrayNode_allocShaders()

    @staticmethod
    def releaseShaders():
        return _OpenVisusGui.RenderArrayNode_releaseShaders()

    def execute(self, ar):
        return _OpenVisusGui.RenderArrayNode_execute(self, ar)

    def write(self, ar):
        return _OpenVisusGui.RenderArrayNode_write(self, ar)

    def read(self, ar):
        return _OpenVisusGui.RenderArrayNode_read(self, ar)
    def __disown__(self):
        self.this.disown()
        _OpenVisusGui.disown_RenderArrayNode(self)
        return weakref.proxy(self)

# Register RenderArrayNode in _OpenVisusGui:
_OpenVisusGui.RenderArrayNode_swigregister(RenderArrayNode)

def RenderArrayNode_allocShaders():
    return _OpenVisusGui.RenderArrayNode_allocShaders()

def RenderArrayNode_releaseShaders():
    return _OpenVisusGui.RenderArrayNode_releaseShaders()

class RenderArrayNodeView(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, model=None):
        _OpenVisusGui.RenderArrayNodeView_swiginit(self, _OpenVisusGui.new_RenderArrayNodeView(model))
    __swig_destroy__ = _OpenVisusGui.delete_RenderArrayNodeView

    def bindModel(self, model):
        return _OpenVisusGui.RenderArrayNodeView_bindModel(self, model)

# Register RenderArrayNodeView in _OpenVisusGui:
_OpenVisusGui.RenderArrayNodeView_swigregister(RenderArrayNodeView)

class KdRenderArrayNode(VisusDataflowPy.Node, GLObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == KdRenderArrayNode:
            _self = None
        else:
            _self = self
        _OpenVisusGui.KdRenderArrayNode_swiginit(self, _OpenVisusGui.new_KdRenderArrayNode(_self, ))
    __swig_destroy__ = _OpenVisusGui.delete_KdRenderArrayNode

    def getKdArray(self):
        return _OpenVisusGui.KdRenderArrayNode_getKdArray(self)

    def getBounds(self):
        return _OpenVisusGui.KdRenderArrayNode_getBounds(self)

    def processInput(self):
        return _OpenVisusGui.KdRenderArrayNode_processInput(self)

    def glRender(self, gl):
        return _OpenVisusGui.KdRenderArrayNode_glRender(self, gl)

    @staticmethod
    def allocShaders():
        return _OpenVisusGui.KdRenderArrayNode_allocShaders()

    @staticmethod
    def releaseShaders():
        return _OpenVisusGui.KdRenderArrayNode_releaseShaders()
    def __disown__(self):
        self.this.disown()
        _OpenVisusGui.disown_KdRenderArrayNode(self)
        return weakref.proxy(self)

# Register KdRenderArrayNode in _OpenVisusGui:
_OpenVisusGui.KdRenderArrayNode_swigregister(KdRenderArrayNode)

def KdRenderArrayNode_allocShaders():
    return _OpenVisusGui.KdRenderArrayNode_allocShaders()

def KdRenderArrayNode_releaseShaders():
    return _OpenVisusGui.KdRenderArrayNode_releaseShaders()

class ScriptingNode(VisusDataflowPy.Node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        if self.__class__ == ScriptingNode:
            _self = None
        else:
            _self = self
        _OpenVisusGui.ScriptingNode_swiginit(self, _OpenVisusGui.new_ScriptingNode(_self, ))
    __swig_destroy__ = _OpenVisusGui.delete_ScriptingNode

    def getCode(self):
        return _OpenVisusGui.ScriptingNode_getCode(self)

    def getMaxPublishMSec(self):
        return _OpenVisusGui.ScriptingNode_getMaxPublishMSec(self)

    def setMaxPublishMSec(self, value):
        return _OpenVisusGui.ScriptingNode_setMaxPublishMSec(self, value)

    def setCode(self, code):
        return _OpenVisusGui.ScriptingNode_setCode(self, code)

    def addUserInput(self, key, value):
        return _OpenVisusGui.ScriptingNode_addUserInput(self, key, value)

    def clearPresets(self):
        return _OpenVisusGui.ScriptingNode_clearPresets(self)

    def getPresets(self):
        return _OpenVisusGui.ScriptingNode_getPresets(self)

    def addPreset(self, key, code):
        return _OpenVisusGui.ScriptingNode_addPreset(self, key, code)

    def getPresetCode(self, *args):
        return _OpenVisusGui.ScriptingNode_getPresetCode(self, *args)

    def processInput(self):
        return _OpenVisusGui.ScriptingNode_processInput(self)

    def getBounds(self):
        return _OpenVisusGui.ScriptingNode_getBounds(self)

    @staticmethod
    def castFrom(obj):
        return _OpenVisusGui.ScriptingNode_castFrom(obj)

    def execute(self, ar):
        return _OpenVisusGui.ScriptingNode_execute(self, ar)

    def write(self, ar):
        return _OpenVisusGui.ScriptingNode_write(self, ar)

    def read(self, ar):
        return _OpenVisusGui.ScriptingNode_read(self, ar)
    def __disown__(self):
        self.this.disown()
        _OpenVisusGui.disown_ScriptingNode(self)
        return weakref.proxy(self)

# Register ScriptingNode in _OpenVisusGui:
_OpenVisusGui.ScriptingNode_swigregister(ScriptingNode)

def ScriptingNode_castFrom(obj):
    return _OpenVisusGui.ScriptingNode_castFrom(obj)

class ScriptingNodeBaseView(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _OpenVisusGui.delete_ScriptingNodeBaseView

    def clearPresets(self):
        return _OpenVisusGui.ScriptingNodeBaseView_clearPresets(self)

    def addPreset(self, key, code):
        return _OpenVisusGui.ScriptingNodeBaseView_addPreset(self, key, code)

# Register ScriptingNodeBaseView in _OpenVisusGui:
_OpenVisusGui.ScriptingNodeBaseView_swigregister(ScriptingNodeBaseView)

class ScriptingNodeView(ScriptingNodeBaseView):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    widgets = property(_OpenVisusGui.ScriptingNodeView_widgets_get, _OpenVisusGui.ScriptingNodeView_widgets_set)

    def __init__(self, model=None):
        _OpenVisusGui.ScriptingNodeView_swiginit(self, _OpenVisusGui.new_ScriptingNodeView(model))
    __swig_destroy__ = _OpenVisusGui.delete_ScriptingNodeView

    def clearPresets(self):
        return _OpenVisusGui.ScriptingNodeView_clearPresets(self)

    def addPreset(self, key, code):
        return _OpenVisusGui.ScriptingNodeView_addPreset(self, key, code)

    def bindModel(self, model):
        return _OpenVisusGui.ScriptingNodeView_bindModel(self, model)

# Register ScriptingNodeView in _OpenVisusGui:
_OpenVisusGui.ScriptingNodeView_swigregister(ScriptingNodeView)

class PythonNode(VisusDataflowPy.Node):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    node_bounds = property(_OpenVisusGui.PythonNode_node_bounds_get, _OpenVisusGui.PythonNode_node_bounds_set)

    def __init__(self):
        if self.__class__ == PythonNode:
            _self = None
        else:
            _self = self
        _OpenVisusGui.PythonNode_swiginit(self, _OpenVisusGui.new_PythonNode(_self, ))
    __swig_destroy__ = _OpenVisusGui.delete_PythonNode

    def getOsDependentTypeName(self):
        return _OpenVisusGui.PythonNode_getOsDependentTypeName(self)

    def processInput(self):
        return _OpenVisusGui.PythonNode_processInput(self)

    def getBounds(self):
        return _OpenVisusGui.PythonNode_getBounds(self)

    def setBounds(self, value):
        return _OpenVisusGui.PythonNode_setBounds(self, value)

    def glGetRenderQueue(self):
        return _OpenVisusGui.PythonNode_glGetRenderQueue(self)

    def glSetRenderQueue(self, value):
        return _OpenVisusGui.PythonNode_glSetRenderQueue(self, value)

    def glMousePressEvent(self, map, evt):
        return _OpenVisusGui.PythonNode_glMousePressEvent(self, map, evt)

    def glMouseMoveEvent(self, map, evt):
        return _OpenVisusGui.PythonNode_glMouseMoveEvent(self, map, evt)

    def glMouseReleaseEvent(self, map, evt):
        return _OpenVisusGui.PythonNode_glMouseReleaseEvent(self, map, evt)

    def glWheelEvent(self, map, evt):
        return _OpenVisusGui.PythonNode_glWheelEvent(self, map, evt)

    def glRender(self, gl):
        return _OpenVisusGui.PythonNode_glRender(self, gl)
    def __disown__(self):
        self.this.disown()
        _OpenVisusGui.disown_PythonNode(self)
        return weakref.proxy(self)

# Register PythonNode in _OpenVisusGui:
_OpenVisusGui.PythonNode_swigregister(PythonNode)

class ViewerPreferences(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    default_panels = property(_OpenVisusGui.ViewerPreferences_default_panels_get, _OpenVisusGui.ViewerPreferences_default_panels_set)
    default_show_logos = property(_OpenVisusGui.ViewerPreferences_default_show_logos_get, _OpenVisusGui.ViewerPreferences_default_show_logos_set)
    title = property(_OpenVisusGui.ViewerPreferences_title_get, _OpenVisusGui.ViewerPreferences_title_set)
    panels = property(_OpenVisusGui.ViewerPreferences_panels_get, _OpenVisusGui.ViewerPreferences_panels_set)
    bHideTitleBar = property(_OpenVisusGui.ViewerPreferences_bHideTitleBar_get, _OpenVisusGui.ViewerPreferences_bHideTitleBar_set)
    bHideMenus = property(_OpenVisusGui.ViewerPreferences_bHideMenus_get, _OpenVisusGui.ViewerPreferences_bHideMenus_set)
    bRightHanded = property(_OpenVisusGui.ViewerPreferences_bRightHanded_get, _OpenVisusGui.ViewerPreferences_bRightHanded_set)
    screen_bounds = property(_OpenVisusGui.ViewerPreferences_screen_bounds_get, _OpenVisusGui.ViewerPreferences_screen_bounds_set)
    show_logos = property(_OpenVisusGui.ViewerPreferences_show_logos_get, _OpenVisusGui.ViewerPreferences_show_logos_set)

    def __init__(self):
        _OpenVisusGui.ViewerPreferences_swiginit(self, _OpenVisusGui.new_ViewerPreferences())

    def write(self, ar):
        return _OpenVisusGui.ViewerPreferences_write(self, ar)

    def read(self, ar):
        return _OpenVisusGui.ViewerPreferences_read(self, ar)
    __swig_destroy__ = _OpenVisusGui.delete_ViewerPreferences

# Register ViewerPreferences in _OpenVisusGui:
_OpenVisusGui.ViewerPreferences_swigregister(ViewerPreferences)

class ViewerAutoRefresh(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    enabled = property(_OpenVisusGui.ViewerAutoRefresh_enabled_get, _OpenVisusGui.ViewerAutoRefresh_enabled_set)
    msec = property(_OpenVisusGui.ViewerAutoRefresh_msec_get, _OpenVisusGui.ViewerAutoRefresh_msec_set)

    def __init__(self):
        _OpenVisusGui.ViewerAutoRefresh_swiginit(self, _OpenVisusGui.new_ViewerAutoRefresh())
    __swig_destroy__ = _OpenVisusGui.delete_ViewerAutoRefresh

# Register ViewerAutoRefresh in _OpenVisusGui:
_OpenVisusGui.ViewerAutoRefresh_swigregister(ViewerAutoRefresh)

class ViewerToolBarTab(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    name = property(_OpenVisusGui.ViewerToolBarTab_name_get, _OpenVisusGui.ViewerToolBarTab_name_set)

    def __init__(self, name_):
        _OpenVisusGui.ViewerToolBarTab_swiginit(self, _OpenVisusGui.new_ViewerToolBarTab(name_))
    __swig_destroy__ = _OpenVisusGui.delete_ViewerToolBarTab

    @staticmethod
    def createButton(*args):
        return _OpenVisusGui.ViewerToolBarTab_createButton(*args)

    def addAction(self, action):
        return _OpenVisusGui.ViewerToolBarTab_addAction(self, action)

    def addMenu(self, icon, name, menu):
        return _OpenVisusGui.ViewerToolBarTab_addMenu(self, icon, name, menu)

    def addBlueMenu(self, icon, name, menu):
        return _OpenVisusGui.ViewerToolBarTab_addBlueMenu(self, icon, name, menu)

# Register ViewerToolBarTab in _OpenVisusGui:
_OpenVisusGui.ViewerToolBarTab_swigregister(ViewerToolBarTab)

def ViewerToolBarTab_createButton(*args):
    return _OpenVisusGui.ViewerToolBarTab_createButton(*args)

class ViewerToolBar(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    file_menu = property(_OpenVisusGui.ViewerToolBar_file_menu_get, _OpenVisusGui.ViewerToolBar_file_menu_set)
    bookmarks_button = property(_OpenVisusGui.ViewerToolBar_bookmarks_button_get, _OpenVisusGui.ViewerToolBar_bookmarks_button_set)
    tabs = property(_OpenVisusGui.ViewerToolBar_tabs_get, _OpenVisusGui.ViewerToolBar_tabs_set)

    def __init__(self):
        _OpenVisusGui.ViewerToolBar_swiginit(self, _OpenVisusGui.new_ViewerToolBar())

    def addTab(self, tab, name):
        return _OpenVisusGui.ViewerToolBar_addTab(self, tab, name)
    __swig_destroy__ = _OpenVisusGui.delete_ViewerToolBar

# Register ViewerToolBar in _OpenVisusGui:
_OpenVisusGui.ViewerToolBar_swigregister(ViewerToolBar)

class ViewerLogo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    filename = property(_OpenVisusGui.ViewerLogo_filename_get, _OpenVisusGui.ViewerLogo_filename_set)
    pos = property(_OpenVisusGui.ViewerLogo_pos_get, _OpenVisusGui.ViewerLogo_pos_set)
    opacity = property(_OpenVisusGui.ViewerLogo_opacity_get, _OpenVisusGui.ViewerLogo_opacity_set)
    border = property(_OpenVisusGui.ViewerLogo_border_get, _OpenVisusGui.ViewerLogo_border_set)
    tex = property(_OpenVisusGui.ViewerLogo_tex_get, _OpenVisusGui.ViewerLogo_tex_set)

    def __init__(self):
        _OpenVisusGui.ViewerLogo_swiginit(self, _OpenVisusGui.new_ViewerLogo())
    __swig_destroy__ = _OpenVisusGui.delete_ViewerLogo

# Register ViewerLogo in _OpenVisusGui:
_OpenVisusGui.ViewerLogo_swigregister(ViewerLogo)

class Viewer(VisusDataflowPy.DataflowListener):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        if self.__class__ == Viewer:
            _self = None
        else:
            _self = self
        _OpenVisusGui.Viewer_swiginit(self, _OpenVisusGui.new_Viewer(_self, *args))
    __swig_destroy__ = _OpenVisusGui.delete_Viewer

    def getTypeName(self):
        return _OpenVisusGui.Viewer_getTypeName(self)

    def configureFromCommandLine(self, args):
        return _OpenVisusGui.Viewer_configureFromCommandLine(self, args)

    def c_ptr(self):
        return _OpenVisusGui.Viewer_c_ptr(self)

    def printInfo(self, msg):
        return _OpenVisusGui.Viewer_printInfo(self, msg)

    def showLicences(self):
        return _OpenVisusGui.Viewer_showLicences(self)

    def getDataflow(self):
        return _OpenVisusGui.Viewer_getDataflow(self)

    def getGLCanvas(self):
        return _OpenVisusGui.Viewer_getGLCanvas(self)

    def getGLCamera(self):
        return _OpenVisusGui.Viewer_getGLCamera(self)

    def getTreeView(self):
        return _OpenVisusGui.Viewer_getTreeView(self)

    def getFrameView(self):
        return _OpenVisusGui.Viewer_getFrameView(self)

    def getLog(self):
        return _OpenVisusGui.Viewer_getLog(self)

    def addDockWidget(self, *args):
        return _OpenVisusGui.Viewer_addDockWidget(self, *args)

    def showNodeContextMenu(self, node):
        return _OpenVisusGui.Viewer_showNodeContextMenu(self, node)

    def showPopupWidget(self, widget):
        return _OpenVisusGui.Viewer_showPopupWidget(self, widget)

    def showTopWidget(self, title, widget):
        return _OpenVisusGui.Viewer_showTopWidget(self, title, widget)

    def openFile(self, filename, parent=None):
        return _OpenVisusGui.Viewer_openFile(self, filename, parent)

    def openUrl(self, url, parent=None):
        return _OpenVisusGui.Viewer_openUrl(self, url, parent)

    def saveFile(self, filename, bSaveHistory=False):
        return _OpenVisusGui.Viewer_saveFile(self, filename, bSaveHistory)

    def postRedisplay(self):
        return _OpenVisusGui.Viewer_postRedisplay(self)

    def playFile(self, filename):
        return _OpenVisusGui.Viewer_playFile(self, filename)

    def takeSnapshot(self, *args):
        return _OpenVisusGui.Viewer_takeSnapshot(self, *args)

    def editNode(self, node=None):
        return _OpenVisusGui.Viewer_editNode(self, node)

    def beginFreeTransform(self, *args):
        return _OpenVisusGui.Viewer_beginFreeTransform(self, *args)

    def endFreeTransform(self):
        return _OpenVisusGui.Viewer_endFreeTransform(self)

    def refreshActions(self):
        return _OpenVisusGui.Viewer_refreshActions(self)

    def idle(self):
        return _OpenVisusGui.Viewer_idle(self)

    def modelChanged(self):
        return _OpenVisusGui.Viewer_modelChanged(self)

    def enableSaveSession(self):
        return _OpenVisusGui.Viewer_enableSaveSession(self)

    def dataflowBeforeProcessInput(self, node):
        return _OpenVisusGui.Viewer_dataflowBeforeProcessInput(self, node)

    def dataflowAfterProcessInput(self, node):
        return _OpenVisusGui.Viewer_dataflowAfterProcessInput(self, node)

    def getRoot(self):
        return _OpenVisusGui.Viewer_getRoot(self)

    def getUUID(self, node):
        return _OpenVisusGui.Viewer_getUUID(self, node)

    def getNodes(self):
        return _OpenVisusGui.Viewer_getNodes(self)

    def findNodeByUUID(self, uuid):
        return _OpenVisusGui.Viewer_findNodeByUUID(self, uuid)

    def findPick(self, node, screen_point, bRecursive, distance=None):
        return _OpenVisusGui.Viewer_findPick(self, node, screen_point, bRecursive, distance)

    def getBounds(self, node, bRecursive=False):
        return _OpenVisusGui.Viewer_getBounds(self, node, bRecursive)

    def getWorldDimension(self):
        return _OpenVisusGui.Viewer_getWorldDimension(self)

    def getWorldBox(self):
        return _OpenVisusGui.Viewer_getWorldBox(self)

    def computeNodeToNode(self, dst, src):
        return _OpenVisusGui.Viewer_computeNodeToNode(self, dst, src)

    def computeQueryBounds(self, query_node):
        return _OpenVisusGui.Viewer_computeQueryBounds(self, query_node)

    def computeNodeToScreen(self, frustum, node):
        return _OpenVisusGui.Viewer_computeNodeToScreen(self, frustum, node)

    def attachGLCamera(self, value):
        return _OpenVisusGui.Viewer_attachGLCamera(self, value)

    def detachGLCamera(self):
        return _OpenVisusGui.Viewer_detachGLCamera(self)

    def glGetRenderQueue(self, node):
        return _OpenVisusGui.Viewer_glGetRenderQueue(self, node)

    def glCameraChangeEvent(self):
        return _OpenVisusGui.Viewer_glCameraChangeEvent(self)

    def glCanvasResizeEvent(self, evt):
        return _OpenVisusGui.Viewer_glCanvasResizeEvent(self, evt)

    def glCanvasMousePressEvent(self, evt):
        return _OpenVisusGui.Viewer_glCanvasMousePressEvent(self, evt)

    def glCanvasMouseMoveEvent(self, evt):
        return _OpenVisusGui.Viewer_glCanvasMouseMoveEvent(self, evt)

    def glCanvasMouseReleaseEvent(self, evt):
        return _OpenVisusGui.Viewer_glCanvasMouseReleaseEvent(self, evt)

    def glCanvasWheelEvent(self, evt):
        return _OpenVisusGui.Viewer_glCanvasWheelEvent(self, evt)

    def keyPressEvent(self, evt):
        return _OpenVisusGui.Viewer_keyPressEvent(self, evt)

    def glRender(self, gl):
        return _OpenVisusGui.Viewer_glRender(self, gl)

    def glRenderNodes(self, gl):
        return _OpenVisusGui.Viewer_glRenderNodes(self, gl)

    def glRenderSelection(self, gl):
        return _OpenVisusGui.Viewer_glRenderSelection(self, gl)

    def glRenderGestures(self, gl):
        return _OpenVisusGui.Viewer_glRenderGestures(self, gl)

    def glRenderLogos(self, gl):
        return _OpenVisusGui.Viewer_glRenderLogos(self, gl)

    def clearAll(self):
        return _OpenVisusGui.Viewer_clearAll(self)

    def dropProcessing(self):
        return _OpenVisusGui.Viewer_dropProcessing(self)

    def getAutoRefresh(self):
        return _OpenVisusGui.Viewer_getAutoRefresh(self)

    def setAutoRefresh(self, value):
        return _OpenVisusGui.Viewer_setAutoRefresh(self, value)

    def getSelection(self):
        return _OpenVisusGui.Viewer_getSelection(self)

    def setSelection(self, node):
        return _OpenVisusGui.Viewer_setSelection(self, node)

    def dropSelection(self):
        return _OpenVisusGui.Viewer_dropSelection(self)

    def setMinimal(self):
        return _OpenVisusGui.Viewer_setMinimal(self)

    def setNodeName(self, node, value):
        return _OpenVisusGui.Viewer_setNodeName(self, node, value)

    def setNodeVisible(self, node, value):
        return _OpenVisusGui.Viewer_setNodeVisible(self, node, value)

    def addNode(self, *args):
        return _OpenVisusGui.Viewer_addNode(self, *args)

    def removeNode(self, node):
        return _OpenVisusGui.Viewer_removeNode(self, node)

    def moveNode(self, dst, src, index=-1):
        return _OpenVisusGui.Viewer_moveNode(self, dst, src, index)

    def connectNodes(self, *args):
        return _OpenVisusGui.Viewer_connectNodes(self, *args)

    def disconnectNodes(self, _from, oport_name, iport_name, to):
        return _OpenVisusGui.Viewer_disconnectNodes(self, _from, oport_name, iport_name, to)

    def autoConnectNodes(self):
        return _OpenVisusGui.Viewer_autoConnectNodes(self)

    def isMouseDragging(self):
        return _OpenVisusGui.Viewer_isMouseDragging(self)

    def setMouseDragging(self, value):
        return _OpenVisusGui.Viewer_setMouseDragging(self, value)

    def scheduleMouseDragging(self, value, msec):
        return _OpenVisusGui.Viewer_scheduleMouseDragging(self, value, msec)

    def reloadVisusConfig(self, bChooseAFile=False):
        return _OpenVisusGui.Viewer_reloadVisusConfig(self, bChooseAFile)

    def setPreferences(self, value):
        return _OpenVisusGui.Viewer_setPreferences(self, value)

    def open(self, url, parent=None):
        return _OpenVisusGui.Viewer_open(self, url, parent)

    def save(self, filename, bSaveHistory=False):
        return _OpenVisusGui.Viewer_save(self, filename, bSaveHistory)

    def setDataflow(self, dataflow):
        return _OpenVisusGui.Viewer_setDataflow(self, dataflow)

    def refreshNode(self, node=None):
        return _OpenVisusGui.Viewer_refreshNode(self, node)

    def refreshAll(self):
        return _OpenVisusGui.Viewer_refreshAll(self)

    def guessGLCameraPosition(self, ref_=-1):
        return _OpenVisusGui.Viewer_guessGLCameraPosition(self, ref_)

    def mirrorGLCamera(self, ref=0):
        return _OpenVisusGui.Viewer_mirrorGLCamera(self, ref)

    def addWorld(self, uuid):
        return _OpenVisusGui.Viewer_addWorld(self, uuid)

    def addDataset(self, uuid, parent, url):
        return _OpenVisusGui.Viewer_addDataset(self, uuid, parent, url)

    def addGLCamera(self, *args):
        return _OpenVisusGui.Viewer_addGLCamera(self, *args)

    def addVolume(self, *args):
        return _OpenVisusGui.Viewer_addVolume(self, *args)

    def addSlice(self, *args):
        return _OpenVisusGui.Viewer_addSlice(self, *args)

    def setFieldName(self, value):
        return _OpenVisusGui.Viewer_setFieldName(self, value)

    def addKdQuery(self, *args):
        return _OpenVisusGui.Viewer_addKdQuery(self, *args)

    def addIsoContour(self, *args):
        return _OpenVisusGui.Viewer_addIsoContour(self, *args)

    def addScripting(self, uuid, parent):
        return _OpenVisusGui.Viewer_addScripting(self, uuid, parent)

    def setScriptingCode(self, value):
        return _OpenVisusGui.Viewer_setScriptingCode(self, value)

    def addCpuTransferFunction(self, uuid, parent):
        return _OpenVisusGui.Viewer_addCpuTransferFunction(self, uuid, parent)

    def addStatistics(self, uuid, parent):
        return _OpenVisusGui.Viewer_addStatistics(self, uuid, parent)

    def addRender(self, *args):
        return _OpenVisusGui.Viewer_addRender(self, *args)

    def addKdRender(self, *args):
        return _OpenVisusGui.Viewer_addKdRender(self, *args)

    def addOSPRay(self, *args):
        return _OpenVisusGui.Viewer_addOSPRay(self, *args)

    def addGroup(self, *args):
        return _OpenVisusGui.Viewer_addGroup(self, *args)

    def addModelView(self, uuid, parent, insert=False):
        return _OpenVisusGui.Viewer_addModelView(self, uuid, parent, insert)

    def addPalette(self, uuid, parent, palette):
        return _OpenVisusGui.Viewer_addPalette(self, uuid, parent, palette)

    def execute(self, ar):
        return _OpenVisusGui.Viewer_execute(self, ar)

    def write(self, ar):
        return _OpenVisusGui.Viewer_write(self, ar)

    def read(self, ar):
        return _OpenVisusGui.Viewer_read(self, ar)

    def addNetRcv(self, port):
        return _OpenVisusGui.Viewer_addNetRcv(self, port)

    def addNetSnd(self, *args):
        return _OpenVisusGui.Viewer_addNetSnd(self, *args)

    def postFlushMessages(self):
        return _OpenVisusGui.Viewer_postFlushMessages(self)
    def __disown__(self):
        self.this.disown()
        _OpenVisusGui.disown_Viewer(self)
        return weakref.proxy(self)

# Register Viewer in _OpenVisusGui:
_OpenVisusGui.Viewer_swigregister(Viewer)


def ToCppQtWidget(obj):
    return _OpenVisusGui.ToCppQtWidget(obj)

def FromCppQtWidget(widget):
    return _OpenVisusGui.FromCppQtWidget(widget)


