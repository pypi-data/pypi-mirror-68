**************
Advanced Usage
**************

Custom sections
===============
By default, :rst:dir:`autoclasstoc` divides the TOC into two sections: "Public 
Methods" and "Private Methods".  However, for some projects it may make more 
sense to categorize attributes differently.  One such example might be a GUI 
library that uses methods beginning with ``on_`` to handle events, e.g.  
``on_mouse_down()``, ``on_key_up()``,  etc.  In this case we might want to 
divide attributes into three sections: "Event Handlers", "Public Methods", and 
"Private Methods".  This is not hard to configure, as we'll show below:

Sections in the :rst:dir:`autoclasstoc` are represented by the `Section` class, 
so we'll have to make a new `Section` subclass for our event handlers::

    # conf.py
    from autoclasstoc import Section, is_method, is_public

    class EventHandlers(Section):
        key = 'event-handlers'
        title = "Event Handlers:"

        def predicate(self, name, attr):
            return is_method(name, attr) and name.startswith('on_')

We'll also have to remake the `Section` subclass for public methods, to avoid 
listing the event handlers twice::

    class PublicMethods(Section):
        key = 'public-methods'
        title = "Public Methods:"

        def predicate(self, name, attr):
            return is_method(name, attr) and is_public(name) and not name.startswith('on_')

Finally, we need to specify that our new sections should be used by default 
(and what order they should go in)::

    autoclasstoc_sections = [
            'event-handlers',
            'public-methods',
            'private-methods',
    ]
  
Hopefully this code is fairly self explanatory, but the documentation for the 
`Section` class and the `autoclasstoc_sections` option also explain everything 
in greater detail.

Custom CSS
==========
All of the HTML elements generated by :rst:dir:`autoclasstoc` are contained in 
a ``<div>`` with class ``autoclasstoc``.  This can be used to select and style 
the elements in the class TOC.  Note that the plugin includes some default 
rules to control the spacing around the ``<details>`` elements that contain 
TOCs for inherited attributes.

Autogen
=======
If you want to use :rst:dir:`autoclasstoc` with :ext:`autogen`, you'll need to 
start by defining a new class template for :ext:`autogen` to use.  For example:

.. code-block:: rst

  # _templates/autosummary/class.rst
  {{ fullname | escape | underline }}
  
  .. currentmodule:: {{ module }}
  
  .. autoclass:: {{ name }}
    :members:
    :undoc-members:
    :special-members:
    :private-members:
  
    .. autoclasstoc::

Note that the name of the ``_templates`` directory depends on how your project 
is configured.  Once the template is in the correct location, you can have 
:ext:`autogen` create stub files using the following command:

.. code-block:: console

  $ sphinx-autogen -t _templates path/to/doc/with/autosummary.rst
  
