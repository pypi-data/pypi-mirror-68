openapi: 3.0.0
info:
  description: "RPC API to Create, Query and Destroy Infrastructure. These APIs are expected of any VIM driver integrated with Brent"
  version: "1.0.0"
  title: Infrastructure
servers:
  - url: /api/infrastructure
tags:
  - name: infrastructure
    description: Infrastructure APIs
paths:
  /create:
    post:
      tags:
        - infrastructure
      summary: Create infrastructure
      description: >-
        Create infrastructure described by a Template string in the given Deployment Location. If accepted, a response should be returned immediately with an infrastructureId, to refer to the infrastructure being created, and a requestId, to refer to the creation process.
        The completion of the request (regardless of whether it was successful or not) should be returned via Kafka (with a message of type InfrastructureTask from the schema)
      operationId: .create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateInfrastructureRequest"
            examples:
              example: 
                $ref: "#/components/examples/ExampleCreateInfrastructureRequest"
      responses:
        "202":
          description: Request accepted (async examples shown for information but they will never be returned via this API, they are returned on Kafka instead)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateInfrastructureResponse"
              examples:
                response:
                  $ref: "#/components/examples/ExampleCreateInfrastructureResponse"
                async-response:
                  $ref: "#/components/examples/ExampleInfrastructureTask"
                failed-async-response:
                  $ref: "#/components/examples/ExampleFailedInfrastructureTask"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                example:
                  $ref: "#/components/examples/ExampleCreateInfrastructureErrorResponse"
  /query:
    post:
      tags:
        - infrastructure
      summary: Query create/delete request status
      description: >-
        Query the progress of a create/delete request by ID and deployment location. This API is for debugging as Brent expects the completion of a request to be returned via Kafka
      operationId: .query
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InfrastructureTaskQuery"
            examples:
              example:
                $ref: '#/components/examples/ExampleInfrastructureTaskQuery'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InfrastructureTask"
              examples:
                complete-example:
                  $ref: '#/components/examples/ExampleInfrastructureTask'
                failed-example:
                  $ref: '#/components/examples/ExampleFailedInfrastructureTask'
        "400":
          description: Invalid ID supplied or infrastructure not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                example:
                  $ref: "#/components/examples/ExampleQueryTaskErrorResponse"
  /delete:
    post:
      tags:
        - infrastructure
      summary: Deletes infrastructure
      description: >-
        Deletes infrastructure previously created in the given Deployment Location. If the request is accepted, a response should be returned immediately with a requestId to refer to the deletion process. 
        The completion of the request (regardless of whether it was successful or not) should be returned via Kafka (with a message of type InfrastructureTask from the schema)
      operationId: .delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeleteInfrastructureRequest"
            examples:
              response:
                $ref: '#/components/examples/ExampleDeleteInfrastructureRequest'
              async-response:
                $ref: "#/components/examples/ExampleInfrastructureTask"
              failed-async-response:
                $ref: "#/components/examples/ExampleFailedInfrastructureTask"
      responses:
        "202":
          description: Request accepted (async examples shown for information but they will never be returned via this API, they are returned on Kafka instead)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteInfrastructureResponse"
              examples:
                example:
                  $ref: '#/components/examples/ExampleDeleteInfrastructureResponse'
        "400":
          description: Invalid ID supplied or infrastructure not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                example:
                  $ref: "#/components/examples/ExampleDeleteInfrastructureErrorResponse"
  /find:
    post:
      tags:
        - infrastructure
      summary: Discover infrastructure
      description: >-
        Discover infrastructure already present in the VIM. The given Template describes the type of infrastructure to find, using the instanceName as the single input. 
        If the infrastructure can be found, an ID and outputs from the Template are returned. If the infrastructure cannot be found, an empty result is returned instead. 
      operationId: .find
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FindInfrastructureRequest"
            examples:
              example:
                $ref: '#/components/examples/ExampleFindInfrastructureRequest'
      responses:
        "200":
          description: Request handled. Check body to see if matching infrastructure has been found
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/FindInfrastructureResponse"
              examples:
                found-example:
                  $ref: "#/components/examples/ExampleFindInfrastructureResponse"
                not-found-example:
                  $ref: "#/components/examples/ExampleFindInfrastructureNotFoundResponse"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                example:
                  $ref: "#/components/examples/ExampleFindInfrastructureErrorResponse"
components:
  schemas:
    ErrorResponse:
      type: object
      properties: 
        localizedMessage: 
          type: string
          description: Summary of the error that occurred 
        status:
          type: integer
          description: HTTP status code
    CreateInfrastructureRequest:
      type: object
      properties:
        systemProperties:
          $ref: "#/components/schemas/Properties"
          description: properties generated by LM for this Resource (instance_id, instance_name)
        properties:
          $ref: "#/components/schemas/Properties"
          description: property values of the Resource
        deploymentLocation:
          $ref: "#/components/schemas/DeploymentLocation"
        template:
          type: string
          description: The contents of the Template as a string
        templateType:
          type: string
          description: Syntax of the Template (e.g. TOSCA/HEAT)
      required:
        - deploymentLocation
        - template
        - templateType
    Properties:
      type: object
      additionalProperties:
        type: object
        properties:
          value:
            type: string
          type:
            type: string
    CreateInfrastructureResponse:
      type: object
      properties:
        infrastructureId:
          type: string
          description: ID associated to the Infrastructure being created
        requestId:
          type: string
          description: ID associated to the request handling the creation of the Infrastructure
      required:
        - infrastructureId
        - requestId
    DeleteInfrastructureRequest:
      type: object
      properties:
        infrastructureId:
          type: string
          description: ID associated to the Infrastructure to delete
        deploymentLocation:
          $ref: "#/components/schemas/DeploymentLocation"
      required:
        - infrastructureId
        - deploymentLocation
    DeleteInfrastructureResponse:
      type: object
      properties:
        infrastructureId:
          type: string
          description: ID of the Infrastructure being deleted
        requestId:
          type: string
          description: ID associated to the request handling the deletion of the Infrastructure
      required:
        - infrastructureId
        - requestId
    FindInfrastructureRequest:
      type: object
      properties:
        instanceName:
          type: string
          description: name used to filter the Infrastructure to find
        deploymentLocation:
          $ref: "#/components/schemas/DeploymentLocation"
        template:
          type: string
          description: The contents of the Template as a string
        templateType:
          type: string
          description: Syntax of the Template (e.g. TOSCA/HEAT)
      required:
        - deploymentLocation
        - template
        - templateType
    FindInfrastructureResponse:
      type: object
      properties:
        result:
          description: Details of the result, if found. This will be empty if the Infrastructure was not found
          type: object
          properties:
            infrastructureId:
              type: string
              description: ID associated to the Infrastructure that was found
            outputs:
              type: object
              description: Output values requested on the Template of the request
    DeploymentLocation:
      type: object
      description: A Deployment Location to manage Infrastructure in
      properties:
        name:
          type: string
          description: Name of the deployment location
        type:
          type: string
          description: Type of location (Infrastructure Type)
        properties:
          type: object
          description: Properties used to provide access to the location
      required:
        - name
    InfrastructureTaskQuery:
      type: object
      properties:
        infrastructureId:
          type: string
          description: ID of the Infrastructure to check
        requestId:
          type: string
          description: ID of the create/delete request to check
        deploymentLocation:
          $ref: "#/components/schemas/DeploymentLocation"
      required:
        - infrastructureId
        - deploymentLocation
        - requestId
    InfrastructureTask:
      type: object
      properties:
        infrastructureId:
          type: string
          description: ID of the Infrastructure
        requestId:
          type: string
          description: ID of the request
        status:
          $ref: "#/components/schemas/InfrastructureTaskStatus"
        failureDetails:
          $ref: "#/components/schemas/FailureDetails"
        outputs:
          type: object
          description: Output values requested on the Template of the request
    InfrastructureTaskStatus:
      type: string
      description: Status of the Infrastructure create/delete task
      enum:
        - IN_PROGRESS
        - COMPLETE
        - FAILED
    FailureDetails:
      type: object
      description: Details of the failure (if the status is FAILED)
      properties:
        failureCode:
          $ref: "#/components/schemas/FailureCode"
        description:
          type: string
          description: Summary of the failure
    FailureCode:
      type: string
      description: Code assigned to the type of error
      enum:
        - RESOURCE_ALREADY_EXISTS
        - RESOURCE_NOT_FOUND
        - INFRASTRUCTURE_ERROR
        - INSUFFICIENT_CAPACITY
        - INTERNAL_ERROR
  examples:
    ExampleCreateInfrastructureErrorResponse:
      value:
        localizedMessage: Template included in request was invalid
        status: 400
    ExampleQueryTaskErrorResponse:
      value:
        localizedMessage: Infrastructure task not found with this ID
        status: 400
    ExampleDeleteInfrastructureErrorResponse:
      value:
        localizedMessage: Infrastructure not found with this ID
        status: 400
    ExampleFindInfrastructureErrorResponse:
      value:
        localizedMessage: Template included in request was invalid
        status: 400
    ExampleCreateInfrastructureRequest:
      value:
        deploymentLocation: 
          name: Example
          properties: {}
          type: Openstack
        properties:
          propA: valueA
          propB: valueB
        systemProperties:
          resourceId: be3870d2-891c-487e-9736-ca19e4741cf4
          requestId: a44ac9db-1625-4a9b-87c5-6e77bd88c08a
          resourceManagerId: brent
          deploymentLocation: TestLocation
          resourceType: resource::helloworld::1.0
        template: "Contents of template file as string"
        templateType: TOSCA
    ExampleCreateInfrastructureResponse:
      value:
        infrastructureId: c0ab65d2-e699-4630-9f63-c5d0acfe9a99
        requestId: 906415ef-e6c2-453b-b406-c1b3ea32cff8
    ExampleInfrastructureTaskQuery:
      value:
        deploymentLocation: 
          name: Example
          properties: {}
          type: Openstack
        infrastructureId: c0ab65d2-e699-4630-9f63-c5d0acfe9a99
        requestId: 906415ef-e6c2-453b-b406-c1b3ea32cff8
    ExampleInfrastructureTask:
      value:
        infrastructureId: c0ab65d2-e699-4630-9f63-c5d0acfe9a99
        requestId: 906415ef-e6c2-453b-b406-c1b3ea32cff8
        status: COMPLETE
        outputs:
          propA: valueA
          propB: valueB
    ExampleFailedInfrastructureTask:
      value:
        infrastructureId: c0ab65d2-e699-4630-9f63-c5d0acfe9a99
        requestId: 906415ef-e6c2-453b-b406-c1b3ea32cff8
        status: FAILED
        failureDetails:
          failureCode: INFRASTRUCTURE_ERROR
          description: The infrastructure failed
    ExampleDeleteInfrastructureRequest:
      value:
        deploymentLocation: 
          name: Example
          properties: {}
          type: Openstack
        infrastructureId: c0ab65d2-e699-4630-9f63-c5d0acfe9a99
    ExampleDeleteInfrastructureResponse:
      value:
        infrastructureId: c0ab65d2-e699-4630-9f63-c5d0acfe9a99
        requestId: 906415ef-e6c2-453b-b406-c1b3ea32cff8
    ExampleFindInfrastructureRequest:
      value:
        instanceName: NetworkA
        deploymentLocation: 
          name: Example
          properties: {}
          type: Openstack
        template: "Contents of template file as string"
        templateType: TOSCA
    ExampleFindInfrastructureResponse:
      value:
        result:
          infrastructureId: c0ab65d2-e699-4630-9f63-c5d0acfe9a99
          outputs:
            propA: valueA
            propB: valueB
    ExampleFindInfrastructureNotFoundResponse:
      value:
        result: null
