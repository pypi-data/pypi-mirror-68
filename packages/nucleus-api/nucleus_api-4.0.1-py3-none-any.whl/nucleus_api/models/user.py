# coding: utf-8

"""
    Nucleus API

    Nucleus text analytics APIs from SumUp Analytics. Example and documentation: https://www.sumup.ai/apis/#nucleus-documentation  # noqa: E501

    OpenAPI spec version: v4.0.1
    Contact: info@sumup.ai
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class User(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_email': 'str',
        'password': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'phone': 'int',
        'company': 'str',
        'title': 'str',
        'country': 'str'
    }

    attribute_map = {
        'user_email': 'user_email',
        'password': 'password',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'phone': 'phone',
        'company': 'company',
        'title': 'title',
        'country': 'country'
    }

    def __init__(self, user_email=None, password=None, first_name=None, last_name=None, phone=None, company=None, title=None, country=None):  # noqa: E501
        """User - a model defined in Swagger"""  # noqa: E501

        self._user_email = None
        self._password = None
        self._first_name = None
        self._last_name = None
        self._phone = None
        self._company = None
        self._title = None
        self._country = None
        self.discriminator = None

        self.user_email = user_email
        self.password = password
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if phone is not None:
            self.phone = phone
        if company is not None:
            self.company = company
        if title is not None:
            self.title = title
        if country is not None:
            self.country = country

    @property
    def user_email(self):
        """Gets the user_email of this User.  # noqa: E501

        Email of the user to register.  # noqa: E501

        :return: The user_email of this User.  # noqa: E501
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this User.

        Email of the user to register.  # noqa: E501

        :param user_email: The user_email of this User.  # noqa: E501
        :type: str
        """
        if user_email is None:
            raise ValueError("Invalid value for `user_email`, must not be `None`")  # noqa: E501

        self._user_email = user_email

    @property
    def password(self):
        """Gets the password of this User.  # noqa: E501

        Password of the user to register.  # noqa: E501

        :return: The password of this User.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this User.

        Password of the user to register.  # noqa: E501

        :param password: The password of this User.  # noqa: E501
        :type: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def first_name(self):
        """Gets the first_name of this User.  # noqa: E501

        First name of the user to register.'  # noqa: E501

        :return: The first_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this User.

        First name of the user to register.'  # noqa: E501

        :param first_name: The first_name of this User.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this User.  # noqa: E501

        Last name of the user to register.  # noqa: E501

        :return: The last_name of this User.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this User.

        Last name of the user to register.  # noqa: E501

        :param last_name: The last_name of this User.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def phone(self):
        """Gets the phone of this User.  # noqa: E501

        Phone number (int) of the user to register.  # noqa: E501

        :return: The phone of this User.  # noqa: E501
        :rtype: int
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this User.

        Phone number (int) of the user to register.  # noqa: E501

        :param phone: The phone of this User.  # noqa: E501
        :type: int
        """

        self._phone = phone

    @property
    def company(self):
        """Gets the company of this User.  # noqa: E501

        Name of the Company of the user.  # noqa: E501

        :return: The company of this User.  # noqa: E501
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this User.

        Name of the Company of the user.  # noqa: E501

        :param company: The company of this User.  # noqa: E501
        :type: str
        """

        self._company = company

    @property
    def title(self):
        """Gets the title of this User.  # noqa: E501

        Job title.  # noqa: E501

        :return: The title of this User.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this User.

        Job title.  # noqa: E501

        :param title: The title of this User.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def country(self):
        """Gets the country of this User.  # noqa: E501

        Country of origin.  # noqa: E501

        :return: The country of this User.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this User.

        Country of origin.  # noqa: E501

        :param country: The country of this User.  # noqa: E501
        :type: str
        """

        self._country = country

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(User, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
