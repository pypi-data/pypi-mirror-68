# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['pysketcher']

package_data = \
{'': ['*']}

install_requires = \
['matplotlib>=3.2.1,<4.0.0', 'numpy>=1.18.2,<2.0.0', 'scipy>=1.4.1,<2.0.0']

setup_kwargs = {
    'name': 'pysketcher',
    'version': '0.0.1',
    'description': 'Geometric Sketching Utility for Python',
    'long_description': '## Pysketcher\n\nTool for creating sketches of physics problems in terms of Python code.\n\nThis library is very heavily based on the thinking of Hans Petter Langtangen however\nvery little if any of his code remains. Significant deviations from his library are:\n\n1) Code is organised into multiple files and published on pypi.\n2) Shapes are immutable. This means functions such as `rotate` return modified\ncopies of the original shape, rather than altering the shape on which they are called.\n3) Angles are in radians not degrees.\n\n### Purpose\n\nPysketcher can typically be used to draw figures like\n\n<!-- <img src="doc/src/tut/fig-tut/wheel_on_inclined_plane.png" width=600> -->\n![](doc/src/tut/fig-tut/wheel_on_inclined_plane.png)\n\nSuch figures can easily be *interactively* made using a lot of drawing\nprograms.  A Pysketcher figure, however, is defined trough\ncomputer code. This gives a great advantage: geometric features can be\nparameterized in terms of variables. Geometric variations are then\ntrivially generated. Also, complicated figures can be built as a\nhierarchy of simpler elements.  The figure can easily be made to move\naccording to, e.g., a solution of a differential equation.\n\nHere is a very simple figure that illustrates how geometric features are\nparameterized by variables (H, R, L, etc.):\n\n<!-- <img src="doc/src/tut/fig-tut/vehicle0_dim.png" width=600> -->\n![](doc/src/tut/fig-tut/vehicle0_dim.png)\n\nOne can then quickly change parameters, below to\n`R=0.5; L=5; H=2` and `R=2; L=7; H=1`, and get new figures that would be\ntedious to draw manually in an interactive tool.\n\n<!-- <img src="doc/src/tut/fig-tut/vehicle_v23.png" width=800> -->\n![](doc/src/tut/fig-tut/vehicle_v23.png)\n\nAnother major feature of Pysketcher is the ability to let the\nsketch be dynamic and make an animation of the time evolution.\nHere is an example of a very simple vehicle on a bumpy road,\nwhere the solution of a differential equation (upper blue line) is fed\nback to the sketch to make a vertical displacement of the spring and\nother objects in the vehicle. [View animation](http://hplgit.github.io/bumpy/doc/src/mov-bumpy/m2_k1_5_b0_2/index.html) (the animation was created by\n[this Pysketcher script](https://github.com/hplgit/bumpy/blob/master/doc/src/fig-bumpy/bumpy_road_fig.py)).\n\n<!-- <img src="http://hplgit.github.io/bumpy/doc/src/mov-bumpy/m2_k1_5_b0_2/tmp_frame_0030.png" width=600> -->\n![](http://hplgit.github.io/bumpy/doc/src/mov-bumpy/m2_k1_5_b0_2/tmp_frame_0030.png)\n\n\n### Tutorial\n\nFor an introduction to Pysketcher, see the tutorial in [HTML](http://hplgit.github.io/pysketcher/doc/pub/tutorial/pysketcher.html), [Sphinx](http://hplgit.github.io/pysketcher/doc/pub/tutorial/html/index.html), or [PDF](http://hplgit/github.io/pysketcher/doc/pub/tutorial/pysketcher.pdf) format (or a simplified version of\nthe tutorial in Chapter 9 in [A Primer on Scientific Programming with Python](http://www.amazon.com/Scientific-Programming-Computational-Science-Engineering/dp/3642549586/ref=sr_1_2?s=books&ie=UTF8&qid=1407225588&sr=1-2&keywords=langtangen), 4th-5th edition, by H. P. Langtangen, Springer, 2014-2016).\n\n### Examples\n\nSee the `examples` directory for some examples beyond the more basic\nones in the tutorial.\nFor example, an elastic beam can be sketched as\n\n<!-- <img src="fig/beam2_3.png" width=600> -->\n![](fig/beam2_3.png)\n\nThe sketch was created by the program [`examples/beam2.py`](https://github.com/hplgit/pysketcher/tree/master/examples/beam2.py).\n\nHere is an illustration of the idea of numerical integration:\n\n<!-- <img src="fig/integral_noncomic_strip.png" width=800> -->\n![](fig/integral_noncomic_strip.png)\n\nAs shown in the figure-generating program [`examples/integral_comic_strip.py`](https://github.com/hplgit/pysketcher/tree/master/examples/integral_comic_strip.py),\nthis illustration can easily be turned into an [XKCD](http://xkcd.com) type of comic strip:\n\n<!-- <img src="fig/integral_comic_strip.png" width=800> -->\n![](fig/integral_comic_strip.png)\n\n### Technology\n\nPysketcher applies Matplotlib to make the drawings, but it should be quite\nstraightforward to replace the backend `MatplotlibDraw.py` by similar code\nutilizing TikZ or another plotting package.\n\nThe core of the Pysketcher software is a thin layer basically\nconstructing a tree structure of elements in the sketch. A lot of\nclasses are offered for different type of basic elements, such as\nCircle, Rectangle, Text, Text with arrow, Force, arbitrary curve, etc.\nComplicated figures can be created by sticking one figure into another\n(i.e., hierarchical building of figures by sticking one tree structure\ninto another).\n\n### Install\n\nPysketcher is pure Python code and\nworks with Python version 2 and 3. Just do the standard\n\n\n```\nTerminal> sudo python setup.py install\n```\n\nPysketcher demands installation of the following packages:\n\n * Matplotlib (`sudp pip install matplotlib`)\n * Future (`sudo pip install future`)\n * NumPy (`sudo pip install numpy`)\n\nThe `Spline` object in Pysketcher also requires SciPy (`sudo pip install scipy`).\n\n### Citation\n\nIf you use Pysketcher and want to cite it, you can either cite this\nweb site or the book\nthat has the original documentation of the tool.\n\nBibTeX format:\n\n\n```\n@book{Langtangen_Primer_2016,\n  title = {A Primer on Scientific Programming With {P}ython},\n  author = {H. P. Langtangen},\n  year = {2016},\n  publisher = {Springer},\n  edition = {Fifth},\n}\n\n@misc{Pysketcher,\n  title = {{P}ysketcher: {D}rawing tool for making sketches},\n  author = {H. P. Langtangen},\n  url = {https://github.com/hplgit/pysketcher},\n  key = {Pysketcher},\n  note = {\\url{https://github.com/hplgit/pysketcher}},\n  year = 2016,\n}\n```\n\nPublish format:\n\n\n```\n* books\n** A Primer on Scientific Programming With {P}ython\n   key:       Langtangen_Primer_2016\n   author:    H. P. Langtangen\n   year:      2016\n   publisher: Springer\n   status:    published\n   edition:   Fifth\n   entrytype: book\n* misc\n** {P}ysketcher: {D}rawing tool for making sketches\n   key:       Pysketcher\n   author:    H. P. Langtangen\n   url:       https://github.com/hplgit/pysketcher\n   status:    published\n   sortkey:   Pysketcher\n   note:      \\url{https://github.com/hplgit/pysketcher}\n   year:      2016\n```\n\n### History\n\nPysketcher was first constructed as a powerful educational example on\nobject-oriented programming for the book\n*A Primer on Scientific Programming With Python*, but the tool quickly\nbecame so useful for the author that it was further developed and\nheavily used for creating figures in other documents.\n\n',
    'author': 'Richard Vodden',
    'author_email': 'richard@vodden.com',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'https://github.com/rvodden/pysketcher',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
