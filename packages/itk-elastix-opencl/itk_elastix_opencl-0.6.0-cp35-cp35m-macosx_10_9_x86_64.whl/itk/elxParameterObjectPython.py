# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _elxParameterObjectPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_elxParameterObjectPython', [dirname(__file__)])
        except ImportError:
            import _elxParameterObjectPython
            return _elxParameterObjectPython
        if fp is not None:
            try:
                _mod = imp.load_module('_elxParameterObjectPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _elxParameterObjectPython = swig_import_helper()
    del swig_import_helper
else:
    import _elxParameterObjectPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
class mapstringvectorstring(object):
    """Proxy of C++ std::map<(std::string,std::vector<(std::string)>)> class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def iterator(self) -> "swig::SwigPyIterator *":
        """iterator(mapstringvectorstring self) -> SwigPyIterator"""
        return _elxParameterObjectPython.mapstringvectorstring_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self) -> "bool":
        """__nonzero__(mapstringvectorstring self) -> bool"""
        return _elxParameterObjectPython.mapstringvectorstring___nonzero__(self)


    def __bool__(self) -> "bool":
        """__bool__(mapstringvectorstring self) -> bool"""
        return _elxParameterObjectPython.mapstringvectorstring___bool__(self)


    def __len__(self) -> "std::map< std::string,std::vector< std::string > >::size_type":
        """__len__(mapstringvectorstring self) -> std::map< std::string,std::vector< std::string > >::size_type"""
        return _elxParameterObjectPython.mapstringvectorstring___len__(self)

    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key: 'std::map< std::string,std::vector< std::string > >::key_type const &') -> "std::map< std::string,std::vector< std::string > >::mapped_type const &":
        """__getitem__(mapstringvectorstring self, std::map< std::string,std::vector< std::string > >::key_type const & key) -> vectorstring"""
        return _elxParameterObjectPython.mapstringvectorstring___getitem__(self, key)


    def __delitem__(self, key: 'std::map< std::string,std::vector< std::string > >::key_type const &') -> "void":
        """__delitem__(mapstringvectorstring self, std::map< std::string,std::vector< std::string > >::key_type const & key)"""
        return _elxParameterObjectPython.mapstringvectorstring___delitem__(self, key)


    def has_key(self, key: 'std::map< std::string,std::vector< std::string > >::key_type const &') -> "bool":
        """has_key(mapstringvectorstring self, std::map< std::string,std::vector< std::string > >::key_type const & key) -> bool"""
        return _elxParameterObjectPython.mapstringvectorstring_has_key(self, key)


    def keys(self) -> "PyObject *":
        """keys(mapstringvectorstring self) -> PyObject *"""
        return _elxParameterObjectPython.mapstringvectorstring_keys(self)


    def values(self) -> "PyObject *":
        """values(mapstringvectorstring self) -> PyObject *"""
        return _elxParameterObjectPython.mapstringvectorstring_values(self)


    def items(self) -> "PyObject *":
        """items(mapstringvectorstring self) -> PyObject *"""
        return _elxParameterObjectPython.mapstringvectorstring_items(self)


    def __contains__(self, key: 'std::map< std::string,std::vector< std::string > >::key_type const &') -> "bool":
        """__contains__(mapstringvectorstring self, std::map< std::string,std::vector< std::string > >::key_type const & key) -> bool"""
        return _elxParameterObjectPython.mapstringvectorstring___contains__(self, key)


    def key_iterator(self) -> "swig::SwigPyIterator *":
        """key_iterator(mapstringvectorstring self) -> SwigPyIterator"""
        return _elxParameterObjectPython.mapstringvectorstring_key_iterator(self)


    def value_iterator(self) -> "swig::SwigPyIterator *":
        """value_iterator(mapstringvectorstring self) -> SwigPyIterator"""
        return _elxParameterObjectPython.mapstringvectorstring_value_iterator(self)


    def __setitem__(self, *args) -> "void":
        """
        __setitem__(mapstringvectorstring self, std::map< std::string,std::vector< std::string > >::key_type const & key)
        __setitem__(mapstringvectorstring self, std::map< std::string,std::vector< std::string > >::key_type const & key, vectorstring x)
        """
        return _elxParameterObjectPython.mapstringvectorstring___setitem__(self, *args)


    def asdict(self) -> "PyObject *":
        """asdict(mapstringvectorstring self) -> PyObject *"""
        return _elxParameterObjectPython.mapstringvectorstring_asdict(self)


    def __init__(self, *args):
        """
        __init__(std::map<(std::string,std::vector<(std::string)>)> self, std::less< std::string > const & arg2) -> mapstringvectorstring
        __init__(std::map<(std::string,std::vector<(std::string)>)> self) -> mapstringvectorstring
        __init__(std::map<(std::string,std::vector<(std::string)>)> self, mapstringvectorstring arg2) -> mapstringvectorstring
        """
        _elxParameterObjectPython.mapstringvectorstring_swiginit(self, _elxParameterObjectPython.new_mapstringvectorstring(*args))

    def empty(self) -> "bool":
        """empty(mapstringvectorstring self) -> bool"""
        return _elxParameterObjectPython.mapstringvectorstring_empty(self)


    def size(self) -> "std::map< std::string,std::vector< std::string > >::size_type":
        """size(mapstringvectorstring self) -> std::map< std::string,std::vector< std::string > >::size_type"""
        return _elxParameterObjectPython.mapstringvectorstring_size(self)


    def swap(self, v: 'mapstringvectorstring') -> "void":
        """swap(mapstringvectorstring self, mapstringvectorstring v)"""
        return _elxParameterObjectPython.mapstringvectorstring_swap(self, v)


    def begin(self) -> "std::map< std::string,std::vector< std::string > >::iterator":
        """begin(mapstringvectorstring self) -> std::map< std::string,std::vector< std::string > >::iterator"""
        return _elxParameterObjectPython.mapstringvectorstring_begin(self)


    def end(self) -> "std::map< std::string,std::vector< std::string > >::iterator":
        """end(mapstringvectorstring self) -> std::map< std::string,std::vector< std::string > >::iterator"""
        return _elxParameterObjectPython.mapstringvectorstring_end(self)


    def rbegin(self) -> "std::map< std::string,std::vector< std::string > >::reverse_iterator":
        """rbegin(mapstringvectorstring self) -> std::map< std::string,std::vector< std::string > >::reverse_iterator"""
        return _elxParameterObjectPython.mapstringvectorstring_rbegin(self)


    def rend(self) -> "std::map< std::string,std::vector< std::string > >::reverse_iterator":
        """rend(mapstringvectorstring self) -> std::map< std::string,std::vector< std::string > >::reverse_iterator"""
        return _elxParameterObjectPython.mapstringvectorstring_rend(self)


    def clear(self) -> "void":
        """clear(mapstringvectorstring self)"""
        return _elxParameterObjectPython.mapstringvectorstring_clear(self)


    def get_allocator(self) -> "std::map< std::string,std::vector< std::string > >::allocator_type":
        """get_allocator(mapstringvectorstring self) -> std::map< std::string,std::vector< std::string > >::allocator_type"""
        return _elxParameterObjectPython.mapstringvectorstring_get_allocator(self)


    def count(self, x: 'std::map< std::string,std::vector< std::string > >::key_type const &') -> "std::map< std::string,std::vector< std::string > >::size_type":
        """count(mapstringvectorstring self, std::map< std::string,std::vector< std::string > >::key_type const & x) -> std::map< std::string,std::vector< std::string > >::size_type"""
        return _elxParameterObjectPython.mapstringvectorstring_count(self, x)


    def erase(self, *args) -> "void":
        """
        erase(mapstringvectorstring self, std::map< std::string,std::vector< std::string > >::key_type const & x) -> std::map< std::string,std::vector< std::string > >::size_type
        erase(mapstringvectorstring self, std::map< std::string,std::vector< std::string > >::iterator position)
        erase(mapstringvectorstring self, std::map< std::string,std::vector< std::string > >::iterator first, std::map< std::string,std::vector< std::string > >::iterator last)
        """
        return _elxParameterObjectPython.mapstringvectorstring_erase(self, *args)


    def find(self, x: 'std::map< std::string,std::vector< std::string > >::key_type const &') -> "std::map< std::string,std::vector< std::string > >::iterator":
        """find(mapstringvectorstring self, std::map< std::string,std::vector< std::string > >::key_type const & x) -> std::map< std::string,std::vector< std::string > >::iterator"""
        return _elxParameterObjectPython.mapstringvectorstring_find(self, x)


    def lower_bound(self, x: 'std::map< std::string,std::vector< std::string > >::key_type const &') -> "std::map< std::string,std::vector< std::string > >::iterator":
        """lower_bound(mapstringvectorstring self, std::map< std::string,std::vector< std::string > >::key_type const & x) -> std::map< std::string,std::vector< std::string > >::iterator"""
        return _elxParameterObjectPython.mapstringvectorstring_lower_bound(self, x)


    def upper_bound(self, x: 'std::map< std::string,std::vector< std::string > >::key_type const &') -> "std::map< std::string,std::vector< std::string > >::iterator":
        """upper_bound(mapstringvectorstring self, std::map< std::string,std::vector< std::string > >::key_type const & x) -> std::map< std::string,std::vector< std::string > >::iterator"""
        return _elxParameterObjectPython.mapstringvectorstring_upper_bound(self, x)

    __swig_destroy__ = _elxParameterObjectPython.delete_mapstringvectorstring
mapstringvectorstring.iterator = new_instancemethod(_elxParameterObjectPython.mapstringvectorstring_iterator, None, mapstringvectorstring)
mapstringvectorstring.__nonzero__ = new_instancemethod(_elxParameterObjectPython.mapstringvectorstring___nonzero__, None, mapstringvectorstring)
mapstringvectorstring.__bool__ = new_instancemethod(_elxParameterObjectPython.mapstringvectorstring___bool__, None, mapstringvectorstring)
mapstringvectorstring.__len__ = new_instancemethod(_elxParameterObjectPython.mapstringvectorstring___len__, None, mapstringvectorstring)
mapstringvectorstring.__getitem__ = new_instancemethod(_elxParameterObjectPython.mapstringvectorstring___getitem__, None, mapstringvectorstring)
mapstringvectorstring.__delitem__ = new_instancemethod(_elxParameterObjectPython.mapstringvectorstring___delitem__, None, mapstringvectorstring)
mapstringvectorstring.has_key = new_instancemethod(_elxParameterObjectPython.mapstringvectorstring_has_key, None, mapstringvectorstring)
mapstringvectorstring.keys = new_instancemethod(_elxParameterObjectPython.mapstringvectorstring_keys, None, mapstringvectorstring)
mapstringvectorstring.values = new_instancemethod(_elxParameterObjectPython.mapstringvectorstring_values, None, mapstringvectorstring)
mapstringvectorstring.items = new_instancemethod(_elxParameterObjectPython.mapstringvectorstring_items, None, mapstringvectorstring)
mapstringvectorstring.__contains__ = new_instancemethod(_elxParameterObjectPython.mapstringvectorstring___contains__, None, mapstringvectorstring)
mapstringvectorstring.key_iterator = new_instancemethod(_elxParameterObjectPython.mapstringvectorstring_key_iterator, None, mapstringvectorstring)
mapstringvectorstring.value_iterator = new_instancemethod(_elxParameterObjectPython.mapstringvectorstring_value_iterator, None, mapstringvectorstring)
mapstringvectorstring.__setitem__ = new_instancemethod(_elxParameterObjectPython.mapstringvectorstring___setitem__, None, mapstringvectorstring)
mapstringvectorstring.asdict = new_instancemethod(_elxParameterObjectPython.mapstringvectorstring_asdict, None, mapstringvectorstring)
mapstringvectorstring.empty = new_instancemethod(_elxParameterObjectPython.mapstringvectorstring_empty, None, mapstringvectorstring)
mapstringvectorstring.size = new_instancemethod(_elxParameterObjectPython.mapstringvectorstring_size, None, mapstringvectorstring)
mapstringvectorstring.swap = new_instancemethod(_elxParameterObjectPython.mapstringvectorstring_swap, None, mapstringvectorstring)
mapstringvectorstring.begin = new_instancemethod(_elxParameterObjectPython.mapstringvectorstring_begin, None, mapstringvectorstring)
mapstringvectorstring.end = new_instancemethod(_elxParameterObjectPython.mapstringvectorstring_end, None, mapstringvectorstring)
mapstringvectorstring.rbegin = new_instancemethod(_elxParameterObjectPython.mapstringvectorstring_rbegin, None, mapstringvectorstring)
mapstringvectorstring.rend = new_instancemethod(_elxParameterObjectPython.mapstringvectorstring_rend, None, mapstringvectorstring)
mapstringvectorstring.clear = new_instancemethod(_elxParameterObjectPython.mapstringvectorstring_clear, None, mapstringvectorstring)
mapstringvectorstring.get_allocator = new_instancemethod(_elxParameterObjectPython.mapstringvectorstring_get_allocator, None, mapstringvectorstring)
mapstringvectorstring.count = new_instancemethod(_elxParameterObjectPython.mapstringvectorstring_count, None, mapstringvectorstring)
mapstringvectorstring.erase = new_instancemethod(_elxParameterObjectPython.mapstringvectorstring_erase, None, mapstringvectorstring)
mapstringvectorstring.find = new_instancemethod(_elxParameterObjectPython.mapstringvectorstring_find, None, mapstringvectorstring)
mapstringvectorstring.lower_bound = new_instancemethod(_elxParameterObjectPython.mapstringvectorstring_lower_bound, None, mapstringvectorstring)
mapstringvectorstring.upper_bound = new_instancemethod(_elxParameterObjectPython.mapstringvectorstring_upper_bound, None, mapstringvectorstring)
mapstringvectorstring_swigregister = _elxParameterObjectPython.mapstringvectorstring_swigregister
mapstringvectorstring_swigregister(mapstringvectorstring)


def elastixParameterObject_New():
  return elastixParameterObject.New()

class elastixParameterObject(ITKCommonBasePython.itkDataObject):
    """Proxy of C++ elastixParameterObject class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __New_orig__() -> "elastixParameterObject_Pointer":
        """__New_orig__() -> elastixParameterObject_Pointer"""
        return _elxParameterObjectPython.elastixParameterObject___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)

    def Clone(self) -> "elastixParameterObject_Pointer":
        """Clone(elastixParameterObject self) -> elastixParameterObject_Pointer"""
        return _elxParameterObjectPython.elastixParameterObject_Clone(self)


    def SetParameterMap(self, *args) -> "void":
        """
        SetParameterMap(elastixParameterObject self, mapstringvectorstring parameterMap)
        SetParameterMap(elastixParameterObject self, unsigned int const & index, mapstringvectorstring parameterMap)
        SetParameterMap(elastixParameterObject self, std::vector< std::map< std::string,std::vector< std::string,std::allocator< std::string > >,std::less< std::string >,std::allocator< std::pair< std::string const,std::vector< std::string,std::allocator< std::string > > > > >,std::allocator< std::map< std::string,std::vector< std::string,std::allocator< std::string > >,std::less< std::string >,std::allocator< std::pair< std::string const,std::vector< std::string,std::allocator< std::string > > > > > > > const & parameterMap)
        """
        return _elxParameterObjectPython.elastixParameterObject_SetParameterMap(self, *args)


    def AddParameterMap(self, parameterMap: 'mapstringvectorstring') -> "void":
        """AddParameterMap(elastixParameterObject self, mapstringvectorstring parameterMap)"""
        return _elxParameterObjectPython.elastixParameterObject_AddParameterMap(self, parameterMap)


    def GetParameterMap(self, *args) -> "std::vector< std::map< std::string,std::vector< std::string,std::allocator< std::string > >,std::less< std::string >,std::allocator< std::pair< std::string const,std::vector< std::string,std::allocator< std::string > > > > >,std::allocator< std::map< std::string,std::vector< std::string,std::allocator< std::string > >,std::less< std::string >,std::allocator< std::pair< std::string const,std::vector< std::string,std::allocator< std::string > > > > > > > const &":
        """
        GetParameterMap(elastixParameterObject self, unsigned int const & index) -> mapstringvectorstring
        GetParameterMap(elastixParameterObject self) -> std::vector< std::map< std::string,std::vector< std::string,std::allocator< std::string > >,std::less< std::string >,std::allocator< std::pair< std::string const,std::vector< std::string,std::allocator< std::string > > > > >,std::allocator< std::map< std::string,std::vector< std::string,std::allocator< std::string > >,std::less< std::string >,std::allocator< std::pair< std::string const,std::vector< std::string,std::allocator< std::string > > > > > > > const &
        """
        return _elxParameterObjectPython.elastixParameterObject_GetParameterMap(self, *args)


    def GetNumberOfParameterMaps(self) -> "unsigned int":
        """GetNumberOfParameterMaps(elastixParameterObject self) -> unsigned int"""
        return _elxParameterObjectPython.elastixParameterObject_GetNumberOfParameterMaps(self)


    def SetParameter(self, *args) -> "void":
        """
        SetParameter(elastixParameterObject self, unsigned int const & index, std::string const & key, std::string const & value)
        SetParameter(elastixParameterObject self, unsigned int const & index, std::string const & key, vectorstring value)
        SetParameter(elastixParameterObject self, std::string const & key, std::string const & value)
        SetParameter(elastixParameterObject self, std::string const & key, vectorstring value)
        """
        return _elxParameterObjectPython.elastixParameterObject_SetParameter(self, *args)


    def GetParameter(self, index: 'unsigned int const &', key: 'std::string const &') -> "std::vector< std::string,std::allocator< std::string > > const &":
        """GetParameter(elastixParameterObject self, unsigned int const & index, std::string const & key) -> vectorstring"""
        return _elxParameterObjectPython.elastixParameterObject_GetParameter(self, index, key)


    def RemoveParameter(self, *args) -> "void":
        """
        RemoveParameter(elastixParameterObject self, unsigned int const & index, std::string const & key)
        RemoveParameter(elastixParameterObject self, std::string const & key)
        """
        return _elxParameterObjectPython.elastixParameterObject_RemoveParameter(self, *args)


    def ReadParameterFile(self, *args) -> "void":
        """
        ReadParameterFile(elastixParameterObject self, std::string const & parameterFileName)
        ReadParameterFile(elastixParameterObject self, vectorstring parameterFileNameVector)
        """
        return _elxParameterObjectPython.elastixParameterObject_ReadParameterFile(self, *args)


    def AddParameterFile(self, parameterFileName: 'std::string const &') -> "void":
        """AddParameterFile(elastixParameterObject self, std::string const & parameterFileName)"""
        return _elxParameterObjectPython.elastixParameterObject_AddParameterFile(self, parameterFileName)


    def WriteParameterFile(self, *args) -> "void":
        """
        WriteParameterFile(elastixParameterObject self)
        WriteParameterFile(elastixParameterObject self, mapstringvectorstring parameterMap, std::string const & parameterFileName)
        WriteParameterFile(elastixParameterObject self, std::string const & parameterFileName)
        WriteParameterFile(elastixParameterObject self, vectorstring parameterFileNameVector)
        WriteParameterFile(elastixParameterObject self, std::vector< std::map< std::string,std::vector< std::string,std::allocator< std::string > >,std::less< std::string >,std::allocator< std::pair< std::string const,std::vector< std::string,std::allocator< std::string > > > > >,std::allocator< std::map< std::string,std::vector< std::string,std::allocator< std::string > >,std::less< std::string >,std::allocator< std::pair< std::string const,std::vector< std::string,std::allocator< std::string > > > > > > > const & parameterMapVector, vectorstring parameterFileNameVector)
        """
        return _elxParameterObjectPython.elastixParameterObject_WriteParameterFile(self, *args)


    def GetDefaultParameterMap(transformName: 'std::string const &', numberOfResolutions: 'unsigned int const &'=4, finalGridSpacingInPhysicalUnits: 'double const &'=10.) -> "std::map< std::string,std::vector< std::string,std::allocator< std::string > >,std::less< std::string >,std::allocator< std::pair< std::string const,std::vector< std::string,std::allocator< std::string > > > > > const":
        """
        GetDefaultParameterMap(std::string const & transformName, unsigned int const & numberOfResolutions=4, double const & finalGridSpacingInPhysicalUnits=10.) -> mapstringvectorstring
        GetDefaultParameterMap(std::string const & transformName, unsigned int const & numberOfResolutions=4) -> mapstringvectorstring
        GetDefaultParameterMap(std::string const & transformName) -> mapstringvectorstring
        """
        return _elxParameterObjectPython.elastixParameterObject_GetDefaultParameterMap(transformName, numberOfResolutions, finalGridSpacingInPhysicalUnits)

    GetDefaultParameterMap = staticmethod(GetDefaultParameterMap)

    def __init__(self):
        """__init__(elastixParameterObject self) -> elastixParameterObject"""
        _elxParameterObjectPython.elastixParameterObject_swiginit(self, _elxParameterObjectPython.new_elastixParameterObject())
    __swig_destroy__ = _elxParameterObjectPython.delete_elastixParameterObject

    def cast(obj: 'itkLightObject') -> "elastixParameterObject *":
        """cast(itkLightObject obj) -> elastixParameterObject"""
        return _elxParameterObjectPython.elastixParameterObject_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> elastixParameterObject

        Create a new object of the class elastixParameterObject and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          elastixParameterObject.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = elastixParameterObject.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = elastixParameterObject.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

elastixParameterObject.Clone = new_instancemethod(_elxParameterObjectPython.elastixParameterObject_Clone, None, elastixParameterObject)
elastixParameterObject.SetParameterMap = new_instancemethod(_elxParameterObjectPython.elastixParameterObject_SetParameterMap, None, elastixParameterObject)
elastixParameterObject.AddParameterMap = new_instancemethod(_elxParameterObjectPython.elastixParameterObject_AddParameterMap, None, elastixParameterObject)
elastixParameterObject.GetParameterMap = new_instancemethod(_elxParameterObjectPython.elastixParameterObject_GetParameterMap, None, elastixParameterObject)
elastixParameterObject.GetNumberOfParameterMaps = new_instancemethod(_elxParameterObjectPython.elastixParameterObject_GetNumberOfParameterMaps, None, elastixParameterObject)
elastixParameterObject.SetParameter = new_instancemethod(_elxParameterObjectPython.elastixParameterObject_SetParameter, None, elastixParameterObject)
elastixParameterObject.GetParameter = new_instancemethod(_elxParameterObjectPython.elastixParameterObject_GetParameter, None, elastixParameterObject)
elastixParameterObject.RemoveParameter = new_instancemethod(_elxParameterObjectPython.elastixParameterObject_RemoveParameter, None, elastixParameterObject)
elastixParameterObject.ReadParameterFile = new_instancemethod(_elxParameterObjectPython.elastixParameterObject_ReadParameterFile, None, elastixParameterObject)
elastixParameterObject.AddParameterFile = new_instancemethod(_elxParameterObjectPython.elastixParameterObject_AddParameterFile, None, elastixParameterObject)
elastixParameterObject.WriteParameterFile = new_instancemethod(_elxParameterObjectPython.elastixParameterObject_WriteParameterFile, None, elastixParameterObject)
elastixParameterObject_swigregister = _elxParameterObjectPython.elastixParameterObject_swigregister
elastixParameterObject_swigregister(elastixParameterObject)

def elastixParameterObject___New_orig__() -> "elastixParameterObject_Pointer":
    """elastixParameterObject___New_orig__() -> elastixParameterObject_Pointer"""
    return _elxParameterObjectPython.elastixParameterObject___New_orig__()

def elastixParameterObject_GetDefaultParameterMap(transformName: 'std::string const &', numberOfResolutions: 'unsigned int const &'=4, finalGridSpacingInPhysicalUnits: 'double const &'=10.) -> "std::map< std::string,std::vector< std::string,std::allocator< std::string > >,std::less< std::string >,std::allocator< std::pair< std::string const,std::vector< std::string,std::allocator< std::string > > > > > const":
    """
    GetDefaultParameterMap(std::string const & transformName, unsigned int const & numberOfResolutions=4, double const & finalGridSpacingInPhysicalUnits=10.) -> mapstringvectorstring
    GetDefaultParameterMap(std::string const & transformName, unsigned int const & numberOfResolutions=4) -> mapstringvectorstring
    elastixParameterObject_GetDefaultParameterMap(std::string const & transformName) -> mapstringvectorstring
    """
    return _elxParameterObjectPython.elastixParameterObject_GetDefaultParameterMap(transformName, numberOfResolutions, finalGridSpacingInPhysicalUnits)

def elastixParameterObject_cast(obj: 'itkLightObject') -> "elastixParameterObject *":
    """elastixParameterObject_cast(itkLightObject obj) -> elastixParameterObject"""
    return _elxParameterObjectPython.elastixParameterObject_cast(obj)



