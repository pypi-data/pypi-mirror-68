{"version":3,"file":"static/webpack/static/development/pages/high-dimensional.js.de8f44bd0e43fc0895f4.hot-update.js","sources":["webpack:///./components/ScatterChart.tsx"],"sourcesContent":["import React, {FunctionComponent, useEffect, useMemo} from 'react';\nimport {backgroundColor, WithStyled, position, primaryColor, size} from '~/utils/style';\n\nimport GridLoader from 'react-spinners/GridLoader';\nimport styled from 'styled-components';\nimport useECharts from '~/hooks/useECharts';\n\nconst Wrapper = styled.div`\n    position: relative;\n    background-color: ${backgroundColor};\n\n    > .echarts {\n        height: 100%;\n    }\n\n    > .loading {\n        ${position('absolute', 0, null, null, 0)}\n        ${size('100%')}\n        display: flex;\n        justify-content: center;\n        align-items: center;\n    }\n`;\n\nconst SYMBOL_SIZE = 12;\n\nconst options2D = {\n    xAxis: {},\n    yAxis: {},\n    toolbox: {\n        show: true,\n        showTitle: false,\n        itemSize: 0,\n\n        feature: {\n            dataZoom: {},\n            restore: {},\n            saveAsImage: {}\n        }\n    }\n};\n\nconst options3D = {\n    grid3D: {},\n    xAxis3D: {},\n    yAxis3D: {},\n    zAxis3D: {}\n};\n\nconst series2D = {\n    symbolSize: SYMBOL_SIZE,\n    type: 'scatter'\n};\n\nconst series3D = {\n    symbolSize: SYMBOL_SIZE,\n    type: 'scatter3D'\n};\n\ntype ScatterChartProps = {\n    loading?: boolean;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    data?: Record<string, any>[];\n    gl?: boolean;\n};\n\nconst ScatterChart: FunctionComponent<ScatterChartProps & WithStyled> = ({data, loading, gl, className}) => {\n    const {ref, echart} = useECharts<HTMLDivElement>({\n        loading,\n        gl\n    });\n\n    const chartOptions = useMemo(\n        () => ({\n            ...(gl ? options3D : options2D),\n            series:\n                data?.map(series => ({\n                    ...(gl ? series3D : series2D),\n                    ...series\n                })) ?? []\n        }),\n        [gl, data]\n    );\n\n    useEffect(() => {\n        if (process.browser) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            echart?.current?.setOption(chartOptions as any, {notMerge: true});\n        }\n    }, [chartOptions, echart]);\n\n    return (\n        <Wrapper className={className}>\n            {!echart && (\n                <div className=\"loading\">\n                    <GridLoader color={primaryColor} size=\"10px\" />\n                </div>\n            )}\n            <div className=\"echarts\" ref={ref}></div>\n        </Wrapper>\n    );\n};\n\nexport default ScatterChart;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAiBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAHA;AALA;AAHA;AAgBA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAFA;AACA;AAWA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAFA;AADA;AAAA;AACA;AAKA;AACA;AACA;AADA;AAEA;AACA;AAAA;AAHA;AAAA;AAWA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;;AA1CA;AAEA;AACA;;AAwCA;;;;A","sourceRoot":""}