{"version":3,"file":"static/webpack/static/development/pages/_app.js.aaba621c9355980b9d52.hot-update.js","sources":["webpack:///./components/Navbar.tsx"],"sourcesContent":["import {Link, config, i18n, useTranslation} from '~/utils/i18n';\nimport React, {FunctionComponent, useMemo} from 'react';\nimport {\n    border,\n    navbarBackgroundColor,\n    navbarHighlightColor,\n    navbarHoverBackgroundColor,\n    rem,\n    size,\n    textInvertColor,\n    transitionProps\n} from '~/utils/style';\n\nimport Icon from '~/components/Icon';\nimport {InitConfig} from '@visualdl/i18n';\nimport Language from '~/components/Language';\nimport ee from '~/utils/event';\nimport intersection from 'lodash/intersection';\nimport styled from 'styled-components';\nimport {useRouter} from 'next/router';\n\nconst buildNavItems = process.env.NAV_ITEMS;\nconst allNavItems = ['scalars', 'samples', 'graphs', 'high-dimensional'];\nconst navItems = buildNavItems\n    ? intersection(\n          buildNavItems.split(',').map(item => item.trim()),\n          allNavItems\n      )\n    : allNavItems;\n\nconst Nav = styled.nav`\n    background-color: ${navbarBackgroundColor};\n    color: ${textInvertColor};\n    ${size('100%')}\n    padding: 0 ${rem(20)};\n    display: flex;\n    justify-content: space-between;\n    align-items: stretch;\n\n    > .left {\n        display: flex;\n        justify-content: flex-start;\n        align-items: center;\n    }\n\n    > .right {\n        display: flex;\n        justify-content: flex-end;\n        align-items: center;\n        margin-right: -${rem(20)};\n    }\n`;\n\nconst Logo = styled.a`\n    font-size: ${rem(20)};\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif,\n        'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';\n    font-weight: 600;\n    margin-right: ${rem(40)};\n\n    > img {\n        ${size(rem(31), rem(98))}\n        vertical-align: middle;\n        margin-right: ${rem(8)};\n    }\n\n    > span {\n        vertical-align: middle;\n    }\n`;\n\nconst NavItem = styled.a<{active?: boolean}>`\n    padding: 0 ${rem(20)};\n    height: 100%;\n    display: inline-flex;\n    justify-content: center;\n    align-items: center;\n    background-color: ${navbarBackgroundColor};\n    cursor: pointer;\n    ${transitionProps('background-color')}\n\n    &:hover {\n        background-color: ${navbarHoverBackgroundColor};\n    }\n\n    > .nav-text {\n        padding: ${rem(10)} 0 ${rem(7)};\n        ${props => border('bottom', rem(3), 'solid', props.active ? navbarHighlightColor : 'transparent')}\n        ${transitionProps('border-bottom')}\n        text-transform: uppercase;\n    }\n`;\n\nconst changeLanguage = () => {\n    const {language} = i18n;\n    const {allLanguages} = config;\n    const index = allLanguages.indexOf(language);\n    const nextLanguage = index < 0 || index >= allLanguages.length - 1 ? allLanguages[0] : allLanguages[index + 1];\n    i18n.changeLanguage(nextLanguage);\n};\n\nconst Navbar: FunctionComponent = () => {\n    const {t, i18n} = useTranslation('common');\n    const {pathname} = useRouter();\n\n    const indexUrl = useMemo(() => {\n        // TODO: fix type\n        const subpath = (i18n.options as InitConfig).localeSubpaths?.[i18n.language];\n        let path = process.env.PUBLIC_PATH ?? '';\n        if (subpath) {\n            path += `/${subpath}`;\n        }\n        return `${path}/index`;\n    }, [i18n]);\n\n    return (\n        <Nav>\n            <div className=\"left\">\n                <Logo href={indexUrl}>\n                    <img alt=\"PaddlePaddle\" src={`${process.env.PUBLIC_PATH}/images/logo.svg`} />\n                    <span>VisualDL</span>\n                </Logo>\n                {navItems.map(name => {\n                    const href = `/${name}`;\n                    return (\n                        // https://nextjs.org/docs/api-reference/next/link#if-the-child-is-a-custom-component-that-wraps-an-a-tag\n                        <Link href={href} key={name} passHref>\n                            <NavItem active={pathname === href}>\n                                <span className=\"nav-text\">{t(name)}</span>\n                            </NavItem>\n                        </Link>\n                    );\n                })}\n            </div>\n            <div className=\"right\">\n                <NavItem onClick={changeLanguage}>\n                    <Language />\n                </NavItem>\n                <NavItem onClick={() => ee.emit('refresh-running')}>\n                    <Icon type=\"refresh\" />\n                </NavItem>\n            </div>\n        </Nav>\n    );\n};\n\nexport default Navbar;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAWA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAKA;AAAA;AAAA;AAAA;AAuBA;AAAA;AAAA;AAAA;AAkBA;AAAA;AAAA;AAAA;AAgBA;AAAA;AACA;AAKA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AAGA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAQA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;;;;A","sourceRoot":""}