"""Phix removal pipeline

Author: Thomas Cokelaer
Affiliation: Institut Pasteur @ 2018

This pipeline is part of Sequana software (sequana.readthedocs.io)



module load bcl2fastq/2.20.0


http://emea.support.illumina.com/downloads/bcl2fastq-conversion-software-v2-20.html?langsel=/fr/
"""
from sequana import snaketools as sm
import os
import json

# This must be defined before the include
configfile: "config.yaml"

# A convenient manager
manager = sm.PipelineManager("multitax", config)
manager.setup(globals(), mode="warning")

import matplotlib
matplotlib.use('Agg')

# an alias
cfg = config['bcl2fastq']
outdir = os.path.abspath(cfg["output_directory"])

if cfg["sample_sheet_file"].strip() != "":
    if os.path.exists(cfg['sample_sheet_file']) is False:
        raise IOError("Sample sheet {} does not exist".format(cfg['sample_sheet_file']))


rule all:
    input:
        outdir + "/Stats/summary.txt",
        outdir + "/undetermined_barcodes.csv",
        outdir + "/barcodes.png",
        outdir + "/summary.png",


rule plot_unknown_barcodes:
    input: outdir + "/Stats/Stats.json"
    output:
        csv=outdir + "/undetermined_barcodes.csv",
        png=outdir + "/barcodes.png"
    run:
        from sequana.demultiplex import StatsFile
        s = StatsFile(input[0])
        df = s.plot_unknown_barcodes()
        from pylab import savefig
        savefig(output.png, dpi=200)
        df.to_csv(output.csv)


rule bcl2fastq:
    input:
    output:
        outdir + "/Stats/Stats.json",
    params:
        indir= config["input_directory"],
        outdir= outdir,
        sample_sheet=cfg['sample_sheet_file'],
        barcode_mismatch=cfg['barcode_mismatch']
    threads: cfg['threads']
    run:

        cmd = "bcl2fastq -p {threads} --barcode-mismatches {params.barcode_mismatch}"
        #cmd += " --input-dir {}/Data/Intensities/BaseCalls".format(params.indir)
        cmd += " --runfolder-dir {}".format(params.indir)
        cmd += " --intensities-dir {}/Data/Intensities".format(params.indir)
        if params.sample_sheet.strip()!= "":
            cmd += " --sample-sheet {}".format(params.sample_sheet)
        cmd += " --output-dir {}".format(os.path.abspath(params.outdir))

        if cfg['ignore_missing_controls']:
            cmd += " --ignore-missing-controls "
        if cfg['ignore_missing_bcls']:
            cmd += " --ignore-missing-bcls "
        if cfg['no_bgzf_compression']:
            cmd += " --no-bgzf-compression "

        if cfg['merge_all_lanes']:
            cmd += " --no-lane-splitting "

        if cfg['write_fastq_reverse_complement']:
            cmd += " --write-fastq-reverse-complement"

        cmd += cfg['options']

        shell(cmd)


rule plot_summary:
    input: outdir + "/Stats/Stats.json"
    output:
        summary=outdir + "/Stats/summary.txt",
        barplot=outdir + "/summary.png"
    run:
        from sequana.demultiplex import StatsFile
        s = StatsFile(input[0])
        s.barplot_summary(filename=output.barplot)
        # save summary at the end because barplot output is not set.
        s.to_summary_reads(output.summary)

#__rulegrpah__input == maanger.snakefile
#__rulegraph__output = "rulegraph/rulegraph.svg"
#include: sm.modules['rulegraph']
#localrules: rulegraph


onsuccess:
    shell("chmod -R g+w .")
    from sequana.snaketools import OnSuccessCleaner
    sc = OnSuccessCleaner()
    sc.files_to_remove.append("demultiplex.rules")
    toremove = " slurm*out demultiplex.rules config.yaml stats.txt "

    sc.files_to_remove.append(toremove)
    sc.add_makefile()


    from sequana.modules_report.summary import SummaryModule
    intro = """<h2>Sequana_demultiplex pipeline</h2>
    
    <h2>summary</h2>
    <img style="height:50%;width:50%" src="barcodes.png"></img><br>
    <hr>
    <img style="height:50%;width:50%" src="summary.png"></img><br>
    """

    data = {"inputs":cfg["input_directory"], 
            "outputs": outdir, "html":None,
            "snakefile": ".sequana/" + manager.name + ".rules",
            "config": "config.yaml", "stats": "stats.txt", 
            #"rulegraph": __rulegraph__output,
            #"requirements": "inputs/requirements.txt"
            }
    s = SummaryModule(data, intro=intro)




    print("Once done, please clean up the directory using\n'make clean'")
