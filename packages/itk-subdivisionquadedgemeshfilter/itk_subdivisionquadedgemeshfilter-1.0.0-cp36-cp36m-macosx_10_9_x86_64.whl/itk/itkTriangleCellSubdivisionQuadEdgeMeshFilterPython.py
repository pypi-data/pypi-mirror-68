# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkTriangleCellSubdivisionQuadEdgeMeshFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkTriangleCellSubdivisionQuadEdgeMeshFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkTriangleCellSubdivisionQuadEdgeMeshFilterPython
            return _itkTriangleCellSubdivisionQuadEdgeMeshFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkTriangleCellSubdivisionQuadEdgeMeshFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkTriangleCellSubdivisionQuadEdgeMeshFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkTriangleCellSubdivisionQuadEdgeMeshFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import pyBasePython
import itkSubdivisionQuadEdgeMeshFilterPython
import itkQuadEdgeMeshToQuadEdgeMeshFilterPython
import itkQuadEdgeMeshBasePython
import itkVectorPython
import itkFixedArrayPython
import vnl_vector_refPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import itkQuadEdgeMeshLineCellPython
import itkQuadEdgeCellTraitsInfoPython
import itkQuadEdgeMeshPointPython
import itkGeometricalQuadEdgePython
import itkQuadEdgePython
import itkPointPython
import itkArrayPython
import itkMapContainerPython
import itkImagePython
import itkOffsetPython
import itkSizePython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import itkCovariantVectorPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkImageRegionPython
import itkIndexPython
import itkRGBPixelPython

def itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3_New():
  return itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3.New()


def itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2_New():
  return itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2.New()

class itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2(itkSubdivisionQuadEdgeMeshFilterPython.itkSubdivisionQuadEdgeMeshFilterQEMD2):
    """Proxy of C++ itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetCellsToBeSubdivided(self) -> "std::list< unsigned long,std::allocator< unsigned long > > const &":
        """GetCellsToBeSubdivided(itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2 self) -> listUL"""
        return _itkTriangleCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2_GetCellsToBeSubdivided(self)


    def SetCellsToBeSubdivided(self, cellIdList: 'listUL') -> "void":
        """SetCellsToBeSubdivided(itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2 self, listUL cellIdList)"""
        return _itkTriangleCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2_SetCellsToBeSubdivided(self, cellIdList)


    def AddSubdividedCellId(self, cellId: 'unsigned long') -> "void":
        """AddSubdividedCellId(itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2 self, unsigned long cellId)"""
        return _itkTriangleCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2_AddSubdividedCellId(self, cellId)

    __swig_destroy__ = _itkTriangleCellSubdivisionQuadEdgeMeshFilterPython.delete_itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2

    def cast(obj: 'itkLightObject') -> "itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2 *":
        """cast(itkLightObject obj) -> itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2"""
        return _itkTriangleCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2

        Create a new object of the class itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2.GetCellsToBeSubdivided = new_instancemethod(_itkTriangleCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2_GetCellsToBeSubdivided, None, itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2)
itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2.SetCellsToBeSubdivided = new_instancemethod(_itkTriangleCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2_SetCellsToBeSubdivided, None, itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2)
itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2.AddSubdividedCellId = new_instancemethod(_itkTriangleCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2_AddSubdividedCellId, None, itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2)
itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2_swigregister = _itkTriangleCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2_swigregister
itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2_swigregister(itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2)

def itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2_cast(obj: 'itkLightObject') -> "itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2 *":
    """itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2_cast(itkLightObject obj) -> itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2"""
    return _itkTriangleCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2_cast(obj)

class itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3(itkSubdivisionQuadEdgeMeshFilterPython.itkSubdivisionQuadEdgeMeshFilterQEMD3):
    """Proxy of C++ itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetCellsToBeSubdivided(self) -> "std::list< unsigned long,std::allocator< unsigned long > > const &":
        """GetCellsToBeSubdivided(itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3 self) -> listUL"""
        return _itkTriangleCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3_GetCellsToBeSubdivided(self)


    def SetCellsToBeSubdivided(self, cellIdList: 'listUL') -> "void":
        """SetCellsToBeSubdivided(itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3 self, listUL cellIdList)"""
        return _itkTriangleCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3_SetCellsToBeSubdivided(self, cellIdList)


    def AddSubdividedCellId(self, cellId: 'unsigned long') -> "void":
        """AddSubdividedCellId(itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3 self, unsigned long cellId)"""
        return _itkTriangleCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3_AddSubdividedCellId(self, cellId)

    __swig_destroy__ = _itkTriangleCellSubdivisionQuadEdgeMeshFilterPython.delete_itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3

    def cast(obj: 'itkLightObject') -> "itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3 *":
        """cast(itkLightObject obj) -> itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3"""
        return _itkTriangleCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3

        Create a new object of the class itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3.GetCellsToBeSubdivided = new_instancemethod(_itkTriangleCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3_GetCellsToBeSubdivided, None, itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3)
itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3.SetCellsToBeSubdivided = new_instancemethod(_itkTriangleCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3_SetCellsToBeSubdivided, None, itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3)
itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3.AddSubdividedCellId = new_instancemethod(_itkTriangleCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3_AddSubdividedCellId, None, itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3)
itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3_swigregister = _itkTriangleCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3_swigregister
itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3_swigregister(itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3)

def itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3_cast(obj: 'itkLightObject') -> "itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3 *":
    """itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3_cast(itkLightObject obj) -> itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3"""
    return _itkTriangleCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def triangle_cell_subdivision_quad_edge_mesh_filter(*args, **kwargs):
    """Procedural interface for TriangleCellSubdivisionQuadEdgeMeshFilter"""
    import itk
    instance = itk.TriangleCellSubdivisionQuadEdgeMeshFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def triangle_cell_subdivision_quad_edge_mesh_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.TriangleCellSubdivisionQuadEdgeMeshFilter, itkTemplate.itkTemplate):
        filter_object = itk.TriangleCellSubdivisionQuadEdgeMeshFilter.values()[0]
    else:
        filter_object = itk.TriangleCellSubdivisionQuadEdgeMeshFilter

    triangle_cell_subdivision_quad_edge_mesh_filter.__doc__ = filter_object.__doc__
    triangle_cell_subdivision_quad_edge_mesh_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    triangle_cell_subdivision_quad_edge_mesh_filter.__doc__ += "Available Keyword Arguments:\n"
    triangle_cell_subdivision_quad_edge_mesh_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



