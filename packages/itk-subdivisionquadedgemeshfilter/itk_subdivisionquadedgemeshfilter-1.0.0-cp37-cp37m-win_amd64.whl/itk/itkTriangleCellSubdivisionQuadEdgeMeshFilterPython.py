# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkTriangleCellSubdivisionQuadEdgeMeshFilterPython
else:
    import _itkTriangleCellSubdivisionQuadEdgeMeshFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkTriangleCellSubdivisionQuadEdgeMeshFilterPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkTriangleCellSubdivisionQuadEdgeMeshFilterPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import ITKCommonBasePython
import pyBasePython
import itkSubdivisionQuadEdgeMeshFilterPython
import itkQuadEdgeMeshToQuadEdgeMeshFilterPython
import itkQuadEdgeMeshBasePython
import itkImagePython
import itkCovariantVectorPython
import itkVectorPython
import vnl_vectorPython
import vnl_matrixPython
import stdcomplexPython
import vnl_vector_refPython
import itkFixedArrayPython
import itkRGBPixelPython
import itkIndexPython
import itkSizePython
import itkOffsetPython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkPointPython
import itkImageRegionPython
import itkRGBAPixelPython
import itkQuadEdgeMeshLineCellPython
import itkArrayPython
import itkQuadEdgeCellTraitsInfoPython
import itkQuadEdgeMeshPointPython
import itkGeometricalQuadEdgePython
import itkQuadEdgePython
import itkMapContainerPython

def itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3_New():
  return itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3.New()


def itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2_New():
  return itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2.New()

class itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2(itkSubdivisionQuadEdgeMeshFilterPython.itkSubdivisionQuadEdgeMeshFilterQEMD2):
    r"""Proxy of C++ itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetCellsToBeSubdivided = _swig_new_instance_method(_itkTriangleCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2_GetCellsToBeSubdivided)
    SetCellsToBeSubdivided = _swig_new_instance_method(_itkTriangleCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2_SetCellsToBeSubdivided)
    AddSubdividedCellId = _swig_new_instance_method(_itkTriangleCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2_AddSubdividedCellId)
    __swig_destroy__ = _itkTriangleCellSubdivisionQuadEdgeMeshFilterPython.delete_itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2
    cast = _swig_new_static_method(_itkTriangleCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2_cast)

    def New(*args, **kargs):
        """New() -> itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2

        Create a new object of the class itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2 in _itkTriangleCellSubdivisionQuadEdgeMeshFilterPython:
_itkTriangleCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2_swigregister(itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2)
itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2_cast = _itkTriangleCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2_cast

class itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3(itkSubdivisionQuadEdgeMeshFilterPython.itkSubdivisionQuadEdgeMeshFilterQEMD3):
    r"""Proxy of C++ itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    GetCellsToBeSubdivided = _swig_new_instance_method(_itkTriangleCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3_GetCellsToBeSubdivided)
    SetCellsToBeSubdivided = _swig_new_instance_method(_itkTriangleCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3_SetCellsToBeSubdivided)
    AddSubdividedCellId = _swig_new_instance_method(_itkTriangleCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3_AddSubdividedCellId)
    __swig_destroy__ = _itkTriangleCellSubdivisionQuadEdgeMeshFilterPython.delete_itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3
    cast = _swig_new_static_method(_itkTriangleCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3_cast)

    def New(*args, **kargs):
        """New() -> itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3

        Create a new object of the class itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3 in _itkTriangleCellSubdivisionQuadEdgeMeshFilterPython:
_itkTriangleCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3_swigregister(itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3)
itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3_cast = _itkTriangleCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3_cast


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def triangle_cell_subdivision_quad_edge_mesh_filter(*args, **kwargs):
    """Procedural interface for TriangleCellSubdivisionQuadEdgeMeshFilter"""
    import itk
    instance = itk.TriangleCellSubdivisionQuadEdgeMeshFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def triangle_cell_subdivision_quad_edge_mesh_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.TriangleCellSubdivisionQuadEdgeMeshFilter, itkTemplate.itkTemplate):
        filter_object = itk.TriangleCellSubdivisionQuadEdgeMeshFilter.values()[0]
    else:
        filter_object = itk.TriangleCellSubdivisionQuadEdgeMeshFilter

    triangle_cell_subdivision_quad_edge_mesh_filter.__doc__ = filter_object.__doc__
    triangle_cell_subdivision_quad_edge_mesh_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    triangle_cell_subdivision_quad_edge_mesh_filter.__doc__ += "Available Keyword Arguments:\n"
    triangle_cell_subdivision_quad_edge_mesh_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



