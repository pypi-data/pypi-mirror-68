# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython
            return _itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkGeometricalQuadEdgePython
import itkQuadEdgePython
import pyBasePython
import itkTriangleCellSubdivisionQuadEdgeMeshFilterPython
import itkQuadEdgeMeshBasePython
import itkMapContainerPython
import itkPointPython
import itkFixedArrayPython
import vnl_vectorPython
import stdcomplexPython
import vnl_matrixPython
import vnl_vector_refPython
import itkVectorPython
import ITKCommonBasePython
import itkQuadEdgeMeshPointPython
import itkQuadEdgeMeshLineCellPython
import itkQuadEdgeCellTraitsInfoPython
import itkArrayPython
import itkImagePython
import itkSymmetricSecondRankTensorPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkCovariantVectorPython
import itkOffsetPython
import itkSizePython
import itkImageRegionPython
import itkIndexPython
import itkRGBPixelPython
import itkRGBAPixelPython
import itkSubdivisionQuadEdgeMeshFilterPython
import itkQuadEdgeMeshToQuadEdgeMeshFilterPython

def itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3_New():
  return itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3.New()


def itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2_New():
  return itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2.New()

class itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2(itkTriangleCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD2):
    """Proxy of C++ itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetEdgesToBeSubdivided(self) -> "std::list< itkGeometricalQuadEdgeULULBBF *,std::allocator< itkGeometricalQuadEdgeULULBBF * > > const &":
        """GetEdgesToBeSubdivided(itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2 self) -> std::list< itkGeometricalQuadEdgeULULBBF *,std::allocator< itkGeometricalQuadEdgeULULBBF * > > const &"""
        return _itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2_GetEdgesToBeSubdivided(self)


    def SetCellsToBeSubdivided(self, EdgesList: 'std::list< itkGeometricalQuadEdgeULULBBF *,std::allocator< itkGeometricalQuadEdgeULULBBF * > > const &') -> "void":
        """SetCellsToBeSubdivided(itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2 self, std::list< itkGeometricalQuadEdgeULULBBF *,std::allocator< itkGeometricalQuadEdgeULULBBF * > > const & EdgesList)"""
        return _itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2_SetCellsToBeSubdivided(self, EdgesList)


    def AddSubdividedEdge(self, edge: 'itkGeometricalQuadEdgeULULBBF') -> "void":
        """AddSubdividedEdge(itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2 self, itkGeometricalQuadEdgeULULBBF edge)"""
        return _itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2_AddSubdividedEdge(self, edge)

    __swig_destroy__ = _itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython.delete_itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2

    def cast(obj: 'itkLightObject') -> "itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2 *":
        """cast(itkLightObject obj) -> itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2"""
        return _itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2

        Create a new object of the class itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2.GetEdgesToBeSubdivided = new_instancemethod(_itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2_GetEdgesToBeSubdivided, None, itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2)
itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2.SetCellsToBeSubdivided = new_instancemethod(_itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2_SetCellsToBeSubdivided, None, itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2)
itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2.AddSubdividedEdge = new_instancemethod(_itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2_AddSubdividedEdge, None, itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2)
itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2_swigregister = _itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2_swigregister
itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2_swigregister(itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2)

def itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2_cast(obj: 'itkLightObject') -> "itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2 *":
    """itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2_cast(itkLightObject obj) -> itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2"""
    return _itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD2_cast(obj)

class itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3(itkTriangleCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleCellSubdivisionQuadEdgeMeshFilterQEMD3):
    """Proxy of C++ itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3 class."""

    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def GetEdgesToBeSubdivided(self) -> "std::list< itkGeometricalQuadEdgeULULBBF *,std::allocator< itkGeometricalQuadEdgeULULBBF * > > const &":
        """GetEdgesToBeSubdivided(itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3 self) -> std::list< itkGeometricalQuadEdgeULULBBF *,std::allocator< itkGeometricalQuadEdgeULULBBF * > > const &"""
        return _itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3_GetEdgesToBeSubdivided(self)


    def SetCellsToBeSubdivided(self, EdgesList: 'std::list< itkGeometricalQuadEdgeULULBBF *,std::allocator< itkGeometricalQuadEdgeULULBBF * > > const &') -> "void":
        """SetCellsToBeSubdivided(itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3 self, std::list< itkGeometricalQuadEdgeULULBBF *,std::allocator< itkGeometricalQuadEdgeULULBBF * > > const & EdgesList)"""
        return _itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3_SetCellsToBeSubdivided(self, EdgesList)


    def AddSubdividedEdge(self, edge: 'itkGeometricalQuadEdgeULULBBF') -> "void":
        """AddSubdividedEdge(itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3 self, itkGeometricalQuadEdgeULULBBF edge)"""
        return _itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3_AddSubdividedEdge(self, edge)

    __swig_destroy__ = _itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython.delete_itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3

    def cast(obj: 'itkLightObject') -> "itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3 *":
        """cast(itkLightObject obj) -> itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3"""
        return _itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3_cast(obj)

    cast = staticmethod(cast)

    def New(*args, **kargs):
        """New() -> itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3

        Create a new object of the class itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3.New( reader, Threshold=10 )

        is (most of the time) equivalent to:

          obj = itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3.GetEdgesToBeSubdivided = new_instancemethod(_itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3_GetEdgesToBeSubdivided, None, itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3)
itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3.SetCellsToBeSubdivided = new_instancemethod(_itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3_SetCellsToBeSubdivided, None, itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3)
itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3.AddSubdividedEdge = new_instancemethod(_itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3_AddSubdividedEdge, None, itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3)
itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3_swigregister = _itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3_swigregister
itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3_swigregister(itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3)

def itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3_cast(obj: 'itkLightObject') -> "itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3 *":
    """itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3_cast(itkLightObject obj) -> itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3"""
    return _itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterPython.itkTriangleEdgeCellSubdivisionQuadEdgeMeshFilterQEMD3_cast(obj)


import itkHelpers
@itkHelpers.accept_numpy_array_like_xarray
def triangle_edge_cell_subdivision_quad_edge_mesh_filter(*args, **kwargs):
    """Procedural interface for TriangleEdgeCellSubdivisionQuadEdgeMeshFilter"""
    import itk
    instance = itk.TriangleEdgeCellSubdivisionQuadEdgeMeshFilter.New(*args, **kwargs)
    return instance.__internal_call__()

def triangle_edge_cell_subdivision_quad_edge_mesh_filter_init_docstring():
    import itk
    import itkTemplate
    import itkHelpers
    if isinstance(itk.TriangleEdgeCellSubdivisionQuadEdgeMeshFilter, itkTemplate.itkTemplate):
        filter_object = itk.TriangleEdgeCellSubdivisionQuadEdgeMeshFilter.values()[0]
    else:
        filter_object = itk.TriangleEdgeCellSubdivisionQuadEdgeMeshFilter

    triangle_edge_cell_subdivision_quad_edge_mesh_filter.__doc__ = filter_object.__doc__
    triangle_edge_cell_subdivision_quad_edge_mesh_filter.__doc__ += "\n Args are Input(s) to the filter.\n"
    triangle_edge_cell_subdivision_quad_edge_mesh_filter.__doc__ += "Available Keyword Arguments:\n"
    triangle_edge_cell_subdivision_quad_edge_mesh_filter.__doc__ += "".join([
        "  " + itkHelpers.camel_to_snake_case(item[3:]) + "\n"
        for item in dir(filter_object)
        if item[:3] == "Set"])



