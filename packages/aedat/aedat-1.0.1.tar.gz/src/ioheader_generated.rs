// automatically generated by the FlatBuffers compiler, do not modify

use std::cmp::Ordering;
use std::mem;

extern crate flatbuffers;
use self::flatbuffers::EndianScalar;

#[allow(non_camel_case_types)]
#[repr(i32)]
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]
pub enum Compression {
    None = 0,
    Lz4 = 1,
    Lz4High = 2,
    Zstd = 3,
    ZstdHigh = 4,
}

const ENUM_MIN_COMPRESSION: i32 = 0;
const ENUM_MAX_COMPRESSION: i32 = 4;

impl<'a> flatbuffers::Follow<'a> for Compression {
    type Inner = Self;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        flatbuffers::read_scalar_at::<Self>(buf, loc)
    }
}

impl flatbuffers::EndianScalar for Compression {
    #[inline]
    fn to_little_endian(self) -> Self {
        let n = i32::to_le(self as i32);
        let p = &n as *const i32 as *const Compression;
        unsafe { *p }
    }
    #[inline]
    fn from_little_endian(self) -> Self {
        let n = i32::from_le(self as i32);
        let p = &n as *const i32 as *const Compression;
        unsafe { *p }
    }
}

impl flatbuffers::Push for Compression {
    type Output = Compression;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        flatbuffers::emplace_scalar::<Compression>(dst, *self);
    }
}

#[allow(non_camel_case_types)]
const ENUM_VALUES_COMPRESSION: [Compression; 5] = [
    Compression::None,
    Compression::Lz4,
    Compression::Lz4High,
    Compression::Zstd,
    Compression::ZstdHigh,
];

#[allow(non_camel_case_types)]
const ENUM_NAMES_COMPRESSION: [&'static str; 5] = ["None", "Lz4", "Lz4High", "Zstd", "ZstdHigh"];

pub fn enum_name_compression(e: Compression) -> &'static str {
    let index = e as i32;
    ENUM_NAMES_COMPRESSION[index as usize]
}

pub enum IoheaderOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct Ioheader<'a> {
    pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Ioheader<'a> {
    type Inner = Ioheader<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> Ioheader<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Ioheader { _tab: table }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args IoheaderArgs<'args>,
    ) -> flatbuffers::WIPOffset<Ioheader<'bldr>> {
        let mut builder = IoheaderBuilder::new(_fbb);
        builder.add_file_data_position(args.file_data_position);
        if let Some(x) = args.description {
            builder.add_description(x);
        }
        builder.add_compression(args.compression);
        builder.finish()
    }

    pub const VT_COMPRESSION: flatbuffers::VOffsetT = 4;
    pub const VT_FILE_DATA_POSITION: flatbuffers::VOffsetT = 6;
    pub const VT_DESCRIPTION: flatbuffers::VOffsetT = 8;

    #[inline]
    pub fn compression(&self) -> Compression {
        self._tab
            .get::<Compression>(Ioheader::VT_COMPRESSION, Some(Compression::None))
            .unwrap()
    }
    #[inline]
    pub fn file_data_position(&self) -> i64 {
        self._tab
            .get::<i64>(Ioheader::VT_FILE_DATA_POSITION, Some(-1))
            .unwrap()
    }
    #[inline]
    pub fn description(&self) -> Option<&'a str> {
        self._tab
            .get::<flatbuffers::ForwardsUOffset<&str>>(Ioheader::VT_DESCRIPTION, None)
    }
}

pub struct IoheaderArgs<'a> {
    pub compression: Compression,
    pub file_data_position: i64,
    pub description: Option<flatbuffers::WIPOffset<&'a str>>,
}
impl<'a> Default for IoheaderArgs<'a> {
    #[inline]
    fn default() -> Self {
        IoheaderArgs {
            compression: Compression::None,
            file_data_position: -1,
            description: None,
        }
    }
}
pub struct IoheaderBuilder<'a: 'b, 'b> {
    fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> IoheaderBuilder<'a, 'b> {
    #[inline]
    pub fn add_compression(&mut self, compression: Compression) {
        self.fbb_.push_slot::<Compression>(
            Ioheader::VT_COMPRESSION,
            compression,
            Compression::None,
        );
    }
    #[inline]
    pub fn add_file_data_position(&mut self, file_data_position: i64) {
        self.fbb_
            .push_slot::<i64>(Ioheader::VT_FILE_DATA_POSITION, file_data_position, -1);
    }
    #[inline]
    pub fn add_description(&mut self, description: flatbuffers::WIPOffset<&'b str>) {
        self.fbb_
            .push_slot_always::<flatbuffers::WIPOffset<_>>(Ioheader::VT_DESCRIPTION, description);
    }
    #[inline]
    pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> IoheaderBuilder<'a, 'b> {
        let start = _fbb.start_table();
        IoheaderBuilder {
            fbb_: _fbb,
            start_: start,
        }
    }
    #[inline]
    pub fn finish(self) -> flatbuffers::WIPOffset<Ioheader<'a>> {
        let o = self.fbb_.end_table(self.start_);
        flatbuffers::WIPOffset::new(o.value())
    }
}

#[inline]
pub fn get_root_as_ioheader<'a>(buf: &'a [u8]) -> Ioheader<'a> {
    flatbuffers::get_root::<Ioheader<'a>>(buf)
}

#[inline]
pub fn get_size_prefixed_root_as_ioheader<'a>(buf: &'a [u8]) -> Ioheader<'a> {
    flatbuffers::get_size_prefixed_root::<Ioheader<'a>>(buf)
}

pub const IOHEADER_IDENTIFIER: &'static str = "IOHE";

#[inline]
pub fn ioheader_buffer_has_identifier(buf: &[u8]) -> bool {
    return flatbuffers::buffer_has_identifier(buf, IOHEADER_IDENTIFIER, false);
}

#[inline]
pub fn ioheader_size_prefixed_buffer_has_identifier(buf: &[u8]) -> bool {
    return flatbuffers::buffer_has_identifier(buf, IOHEADER_IDENTIFIER, true);
}

#[inline]
pub fn finish_ioheader_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<Ioheader<'a>>,
) {
    fbb.finish(root, Some(IOHEADER_IDENTIFIER));
}

#[inline]
pub fn finish_size_prefixed_ioheader_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<Ioheader<'a>>,
) {
    fbb.finish_size_prefixed(root, Some(IOHEADER_IDENTIFIER));
}
